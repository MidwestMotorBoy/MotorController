
Controller_Sensored_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beac  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800c17c  0800c17c  0001c17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c200  0800c200  000205bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c200  0800c200  0001c200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c208  0800c208  000205bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c208  0800c208  0001c208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c20c  0800c20c  0001c20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005bc  24000000  0800c210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  240005bc  0800c7cc  000205bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000cf0  0800c7cc  00020cf0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003af8c  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c3d  00000000  00000000  0005b576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002178  00000000  00000000  000601b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002010  00000000  00000000  00062330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003be2d  00000000  00000000  00064340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026c86  00000000  00000000  000a016d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d1d9  00000000  00000000  000c6df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00243fcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009458  00000000  00000000  00244020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240005bc 	.word	0x240005bc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c164 	.word	0x0800c164

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240005c0 	.word	0x240005c0
 800030c:	0800c164 	.word	0x0800c164

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <_Z7inv_dqzPlS_S_lll>:
 * Vd: voltage of Vd in mV
 *
 * returns:nothing
 */
void inv_dqz(int32_t *Va,int32_t *Vb,int32_t *Vc,int32_t theta,int32_t Vq,int32_t Vd )
{
 8000608:	b480      	push	{r7}
 800060a:	b08b      	sub	sp, #44	; 0x2c
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	603b      	str	r3, [r7, #0]
	int32_t si=sin_lut_table[theta];
 8000616:	4a31      	ldr	r2, [pc, #196]	; (80006dc <_Z7inv_dqzPlS_S_lll+0xd4>)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t co=sin_lut_table[(theta+90)%360];
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	335a      	adds	r3, #90	; 0x5a
 8000624:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <_Z7inv_dqzPlS_S_lll+0xd8>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	441a      	add	r2, r3
 800062c:	1211      	asrs	r1, r2, #8
 800062e:	17da      	asrs	r2, r3, #31
 8000630:	1a8a      	subs	r2, r1, r2
 8000632:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000636:	fb01 f202 	mul.w	r2, r1, r2
 800063a:	1a9a      	subs	r2, r3, r2
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <_Z7inv_dqzPlS_S_lll+0xd4>)
 800063e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000642:	623b      	str	r3, [r7, #32]
	int32_t alpha = co*Vd- si *Vq;
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000648:	fb02 f203 	mul.w	r2, r2, r3
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000650:	fb01 f303 	mul.w	r3, r1, r3
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	61fb      	str	r3, [r7, #28]
	int32_t beta = si*Vd+co*Vq;
 8000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800065c:	fb02 f203 	mul.w	r2, r2, r3
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000664:	fb01 f303 	mul.w	r3, r1, r3
 8000668:	4413      	add	r3, r2
 800066a:	61bb      	str	r3, [r7, #24]
	int32_t Vb_temp = -sqrt1_6*alpha;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <_Z7inv_dqzPlS_S_lll+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	425a      	negs	r2, r3
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	fb02 f303 	mul.w	r3, r2, r3
 8000678:	617b      	str	r3, [r7, #20]
	*Va = (sqrt2_3*alpha)/100000;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <_Z7inv_dqzPlS_S_lll+0xe0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	69fa      	ldr	r2, [r7, #28]
 8000680:	fb02 f303 	mul.w	r3, r2, r3
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <_Z7inv_dqzPlS_S_lll+0xe4>)
 8000686:	fb82 1203 	smull	r1, r2, r2, r3
 800068a:	1352      	asrs	r2, r2, #13
 800068c:	17db      	asrs	r3, r3, #31
 800068e:	1ad2      	subs	r2, r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	601a      	str	r2, [r3, #0]
	*Vc = (Vb_temp-sqrt1_2*beta)/100000;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <_Z7inv_dqzPlS_S_lll+0xe8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	69ba      	ldr	r2, [r7, #24]
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <_Z7inv_dqzPlS_S_lll+0xe4>)
 80006a4:	fb82 1203 	smull	r1, r2, r2, r3
 80006a8:	1352      	asrs	r2, r2, #13
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad2      	subs	r2, r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
	*Vb = (Vb_temp+sqrt1_2*beta)/100000;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <_Z7inv_dqzPlS_S_lll+0xe8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	69ba      	ldr	r2, [r7, #24]
 80006b8:	fb02 f203 	mul.w	r2, r2, r3
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	4413      	add	r3, r2
 80006c0:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <_Z7inv_dqzPlS_S_lll+0xe4>)
 80006c2:	fb82 1203 	smull	r1, r2, r2, r3
 80006c6:	1352      	asrs	r2, r2, #13
 80006c8:	17db      	asrs	r3, r3, #31
 80006ca:	1ad2      	subs	r2, r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	601a      	str	r2, [r3, #0]
}
 80006d0:	bf00      	nop
 80006d2:	372c      	adds	r7, #44	; 0x2c
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	24000000 	.word	0x24000000
 80006e0:	b60b60b7 	.word	0xb60b60b7
 80006e4:	240005a4 	.word	0x240005a4
 80006e8:	240005a0 	.word	0x240005a0
 80006ec:	14f8b589 	.word	0x14f8b589
 80006f0:	240005a8 	.word	0x240005a8
 80006f4:	00000000 	.word	0x00000000

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0a2      	sub	sp, #136	; 0x88
 80006fc:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006fe:	4b83      	ldr	r3, [pc, #524]	; (800090c <main+0x214>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d11b      	bne.n	800074c <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000714:	f3bf 8f4f 	dsb	sy
}
 8000718:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800071a:	f3bf 8f6f 	isb	sy
}
 800071e:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000720:	4b7a      	ldr	r3, [pc, #488]	; (800090c <main+0x214>)
 8000722:	2200      	movs	r2, #0
 8000724:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000728:	f3bf 8f4f 	dsb	sy
}
 800072c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800072e:	f3bf 8f6f 	isb	sy
}
 8000732:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000734:	4b75      	ldr	r3, [pc, #468]	; (800090c <main+0x214>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	4a74      	ldr	r2, [pc, #464]	; (800090c <main+0x214>)
 800073a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000740:	f3bf 8f4f 	dsb	sy
}
 8000744:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000746:	f3bf 8f6f 	isb	sy
}
 800074a:	e000      	b.n	800074e <main+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800074c:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f002 f8c5 	bl	80028dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 fa53 	bl	8000bfc <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000756:	f000 fadb 	bl	8000d10 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f001 f941 	bl	80019e0 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800075e:	f000 fb0d 	bl	8000d7c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000762:	f000 fb93 	bl	8000e8c <_ZL12MX_ADC2_Initv>
  MX_ADC3_Init();
 8000766:	f000 fc01 	bl	8000f6c <_ZL12MX_ADC3_Initv>
  MX_CORDIC_Init();
 800076a:	f000 fc7f 	bl	800106c <_ZL14MX_CORDIC_Initv>
  MX_DFSDM1_Init();
 800076e:	f000 fc95 	bl	800109c <_ZL14MX_DFSDM1_Initv>
  MX_FDCAN1_Init();
 8000772:	f000 fdaf 	bl	80012d4 <_ZL14MX_FDCAN1_Initv>
  MX_FMAC_Init();
 8000776:	f000 fe17 	bl	80013a8 <_ZL12MX_FMAC_Initv>
  MX_SPI2_Init();
 800077a:	f000 fe7b 	bl	8001474 <_ZL12MX_SPI2_Initv>
  MX_TIM1_Init();
 800077e:	f000 fed7 	bl	8001530 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8000782:	f001 f8c9 	bl	8001918 <_ZL19MX_USART2_UART_Initv>
  MX_I2C3_Init();
 8000786:	f000 fe27 	bl	80013d8 <_ZL12MX_I2C3_Initv>
  MX_USART1_UART_Init();
 800078a:	f001 f865 	bl	8001858 <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 800078e:	f000 ffa7 	bl	80016e0 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000792:	f001 f803 	bl	800179c <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
//  	HAL_ADC_MspInit(&hadc3);
  	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000796:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800079a:	2100      	movs	r1, #0
 800079c:	485c      	ldr	r0, [pc, #368]	; (8000910 <main+0x218>)
 800079e:	f003 fded 	bl	800437c <HAL_ADCEx_Calibration_Start>
	HAL_StatusTypeDef adcstart2_ret = HAL_ADC_Start(&hadc2);
 80007a2:	485c      	ldr	r0, [pc, #368]	; (8000914 <main+0x21c>)
 80007a4:	f002 fdb6 	bl	8003314 <HAL_ADC_Start>
 80007a8:	4603      	mov	r3, r0
 80007aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	HAL_StatusTypeDef adcstart3_ret = HAL_ADC_Start(&hadc3);
 80007ae:	4858      	ldr	r0, [pc, #352]	; (8000910 <main+0x218>)
 80007b0:	f002 fdb0 	bl	8003314 <HAL_ADC_Start>
 80007b4:	4603      	mov	r3, r0
 80007b6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	HAL_TIM_Base_Start_IT(&htim3);
 80007ba:	4857      	ldr	r0, [pc, #348]	; (8000918 <main+0x220>)
 80007bc:	f008 ff62 	bl	8009684 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 80007c0:	4856      	ldr	r0, [pc, #344]	; (800091c <main+0x224>)
 80007c2:	f008 ff5f 	bl	8009684 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007c6:	2100      	movs	r1, #0
 80007c8:	4854      	ldr	r0, [pc, #336]	; (800091c <main+0x224>)
 80007ca:	f009 f839 	bl	8009840 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80007ce:	2100      	movs	r1, #0
 80007d0:	4852      	ldr	r0, [pc, #328]	; (800091c <main+0x224>)
 80007d2:	f00a f8d5 	bl	800a980 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007d6:	2104      	movs	r1, #4
 80007d8:	4850      	ldr	r0, [pc, #320]	; (800091c <main+0x224>)
 80007da:	f009 f831 	bl	8009840 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80007de:	2104      	movs	r1, #4
 80007e0:	484e      	ldr	r0, [pc, #312]	; (800091c <main+0x224>)
 80007e2:	f00a f8cd 	bl	800a980 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007e6:	2108      	movs	r1, #8
 80007e8:	484c      	ldr	r0, [pc, #304]	; (800091c <main+0x224>)
 80007ea:	f009 f829 	bl	8009840 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80007ee:	2108      	movs	r1, #8
 80007f0:	484a      	ldr	r0, [pc, #296]	; (800091c <main+0x224>)
 80007f2:	f00a f8c5 	bl	800a980 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80007f6:	210c      	movs	r1, #12
 80007f8:	4848      	ldr	r0, [pc, #288]	; (800091c <main+0x224>)
 80007fa:	f009 f821 	bl	8009840 <HAL_TIM_PWM_Start>
	TIM1->CCER = 0b0000010101010101;
 80007fe:	4b48      	ldr	r3, [pc, #288]	; (8000920 <main+0x228>)
 8000800:	f240 5255 	movw	r2, #1365	; 0x555
 8000804:	621a      	str	r2, [r3, #32]
	TIM1->CCR1 = 0;
 8000806:	4b46      	ldr	r3, [pc, #280]	; (8000920 <main+0x228>)
 8000808:	2200      	movs	r2, #0
 800080a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800080c:	4b44      	ldr	r3, [pc, #272]	; (8000920 <main+0x228>)
 800080e:	2200      	movs	r2, #0
 8000810:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000812:	4b43      	ldr	r3, [pc, #268]	; (8000920 <main+0x228>)
 8000814:	2200      	movs	r2, #0
 8000816:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 4998;
 8000818:	4b41      	ldr	r3, [pc, #260]	; (8000920 <main+0x228>)
 800081a:	f241 3286 	movw	r2, #4998	; 0x1386
 800081e:	641a      	str	r2, [r3, #64]	; 0x40
	uint32_t channel1 = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t channel5 = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
	uint32_t channel6 = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
	uint8_t request_pos[2] = {0xff};
 800082c:	23ff      	movs	r3, #255	; 0xff
 800082e:	82bb      	strh	r3, [r7, #20]
	float data2angle = 360.0 / 4096;
 8000830:	4b3c      	ldr	r3, [pc, #240]	; (8000924 <main+0x22c>)
 8000832:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint8_t position[2]={0};
 8000834:	2300      	movs	r3, #0
 8000836:	823b      	strh	r3, [r7, #16]
	int32_t mech_angle=0;
 8000838:	2300      	movs	r3, #0
 800083a:	65bb      	str	r3, [r7, #88]	; 0x58
	if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0) != HAL_OK){
 800083c:	483a      	ldr	r0, [pc, #232]	; (8000928 <main+0x230>)
 800083e:	f004 f9df 	bl	8004c00 <HAL_DFSDM_FilterRegularStart>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <main+0x15e>
		  Error_Handler();
 8000852:	f001 f956 	bl	8001b02 <Error_Handler>
	  }

	if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1) != HAL_OK){
 8000856:	4835      	ldr	r0, [pc, #212]	; (800092c <main+0x234>)
 8000858:	f004 f9d2 	bl	8004c00 <HAL_DFSDM_FilterRegularStart>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	bf14      	ite	ne
 8000862:	2301      	movne	r3, #1
 8000864:	2300      	moveq	r3, #0
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <main+0x178>
		  Error_Handler();
 800086c:	f001 f949 	bl	8001b02 <Error_Handler>
	  }
	uint32_t adc_buff1 = 0, adc_buff3 = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	657b      	str	r3, [r7, #84]	; 0x54
 8000874:	2300      	movs	r3, #0
 8000876:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t current_A = 0, current_C= 0;
 8000878:	2300      	movs	r3, #0
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800087c:	2300      	movs	r3, #0
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t dc_bus = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t speed_loop_counter= 0;
 8000884:	2300      	movs	r3, #0
 8000886:	67fb      	str	r3, [r7, #124]	; 0x7c
	int32_t speed_accumulator = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	67bb      	str	r3, [r7, #120]	; 0x78
	int32_t last_angle=0;
 800088c:	2300      	movs	r3, #0
 800088e:	677b      	str	r3, [r7, #116]	; 0x74
	int32_t Va=0,Vb=0,Vc=0,Vq=0,Vd=0;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	2300      	movs	r3, #0
 800089e:	673b      	str	r3, [r7, #112]	; 0x70
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t pwm_A=0,pwm_B=0,pwm_C=0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
	adc_buff1 = HAL_ADC_GetValue(&hadc1);
 80008b0:	481f      	ldr	r0, [pc, #124]	; (8000930 <main+0x238>)
 80008b2:	f002 fdf9 	bl	80034a8 <HAL_ADC_GetValue>
 80008b6:	6578      	str	r0, [r7, #84]	; 0x54
	adc_buff3 = HAL_ADC_GetValue(&hadc3);
 80008b8:	4815      	ldr	r0, [pc, #84]	; (8000910 <main+0x218>)
 80008ba:	f002 fdf5 	bl	80034a8 <HAL_ADC_GetValue>
 80008be:	6538      	str	r0, [r7, #80]	; 0x50
	//get intial angle
	HAL_SPI_TransmitReceive(&hspi2, request_pos, position, 1, 100);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0114 	add.w	r1, r7, #20
 80008c8:	2364      	movs	r3, #100	; 0x64
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	4819      	ldr	r0, [pc, #100]	; (8000934 <main+0x23c>)
 80008d0:	f008 faac 	bl	8008e2c <HAL_SPI_TransmitReceive>
	int32_t position_raw = (((uint16_t)position[1])<<8)+position[0];
 80008d4:	7c7b      	ldrb	r3, [r7, #17]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	7c3a      	ldrb	r2, [r7, #16]
 80008da:	4413      	add	r3, r2
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t position_temp = position_raw >> 4;
 80008de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e0:	111b      	asrs	r3, r3, #4
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t speed=0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	last_angle = (879 * position_temp)/10000;
 80008e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ea:	f240 326f 	movw	r2, #879	; 0x36f
 80008ee:	fb02 f303 	mul.w	r3, r2, r3
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <main+0x240>)
 80008f4:	fb82 1203 	smull	r1, r2, r2, r3
 80008f8:	1312      	asrs	r2, r2, #12
 80008fa:	17db      	asrs	r3, r3, #31
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	677b      	str	r3, [r7, #116]	; 0x74
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		while(pwm_flag==0){
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <main+0x244>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d11b      	bne.n	8000940 <main+0x248>
 8000908:	e7fa      	b.n	8000900 <main+0x208>
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	240006b8 	.word	0x240006b8
 8000914:	24000648 	.word	0x24000648
 8000918:	24000a98 	.word	0x24000a98
 800091c:	24000a4c 	.word	0x24000a4c
 8000920:	40010000 	.word	0x40010000
 8000924:	3db40000 	.word	0x3db40000
 8000928:	24000750 	.word	0x24000750
 800092c:	240007a4 	.word	0x240007a4
 8000930:	240005d8 	.word	0x240005d8
 8000934:	240009c4 	.word	0x240009c4
 8000938:	68db8bad 	.word	0x68db8bad
 800093c:	24000c50 	.word	0x24000c50

		}
		//Loop Chores
		speed_loop_counter++;
 8000940:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000942:	3301      	adds	r3, #1
 8000944:	67fb      	str	r3, [r7, #124]	; 0x7c
		pwm_flag=0;
 8000946:	4b9a      	ldr	r3, [pc, #616]	; (8000bb0 <main+0x4b8>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
		//Get angle
		HAL_SPI_TransmitReceive(&hspi2, request_pos, position, 1, 100);
 800094c:	f107 0210 	add.w	r2, r7, #16
 8000950:	f107 0114 	add.w	r1, r7, #20
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	4896      	ldr	r0, [pc, #600]	; (8000bb4 <main+0x4bc>)
 800095c:	f008 fa66 	bl	8008e2c <HAL_SPI_TransmitReceive>
		int32_t position_raw = (((uint16_t)position[1])<<8)+position[0];
 8000960:	7c7b      	ldrb	r3, [r7, #17]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	7c3a      	ldrb	r2, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t position_temp = position_raw >> 4;
 800096a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096c:	111b      	asrs	r3, r3, #4
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
		mech_angle = (879 * position_temp)/10000;
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	f240 326f 	movw	r2, #879	; 0x36f
 8000976:	fb02 f303 	mul.w	r3, r2, r3
 800097a:	4a8f      	ldr	r2, [pc, #572]	; (8000bb8 <main+0x4c0>)
 800097c:	fb82 1203 	smull	r1, r2, r2, r3
 8000980:	1312      	asrs	r2, r2, #12
 8000982:	17db      	asrs	r3, r3, #31
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t electrical_angle = ((int32_t)mech_angle*POLE_PAIRS+debug_offset)%360;
 8000988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800098a:	4613      	mov	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	441a      	add	r2, r3
 8000990:	4b8a      	ldr	r3, [pc, #552]	; (8000bbc <main+0x4c4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4413      	add	r3, r2
 8000996:	4a8a      	ldr	r2, [pc, #552]	; (8000bc0 <main+0x4c8>)
 8000998:	fb82 1203 	smull	r1, r2, r2, r3
 800099c:	441a      	add	r2, r3
 800099e:	1211      	asrs	r1, r2, #8
 80009a0:	17da      	asrs	r2, r3, #31
 80009a2:	1a8a      	subs	r2, r1, r2
 80009a4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80009a8:	fb01 f202 	mul.w	r2, r1, r2
 80009ac:	1a9b      	subs	r3, r3, r2
 80009ae:	623b      	str	r3, [r7, #32]
		//Get Currents
		current_A = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &channel5)*312500/262144;
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4883      	ldr	r0, [pc, #524]	; (8000bc4 <main+0x4cc>)
 80009b8:	f004 f93d 	bl	8004c36 <HAL_DFSDM_FilterGetRegularValue>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a82      	ldr	r2, [pc, #520]	; (8000bc8 <main+0x4d0>)
 80009c0:	fb02 f303 	mul.w	r3, r2, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	da02      	bge.n	80009ce <main+0x2d6>
 80009c8:	4a80      	ldr	r2, [pc, #512]	; (8000bcc <main+0x4d4>)
 80009ca:	441a      	add	r2, r3
 80009cc:	4613      	mov	r3, r2
 80009ce:	149b      	asrs	r3, r3, #18
 80009d0:	64fb      	str	r3, [r7, #76]	; 0x4c
		current_C = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1, &channel6)*312500/262144;
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	4619      	mov	r1, r3
 80009d8:	487d      	ldr	r0, [pc, #500]	; (8000bd0 <main+0x4d8>)
 80009da:	f004 f92c 	bl	8004c36 <HAL_DFSDM_FilterGetRegularValue>
 80009de:	4603      	mov	r3, r0
 80009e0:	4a79      	ldr	r2, [pc, #484]	; (8000bc8 <main+0x4d0>)
 80009e2:	fb02 f303 	mul.w	r3, r2, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	da02      	bge.n	80009f0 <main+0x2f8>
 80009ea:	4a78      	ldr	r2, [pc, #480]	; (8000bcc <main+0x4d4>)
 80009ec:	441a      	add	r2, r3
 80009ee:	4613      	mov	r3, r2
 80009f0:	149b      	asrs	r3, r3, #18
 80009f2:	64bb      	str	r3, [r7, #72]	; 0x48
		//Measure DC Bus
		adc_buff3 = HAL_ADC_GetValue(&hadc3);
 80009f4:	4877      	ldr	r0, [pc, #476]	; (8000bd4 <main+0x4dc>)
 80009f6:	f002 fd57 	bl	80034a8 <HAL_ADC_GetValue>
 80009fa:	6538      	str	r0, [r7, #80]	; 0x50
		dc_bus = (374*adc_buff3)/10;
 80009fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009fe:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	4a74      	ldr	r2, [pc, #464]	; (8000bd8 <main+0x4e0>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	08db      	lsrs	r3, r3, #3
 8000a0e:	647b      	str	r3, [r7, #68]	; 0x44
		//Update speed accumulator
		int32_t diff_angle = mech_angle-last_angle;
 8000a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	66bb      	str	r3, [r7, #104]	; 0x68
		if(diff_angle<-180){
 8000a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a1a:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8000a1e:	da04      	bge.n	8000a2a <main+0x332>
			diff_angle=360+diff_angle;
 8000a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a28:	e006      	b.n	8000a38 <main+0x340>
		}else if(diff_angle>180){
 8000a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a2c:	2bb4      	cmp	r3, #180	; 0xb4
 8000a2e:	dd03      	ble.n	8000a38 <main+0x340>
			diff_angle=diff_angle-360;
 8000a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a32:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000a36:	66bb      	str	r3, [r7, #104]	; 0x68
		}
		speed_accumulator+=diff_angle;
 8000a38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a3c:	4413      	add	r3, r2
 8000a3e:	67bb      	str	r3, [r7, #120]	; 0x78
		last_angle=mech_angle;
 8000a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a42:	677b      	str	r3, [r7, #116]	; 0x74
		if(speed_loop_counter>=SPEED_SAMPLES){
 8000a44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a4a:	d30f      	bcc.n	8000a6c <main+0x374>
			speed=(speed_accumulator*6666)/1000;
 8000a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a4e:	f641 220a 	movw	r2, #6666	; 0x1a0a
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	4a61      	ldr	r2, [pc, #388]	; (8000bdc <main+0x4e4>)
 8000a58:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5c:	1192      	asrs	r2, r2, #6
 8000a5e:	17db      	asrs	r3, r3, #31
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	66fb      	str	r3, [r7, #108]	; 0x6c
			speed_accumulator=0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	67bb      	str	r3, [r7, #120]	; 0x78
			speed_loop_counter=0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
		}
		//TODO enforce Vs max by reducing vq or at least consider it... could the vs/field weakening control loop just handle this?
		//cal va,vb,vc

		inv_dqz(&Va,&Vb,&Vc,electrical_angle,Vq,Vd);
 8000a6c:	1d3a      	adds	r2, r7, #4
 8000a6e:	f107 0108 	add.w	r1, r7, #8
 8000a72:	f107 000c 	add.w	r0, r7, #12
 8000a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	f7ff fdc2 	bl	8000608 <_Z7inv_dqzPlS_S_lll>
		//Space Vector (set lowest voltage to zero)
		if(Va<=Vb && Va<=Vc){
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dc0e      	bgt.n	8000aaa <main+0x3b2>
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dc0a      	bgt.n	8000aaa <main+0x3b2>
			Vb-=Va;
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	60bb      	str	r3, [r7, #8]
			Vc-=Va;
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	607b      	str	r3, [r7, #4]
			Va=0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e01c      	b.n	8000ae4 <main+0x3ec>
		}else if(Vb<=Va && Vb<=Vc){
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dc0e      	bgt.n	8000ad0 <main+0x3d8>
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	dc0a      	bgt.n	8000ad0 <main+0x3d8>
			Va-=Vb;
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	60fb      	str	r3, [r7, #12]
			Vc-=Vb;
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	607b      	str	r3, [r7, #4]
			Vb=0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	e009      	b.n	8000ae4 <main+0x3ec>
		}else{
			Va-=Vc;
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	60fb      	str	r3, [r7, #12]
			Vb-=Vc;
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	60bb      	str	r3, [r7, #8]
			Vc=0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
		}
		//convert voltage to PWM
		pwm_A = (TIMER_PERIOD*Va)/dc_bus;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f641 22dc 	movw	r2, #6876	; 0x1adc
 8000aea:	fb02 f303 	mul.w	r3, r2, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
		pwm_B = (TIMER_PERIOD*Vb)/dc_bus;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	f641 22dc 	movw	r2, #6876	; 0x1adc
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
		pwm_C = (TIMER_PERIOD*Vc)/dc_bus;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f641 22dc 	movw	r2, #6876	; 0x1adc
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
		//Write PWM to timer shadow registers
		TIM1->CCR1 = pwm_A;
 8000b20:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <main+0x4e8>)
 8000b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b24:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = pwm_B;
 8000b26:	4a2e      	ldr	r2, [pc, #184]	; (8000be0 <main+0x4e8>)
 8000b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b2a:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = pwm_C;
 8000b2c:	4a2c      	ldr	r2, [pc, #176]	; (8000be0 <main+0x4e8>)
 8000b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b30:	63d3      	str	r3, [r2, #60]	; 0x3c

		//DEBUG (global vars for cube monitor)
		debug_angle =mech_angle;
 8000b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b34:	ee07 3a90 	vmov	s15, r3
 8000b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <main+0x4ec>)
 8000b3e:	edc3 7a00 	vstr	s15, [r3]
		debug_DC_Bus =dc_bus/1000.0;
 8000b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000b4c:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000ba8 <main+0x4b0>
 8000b50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <main+0x4f0>)
 8000b5a:	edc3 7a00 	vstr	s15, [r3]
		debug_Current_A = current_A/1000.0;
 8000b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b60:	ee07 3a90 	vmov	s15, r3
 8000b64:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b68:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000ba8 <main+0x4b0>
 8000b6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <main+0x4f4>)
 8000b76:	edc3 7a00 	vstr	s15, [r3]
		debug_Current_C =current_C/1000.0;
 8000b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b84:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000ba8 <main+0x4b0>
 8000b88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <main+0x4f8>)
 8000b92:	edc3 7a00 	vstr	s15, [r3]
		Vq=debug_vq;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <main+0x4fc>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	673b      	str	r3, [r7, #112]	; 0x70
		debug_speed=speed;
 8000b9c:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <main+0x500>)
 8000b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ba0:	6013      	str	r3, [r2, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 8000ba2:	e6ad      	b.n	8000900 <main+0x208>
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	408f4000 	.word	0x408f4000
 8000bb0:	24000c50 	.word	0x24000c50
 8000bb4:	240009c4 	.word	0x240009c4
 8000bb8:	68db8bad 	.word	0x68db8bad
 8000bbc:	24000c64 	.word	0x24000c64
 8000bc0:	b60b60b7 	.word	0xb60b60b7
 8000bc4:	24000750 	.word	0x24000750
 8000bc8:	0004c4b4 	.word	0x0004c4b4
 8000bcc:	0003ffff 	.word	0x0003ffff
 8000bd0:	240007a4 	.word	0x240007a4
 8000bd4:	240006b8 	.word	0x240006b8
 8000bd8:	cccccccd 	.word	0xcccccccd
 8000bdc:	10624dd3 	.word	0x10624dd3
 8000be0:	40010000 	.word	0x40010000
 8000be4:	24000c54 	.word	0x24000c54
 8000be8:	24000c58 	.word	0x24000c58
 8000bec:	24000c5c 	.word	0x24000c5c
 8000bf0:	24000c60 	.word	0x24000c60
 8000bf4:	24000c68 	.word	0x24000c68
 8000bf8:	24000c6c 	.word	0x24000c6c

08000bfc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b09c      	sub	sp, #112	; 0x70
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	224c      	movs	r2, #76	; 0x4c
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f00b faa2 	bl	800c154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2220      	movs	r2, #32
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f00b fa9c 	bl	800c154 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f004 ffdb 	bl	8005bd8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b38      	ldr	r3, [pc, #224]	; (8000d08 <_Z18SystemClock_Configv+0x10c>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a37      	ldr	r2, [pc, #220]	; (8000d08 <_Z18SystemClock_Configv+0x10c>)
 8000c2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c30:	6193      	str	r3, [r2, #24]
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <_Z18SystemClock_Configv+0x10c>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c3e:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <_Z18SystemClock_Configv+0x10c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c4a:	bf14      	ite	ne
 8000c4c:	2301      	movne	r3, #1
 8000c4e:	2300      	moveq	r3, #0
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d000      	beq.n	8000c58 <_Z18SystemClock_Configv+0x5c>
 8000c56:	e7f2      	b.n	8000c3e <_Z18SystemClock_Configv+0x42>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c58:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <_Z18SystemClock_Configv+0x110>)
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	f023 0303 	bic.w	r3, r3, #3
 8000c60:	4a2a      	ldr	r2, [pc, #168]	; (8000d0c <_Z18SystemClock_Configv+0x110>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000c86:	232c      	movs	r3, #44	; 0x2c
 8000c88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c96:	230c      	movs	r3, #12
 8000c98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 ffd0 	bl	8005c4c <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bf14      	ite	ne
 8000cb2:	2301      	movne	r3, #1
 8000cb4:	2300      	moveq	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8000cbc:	f000 ff21 	bl	8001b02 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc0:	233f      	movs	r3, #63	; 0x3f
 8000cc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cd0:	2340      	movs	r3, #64	; 0x40
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cdc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cde:	2340      	movs	r3, #64	; 0x40
 8000ce0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f005 fb3e 	bl	8006368 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000cfc:	f000 ff01 	bl	8001b02 <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3770      	adds	r7, #112	; 0x70
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	58024800 	.word	0x58024800
 8000d0c:	58024400 	.word	0x58024400

08000d10 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ae      	sub	sp, #184	; 0xb8
 8000d14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	22b4      	movs	r2, #180	; 0xb4
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00b fa19 	bl	800c154 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_Z24PeriphCommonClock_Configv+0x68>)
 8000d24:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d3a:	23c0      	movs	r3, #192	; 0xc0
 8000d3c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8000d42:	f640 3386 	movw	r3, #2950	; 0xb86
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 fed5 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf14      	ite	ne
 8000d60:	2301      	movne	r3, #1
 8000d62:	2300      	moveq	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <_Z24PeriphCommonClock_Configv+0x5e>
  {
    Error_Handler();
 8000d6a:	f000 feca 	bl	8001b02 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	37b8      	adds	r7, #184	; 0xb8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	80080000 	.word	0x80080000

08000d7c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	; 0x30
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2224      	movs	r2, #36	; 0x24
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00b f9dd 	bl	800c154 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000d9c:	4a38      	ldr	r2, [pc, #224]	; (8000e80 <_ZL12MX_ADC1_Initv+0x104>)
 8000d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000da2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8000da6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000da8:	4b34      	ldr	r3, [pc, #208]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db4:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000db6:	2204      	movs	r2, #4
 8000db8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dda:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dfa:	4820      	ldr	r0, [pc, #128]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000dfc:	f002 f882 	bl	8002f04 <HAL_ADC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf14      	ite	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	2300      	moveq	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <_ZL12MX_ADC1_Initv+0x98>
  {
    Error_Handler();
 8000e10:	f000 fe77 	bl	8001b02 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4817      	ldr	r0, [pc, #92]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000e20:	f003 fb10 	bl	8004444 <HAL_ADCEx_MultiModeConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2301      	movne	r3, #1
 8000e2c:	2300      	moveq	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <_ZL12MX_ADC1_Initv+0xbc>
  {
    Error_Handler();
 8000e34:	f000 fe65 	bl	8001b02 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <_ZL12MX_ADC1_Initv+0x108>)
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_ZL12MX_ADC1_Initv+0x10c>)
 8000e46:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <_ZL12MX_ADC1_Initv+0x100>)
 8000e5c:	f002 fb32 	bl	80034c4 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf14      	ite	ne
 8000e66:	2301      	movne	r3, #1
 8000e68:	2300      	moveq	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8000e70:	f000 fe47 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3730      	adds	r7, #48	; 0x30
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	240005d8 	.word	0x240005d8
 8000e80:	40022000 	.word	0x40022000
 8000e84:	0c900008 	.word	0x0c900008
 8000e88:	47ff0000 	.word	0x47ff0000

08000e8c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2224      	movs	r2, #36	; 0x24
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00b f95b 	bl	800c154 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ea0:	4a2f      	ldr	r2, [pc, #188]	; (8000f60 <_ZL12MX_ADC2_Initv+0xd4>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ea6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb8:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ec4:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000efe:	4817      	ldr	r0, [pc, #92]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000f00:	f002 f800 	bl	8002f04 <HAL_ADC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <_ZL12MX_ADC2_Initv+0x8c>
  {
    Error_Handler();
 8000f14:	f000 fdf5 	bl	8001b02 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <_ZL12MX_ADC2_Initv+0xd8>)
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1c:	2306      	movs	r3, #6
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_ZL12MX_ADC2_Initv+0xdc>)
 8000f26:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <_ZL12MX_ADC2_Initv+0xd0>)
 8000f3c:	f002 fac2 	bl	80034c4 <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf14      	ite	ne
 8000f46:	2301      	movne	r3, #1
 8000f48:	2300      	moveq	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 8000f50:	f000 fdd7 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	24000648 	.word	0x24000648
 8000f60:	40022100 	.word	0x40022100
 8000f64:	10c00010 	.word	0x10c00010
 8000f68:	47ff0000 	.word	0x47ff0000

08000f6c <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2224      	movs	r2, #36	; 0x24
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00b f8eb 	bl	800c154 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000f80:	4a38      	ldr	r2, [pc, #224]	; (8001064 <_ZL12MX_ADC3_Initv+0xf8>)
 8000f82:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000f86:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8000f8a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000f8e:	2208      	movs	r2, #8
 8000f90:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000f92:	4b33      	ldr	r3, [pc, #204]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f98:	4b31      	ldr	r3, [pc, #196]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ff4:	481a      	ldr	r0, [pc, #104]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 8000ff6:	f001 ff85 	bl	8002f04 <HAL_ADC_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <_ZL12MX_ADC3_Initv+0xa2>
  {
    Error_Handler();
 800100a:	f000 fd7a 	bl	8001b02 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <_ZL12MX_ADC3_Initv+0xfc>)
 8001010:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001012:	2306      	movs	r3, #6
 8001014:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001016:	2302      	movs	r3, #2
 8001018:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800101a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800101e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001020:	2304      	movs	r3, #4
 8001022:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <_ZL12MX_ADC3_Initv+0xf4>)
 800103e:	f002 fa41 	bl	80034c4 <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <_ZL12MX_ADC3_Initv+0xea>
  {
    Error_Handler();
 8001052:	f000 fd56 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	240006b8 	.word	0x240006b8
 8001064:	58026000 	.word	0x58026000
 8001068:	04300002 	.word	0x04300002

0800106c <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <_ZL14MX_CORDIC_Initv+0x28>)
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <_ZL14MX_CORDIC_Initv+0x2c>)
 8001074:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <_ZL14MX_CORDIC_Initv+0x28>)
 8001078:	f003 fac6 	bl	8004608 <HAL_CORDIC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 800108c:	f000 fd39 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	24000728 	.word	0x24000728
 8001098:	48024400 	.word	0x48024400

0800109c <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80010a0:	4b80      	ldr	r3, [pc, #512]	; (80012a4 <_ZL14MX_DFSDM1_Initv+0x208>)
 80010a2:	4a81      	ldr	r2, [pc, #516]	; (80012a8 <_ZL14MX_DFSDM1_Initv+0x20c>)
 80010a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80010a6:	4b7f      	ldr	r3, [pc, #508]	; (80012a4 <_ZL14MX_DFSDM1_Initv+0x208>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 80010ac:	4b7d      	ldr	r3, [pc, #500]	; (80012a4 <_ZL14MX_DFSDM1_Initv+0x208>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 80010b2:	4b7c      	ldr	r3, [pc, #496]	; (80012a4 <_ZL14MX_DFSDM1_Initv+0x208>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80010b8:	4b7a      	ldr	r3, [pc, #488]	; (80012a4 <_ZL14MX_DFSDM1_Initv+0x208>)
 80010ba:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80010be:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 80010c0:	4b78      	ldr	r3, [pc, #480]	; (80012a4 <_ZL14MX_DFSDM1_Initv+0x208>)
 80010c2:	2240      	movs	r2, #64	; 0x40
 80010c4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80010c6:	4b77      	ldr	r3, [pc, #476]	; (80012a4 <_ZL14MX_DFSDM1_Initv+0x208>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80010cc:	4875      	ldr	r0, [pc, #468]	; (80012a4 <_ZL14MX_DFSDM1_Initv+0x208>)
 80010ce:	f003 fc75 	bl	80049bc <HAL_DFSDM_FilterInit>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <_ZL14MX_DFSDM1_Initv+0x4a>
  {
    Error_Handler();
 80010e2:	f000 fd0e 	bl	8001b02 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80010e6:	4b71      	ldr	r3, [pc, #452]	; (80012ac <_ZL14MX_DFSDM1_Initv+0x210>)
 80010e8:	4a71      	ldr	r2, [pc, #452]	; (80012b0 <_ZL14MX_DFSDM1_Initv+0x214>)
 80010ea:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80010ec:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <_ZL14MX_DFSDM1_Initv+0x210>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = DISABLE;
 80010f2:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <_ZL14MX_DFSDM1_Initv+0x210>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 80010f8:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <_ZL14MX_DFSDM1_Initv+0x210>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80010fe:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <_ZL14MX_DFSDM1_Initv+0x210>)
 8001100:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001104:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 8001106:	4b69      	ldr	r3, [pc, #420]	; (80012ac <_ZL14MX_DFSDM1_Initv+0x210>)
 8001108:	2240      	movs	r2, #64	; 0x40
 800110a:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 800110c:	4b67      	ldr	r3, [pc, #412]	; (80012ac <_ZL14MX_DFSDM1_Initv+0x210>)
 800110e:	2201      	movs	r2, #1
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8001112:	4866      	ldr	r0, [pc, #408]	; (80012ac <_ZL14MX_DFSDM1_Initv+0x210>)
 8001114:	f003 fc52 	bl	80049bc <HAL_DFSDM_FilterInit>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf14      	ite	ne
 800111e:	2301      	movne	r3, #1
 8001120:	2300      	moveq	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <_ZL14MX_DFSDM1_Initv+0x90>
  {
    Error_Handler();
 8001128:	f000 fceb 	bl	8001b02 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800112c:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 800112e:	4a62      	ldr	r2, [pc, #392]	; (80012b8 <_ZL14MX_DFSDM1_Initv+0x21c>)
 8001130:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = DISABLE;
 8001132:	4b60      	ldr	r3, [pc, #384]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001134:	2200      	movs	r2, #0
 8001136:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001140:	2202      	movs	r2, #2
 8001142:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001144:	4b5b      	ldr	r3, [pc, #364]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800114a:	4b5a      	ldr	r3, [pc, #360]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001150:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001156:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800115c:	4b55      	ldr	r3, [pc, #340]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001162:	4b54      	ldr	r3, [pc, #336]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001168:	4b52      	ldr	r3, [pc, #328]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 800116a:	2201      	movs	r2, #1
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001170:	2200      	movs	r2, #0
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001174:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001176:	2200      	movs	r2, #0
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800117a:	484e      	ldr	r0, [pc, #312]	; (80012b4 <_ZL14MX_DFSDM1_Initv+0x218>)
 800117c:	f003 fb56 	bl	800482c <HAL_DFSDM_ChannelInit>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf14      	ite	ne
 8001186:	2301      	movne	r3, #1
 8001188:	2300      	moveq	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <_ZL14MX_DFSDM1_Initv+0xf8>
  {
    Error_Handler();
 8001190:	f000 fcb7 	bl	8001b02 <Error_Handler>
  }
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 8001196:	4a4a      	ldr	r2, [pc, #296]	; (80012c0 <_ZL14MX_DFSDM1_Initv+0x224>)
 8001198:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = DISABLE;
 800119a:	4b48      	ldr	r3, [pc, #288]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 800119c:	2200      	movs	r2, #0
 800119e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 2;
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011ac:	4b43      	ldr	r3, [pc, #268]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011b2:	4b42      	ldr	r3, [pc, #264]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80011b8:	4b40      	ldr	r3, [pc, #256]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80011c4:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 80011e2:	4836      	ldr	r0, [pc, #216]	; (80012bc <_ZL14MX_DFSDM1_Initv+0x220>)
 80011e4:	f003 fb22 	bl	800482c <HAL_DFSDM_ChannelInit>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <_ZL14MX_DFSDM1_Initv+0x160>
  {
    Error_Handler();
 80011f8:	f000 fc83 	bl	8001b02 <Error_Handler>
  }
  hdfsdm1_channel6.Instance = DFSDM1_Channel6;
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 80011fe:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <_ZL14MX_DFSDM1_Initv+0x22c>)
 8001200:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel6.Init.OutputClock.Activation = DISABLE;
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001204:	2200      	movs	r2, #0
 8001206:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel6.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001208:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel6.Init.OutputClock.Divider = 2;
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001210:	2202      	movs	r2, #2
 8001212:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel6.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel6.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel6.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel6.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel6.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel6.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001232:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel6.Init.Awd.Oversampling = 1;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 800123a:	2201      	movs	r2, #1
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel6.Init.Offset = 0;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001240:	2200      	movs	r2, #0
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel6.Init.RightBitShift = 0x00;
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001246:	2200      	movs	r2, #0
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel6) != HAL_OK)
 800124a:	481e      	ldr	r0, [pc, #120]	; (80012c4 <_ZL14MX_DFSDM1_Initv+0x228>)
 800124c:	f003 faee 	bl	800482c <HAL_DFSDM_ChannelInit>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <_ZL14MX_DFSDM1_Initv+0x1c8>
  {
    Error_Handler();
 8001260:	f000 fc4f 	bl	8001b02 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001264:	2201      	movs	r2, #1
 8001266:	4919      	ldr	r1, [pc, #100]	; (80012cc <_ZL14MX_DFSDM1_Initv+0x230>)
 8001268:	480e      	ldr	r0, [pc, #56]	; (80012a4 <_ZL14MX_DFSDM1_Initv+0x208>)
 800126a:	f003 fc83 	bl	8004b74 <HAL_DFSDM_FilterConfigRegChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf14      	ite	ne
 8001274:	2301      	movne	r3, #1
 8001276:	2300      	moveq	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <_ZL14MX_DFSDM1_Initv+0x1e6>
  {
    Error_Handler();
 800127e:	f000 fc40 	bl	8001b02 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_6, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001282:	2201      	movs	r2, #1
 8001284:	4912      	ldr	r1, [pc, #72]	; (80012d0 <_ZL14MX_DFSDM1_Initv+0x234>)
 8001286:	4809      	ldr	r0, [pc, #36]	; (80012ac <_ZL14MX_DFSDM1_Initv+0x210>)
 8001288:	f003 fc74 	bl	8004b74 <HAL_DFSDM_FilterConfigRegChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <_ZL14MX_DFSDM1_Initv+0x204>
  {
    Error_Handler();
 800129c:	f000 fc31 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000750 	.word	0x24000750
 80012a8:	40017900 	.word	0x40017900
 80012ac:	240007a4 	.word	0x240007a4
 80012b0:	40017980 	.word	0x40017980
 80012b4:	240007f8 	.word	0x240007f8
 80012b8:	40017820 	.word	0x40017820
 80012bc:	24000830 	.word	0x24000830
 80012c0:	400178a0 	.word	0x400178a0
 80012c4:	24000868 	.word	0x24000868
 80012c8:	400178c0 	.word	0x400178c0
 80012cc:	00050020 	.word	0x00050020
 80012d0:	00060040 	.word	0x00060040

080012d4 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80012da:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <_ZL14MX_FDCAN1_Initv+0xd0>)
 80012dc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80012fe:	2201      	movs	r2, #1
 8001300:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001304:	2201      	movs	r2, #1
 8001306:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800130a:	2202      	movs	r2, #2
 800130c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001310:	2202      	movs	r2, #2
 8001312:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001316:	2201      	movs	r2, #1
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800131c:	2201      	movs	r2, #1
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001322:	2201      	movs	r2, #1
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001328:	2201      	movs	r2, #1
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800132e:	2200      	movs	r2, #0
 8001330:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001334:	2200      	movs	r2, #0
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800133a:	2200      	movs	r2, #0
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 20;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001340:	2214      	movs	r2, #20
 8001342:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001346:	2204      	movs	r2, #4
 8001348:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800134c:	2200      	movs	r2, #0
 800134e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001352:	2204      	movs	r2, #4
 8001354:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001358:	2200      	movs	r2, #0
 800135a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800135e:	2204      	movs	r2, #4
 8001360:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001364:	2200      	movs	r2, #0
 8001366:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 20;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800136a:	2214      	movs	r2, #20
 800136c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001370:	2200      	movs	r2, #0
 8001372:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001376:	2200      	movs	r2, #0
 8001378:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800137c:	2204      	movs	r2, #4
 800137e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001382:	f003 fd19 	bl	8004db8 <HAL_FDCAN_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf14      	ite	ne
 800138c:	2301      	movne	r3, #1
 800138e:	2300      	moveq	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <_ZL14MX_FDCAN1_Initv+0xc6>
  {
    Error_Handler();
 8001396:	f000 fbb4 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	240008a0 	.word	0x240008a0
 80013a4:	4000a000 	.word	0x4000a000

080013a8 <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_ZL12MX_FMAC_Initv+0x28>)
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <_ZL12MX_FMAC_Initv+0x2c>)
 80013b0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80013b2:	4807      	ldr	r0, [pc, #28]	; (80013d0 <_ZL12MX_FMAC_Initv+0x28>)
 80013b4:	f004 f868 	bl	8005488 <HAL_FMAC_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf14      	ite	ne
 80013be:	2301      	movne	r3, #1
 80013c0:	2300      	moveq	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 80013c8:	f000 fb9b 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	24000940 	.word	0x24000940
 80013d4:	48024000 	.word	0x48024000

080013d8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <_ZL12MX_I2C3_Initv+0x94>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x60404E72;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 80013e4:	4a22      	ldr	r2, [pc, #136]	; (8001470 <_ZL12MX_I2C3_Initv+0x98>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001412:	4815      	ldr	r0, [pc, #84]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 8001414:	f004 fab8 	bl	8005988 <HAL_I2C_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	bf14      	ite	ne
 800141e:	2301      	movne	r3, #1
 8001420:	2300      	moveq	r3, #0
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8001428:	f000 fb6b 	bl	8001b02 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 8001430:	f004 fb3a 	bl	8005aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf14      	ite	ne
 800143a:	2301      	movne	r3, #1
 800143c:	2300      	moveq	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001444:	f000 fb5d 	bl	8001b02 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001448:	2100      	movs	r1, #0
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <_ZL12MX_I2C3_Initv+0x90>)
 800144c:	f004 fb77 	bl	8005b3e <HAL_I2CEx_ConfigDigitalFilter>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8001460:	f000 fb4f 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	24000978 	.word	0x24000978
 800146c:	40005c00 	.word	0x40005c00
 8001470:	60404e72 	.word	0x60404e72

08001474 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 800147a:	4a2c      	ldr	r2, [pc, #176]	; (800152c <_ZL12MX_SPI2_Initv+0xb8>)
 800147c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 8001480:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 800148e:	220f      	movs	r2, #15
 8001490:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 8001494:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001498:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 800149c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 8001504:	2200      	movs	r2, #0
 8001506:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <_ZL12MX_SPI2_Initv+0xb4>)
 800150a:	f007 fb8d 	bl	8008c28 <HAL_SPI_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <_ZL12MX_SPI2_Initv+0xae>
  {
    Error_Handler();
 800151e:	f000 faf0 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	240009c4 	.word	0x240009c4
 800152c:	40003800 	.word	0x40003800

08001530 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b096      	sub	sp, #88	; 0x58
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	222c      	movs	r2, #44	; 0x2c
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f00a fdf9 	bl	800c154 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001562:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 8001564:	4a5d      	ldr	r2, [pc, #372]	; (80016dc <_ZL12MX_TIM1_Initv+0x1ac>)
 8001566:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001568:	4b5b      	ldr	r3, [pc, #364]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800156e:	4b5a      	ldr	r3, [pc, #360]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 8001570:	2220      	movs	r2, #32
 8001572:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6875;
 8001574:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 8001576:	f641 22db 	movw	r2, #6875	; 0x1adb
 800157a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001582:	4b55      	ldr	r3, [pc, #340]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800158e:	4852      	ldr	r0, [pc, #328]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 8001590:	f008 f8fe 	bl	8009790 <HAL_TIM_PWM_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf14      	ite	ne
 800159a:	2301      	movne	r3, #1
 800159c:	2300      	moveq	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 80015a4:	f000 faad 	bl	8001b02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015b8:	4619      	mov	r1, r3
 80015ba:	4847      	ldr	r0, [pc, #284]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 80015bc:	f009 fab0 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 80015d0:	f000 fa97 	bl	8001b02 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d4:	2360      	movs	r3, #96	; 0x60
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015dc:	2300      	movs	r3, #0
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f4:	2200      	movs	r2, #0
 80015f6:	4619      	mov	r1, r3
 80015f8:	4837      	ldr	r0, [pc, #220]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 80015fa:	f008 fb5d 	bl	8009cb8 <HAL_TIM_PWM_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 800160e:	f000 fa78 	bl	8001b02 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001612:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001616:	2204      	movs	r2, #4
 8001618:	4619      	mov	r1, r3
 800161a:	482f      	ldr	r0, [pc, #188]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 800161c:	f008 fb4c 	bl	8009cb8 <HAL_TIM_PWM_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 8001630:	f000 fa67 	bl	8001b02 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001638:	2208      	movs	r2, #8
 800163a:	4619      	mov	r1, r3
 800163c:	4826      	ldr	r0, [pc, #152]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 800163e:	f008 fb3b 	bl	8009cb8 <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf14      	ite	ne
 8001648:	2301      	movne	r3, #1
 800164a:	2300      	moveq	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <_ZL12MX_TIM1_Initv+0x126>
  {
    Error_Handler();
 8001652:	f000 fa56 	bl	8001b02 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800165a:	220c      	movs	r2, #12
 800165c:	4619      	mov	r1, r3
 800165e:	481e      	ldr	r0, [pc, #120]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 8001660:	f008 fb2a 	bl	8009cb8 <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <_ZL12MX_TIM1_Initv+0x148>
  {
    Error_Handler();
 8001674:	f000 fa45 	bl	8001b02 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001684:	230a      	movs	r3, #10
 8001686:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800168c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001690:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800169a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80016a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 80016b0:	f009 fad2 	bl	800ac58 <HAL_TIMEx_ConfigBreakDeadTime>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bf14      	ite	ne
 80016ba:	2301      	movne	r3, #1
 80016bc:	2300      	moveq	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <_ZL12MX_TIM1_Initv+0x198>
  {
    Error_Handler();
 80016c4:	f000 fa1d 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <_ZL12MX_TIM1_Initv+0x1a8>)
 80016ca:	f000 fea9 	bl	8002420 <HAL_TIM_MspPostInit>

}
 80016ce:	bf00      	nop
 80016d0:	3758      	adds	r7, #88	; 0x58
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	24000a4c 	.word	0x24000a4c
 80016dc:	40010000 	.word	0x40010000

080016e0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <_ZL12MX_TIM3_Initv+0xb4>)
 8001700:	4a25      	ldr	r2, [pc, #148]	; (8001798 <_ZL12MX_TIM3_Initv+0xb8>)
 8001702:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27500;
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <_ZL12MX_TIM3_Initv+0xb4>)
 8001706:	f646 326c 	movw	r2, #27500	; 0x6b6c
 800170a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <_ZL12MX_TIM3_Initv+0xb4>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <_ZL12MX_TIM3_Initv+0xb4>)
 8001714:	f242 720f 	movw	r2, #9999	; 0x270f
 8001718:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <_ZL12MX_TIM3_Initv+0xb4>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <_ZL12MX_TIM3_Initv+0xb4>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001726:	481b      	ldr	r0, [pc, #108]	; (8001794 <_ZL12MX_TIM3_Initv+0xb4>)
 8001728:	f007 ff55 	bl	80095d6 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 800173c:	f000 f9e1 	bl	8001b02 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	4619      	mov	r1, r3
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <_ZL12MX_TIM3_Initv+0xb4>)
 800174e:	f008 fbc3 	bl	8009ed8 <HAL_TIM_ConfigClockSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001762:	f000 f9ce 	bl	8001b02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <_ZL12MX_TIM3_Initv+0xb4>)
 8001774:	f009 f9d4 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf14      	ite	ne
 800177e:	2301      	movne	r3, #1
 8001780:	2300      	moveq	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001788:	f000 f9bb 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	24000a98 	.word	0x24000a98
 8001798:	40000400 	.word	0x40000400

0800179c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <_ZL12MX_TIM4_Initv+0xb4>)
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <_ZL12MX_TIM4_Initv+0xb8>)
 80017be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 275;
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <_ZL12MX_TIM4_Initv+0xb4>)
 80017c2:	f240 1213 	movw	r2, #275	; 0x113
 80017c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <_ZL12MX_TIM4_Initv+0xb4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 6875;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <_ZL12MX_TIM4_Initv+0xb4>)
 80017d0:	f641 22db 	movw	r2, #6875	; 0x1adb
 80017d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <_ZL12MX_TIM4_Initv+0xb4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <_ZL12MX_TIM4_Initv+0xb4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017e2:	481b      	ldr	r0, [pc, #108]	; (8001850 <_ZL12MX_TIM4_Initv+0xb4>)
 80017e4:	f007 fef7 	bl	80095d6 <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf14      	ite	ne
 80017ee:	2301      	movne	r3, #1
 80017f0:	2300      	moveq	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <_ZL12MX_TIM4_Initv+0x60>
  {
    Error_Handler();
 80017f8:	f000 f983 	bl	8001b02 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001800:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	4619      	mov	r1, r3
 8001808:	4811      	ldr	r0, [pc, #68]	; (8001850 <_ZL12MX_TIM4_Initv+0xb4>)
 800180a:	f008 fb65 	bl	8009ed8 <HAL_TIM_ConfigClockSource>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 800181e:	f000 f970 	bl	8001b02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4808      	ldr	r0, [pc, #32]	; (8001850 <_ZL12MX_TIM4_Initv+0xb4>)
 8001830:	f009 f976 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001844:	f000 f95d 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	24000ae4 	.word	0x24000ae4
 8001854:	40000800 	.word	0x40000800

08001858 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b29      	ldr	r3, [pc, #164]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a0:	481b      	ldr	r0, [pc, #108]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018a2:	f009 fa9a 	bl	800adda <HAL_UART_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf14      	ite	ne
 80018ac:	2301      	movne	r3, #1
 80018ae:	2300      	moveq	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80018b6:	f000 f924 	bl	8001b02 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ba:	2100      	movs	r1, #0
 80018bc:	4814      	ldr	r0, [pc, #80]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018be:	f00a fb4c 	bl	800bf5a <HAL_UARTEx_SetTxFifoThreshold>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80018d2:	f000 f916 	bl	8001b02 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d6:	2100      	movs	r1, #0
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018da:	f00a fb7c 	bl	800bfd6 <HAL_UARTEx_SetRxFifoThreshold>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf14      	ite	ne
 80018e4:	2301      	movne	r3, #1
 80018e6:	2300      	moveq	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80018ee:	f000 f908 	bl	8001b02 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018f4:	f00a faf8 	bl	800bee8 <HAL_UARTEx_DisableFifoMode>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001908:	f000 f8fb 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	24000b30 	.word	0x24000b30
 8001914:	40011000 	.word	0x40011000

08001918 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 800191e:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <_ZL19MX_USART2_UART_Initv+0xc4>)
 8001920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001922:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001960:	2300      	movs	r3, #0
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	481c      	ldr	r0, [pc, #112]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001968:	f00a fa54 	bl	800be14 <HAL_RS485Ex_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <_ZL19MX_USART2_UART_Initv+0x68>
  {
    Error_Handler();
 800197c:	f000 f8c1 	bl	8001b02 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001980:	2100      	movs	r1, #0
 8001982:	4815      	ldr	r0, [pc, #84]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001984:	f00a fae9 	bl	800bf5a <HAL_UARTEx_SetTxFifoThreshold>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_ZL19MX_USART2_UART_Initv+0x84>
  {
    Error_Handler();
 8001998:	f000 f8b3 	bl	8001b02 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199c:	2100      	movs	r1, #0
 800199e:	480e      	ldr	r0, [pc, #56]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 80019a0:	f00a fb19 	bl	800bfd6 <HAL_UARTEx_SetRxFifoThreshold>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf14      	ite	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	2300      	moveq	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <_ZL19MX_USART2_UART_Initv+0xa0>
  {
    Error_Handler();
 80019b4:	f000 f8a5 	bl	8001b02 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <_ZL19MX_USART2_UART_Initv+0xc0>)
 80019ba:	f00a fa95 	bl	800bee8 <HAL_UARTEx_DisableFifoMode>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <_ZL19MX_USART2_UART_Initv+0xba>
  {
    Error_Handler();
 80019ce:	f000 f898 	bl	8001b02 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	24000bc0 	.word	0x24000bc0
 80019dc:	40004400 	.word	0x40004400

080019e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	4b39      	ldr	r3, [pc, #228]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	4a37      	ldr	r2, [pc, #220]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a06:	4b35      	ldr	r3, [pc, #212]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	4a30      	ldr	r2, [pc, #192]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	4a28      	ldr	r2, [pc, #160]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	4a21      	ldr	r2, [pc, #132]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <_ZL12MX_GPIO_Initv+0xfc>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab0:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <_ZL12MX_GPIO_Initv+0x100>)
 8001ab2:	f003 ff35 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <_ZL12MX_GPIO_Initv+0x100>)
 8001ad0:	f003 fd7e 	bl	80055d0 <HAL_GPIO_Init>

}
 8001ad4:	bf00      	nop
 8001ad6:	3730      	adds	r7, #48	; 0x30
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	58020800 	.word	0x58020800

08001ae4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af4:	d101      	bne.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001af6:	f000 ff2d 	bl	8002954 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_MspInit+0x30>)
 8001b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b1c:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_MspInit+0x30>)
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_MspInit+0x30>)
 8001b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	58024400 	.word	0x58024400

08001b44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5b      	ldr	r2, [pc, #364]	; (8001cd0 <HAL_ADC_MspInit+0x18c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d14e      	bne.n	8001c04 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b66:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <HAL_ADC_MspInit+0x190>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a59      	ldr	r2, [pc, #356]	; (8001cd4 <HAL_ADC_MspInit+0x190>)
 8001b6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b70:	4b58      	ldr	r3, [pc, #352]	; (8001cd4 <HAL_ADC_MspInit+0x190>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10e      	bne.n	8001b96 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b78:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b7e:	4a56      	ldr	r2, [pc, #344]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	623b      	str	r3, [r7, #32]
 8001b94:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	4a4e      	ldr	r2, [pc, #312]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba6:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd2:	23c0      	movs	r3, #192	; 0xc0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	483d      	ldr	r0, [pc, #244]	; (8001cdc <HAL_ADC_MspInit+0x198>)
 8001be6:	f003 fcf3 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bea:	2303      	movs	r3, #3
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4838      	ldr	r0, [pc, #224]	; (8001ce0 <HAL_ADC_MspInit+0x19c>)
 8001bfe:	f003 fce7 	bl	80055d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c02:	e061      	b.n	8001cc8 <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a36      	ldr	r2, [pc, #216]	; (8001ce4 <HAL_ADC_MspInit+0x1a0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d133      	bne.n	8001c76 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_ADC_MspInit+0x190>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a2f      	ldr	r2, [pc, #188]	; (8001cd4 <HAL_ADC_MspInit+0x190>)
 8001c16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c18:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_ADC_MspInit+0x190>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d10e      	bne.n	8001c3e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001c22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001c28:	f043 0320 	orr.w	r3, r3, #32
 8001c2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	4a24      	ldr	r2, [pc, #144]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c5c:	2330      	movs	r3, #48	; 0x30
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c60:	2303      	movs	r3, #3
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	481e      	ldr	r0, [pc, #120]	; (8001ce8 <HAL_ADC_MspInit+0x1a4>)
 8001c70:	f003 fcae 	bl	80055d0 <HAL_GPIO_Init>
}
 8001c74:	e028      	b.n	8001cc8 <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC3)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_ADC_MspInit+0x1a8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_ADC_MspInit+0x184>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_ADC_MspInit+0x194>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001cbc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001cc0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001cc4:	f000 fe66 	bl	8002994 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001cc8:	bf00      	nop
 8001cca:	3738      	adds	r7, #56	; 0x38
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	24000c70 	.word	0x24000c70
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	58020000 	.word	0x58020000
 8001ce0:	58020400 	.word	0x58020400
 8001ce4:	40022100 	.word	0x40022100
 8001ce8:	58020800 	.word	0x58020800
 8001cec:	58026000 	.word	0x58026000

08001cf0 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_CORDIC_MspInit+0x3c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10e      	bne.n	8001d20 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_CORDIC_MspInit+0x40>)
 8001d04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <HAL_CORDIC_MspInit+0x40>)
 8001d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_CORDIC_MspInit+0x40>)
 8001d14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	48024400 	.word	0x48024400
 8001d30:	58024400 	.word	0x58024400

08001d34 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0b8      	sub	sp, #224	; 0xe0
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	22b4      	movs	r2, #180	; 0xb4
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00a f9fd 	bl	800c154 <memset>
  if(DFSDM1_Init == 0)
 8001d5a:	4b54      	ldr	r3, [pc, #336]	; (8001eac <HAL_DFSDM_FilterMspInit+0x178>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 809f 	bne.w	8001ea2 <HAL_DFSDM_FilterMspInit+0x16e>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001d64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6e:	f107 0318 	add.w	r3, r7, #24
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 fec6 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8001d7e:	f7ff fec0 	bl	8001b02 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	4a49      	ldr	r2, [pc, #292]	; (8001eb0 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001d8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d10e      	bne.n	8001db2 <HAL_DFSDM_FilterMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d94:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d9a:	4a46      	ldr	r2, [pc, #280]	; (8001eb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001d9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001da0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001daa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	4a3e      	ldr	r2, [pc, #248]	; (8001eb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd0:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd6:	4a37      	ldr	r2, [pc, #220]	; (8001eb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de0:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <HAL_DFSDM_FilterMspInit+0x180>)
 8001de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> DFSDM1_CKIN6
    PD1     ------> DFSDM1_DATIN6
    PD6     ------> DFSDM1_DATIN1
    PD7     ------> DFSDM1_CKIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001df2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e12:	4619      	mov	r1, r3
 8001e14:	4828      	ldr	r0, [pc, #160]	; (8001eb8 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e16:	f003 fbdb 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001e32:	2303      	movs	r3, #3
 8001e34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	481f      	ldr	r0, [pc, #124]	; (8001ebc <HAL_DFSDM_FilterMspInit+0x188>)
 8001e40:	f003 fbc6 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e44:	2340      	movs	r3, #64	; 0x40
 8001e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e66:	4619      	mov	r1, r3
 8001e68:	4814      	ldr	r0, [pc, #80]	; (8001ebc <HAL_DFSDM_FilterMspInit+0x188>)
 8001e6a:	f003 fbb1 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001e86:	2306      	movs	r3, #6
 8001e88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e90:	4619      	mov	r1, r3
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <HAL_DFSDM_FilterMspInit+0x188>)
 8001e94:	f003 fb9c 	bl	80055d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <HAL_DFSDM_FilterMspInit+0x178>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a03      	ldr	r2, [pc, #12]	; (8001eac <HAL_DFSDM_FilterMspInit+0x178>)
 8001ea0:	6013      	str	r3, [r2, #0]
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	37e0      	adds	r7, #224	; 0xe0
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	24000c78 	.word	0x24000c78
 8001eb0:	24000c74 	.word	0x24000c74
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	58020800 	.word	0x58020800
 8001ebc:	58020c00 	.word	0x58020c00

08001ec0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0b8      	sub	sp, #224	; 0xe0
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	22b4      	movs	r2, #180	; 0xb4
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00a f937 	bl	800c154 <memset>
  if(DFSDM1_Init == 0)
 8001ee6:	4b54      	ldr	r3, [pc, #336]	; (8002038 <HAL_DFSDM_ChannelMspInit+0x178>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 809f 	bne.w	800202e <HAL_DFSDM_ChannelMspInit+0x16e>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001ef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ef4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efa:	f107 0318 	add.w	r3, r7, #24
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 fe00 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001f0a:	f7ff fdfa 	bl	8001b02 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_DFSDM_ChannelMspInit+0x17c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_DFSDM_ChannelMspInit+0x17c>)
 8001f16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001f18:	4b48      	ldr	r3, [pc, #288]	; (800203c <HAL_DFSDM_ChannelMspInit+0x17c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10e      	bne.n	8001f3e <HAL_DFSDM_ChannelMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001f20:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_DFSDM_ChannelMspInit+0x180>)
 8001f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f26:	4a46      	ldr	r2, [pc, #280]	; (8002040 <HAL_DFSDM_ChannelMspInit+0x180>)
 8001f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f30:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_DFSDM_ChannelMspInit+0x180>)
 8001f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	4b40      	ldr	r3, [pc, #256]	; (8002040 <HAL_DFSDM_ChannelMspInit+0x180>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f44:	4a3e      	ldr	r2, [pc, #248]	; (8002040 <HAL_DFSDM_ChannelMspInit+0x180>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4e:	4b3c      	ldr	r3, [pc, #240]	; (8002040 <HAL_DFSDM_ChannelMspInit+0x180>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5c:	4b38      	ldr	r3, [pc, #224]	; (8002040 <HAL_DFSDM_ChannelMspInit+0x180>)
 8001f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f62:	4a37      	ldr	r2, [pc, #220]	; (8002040 <HAL_DFSDM_ChannelMspInit+0x180>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6c:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_DFSDM_ChannelMspInit+0x180>)
 8001f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> DFSDM1_CKIN6
    PD1     ------> DFSDM1_DATIN6
    PD6     ------> DFSDM1_DATIN1
    PD7     ------> DFSDM1_CKIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001f94:	2303      	movs	r3, #3
 8001f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4828      	ldr	r0, [pc, #160]	; (8002044 <HAL_DFSDM_ChannelMspInit+0x184>)
 8001fa2:	f003 fb15 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481f      	ldr	r0, [pc, #124]	; (8002048 <HAL_DFSDM_ChannelMspInit+0x188>)
 8001fcc:	f003 fb00 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fd0:	2340      	movs	r3, #64	; 0x40
 8001fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4814      	ldr	r0, [pc, #80]	; (8002048 <HAL_DFSDM_ChannelMspInit+0x188>)
 8001ff6:	f003 faeb 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002012:	2306      	movs	r3, #6
 8002014:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002018:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800201c:	4619      	mov	r1, r3
 800201e:	480a      	ldr	r0, [pc, #40]	; (8002048 <HAL_DFSDM_ChannelMspInit+0x188>)
 8002020:	f003 fad6 	bl	80055d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_DFSDM_ChannelMspInit+0x178>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	4a03      	ldr	r2, [pc, #12]	; (8002038 <HAL_DFSDM_ChannelMspInit+0x178>)
 800202c:	6013      	str	r3, [r2, #0]
  }

}
 800202e:	bf00      	nop
 8002030:	37e0      	adds	r7, #224	; 0xe0
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	24000c78 	.word	0x24000c78
 800203c:	24000c74 	.word	0x24000c74
 8002040:	58024400 	.word	0x58024400
 8002044:	58020800 	.word	0x58020800
 8002048:	58020c00 	.word	0x58020c00

0800204c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0b6      	sub	sp, #216	; 0xd8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	22b4      	movs	r2, #180	; 0xb4
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f00a f871 	bl	800c154 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a25      	ldr	r2, [pc, #148]	; (800210c <HAL_FDCAN_MspInit+0xc0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d142      	bne.n	8002102 <HAL_FDCAN_MspInit+0xb6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800207c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002080:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002082:	2300      	movs	r3, #0
 8002084:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	4618      	mov	r0, r3
 800208c:	f004 fd3a 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 8002096:	f7ff fd34 	bl	8001b02 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_FDCAN_MspInit+0xc4>)
 800209c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_FDCAN_MspInit+0xc4>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_FDCAN_MspInit+0xc4>)
 80020ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_FDCAN_MspInit+0xc4>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_FDCAN_MspInit+0xc4>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_FDCAN_MspInit+0xc4>)
 80020ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80020f0:	2309      	movs	r3, #9
 80020f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <HAL_FDCAN_MspInit+0xc8>)
 80020fe:	f003 fa67 	bl	80055d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002102:	bf00      	nop
 8002104:	37d8      	adds	r7, #216	; 0xd8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	4000a000 	.word	0x4000a000
 8002110:	58024400 	.word	0x58024400
 8002114:	58020000 	.word	0x58020000

08002118 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_FMAC_MspInit+0x3c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10e      	bne.n	8002148 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_FMAC_MspInit+0x40>)
 800212c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002130:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_FMAC_MspInit+0x40>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_FMAC_MspInit+0x40>)
 800213c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	48024000 	.word	0x48024000
 8002158:	58024400 	.word	0x58024400

0800215c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0b8      	sub	sp, #224	; 0xe0
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0318 	add.w	r3, r7, #24
 8002178:	22b4      	movs	r2, #180	; 0xb4
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f009 ffe9 	bl	800c154 <memset>
  if(hi2c->Instance==I2C3)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a37      	ldr	r2, [pc, #220]	; (8002264 <HAL_I2C_MspInit+0x108>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d167      	bne.n	800225c <HAL_I2C_MspInit+0x100>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800218c:	2308      	movs	r3, #8
 800218e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002196:	f107 0318 	add.w	r3, r7, #24
 800219a:	4618      	mov	r0, r3
 800219c:	f004 fcb2 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021a6:	f7ff fcac 	bl	8001b02 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <HAL_I2C_MspInit+0x10c>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	4a2d      	ldr	r2, [pc, #180]	; (8002268 <HAL_I2C_MspInit+0x10c>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ba:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_I2C_MspInit+0x10c>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_I2C_MspInit+0x10c>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ce:	4a26      	ldr	r2, [pc, #152]	; (8002268 <HAL_I2C_MspInit+0x10c>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_I2C_MspInit+0x10c>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ee:	2312      	movs	r3, #18
 80021f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002200:	2304      	movs	r3, #4
 8002202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002206:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800220a:	4619      	mov	r1, r3
 800220c:	4817      	ldr	r0, [pc, #92]	; (800226c <HAL_I2C_MspInit+0x110>)
 800220e:	f003 f9df 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002216:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221a:	2312      	movs	r3, #18
 800221c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800222c:	2304      	movs	r3, #4
 800222e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002236:	4619      	mov	r1, r3
 8002238:	480d      	ldr	r0, [pc, #52]	; (8002270 <HAL_I2C_MspInit+0x114>)
 800223a:	f003 f9c9 	bl	80055d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_I2C_MspInit+0x10c>)
 8002240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002244:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_I2C_MspInit+0x10c>)
 8002246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800224a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_I2C_MspInit+0x10c>)
 8002250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	37e0      	adds	r7, #224	; 0xe0
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40005c00 	.word	0x40005c00
 8002268:	58024400 	.word	0x58024400
 800226c:	58020800 	.word	0x58020800
 8002270:	58020000 	.word	0x58020000

08002274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0b6      	sub	sp, #216	; 0xd8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	22b4      	movs	r2, #180	; 0xb4
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f009 ff5d 	bl	800c154 <memset>
  if(hspi->Instance==SPI2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a25      	ldr	r2, [pc, #148]	; (8002334 <HAL_SPI_MspInit+0xc0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d143      	bne.n	800232c <HAL_SPI_MspInit+0xb8>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80022a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80022aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ae:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	4618      	mov	r0, r3
 80022b6:	f004 fc25 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80022c0:	f7ff fc1f 	bl	8001b02 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <HAL_SPI_MspInit+0xc4>)
 80022c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ca:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <HAL_SPI_MspInit+0xc4>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_SPI_MspInit+0xc4>)
 80022d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_SPI_MspInit+0xc4>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_SPI_MspInit+0xc4>)
 80022ea:	f043 0302 	orr.w	r3, r3, #2
 80022ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_SPI_MspInit+0xc4>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002300:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800231a:	2305      	movs	r3, #5
 800231c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002324:	4619      	mov	r1, r3
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <HAL_SPI_MspInit+0xc8>)
 8002328:	f003 f952 	bl	80055d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	37d8      	adds	r7, #216	; 0xd8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40003800 	.word	0x40003800
 8002338:	58024400 	.word	0x58024400
 800233c:	58020400 	.word	0x58020400

08002340 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <HAL_TIM_PWM_MspInit+0x48>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d116      	bne.n	8002380 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_TIM_PWM_MspInit+0x4c>)
 8002354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_TIM_PWM_MspInit+0x4c>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_TIM_PWM_MspInit+0x4c>)
 8002364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	2019      	movs	r0, #25
 8002376:	f002 fa31 	bl	80047dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800237a:	2019      	movs	r0, #25
 800237c:	f002 fa48 	bl	8004810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40010000 	.word	0x40010000
 800238c:	58024400 	.word	0x58024400

08002390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_TIM_Base_MspInit+0x84>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d117      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_TIM_Base_MspInit+0x88>)
 80023a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <HAL_TIM_Base_MspInit+0x88>)
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_TIM_Base_MspInit+0x88>)
 80023b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2100      	movs	r1, #0
 80023c4:	201d      	movs	r0, #29
 80023c6:	f002 fa09 	bl	80047dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023ca:	201d      	movs	r0, #29
 80023cc:	f002 fa20 	bl	8004810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023d0:	e01b      	b.n	800240a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_TIM_Base_MspInit+0x8c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d116      	bne.n	800240a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_TIM_Base_MspInit+0x88>)
 80023de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e2:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <HAL_TIM_Base_MspInit+0x88>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_TIM_Base_MspInit+0x88>)
 80023ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	201e      	movs	r0, #30
 8002400:	f002 f9ec 	bl	80047dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002404:	201e      	movs	r0, #30
 8002406:	f002 fa03 	bl	8004810 <HAL_NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40000400 	.word	0x40000400
 8002418:	58024400 	.word	0x58024400
 800241c:	40000800 	.word	0x40000800

08002420 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_TIM_MspPostInit+0x6c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d11f      	bne.n	8002482 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <HAL_TIM_MspPostInit+0x70>)
 8002444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002448:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_TIM_MspPostInit+0x70>)
 800244a:	f043 0310 	orr.w	r3, r3, #16
 800244e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_TIM_MspPostInit+0x70>)
 8002454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002460:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8002464:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002472:	2301      	movs	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	4619      	mov	r1, r3
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_TIM_MspPostInit+0x74>)
 800247e:	f003 f8a7 	bl	80055d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002482:	bf00      	nop
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40010000 	.word	0x40010000
 8002490:	58024400 	.word	0x58024400
 8002494:	58021000 	.word	0x58021000

08002498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0b8      	sub	sp, #224	; 0xe0
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b0:	f107 0318 	add.w	r3, r7, #24
 80024b4:	22b4      	movs	r2, #180	; 0xb4
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f009 fe4b 	bl	800c154 <memset>
  if(huart->Instance==USART1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a49      	ldr	r2, [pc, #292]	; (80025e8 <HAL_UART_MspInit+0x150>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d143      	bne.n	8002550 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d2:	f107 0318 	add.w	r3, r7, #24
 80024d6:	4618      	mov	r0, r3
 80024d8:	f004 fb14 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024e2:	f7ff fb0e 	bl	8001b02 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_UART_MspInit+0x154>)
 80024e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024ec:	4a3f      	ldr	r2, [pc, #252]	; (80025ec <HAL_UART_MspInit+0x154>)
 80024ee:	f043 0310 	orr.w	r3, r3, #16
 80024f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_UART_MspInit+0x154>)
 80024f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	4b39      	ldr	r3, [pc, #228]	; (80025ec <HAL_UART_MspInit+0x154>)
 8002506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250a:	4a38      	ldr	r2, [pc, #224]	; (80025ec <HAL_UART_MspInit+0x154>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002514:	4b35      	ldr	r3, [pc, #212]	; (80025ec <HAL_UART_MspInit+0x154>)
 8002516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002522:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002526:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800253c:	2307      	movs	r3, #7
 800253e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002546:	4619      	mov	r1, r3
 8002548:	4829      	ldr	r0, [pc, #164]	; (80025f0 <HAL_UART_MspInit+0x158>)
 800254a:	f003 f841 	bl	80055d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800254e:	e046      	b.n	80025de <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_UART_MspInit+0x15c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d141      	bne.n	80025de <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800255a:	2302      	movs	r3, #2
 800255c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002564:	f107 0318 	add.w	r3, r7, #24
 8002568:	4618      	mov	r0, r3
 800256a:	f004 facb 	bl	8006b04 <HAL_RCCEx_PeriphCLKConfig>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002574:	f7ff fac5 	bl	8001b02 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_UART_MspInit+0x154>)
 800257a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800257e:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_UART_MspInit+0x154>)
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_UART_MspInit+0x154>)
 800258a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_UART_MspInit+0x154>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259c:	4a13      	ldr	r2, [pc, #76]	; (80025ec <HAL_UART_MspInit+0x154>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_UART_MspInit+0x154>)
 80025a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80025b4:	230e      	movs	r3, #14
 80025b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025cc:	2307      	movs	r3, #7
 80025ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025d6:	4619      	mov	r1, r3
 80025d8:	4805      	ldr	r0, [pc, #20]	; (80025f0 <HAL_UART_MspInit+0x158>)
 80025da:	f002 fff9 	bl	80055d0 <HAL_GPIO_Init>
}
 80025de:	bf00      	nop
 80025e0:	37e0      	adds	r7, #224	; 0xe0
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40011000 	.word	0x40011000
 80025ec:	58024400 	.word	0x58024400
 80025f0:	58020000 	.word	0x58020000
 80025f4:	40004400 	.word	0x40004400

080025f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b090      	sub	sp, #64	; 0x40
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	d827      	bhi.n	8002656 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8002606:	2200      	movs	r2, #0
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	201c      	movs	r0, #28
 800260c:	f002 f8e6 	bl	80047dc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002610:	201c      	movs	r0, #28
 8002612:	f002 f8fd 	bl	8004810 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002616:	4a29      	ldr	r2, [pc, #164]	; (80026bc <HAL_InitTick+0xc4>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_InitTick+0xc8>)
 800261e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002622:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_InitTick+0xc8>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_InitTick+0xc8>)
 800262e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800263a:	f107 0210 	add.w	r2, r7, #16
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f004 fa1b 	bl	8006a80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <HAL_InitTick+0x6a>
 8002654:	e001      	b.n	800265a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e02c      	b.n	80026b4 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800265a:	f004 f9e5 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 800265e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002660:	e004      	b.n	800266c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002662:	f004 f9e1 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 8002666:	4603      	mov	r3, r0
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800266c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266e:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <HAL_InitTick+0xcc>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	3b01      	subs	r3, #1
 8002678:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_InitTick+0xd0>)
 800267c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002680:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_InitTick+0xd0>)
 8002684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002688:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <HAL_InitTick+0xd0>)
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_InitTick+0xd0>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_InitTick+0xd0>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800269c:	480a      	ldr	r0, [pc, #40]	; (80026c8 <HAL_InitTick+0xd0>)
 800269e:	f006 ff9a 	bl	80095d6 <HAL_TIM_Base_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80026a8:	4807      	ldr	r0, [pc, #28]	; (80026c8 <HAL_InitTick+0xd0>)
 80026aa:	f006 ffeb 	bl	8009684 <HAL_TIM_Base_Start_IT>
 80026ae:	4603      	mov	r3, r0
 80026b0:	e000      	b.n	80026b4 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3740      	adds	r7, #64	; 0x40
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	240005b4 	.word	0x240005b4
 80026c0:	58024400 	.word	0x58024400
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	24000ca0 	.word	0x24000ca0

080026cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemManage_Handler+0x4>

080026e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	pwm_flag=1;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <TIM1_UP_IRQHandler+0x14>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002736:	4803      	ldr	r0, [pc, #12]	; (8002744 <TIM1_UP_IRQHandler+0x18>)
 8002738:	f007 f99e 	bl	8009a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	24000c50 	.word	0x24000c50
 8002744:	24000a4c 	.word	0x24000a4c

08002748 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <TIM2_IRQHandler+0x10>)
 800274e:	f007 f993 	bl	8009a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	24000ca0 	.word	0x24000ca0

0800275c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002764:	4803      	ldr	r0, [pc, #12]	; (8002774 <TIM3_IRQHandler+0x18>)
 8002766:	f003 f8f4 	bl	8005952 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800276a:	4803      	ldr	r0, [pc, #12]	; (8002778 <TIM3_IRQHandler+0x1c>)
 800276c:	f007 f984 	bl	8009a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	58020800 	.word	0x58020800
 8002778:	24000a98 	.word	0x24000a98

0800277c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <TIM4_IRQHandler+0x10>)
 8002782:	f007 f979 	bl	8009a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	24000ae4 	.word	0x24000ae4

08002790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002794:	4b34      	ldr	r3, [pc, #208]	; (8002868 <SystemInit+0xd8>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	4a33      	ldr	r2, [pc, #204]	; (8002868 <SystemInit+0xd8>)
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027a4:	4b31      	ldr	r3, [pc, #196]	; (800286c <SystemInit+0xdc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d807      	bhi.n	80027c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027b0:	4b2e      	ldr	r3, [pc, #184]	; (800286c <SystemInit+0xdc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 030f 	bic.w	r3, r3, #15
 80027b8:	4a2c      	ldr	r2, [pc, #176]	; (800286c <SystemInit+0xdc>)
 80027ba:	f043 0307 	orr.w	r3, r3, #7
 80027be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <SystemInit+0xe0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <SystemInit+0xe0>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <SystemInit+0xe0>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027d2:	4b27      	ldr	r3, [pc, #156]	; (8002870 <SystemInit+0xe0>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4926      	ldr	r1, [pc, #152]	; (8002870 <SystemInit+0xe0>)
 80027d8:	4b26      	ldr	r3, [pc, #152]	; (8002874 <SystemInit+0xe4>)
 80027da:	4013      	ands	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <SystemInit+0xdc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <SystemInit+0xdc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 030f 	bic.w	r3, r3, #15
 80027f2:	4a1e      	ldr	r2, [pc, #120]	; (800286c <SystemInit+0xdc>)
 80027f4:	f043 0307 	orr.w	r3, r3, #7
 80027f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <SystemInit+0xe0>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <SystemInit+0xe0>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <SystemInit+0xe0>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <SystemInit+0xe0>)
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <SystemInit+0xe8>)
 8002810:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <SystemInit+0xe0>)
 8002814:	4a19      	ldr	r2, [pc, #100]	; (800287c <SystemInit+0xec>)
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <SystemInit+0xe0>)
 800281a:	4a19      	ldr	r2, [pc, #100]	; (8002880 <SystemInit+0xf0>)
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <SystemInit+0xe0>)
 8002820:	2200      	movs	r2, #0
 8002822:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <SystemInit+0xe0>)
 8002826:	4a16      	ldr	r2, [pc, #88]	; (8002880 <SystemInit+0xf0>)
 8002828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <SystemInit+0xe0>)
 800282c:	2200      	movs	r2, #0
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <SystemInit+0xe0>)
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <SystemInit+0xf0>)
 8002834:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <SystemInit+0xe0>)
 8002838:	2200      	movs	r2, #0
 800283a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <SystemInit+0xe0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <SystemInit+0xe0>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002846:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <SystemInit+0xe0>)
 800284a:	2200      	movs	r2, #0
 800284c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <SystemInit+0xf4>)
 8002850:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002854:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SystemInit+0xd8>)
 8002858:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800285c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00
 800286c:	52002000 	.word	0x52002000
 8002870:	58024400 	.word	0x58024400
 8002874:	eaf6ed7f 	.word	0xeaf6ed7f
 8002878:	02020200 	.word	0x02020200
 800287c:	01ff0000 	.word	0x01ff0000
 8002880:	01010280 	.word	0x01010280
 8002884:	52004000 	.word	0x52004000

08002888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800288c:	f7ff ff80 	bl	8002790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002892:	e003      	b.n	800289c <LoopCopyDataInit>

08002894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800289a:	3104      	adds	r1, #4

0800289c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800289c:	480a      	ldr	r0, [pc, #40]	; (80028c8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80028a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028a4:	d3f6      	bcc.n	8002894 <CopyDataInit>
  ldr  r2, =_sbss
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80028a8:	e002      	b.n	80028b0 <LoopFillZerobss>

080028aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028ac:	f842 3b04 	str.w	r3, [r2], #4

080028b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80028b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028b4:	d3f9      	bcc.n	80028aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028b6:	f009 fc1b 	bl	800c0f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ba:	f7fd ff1d 	bl	80006f8 <main>
  bx  lr    
 80028be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028c0:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 80028c4:	0800c210 	.word	0x0800c210
  ldr  r0, =_sdata
 80028c8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80028cc:	240005bc 	.word	0x240005bc
  ldr  r2, =_sbss
 80028d0:	240005bc 	.word	0x240005bc
  ldr  r3, = _ebss
 80028d4:	24000cf0 	.word	0x24000cf0

080028d8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028d8:	e7fe      	b.n	80028d8 <ADC3_IRQHandler>
	...

080028dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e2:	2003      	movs	r0, #3
 80028e4:	f001 ff6f 	bl	80047c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028e8:	f003 fef4 	bl	80066d4 <HAL_RCC_GetSysClockFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_Init+0x68>)
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	4913      	ldr	r1, [pc, #76]	; (8002948 <HAL_Init+0x6c>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
 8002904:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_Init+0x68>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_Init+0x6c>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_Init+0x70>)
 800291e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <HAL_Init+0x74>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002926:	2000      	movs	r0, #0
 8002928:	f7ff fe66 	bl	80025f8 <HAL_InitTick>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e002      	b.n	800293c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002936:	f7ff f8eb 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	58024400 	.word	0x58024400
 8002948:	0800c1c8 	.word	0x0800c1c8
 800294c:	240005b0 	.word	0x240005b0
 8002950:	240005ac 	.word	0x240005ac

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	240005b8 	.word	0x240005b8
 8002978:	24000cec 	.word	0x24000cec

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	24000cec 	.word	0x24000cec

08002994 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	58000400 	.word	0x58000400

080029c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3360      	adds	r3, #96	; 0x60
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <LL_ADC_SetOffset+0x60>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10b      	bne.n	8002a64 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a62:	e00b      	b.n	8002a7c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	601a      	str	r2, [r3, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	58026000 	.word	0x58026000

08002a8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3360      	adds	r3, #96	; 0x60
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	611a      	str	r2, [r3, #16]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00e      	beq.n	8002b1e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3360      	adds	r3, #96	; 0x60
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	601a      	str	r2, [r3, #0]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	58026000 	.word	0x58026000

08002b30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <LL_ADC_SetOffsetSaturation+0x40>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10e      	bne.n	8002b62 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3360      	adds	r3, #96	; 0x60
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	58026000 	.word	0x58026000

08002b74 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <LL_ADC_SetOffsetSign+0x40>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10e      	bne.n	8002ba6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3360      	adds	r3, #96	; 0x60
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	58026000 	.word	0x58026000

08002bb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <LL_ADC_SetOffsetState+0x50>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d108      	bne.n	8002bec <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002bea:	e007      	b.n	8002bfc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	601a      	str	r2, [r3, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	58026000 	.word	0x58026000

08002c0c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3330      	adds	r3, #48	; 0x30
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	4413      	add	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	211f      	movs	r1, #31
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	0e9b      	lsrs	r3, r3, #26
 8002c44:	f003 011f 	and.w	r1, r3, #31
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	431a      	orrs	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3314      	adds	r3, #20
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	0e5b      	lsrs	r3, r3, #25
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	4413      	add	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	0d1b      	lsrs	r3, r3, #20
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	2107      	movs	r1, #7
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	401a      	ands	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0d1b      	lsrs	r3, r3, #20
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d115      	bne.n	8002cfc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0318 	and.w	r3, r3, #24
 8002ce6:	4914      	ldr	r1, [pc, #80]	; (8002d38 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	400b      	ands	r3, r1
 8002cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002cfa:	e014      	b.n	8002d26 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0318 	and.w	r3, r3, #24
 8002d12:	4909      	ldr	r1, [pc, #36]	; (8002d38 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d14:	40d9      	lsrs	r1, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	400b      	ands	r3, r1
 8002d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	58026000 	.word	0x58026000
 8002d38:	000fffff 	.word	0x000fffff

08002d3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 031f 	and.w	r3, r3, #31
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6093      	str	r3, [r2, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	5fffffc0 	.word	0x5fffffc0

08002d7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d90:	d101      	bne.n	8002d96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	6fffffc0 	.word	0x6fffffc0

08002dcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de0:	d101      	bne.n	8002de6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <LL_ADC_Enable+0x24>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	7fffffc0 	.word	0x7fffffc0

08002e1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <LL_ADC_Disable+0x24>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	f043 0202 	orr.w	r2, r3, #2
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	7fffffc0 	.word	0x7fffffc0

08002e44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <LL_ADC_IsEnabled+0x18>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <LL_ADC_IsEnabled+0x1a>
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d101      	bne.n	8002e82 <LL_ADC_IsDisableOngoing+0x18>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_ADC_IsDisableOngoing+0x1a>
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <LL_ADC_REG_StartConversion+0x24>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	f043 0204 	orr.w	r2, r3, #4
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	7fffffc0 	.word	0x7fffffc0

08002eb8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d101      	bne.n	8002ed0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d101      	bne.n	8002ef6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1ee      	b.n	80032fc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fe fe09 	bl	8001b44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff19 	bl	8002d7c <LL_ADC_IsDeepPowerDownEnabled>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff feff 	bl	8002d58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff34 	bl	8002dcc <LL_ADC_IsInternalRegulatorEnabled>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d114      	bne.n	8002f94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff18 	bl	8002da4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f74:	4b8e      	ldr	r3, [pc, #568]	; (80031b0 <HAL_ADC_Init+0x2ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	099b      	lsrs	r3, r3, #6
 8002f7a:	4a8e      	ldr	r2, [pc, #568]	; (80031b4 <HAL_ADC_Init+0x2b0>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	3301      	adds	r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f86:	e002      	b.n	8002f8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f9      	bne.n	8002f88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff17 	bl	8002dcc <LL_ADC_IsInternalRegulatorEnabled>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	f043 0210 	orr.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff77 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 8002fca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 8188 	bne.w	80032ea <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 8184 	bne.w	80032ea <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fea:	f043 0202 	orr.w	r2, r3, #2
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff24 	bl	8002e44 <LL_ADC_IsEnabled>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d136      	bne.n	8003070 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6c      	ldr	r2, [pc, #432]	; (80031b8 <HAL_ADC_Init+0x2b4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_ADC_Init+0x112>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6a      	ldr	r2, [pc, #424]	; (80031bc <HAL_ADC_Init+0x2b8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10e      	bne.n	8003034 <HAL_ADC_Init+0x130>
 8003016:	4868      	ldr	r0, [pc, #416]	; (80031b8 <HAL_ADC_Init+0x2b4>)
 8003018:	f7ff ff14 	bl	8002e44 <LL_ADC_IsEnabled>
 800301c:	4604      	mov	r4, r0
 800301e:	4867      	ldr	r0, [pc, #412]	; (80031bc <HAL_ADC_Init+0x2b8>)
 8003020:	f7ff ff10 	bl	8002e44 <LL_ADC_IsEnabled>
 8003024:	4603      	mov	r3, r0
 8003026:	4323      	orrs	r3, r4
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e008      	b.n	8003046 <HAL_ADC_Init+0x142>
 8003034:	4862      	ldr	r0, [pc, #392]	; (80031c0 <HAL_ADC_Init+0x2bc>)
 8003036:	f7ff ff05 	bl	8002e44 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5a      	ldr	r2, [pc, #360]	; (80031b8 <HAL_ADC_Init+0x2b4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d004      	beq.n	800305e <HAL_ADC_Init+0x15a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_ADC_Init+0x2b8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_ADC_Init+0x15e>
 800305e:	4a59      	ldr	r2, [pc, #356]	; (80031c4 <HAL_ADC_Init+0x2c0>)
 8003060:	e000      	b.n	8003064 <HAL_ADC_Init+0x160>
 8003062:	4a59      	ldr	r2, [pc, #356]	; (80031c8 <HAL_ADC_Init+0x2c4>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f7ff fca8 	bl	80029c0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <HAL_ADC_Init+0x2bc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d129      	bne.n	80030ce <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7e5b      	ldrb	r3, [r3, #25]
 800307e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003084:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800308a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d013      	beq.n	80030bc <HAL_ADC_Init+0x1b8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b0c      	cmp	r3, #12
 800309a:	d00d      	beq.n	80030b8 <HAL_ADC_Init+0x1b4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b1c      	cmp	r3, #28
 80030a2:	d007      	beq.n	80030b4 <HAL_ADC_Init+0x1b0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b18      	cmp	r3, #24
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_Init+0x1ac>
 80030ac:	2318      	movs	r3, #24
 80030ae:	e006      	b.n	80030be <HAL_ADC_Init+0x1ba>
 80030b0:	2300      	movs	r3, #0
 80030b2:	e004      	b.n	80030be <HAL_ADC_Init+0x1ba>
 80030b4:	2310      	movs	r3, #16
 80030b6:	e002      	b.n	80030be <HAL_ADC_Init+0x1ba>
 80030b8:	2308      	movs	r3, #8
 80030ba:	e000      	b.n	80030be <HAL_ADC_Init+0x1ba>
 80030bc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80030be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	e00e      	b.n	80030ec <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7e5b      	ldrb	r3, [r3, #25]
 80030d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d106      	bne.n	8003104 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	3b01      	subs	r3, #1
 80030fc:	045b      	lsls	r3, r3, #17
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <HAL_ADC_Init+0x2bc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d115      	bne.n	8003156 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_ADC_Init+0x2c8>)
 8003132:	4013      	ands	r3, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	69b9      	ldr	r1, [r7, #24]
 800313a:	430b      	orrs	r3, r1
 800313c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e009      	b.n	800316a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_ADC_Init+0x2cc>)
 800315e:	4013      	ands	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	69b9      	ldr	r1, [r7, #24]
 8003166:	430b      	orrs	r3, r1
 8003168:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fea2 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 8003174:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff feaf 	bl	8002ede <LL_ADC_INJ_IsConversionOngoing>
 8003180:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 808e 	bne.w	80032a6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 808a 	bne.w	80032a6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <HAL_ADC_Init+0x2bc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d11b      	bne.n	80031d4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7e1b      	ldrb	r3, [r3, #24]
 80031a0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031a8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e018      	b.n	80031e2 <HAL_ADC_Init+0x2de>
 80031b0:	240005ac 	.word	0x240005ac
 80031b4:	053e2d63 	.word	0x053e2d63
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40022100 	.word	0x40022100
 80031c0:	58026000 	.word	0x58026000
 80031c4:	40022300 	.word	0x40022300
 80031c8:	58026300 	.word	0x58026300
 80031cc:	fff04007 	.word	0xfff04007
 80031d0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	7e1b      	ldrb	r3, [r3, #24]
 80031d8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4b46      	ldr	r3, [pc, #280]	; (8003304 <HAL_ADC_Init+0x400>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	69b9      	ldr	r1, [r7, #24]
 80031f2:	430b      	orrs	r3, r1
 80031f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d137      	bne.n	8003270 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3f      	ldr	r2, [pc, #252]	; (8003308 <HAL_ADC_Init+0x404>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d116      	bne.n	800323e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	4b3d      	ldr	r3, [pc, #244]	; (800330c <HAL_ADC_Init+0x408>)
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003228:	4311      	orrs	r1, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800322e:	430a      	orrs	r2, r1
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	611a      	str	r2, [r3, #16]
 800323c:	e020      	b.n	8003280 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_ADC_Init+0x40c>)
 8003246:	4013      	ands	r3, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800324c:	3a01      	subs	r2, #1
 800324e:	0411      	lsls	r1, r2, #16
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003254:	4311      	orrs	r1, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003260:	430a      	orrs	r2, r1
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	611a      	str	r2, [r3, #16]
 800326e:	e007      	b.n	8003280 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_ADC_Init+0x404>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d002      	beq.n	80032a6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 ff25 	bl	80040f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10c      	bne.n	80032c8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	f023 010f 	bic.w	r1, r3, #15
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	1e5a      	subs	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
 80032c6:	e007      	b.n	80032d8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 020f 	bic.w	r2, r2, #15
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032dc:	f023 0303 	bic.w	r3, r3, #3
 80032e0:	f043 0201 	orr.w	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	661a      	str	r2, [r3, #96]	; 0x60
 80032e8:	e007      	b.n	80032fa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ee:	f043 0210 	orr.w	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3724      	adds	r7, #36	; 0x24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	ffffbffc 	.word	0xffffbffc
 8003308:	58026000 	.word	0x58026000
 800330c:	fc00f81f 	.word	0xfc00f81f
 8003310:	fc00f81e 	.word	0xfc00f81e

08003314 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <HAL_ADC_Start+0x180>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_ADC_Start+0x1c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a5b      	ldr	r2, [pc, #364]	; (8003498 <HAL_ADC_Start+0x184>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_ADC_Start+0x20>
 8003330:	4b5a      	ldr	r3, [pc, #360]	; (800349c <HAL_ADC_Start+0x188>)
 8003332:	e000      	b.n	8003336 <HAL_ADC_Start+0x22>
 8003334:	4b5a      	ldr	r3, [pc, #360]	; (80034a0 <HAL_ADC_Start+0x18c>)
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fd00 	bl	8002d3c <LL_ADC_GetMultimode>
 800333c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fdb8 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 809a 	bne.w	8003484 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADC_Start+0x4a>
 800335a:	2302      	movs	r3, #2
 800335c:	e095      	b.n	800348a <HAL_ADC_Start+0x176>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fdd8 	bl	8003f1c <ADC_Enable>
 800336c:	4603      	mov	r3, r0
 800336e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 8081 	bne.w	800347a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800337c:	4b49      	ldr	r3, [pc, #292]	; (80034a4 <HAL_ADC_Start+0x190>)
 800337e:	4013      	ands	r3, r2
 8003380:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a42      	ldr	r2, [pc, #264]	; (8003498 <HAL_ADC_Start+0x184>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d002      	beq.n	8003398 <HAL_ADC_Start+0x84>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	e000      	b.n	800339a <HAL_ADC_Start+0x86>
 8003398:	4b3e      	ldr	r3, [pc, #248]	; (8003494 <HAL_ADC_Start+0x180>)
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	4293      	cmp	r3, r2
 80033a0:	d002      	beq.n	80033a8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c0:	d106      	bne.n	80033d0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c6:	f023 0206 	bic.w	r2, r3, #6
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	665a      	str	r2, [r3, #100]	; 0x64
 80033ce:	e002      	b.n	80033d6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	221c      	movs	r2, #28
 80033dc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2b      	ldr	r2, [pc, #172]	; (8003498 <HAL_ADC_Start+0x184>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d002      	beq.n	80033f6 <HAL_ADC_Start+0xe2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_Start+0xe4>
 80033f6:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_ADC_Start+0x180>)
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d008      	beq.n	8003412 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b05      	cmp	r3, #5
 800340a:	d002      	beq.n	8003412 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b09      	cmp	r3, #9
 8003410:	d114      	bne.n	800343c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003424:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003428:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fd2b 	bl	8002e90 <LL_ADC_REG_StartConversion>
 800343a:	e025      	b.n	8003488 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a12      	ldr	r2, [pc, #72]	; (8003498 <HAL_ADC_Start+0x184>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d002      	beq.n	8003458 <HAL_ADC_Start+0x144>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	e000      	b.n	800345a <HAL_ADC_Start+0x146>
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_ADC_Start+0x180>)
 800345a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00f      	beq.n	8003488 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003470:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	661a      	str	r2, [r3, #96]	; 0x60
 8003478:	e006      	b.n	8003488 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003482:	e001      	b.n	8003488 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003484:	2302      	movs	r3, #2
 8003486:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003488:	7dfb      	ldrb	r3, [r7, #23]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40022000 	.word	0x40022000
 8003498:	40022100 	.word	0x40022100
 800349c:	40022300 	.word	0x40022300
 80034a0:	58026300 	.word	0x58026300
 80034a4:	fffff0fe 	.word	0xfffff0fe

080034a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b0b9      	sub	sp, #228	; 0xe4
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034de:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4ab3      	ldr	r2, [pc, #716]	; (80037b4 <HAL_ADC_ConfigChannel+0x2f0>)
 80034e6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x34>
 80034f2:	2302      	movs	r3, #2
 80034f4:	f000 bcfa 	b.w	8003eec <HAL_ADC_ConfigChannel+0xa28>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fcd7 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 84de 	bne.w	8003ece <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4aa8      	ldr	r2, [pc, #672]	; (80037b8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d033      	beq.n	8003584 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <HAL_ADC_ConfigChannel+0x76>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2201      	movs	r2, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	e01d      	b.n	8003576 <HAL_ADC_ConfigChannel+0xb2>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800354e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800355e:	2320      	movs	r3, #32
 8003560:	e004      	b.n	800356c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	2201      	movs	r2, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	69d1      	ldr	r1, [r2, #28]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	430b      	orrs	r3, r1
 8003582:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	f7ff fb3b 	bl	8002c0c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fc8c 	bl	8002eb8 <LL_ADC_REG_IsConversionOngoing>
 80035a0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fc98 	bl	8002ede <LL_ADC_INJ_IsConversionOngoing>
 80035ae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f040 8270 	bne.w	8003a9c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 826b 	bne.w	8003a9c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f7ff fb46 	bl	8002c64 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a76      	ldr	r2, [pc, #472]	; (80037b8 <HAL_ADC_ConfigChannel+0x2f4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d10d      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	08db      	lsrs	r3, r3, #3
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035fc:	e032      	b.n	8003664 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035fe:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <HAL_ADC_ConfigChannel+0x2f8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360a:	d10b      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x160>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	e01d      	b.n	8003660 <HAL_ADC_ConfigChannel+0x19c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_ADC_ConfigChannel+0x186>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	089b      	lsrs	r3, r3, #2
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	e00a      	b.n	8003660 <HAL_ADC_ConfigChannel+0x19c>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d048      	beq.n	80036fe <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6919      	ldr	r1, [r3, #16]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800367c:	f7ff f9d4 	bl	8002a28 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a4c      	ldr	r2, [pc, #304]	; (80037b8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d119      	bne.n	80036be <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6919      	ldr	r1, [r3, #16]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	461a      	mov	r2, r3
 8003698:	f7ff fa6c 	bl	8002b74 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6919      	ldr	r1, [r3, #16]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d102      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x1f0>
 80036ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b2:	e000      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x1f2>
 80036b4:	2300      	movs	r3, #0
 80036b6:	461a      	mov	r2, r3
 80036b8:	f7ff fa3a 	bl	8002b30 <LL_ADC_SetOffsetSaturation>
 80036bc:	e1ee      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6919      	ldr	r1, [r3, #16]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d102      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x212>
 80036d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80036d4:	e000      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x214>
 80036d6:	2300      	movs	r3, #0
 80036d8:	461a      	mov	r2, r3
 80036da:	f7ff fa07 	bl	8002aec <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6919      	ldr	r1, [r3, #16]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	7e1b      	ldrb	r3, [r3, #24]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x230>
 80036ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036f2:	e000      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x232>
 80036f4:	2300      	movs	r3, #0
 80036f6:	461a      	mov	r2, r3
 80036f8:	f7ff f9de 	bl	8002ab8 <LL_ADC_SetDataRightShift>
 80036fc:	e1ce      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2d      	ldr	r2, [pc, #180]	; (80037b8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	f040 8181 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff f9bb 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x272>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f9b0 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	0e9b      	lsrs	r3, r3, #26
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	e01e      	b.n	8003774 <HAL_ADC_ConfigChannel+0x2b0>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff f9a5 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 8003742:	4603      	mov	r3, r0
 8003744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800375c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003764:	2320      	movs	r3, #32
 8003766:	e004      	b.n	8003772 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003768:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800377c:	2b00      	cmp	r3, #0
 800377e:	d105      	bne.n	800378c <HAL_ADC_ConfigChannel+0x2c8>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0e9b      	lsrs	r3, r3, #26
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	e01e      	b.n	80037ca <HAL_ADC_ConfigChannel+0x306>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80037a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80037a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d107      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80037b0:	2320      	movs	r3, #32
 80037b2:	e00a      	b.n	80037ca <HAL_ADC_ConfigChannel+0x306>
 80037b4:	47ff0000 	.word	0x47ff0000
 80037b8:	58026000 	.word	0x58026000
 80037bc:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 80037c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d106      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f9ee 	bl	8002bb8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2101      	movs	r1, #1
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f952 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x344>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f947 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	0e9b      	lsrs	r3, r3, #26
 8003802:	f003 021f 	and.w	r2, r3, #31
 8003806:	e01e      	b.n	8003846 <HAL_ADC_ConfigChannel+0x382>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f93c 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 8003814:	4603      	mov	r3, r0
 8003816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800381e:	fa93 f3a3 	rbit	r3, r3
 8003822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003826:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800382a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800382e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003836:	2320      	movs	r3, #32
 8003838:	e004      	b.n	8003844 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800383a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <HAL_ADC_ConfigChannel+0x39a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	0e9b      	lsrs	r3, r3, #26
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	e018      	b.n	8003890 <HAL_ADC_ConfigChannel+0x3cc>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003872:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003876:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800387a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003882:	2320      	movs	r3, #32
 8003884:	e004      	b.n	8003890 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	429a      	cmp	r2, r3
 8003892:	d106      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2200      	movs	r2, #0
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff f98b 	bl	8002bb8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f8ef 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x40a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2102      	movs	r1, #2
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f8e4 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	0e9b      	lsrs	r3, r3, #26
 80038c8:	f003 021f 	and.w	r2, r3, #31
 80038cc:	e01e      	b.n	800390c <HAL_ADC_ConfigChannel+0x448>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2102      	movs	r1, #2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff f8d9 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 80038da:	4603      	mov	r3, r0
 80038dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038e4:	fa93 f3a3 	rbit	r3, r3
 80038e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80038ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80038f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80038fc:	2320      	movs	r3, #32
 80038fe:	e004      	b.n	800390a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003904:	fab3 f383 	clz	r3, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x460>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	e014      	b.n	800394e <HAL_ADC_ConfigChannel+0x48a>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003940:	2320      	movs	r3, #32
 8003942:	e004      	b.n	800394e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	429a      	cmp	r2, r3
 8003950:	d106      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	2102      	movs	r1, #2
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f92c 	bl	8002bb8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2103      	movs	r1, #3
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f890 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <HAL_ADC_ConfigChannel+0x4c8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2103      	movs	r1, #3
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f885 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	0e9b      	lsrs	r3, r3, #26
 8003986:	f003 021f 	and.w	r2, r3, #31
 800398a:	e017      	b.n	80039bc <HAL_ADC_ConfigChannel+0x4f8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2103      	movs	r1, #3
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff f87a 	bl	8002a8c <LL_ADC_GetOffsetChannel>
 8003998:	4603      	mov	r3, r0
 800399a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80039a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80039ae:	2320      	movs	r3, #32
 80039b0:	e003      	b.n	80039ba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80039b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x510>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	0e9b      	lsrs	r3, r3, #26
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	e011      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x534>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80039e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039e4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80039e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	e003      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80039f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d14f      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2103      	movs	r1, #3
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff f8d7 	bl	8002bb8 <LL_ADC_SetOffsetState>
 8003a0a:	e047      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	069b      	lsls	r3, r3, #26
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d107      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	069b      	lsls	r3, r3, #26
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d107      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a52:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	069b      	lsls	r3, r3, #26
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d107      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a76:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	069b      	lsls	r3, r3, #26
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d107      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a9a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff f9cf 	bl	8002e44 <LL_ADC_IsEnabled>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f040 8219 	bne.w	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f7ff f8fe 	bl	8002cbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4aa1      	ldr	r2, [pc, #644]	; (8003d4c <HAL_ADC_ConfigChannel+0x888>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	f040 812e 	bne.w	8003d28 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x630>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2b09      	cmp	r3, #9
 8003aea:	bf94      	ite	ls
 8003aec:	2301      	movls	r3, #1
 8003aee:	2300      	movhi	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e019      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x664>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	e003      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	2b09      	cmp	r3, #9
 8003b20:	bf94      	ite	ls
 8003b22:	2301      	movls	r3, #1
 8003b24:	2300      	movhi	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d079      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d107      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x684>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0e9b      	lsrs	r3, r3, #26
 8003b3e:	3301      	adds	r3, #1
 8003b40:	069b      	lsls	r3, r3, #26
 8003b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b46:	e015      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x6b0>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b58:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003b60:	2320      	movs	r3, #32
 8003b62:	e003      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	069b      	lsls	r3, r3, #26
 8003b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x6d0>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	0e9b      	lsrs	r3, r3, #26
 8003b86:	3301      	adds	r3, #1
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	e017      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x700>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003bac:	2320      	movs	r3, #32
 8003bae:	e003      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	3301      	adds	r3, #1
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	ea42 0103 	orr.w	r1, r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x726>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0e9b      	lsrs	r3, r3, #26
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f003 021f 	and.w	r2, r3, #31
 8003be0:	4613      	mov	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	051b      	lsls	r3, r3, #20
 8003be8:	e018      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x758>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003c02:	2320      	movs	r3, #32
 8003c04:	e003      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	e07e      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x778>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	0e9b      	lsrs	r3, r3, #26
 8003c32:	3301      	adds	r3, #1
 8003c34:	069b      	lsls	r3, r3, #26
 8003c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c3a:	e015      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x7a4>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003c54:	2320      	movs	r3, #32
 8003c56:	e003      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	3301      	adds	r3, #1
 8003c62:	069b      	lsls	r3, r3, #26
 8003c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x7c4>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0e9b      	lsrs	r3, r3, #26
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	e017      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x7f4>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	61bb      	str	r3, [r7, #24]
  return result;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	e003      	b.n	8003cac <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	ea42 0103 	orr.w	r1, r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x820>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0e9b      	lsrs	r3, r3, #26
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f003 021f 	and.w	r2, r3, #31
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	3b1e      	subs	r3, #30
 8003cdc:	051b      	lsls	r3, r3, #20
 8003cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	e01b      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x858>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	60fb      	str	r3, [r7, #12]
  return result;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003cfc:	2320      	movs	r3, #32
 8003cfe:	e003      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f003 021f 	and.w	r2, r3, #31
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	3b1e      	subs	r3, #30
 8003d16:	051b      	lsls	r3, r3, #20
 8003d18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	6892      	ldr	r2, [r2, #8]
 8003d22:	4619      	mov	r1, r3
 8003d24:	f7fe ff9e 	bl	8002c64 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f280 80d7 	bge.w	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a06      	ldr	r2, [pc, #24]	; (8003d50 <HAL_ADC_ConfigChannel+0x88c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_ADC_ConfigChannel+0x882>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_ADC_ConfigChannel+0x890>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10a      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x898>
 8003d46:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <HAL_ADC_ConfigChannel+0x894>)
 8003d48:	e009      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x89a>
 8003d4a:	bf00      	nop
 8003d4c:	47ff0000 	.word	0x47ff0000
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40022100 	.word	0x40022100
 8003d58:	40022300 	.word	0x40022300
 8003d5c:	4b65      	ldr	r3, [pc, #404]	; (8003ef4 <HAL_ADC_ConfigChannel+0xa30>)
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fe54 	bl	8002a0c <LL_ADC_GetCommonPathInternalCh>
 8003d64:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a62      	ldr	r2, [pc, #392]	; (8003ef8 <HAL_ADC_ConfigChannel+0xa34>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x8b8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a61      	ldr	r2, [pc, #388]	; (8003efc <HAL_ADC_ConfigChannel+0xa38>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10e      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x8d6>
 8003d7c:	485e      	ldr	r0, [pc, #376]	; (8003ef8 <HAL_ADC_ConfigChannel+0xa34>)
 8003d7e:	f7ff f861 	bl	8002e44 <LL_ADC_IsEnabled>
 8003d82:	4604      	mov	r4, r0
 8003d84:	485d      	ldr	r0, [pc, #372]	; (8003efc <HAL_ADC_ConfigChannel+0xa38>)
 8003d86:	f7ff f85d 	bl	8002e44 <LL_ADC_IsEnabled>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4323      	orrs	r3, r4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e008      	b.n	8003dac <HAL_ADC_ConfigChannel+0x8e8>
 8003d9a:	4859      	ldr	r0, [pc, #356]	; (8003f00 <HAL_ADC_ConfigChannel+0xa3c>)
 8003d9c:	f7ff f852 	bl	8002e44 <LL_ADC_IsEnabled>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8084 	beq.w	8003eba <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a53      	ldr	r2, [pc, #332]	; (8003f04 <HAL_ADC_ConfigChannel+0xa40>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d132      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x95e>
 8003dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d12c      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a4c      	ldr	r2, [pc, #304]	; (8003f00 <HAL_ADC_ConfigChannel+0xa3c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	f040 8086 	bne.w	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a47      	ldr	r2, [pc, #284]	; (8003ef8 <HAL_ADC_ConfigChannel+0xa34>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_ADC_ConfigChannel+0x924>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a46      	ldr	r2, [pc, #280]	; (8003efc <HAL_ADC_ConfigChannel+0xa38>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x928>
 8003de8:	4a47      	ldr	r2, [pc, #284]	; (8003f08 <HAL_ADC_ConfigChannel+0xa44>)
 8003dea:	e000      	b.n	8003dee <HAL_ADC_ConfigChannel+0x92a>
 8003dec:	4a41      	ldr	r2, [pc, #260]	; (8003ef4 <HAL_ADC_ConfigChannel+0xa30>)
 8003dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f7fe fdf4 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dfe:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_ADC_ConfigChannel+0xa48>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	4a42      	ldr	r2, [pc, #264]	; (8003f10 <HAL_ADC_ConfigChannel+0xa4c>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	099b      	lsrs	r3, r3, #6
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e12:	e002      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f9      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e20:	e05e      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a3b      	ldr	r2, [pc, #236]	; (8003f14 <HAL_ADC_ConfigChannel+0xa50>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d120      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x9aa>
 8003e2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11a      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a30      	ldr	r2, [pc, #192]	; (8003f00 <HAL_ADC_ConfigChannel+0xa3c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d14e      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2c      	ldr	r2, [pc, #176]	; (8003ef8 <HAL_ADC_ConfigChannel+0xa34>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_ADC_ConfigChannel+0x992>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a2a      	ldr	r2, [pc, #168]	; (8003efc <HAL_ADC_ConfigChannel+0xa38>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x996>
 8003e56:	4a2c      	ldr	r2, [pc, #176]	; (8003f08 <HAL_ADC_ConfigChannel+0xa44>)
 8003e58:	e000      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x998>
 8003e5a:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <HAL_ADC_ConfigChannel+0xa30>)
 8003e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f7fe fdbd 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e6c:	e038      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <HAL_ADC_ConfigChannel+0xa54>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d133      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
 8003e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d12d      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <HAL_ADC_ConfigChannel+0xa3c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d128      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <HAL_ADC_ConfigChannel+0xa34>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_ADC_ConfigChannel+0x9de>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a17      	ldr	r2, [pc, #92]	; (8003efc <HAL_ADC_ConfigChannel+0xa38>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x9e2>
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_ADC_ConfigChannel+0xa44>)
 8003ea4:	e000      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x9e4>
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <HAL_ADC_ConfigChannel+0xa30>)
 8003ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fe fd97 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
 8003eb8:	e012      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003ecc:	e008      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003ee8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	37e4      	adds	r7, #228	; 0xe4
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd90      	pop	{r4, r7, pc}
 8003ef4:	58026300 	.word	0x58026300
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	40022100 	.word	0x40022100
 8003f00:	58026000 	.word	0x58026000
 8003f04:	c7520000 	.word	0xc7520000
 8003f08:	40022300 	.word	0x40022300
 8003f0c:	240005ac 	.word	0x240005ac
 8003f10:	053e2d63 	.word	0x053e2d63
 8003f14:	c3210000 	.word	0xc3210000
 8003f18:	cb840000 	.word	0xcb840000

08003f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe ff8b 	bl	8002e44 <LL_ADC_IsEnabled>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d16e      	bne.n	8004012 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	4b38      	ldr	r3, [pc, #224]	; (800401c <ADC_Enable+0x100>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f46:	f043 0210 	orr.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e05a      	b.n	8004014 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe ff46 	bl	8002df4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f68:	f7fe fd08 	bl	800297c <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2b      	ldr	r2, [pc, #172]	; (8004020 <ADC_Enable+0x104>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <ADC_Enable+0x66>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a29      	ldr	r2, [pc, #164]	; (8004024 <ADC_Enable+0x108>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d101      	bne.n	8003f86 <ADC_Enable+0x6a>
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <ADC_Enable+0x10c>)
 8003f84:	e000      	b.n	8003f88 <ADC_Enable+0x6c>
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <ADC_Enable+0x110>)
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe fed7 	bl	8002d3c <LL_ADC_GetMultimode>
 8003f8e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <ADC_Enable+0x108>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d002      	beq.n	8003fa0 <ADC_Enable+0x84>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	e000      	b.n	8003fa2 <ADC_Enable+0x86>
 8003fa0:	4b1f      	ldr	r3, [pc, #124]	; (8004020 <ADC_Enable+0x104>)
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d02c      	beq.n	8004004 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d130      	bne.n	8004012 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fb0:	e028      	b.n	8004004 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe ff44 	bl	8002e44 <LL_ADC_IsEnabled>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe ff14 	bl	8002df4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fcc:	f7fe fcd6 	bl	800297c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d914      	bls.n	8004004 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d00d      	beq.n	8004004 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fec:	f043 0210 	orr.w	r2, r3, #16
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e007      	b.n	8004014 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b01      	cmp	r3, #1
 8004010:	d1cf      	bne.n	8003fb2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	8000003f 	.word	0x8000003f
 8004020:	40022000 	.word	0x40022000
 8004024:	40022100 	.word	0x40022100
 8004028:	40022300 	.word	0x40022300
 800402c:	58026300 	.word	0x58026300

08004030 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe ff14 	bl	8002e6a <LL_ADC_IsDisableOngoing>
 8004042:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fefb 	bl	8002e44 <LL_ADC_IsEnabled>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d047      	beq.n	80040e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d144      	bne.n	80040e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 030d 	and.w	r3, r3, #13
 8004064:	2b01      	cmp	r3, #1
 8004066:	d10c      	bne.n	8004082 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fed5 	bl	8002e1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2203      	movs	r2, #3
 8004078:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800407a:	f7fe fc7f 	bl	800297c <HAL_GetTick>
 800407e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004080:	e029      	b.n	80040d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004086:	f043 0210 	orr.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e023      	b.n	80040e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800409e:	f7fe fc6d 	bl	800297c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d914      	bls.n	80040d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	f043 0210 	orr.w	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ca:	f043 0201 	orr.w	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e007      	b.n	80040e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1dc      	bne.n	800409e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a6b      	ldr	r2, [pc, #428]	; (80042ac <ADC_ConfigureBoostMode+0x1bc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <ADC_ConfigureBoostMode+0x1c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6a      	ldr	r2, [pc, #424]	; (80042b0 <ADC_ConfigureBoostMode+0x1c0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d109      	bne.n	8004120 <ADC_ConfigureBoostMode+0x30>
 800410c:	4b69      	ldr	r3, [pc, #420]	; (80042b4 <ADC_ConfigureBoostMode+0x1c4>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e008      	b.n	8004132 <ADC_ConfigureBoostMode+0x42>
 8004120:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <ADC_ConfigureBoostMode+0x1c8>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01c      	beq.n	8004170 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004136:	f002 fc47 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 800413a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004144:	d010      	beq.n	8004168 <ADC_ConfigureBoostMode+0x78>
 8004146:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800414a:	d871      	bhi.n	8004230 <ADC_ConfigureBoostMode+0x140>
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d002      	beq.n	8004158 <ADC_ConfigureBoostMode+0x68>
 8004152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004156:	d16b      	bne.n	8004230 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	60fb      	str	r3, [r7, #12]
        break;
 8004166:	e066      	b.n	8004236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	60fb      	str	r3, [r7, #12]
        break;
 800416e:	e062      	b.n	8004236 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004170:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004174:	f003 fbc0 	bl	80078f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004178:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004182:	d051      	beq.n	8004228 <ADC_ConfigureBoostMode+0x138>
 8004184:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004188:	d854      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 800418a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800418e:	d047      	beq.n	8004220 <ADC_ConfigureBoostMode+0x130>
 8004190:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004194:	d84e      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 8004196:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800419a:	d03d      	beq.n	8004218 <ADC_ConfigureBoostMode+0x128>
 800419c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80041a0:	d848      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 80041a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a6:	d033      	beq.n	8004210 <ADC_ConfigureBoostMode+0x120>
 80041a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ac:	d842      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 80041ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80041b2:	d029      	beq.n	8004208 <ADC_ConfigureBoostMode+0x118>
 80041b4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80041b8:	d83c      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 80041ba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80041be:	d01a      	beq.n	80041f6 <ADC_ConfigureBoostMode+0x106>
 80041c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80041c4:	d836      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 80041c6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041ca:	d014      	beq.n	80041f6 <ADC_ConfigureBoostMode+0x106>
 80041cc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041d0:	d830      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 80041d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d6:	d00e      	beq.n	80041f6 <ADC_ConfigureBoostMode+0x106>
 80041d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041dc:	d82a      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 80041de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041e2:	d008      	beq.n	80041f6 <ADC_ConfigureBoostMode+0x106>
 80041e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041e8:	d824      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 80041ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041ee:	d002      	beq.n	80041f6 <ADC_ConfigureBoostMode+0x106>
 80041f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041f4:	d11e      	bne.n	8004234 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	0c9b      	lsrs	r3, r3, #18
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	60fb      	str	r3, [r7, #12]
        break;
 8004206:	e016      	b.n	8004236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	60fb      	str	r3, [r7, #12]
        break;
 800420e:	e012      	b.n	8004236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	60fb      	str	r3, [r7, #12]
        break;
 8004216:	e00e      	b.n	8004236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	60fb      	str	r3, [r7, #12]
        break;
 800421e:	e00a      	b.n	8004236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	09db      	lsrs	r3, r3, #7
 8004224:	60fb      	str	r3, [r7, #12]
        break;
 8004226:	e006      	b.n	8004236 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	60fb      	str	r3, [r7, #12]
        break;
 800422e:	e002      	b.n	8004236 <ADC_ConfigureBoostMode+0x146>
        break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004234:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <ADC_ConfigureBoostMode+0x1cc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d808      	bhi.n	8004256 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004252:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004254:	e025      	b.n	80042a2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <ADC_ConfigureBoostMode+0x1d0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d80a      	bhi.n	8004274 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004270:	609a      	str	r2, [r3, #8]
}
 8004272:	e016      	b.n	80042a2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <ADC_ConfigureBoostMode+0x1d4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d80a      	bhi.n	8004292 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	e007      	b.n	80042a2 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80042a0:	609a      	str	r2, [r3, #8]
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40022000 	.word	0x40022000
 80042b0:	40022100 	.word	0x40022100
 80042b4:	40022300 	.word	0x40022300
 80042b8:	58026300 	.word	0x58026300
 80042bc:	005f5e10 	.word	0x005f5e10
 80042c0:	00bebc20 	.word	0x00bebc20
 80042c4:	017d7840 	.word	0x017d7840

080042c8 <LL_ADC_IsEnabled>:
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <LL_ADC_IsEnabled+0x18>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <LL_ADC_IsEnabled+0x1a>
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <LL_ADC_StartCalibration>:
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <LL_ADC_StartCalibration+0x38>)
 8004302:	4013      	ands	r3, r2
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004310:	430a      	orrs	r2, r1
 8004312:	4313      	orrs	r3, r2
 8004314:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	609a      	str	r2, [r3, #8]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	3ffeffc0 	.word	0x3ffeffc0

0800432c <LL_ADC_IsCalibrationOnGoing>:
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800433c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004340:	d101      	bne.n	8004346 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_ADC_REG_IsConversionOngoing>:
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d101      	bne.n	800436c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_ADCEx_Calibration_Start+0x1e>
 8004396:	2302      	movs	r3, #2
 8004398:	e04c      	b.n	8004434 <HAL_ADCEx_Calibration_Start+0xb8>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff fe44 	bl	8004030 <ADC_Disable>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d135      	bne.n	800441e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043b6:	4b21      	ldr	r3, [pc, #132]	; (800443c <HAL_ADCEx_Calibration_Start+0xc0>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	f043 0202 	orr.w	r2, r3, #2
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ff90 	bl	80042f0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043d0:	e014      	b.n	80043fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3301      	adds	r3, #1
 80043d6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_ADCEx_Calibration_Start+0xc4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d30d      	bcc.n	80043fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	f023 0312 	bic.w	r3, r3, #18
 80043e8:	f043 0210 	orr.w	r2, r3, #16
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e01b      	b.n	8004434 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff93 	bl	800432c <LL_ADC_IsCalibrationOnGoing>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e2      	bne.n	80043d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004410:	f023 0303 	bic.w	r3, r3, #3
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	661a      	str	r2, [r3, #96]	; 0x60
 800441c:	e005      	b.n	800442a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004432:	7dfb      	ldrb	r3, [r7, #23]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	ffffeefd 	.word	0xffffeefd
 8004440:	25c3f800 	.word	0x25c3f800

08004444 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b0a3      	sub	sp, #140	; 0x8c
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800445e:	2302      	movs	r3, #2
 8004460:	e0c1      	b.n	80045e6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800446e:	2300      	movs	r3, #0
 8004470:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a5e      	ldr	r2, [pc, #376]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d102      	bne.n	8004482 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800447c:	4b5d      	ldr	r3, [pc, #372]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e001      	b.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0a0      	b.n	80045e6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff ff54 	bl	8004354 <LL_ADC_REG_IsConversionOngoing>
 80044ac:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff ff4d 	bl	8004354 <LL_ADC_REG_IsConversionOngoing>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 8081 	bne.w	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d17c      	bne.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a48      	ldr	r2, [pc, #288]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d101      	bne.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80044de:	4b46      	ldr	r3, [pc, #280]	; (80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80044e0:	e000      	b.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80044e2:	4b46      	ldr	r3, [pc, #280]	; (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044e4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d039      	beq.n	8004562 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80044ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3a      	ldr	r2, [pc, #232]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a39      	ldr	r2, [pc, #228]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d10e      	bne.n	8004532 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004514:	4836      	ldr	r0, [pc, #216]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004516:	f7ff fed7 	bl	80042c8 <LL_ADC_IsEnabled>
 800451a:	4604      	mov	r4, r0
 800451c:	4835      	ldr	r0, [pc, #212]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800451e:	f7ff fed3 	bl	80042c8 <LL_ADC_IsEnabled>
 8004522:	4603      	mov	r3, r0
 8004524:	4323      	orrs	r3, r4
 8004526:	2b00      	cmp	r3, #0
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	e008      	b.n	8004544 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004532:	4833      	ldr	r0, [pc, #204]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004534:	f7ff fec8 	bl	80042c8 <LL_ADC_IsEnabled>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d047      	beq.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800454e:	4013      	ands	r3, r2
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	6811      	ldr	r1, [r2, #0]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	6892      	ldr	r2, [r2, #8]
 8004558:	430a      	orrs	r2, r1
 800455a:	431a      	orrs	r2, r3
 800455c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800455e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004560:	e03a      	b.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004562:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800456a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800456c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d004      	beq.n	8004582 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d10e      	bne.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004582:	481b      	ldr	r0, [pc, #108]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004584:	f7ff fea0 	bl	80042c8 <LL_ADC_IsEnabled>
 8004588:	4604      	mov	r4, r0
 800458a:	481a      	ldr	r0, [pc, #104]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800458c:	f7ff fe9c 	bl	80042c8 <LL_ADC_IsEnabled>
 8004590:	4603      	mov	r3, r0
 8004592:	4323      	orrs	r3, r4
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e008      	b.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80045a0:	4817      	ldr	r0, [pc, #92]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80045a2:	f7ff fe91 	bl	80042c8 <LL_ADC_IsEnabled>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d010      	beq.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80045bc:	4013      	ands	r3, r2
 80045be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80045c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045c2:	e009      	b.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80045d6:	e000      	b.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80045e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	378c      	adds	r7, #140	; 0x8c
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd90      	pop	{r4, r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40022000 	.word	0x40022000
 80045f4:	40022100 	.word	0x40022100
 80045f8:	40022300 	.word	0x40022300
 80045fc:	58026300 	.word	0x58026300
 8004600:	58026000 	.word	0x58026000
 8004604:	fffff0e0 	.word	0xfffff0e0

08004608 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e023      	b.n	8004662 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd fb5e 	bl	8001cf0 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <__NVIC_SetPriorityGrouping>:
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <__NVIC_SetPriorityGrouping+0x40>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004688:	4013      	ands	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004696:	4313      	orrs	r3, r2
 8004698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469a:	4a04      	ldr	r2, [pc, #16]	; (80046ac <__NVIC_SetPriorityGrouping+0x40>)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	60d3      	str	r3, [r2, #12]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000ed00 	.word	0xe000ed00
 80046b0:	05fa0000 	.word	0x05fa0000

080046b4 <__NVIC_GetPriorityGrouping>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <__NVIC_GetPriorityGrouping+0x18>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	f003 0307 	and.w	r3, r3, #7
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <__NVIC_EnableIRQ>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db0b      	blt.n	80046fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	f003 021f 	and.w	r2, r3, #31
 80046e8:	4907      	ldr	r1, [pc, #28]	; (8004708 <__NVIC_EnableIRQ+0x38>)
 80046ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2001      	movs	r0, #1
 80046f2:	fa00 f202 	lsl.w	r2, r0, r2
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	e000e100 	.word	0xe000e100

0800470c <__NVIC_SetPriority>:
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	6039      	str	r1, [r7, #0]
 8004716:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800471c:	2b00      	cmp	r3, #0
 800471e:	db0a      	blt.n	8004736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	b2da      	uxtb	r2, r3
 8004724:	490c      	ldr	r1, [pc, #48]	; (8004758 <__NVIC_SetPriority+0x4c>)
 8004726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800472a:	0112      	lsls	r2, r2, #4
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	440b      	add	r3, r1
 8004730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004734:	e00a      	b.n	800474c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	4908      	ldr	r1, [pc, #32]	; (800475c <__NVIC_SetPriority+0x50>)
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	3b04      	subs	r3, #4
 8004744:	0112      	lsls	r2, r2, #4
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	440b      	add	r3, r1
 800474a:	761a      	strb	r2, [r3, #24]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	e000e100 	.word	0xe000e100
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <NVIC_EncodePriority>:
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	; 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f1c3 0307 	rsb	r3, r3, #7
 800477a:	2b04      	cmp	r3, #4
 800477c:	bf28      	it	cs
 800477e:	2304      	movcs	r3, #4
 8004780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3304      	adds	r3, #4
 8004786:	2b06      	cmp	r3, #6
 8004788:	d902      	bls.n	8004790 <NVIC_EncodePriority+0x30>
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	3b03      	subs	r3, #3
 800478e:	e000      	b.n	8004792 <NVIC_EncodePriority+0x32>
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	401a      	ands	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a8:	f04f 31ff 	mov.w	r1, #4294967295
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	43d9      	mvns	r1, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b8:	4313      	orrs	r3, r2
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff ff4c 	bl	800466c <__NVIC_SetPriorityGrouping>
}
 80047d4:	bf00      	nop
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047ea:	f7ff ff63 	bl	80046b4 <__NVIC_GetPriorityGrouping>
 80047ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	6978      	ldr	r0, [r7, #20]
 80047f6:	f7ff ffb3 	bl	8004760 <NVIC_EncodePriority>
 80047fa:	4602      	mov	r2, r0
 80047fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ff82 	bl	800470c <__NVIC_SetPriority>
}
 8004808:	bf00      	nop
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800481a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff56 	bl	80046d0 <__NVIC_EnableIRQ>
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e0b4      	b.n	80049a8 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800483e:	4b5c      	ldr	r3, [pc, #368]	; (80049b0 <HAL_DFSDM_ChannelInit+0x184>)
 8004840:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8004842:	4b5c      	ldr	r3, [pc, #368]	; (80049b4 <HAL_DFSDM_ChannelInit+0x188>)
 8004844:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8004846:	4b5c      	ldr	r3, [pc, #368]	; (80049b8 <HAL_DFSDM_ChannelInit+0x18c>)
 8004848:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fa10 	bl	8004c74 <DFSDM_GetChannelFromInstance>
 8004854:	4603      	mov	r3, r0
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4413      	add	r3, r2
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0a0      	b.n	80049a8 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd fb2a 	bl	8001ec0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d125      	bne.n	80048ca <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	431a      	orrs	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	791b      	ldrb	r3, [r3, #4]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d108      	bne.n	80048be <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80048d8:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80048e8:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80048ee:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 020f 	bic.w	r2, r2, #15
 8004906:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6819      	ldr	r1, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800492e:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f002 0207 	and.w	r2, r2, #7
 800495a:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004986:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f96d 	bl	8004c74 <DFSDM_GetChannelFromInstance>
 800499a:	4603      	mov	r3, r0
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	24000c7c 	.word	0x24000c7c
 80049b4:	24000c80 	.word	0x24000c80
 80049b8:	40017800 	.word	0x40017800

080049bc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0c8      	b.n	8004b60 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 80049ce:	4b66      	ldr	r3, [pc, #408]	; (8004b68 <HAL_DFSDM_FilterInit+0x1ac>)
 80049d0:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d109      	bne.n	80049f0 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d003      	beq.n	80049ec <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0b7      	b.n	8004b60 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fd f993 	bl	8001d34 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004a1c:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	7a1b      	ldrb	r3, [r3, #8]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d108      	bne.n	8004a38 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e007      	b.n	8004a48 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004a46:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	7a5b      	ldrb	r3, [r3, #9]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d108      	bne.n	8004a62 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e007      	b.n	8004a72 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004a70:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6819      	ldr	r1, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_DFSDM_FilterInit+0x1b0>)
 8004a7e:	400b      	ands	r3, r1
 8004a80:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d108      	bne.n	8004a9c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	7c1b      	ldrb	r3, [r3, #16]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d108      	bne.n	8004ab6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0210 	orr.w	r2, r2, #16
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e007      	b.n	8004ac6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0210 	bic.w	r2, r2, #16
 8004ac4:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	7c5b      	ldrb	r3, [r3, #17]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d108      	bne.n	8004ae0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0220 	orr.w	r2, r2, #32
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e007      	b.n	8004af0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0220 	bic.w	r2, r2, #32
 8004aee:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6959      	ldr	r1, [r3, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <HAL_DFSDM_FilterInit+0x1b4>)
 8004afc:	400b      	ands	r3, r1
 8004afe:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6959      	ldr	r1, [r3, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004b12:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004b1a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	7c1a      	ldrb	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40017900 	.word	0x40017900
 8004b6c:	ffff80f7 	.word	0xffff80f7
 8004b70:	1c00ff00 	.word	0x1c00ff00

08004b74 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02c      	beq.n	8004be8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004b94:	2bff      	cmp	r3, #255	; 0xff
 8004b96:	d027      	beq.n	8004be8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8004ba4:	400b      	ands	r3, r1
 8004ba6:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10d      	bne.n	8004bca <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	e00a      	b.n	8004be0 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
 8004be6:	e001      	b.n	8004bec <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	f8fbffff 	.word	0xf8fbffff

08004c00 <HAL_DFSDM_FilterRegularStart>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d004      	beq.n	8004c20 <HAL_DFSDM_FilterRegularStart+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d103      	bne.n	8004c28 <HAL_DFSDM_FilterRegularStart+0x28>
  {
    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f873 	bl	8004d0c <DFSDM_RegConvStart>
 8004c26:	e001      	b.n	8004c2c <HAL_DFSDM_FilterRegularStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0207 	and.w	r2, r3, #7
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c58:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da00      	bge.n	8004c62 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 8004c60:	33ff      	adds	r3, #255	; 0xff
 8004c62:	121b      	asrs	r3, r3, #8
 8004c64:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 8004c66:	68bb      	ldr	r3, [r7, #8]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a1c      	ldr	r2, [pc, #112]	; (8004cf0 <DFSDM_GetChannelFromInstance+0x7c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d102      	bne.n	8004c8a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e02b      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <DFSDM_GetChannelFromInstance+0x80>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d102      	bne.n	8004c98 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004c92:	2301      	movs	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e024      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <DFSDM_GetChannelFromInstance+0x84>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d102      	bne.n	8004ca6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e01d      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <DFSDM_GetChannelFromInstance+0x88>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d102      	bne.n	8004cb4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	e016      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <DFSDM_GetChannelFromInstance+0x8c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d102      	bne.n	8004cc2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e00f      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <DFSDM_GetChannelFromInstance+0x90>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d102      	bne.n	8004cd0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8004cca:	2305      	movs	r3, #5
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e008      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a0d      	ldr	r2, [pc, #52]	; (8004d08 <DFSDM_GetChannelFromInstance+0x94>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d102      	bne.n	8004cde <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8004cd8:	2306      	movs	r3, #6
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e001      	b.n	8004ce2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8004cde:	2307      	movs	r3, #7
 8004ce0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40017800 	.word	0x40017800
 8004cf4:	40017820 	.word	0x40017820
 8004cf8:	40017840 	.word	0x40017840
 8004cfc:	40017860 	.word	0x40017860
 8004d00:	40017880 	.word	0x40017880
 8004d04:	400178a0 	.word	0x400178a0
 8004d08:	400178c0 	.word	0x400178c0

08004d0c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e033      	b.n	8004d96 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004d4c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d116      	bne.n	8004d96 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d107      	bne.n	8004d80 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0202 	orr.w	r2, r2, #2
 8004d7e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <DFSDM_RegConvStart+0x84>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	e000      	b.n	8004d92 <DFSDM_RegConvStart+0x86>
 8004d90:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <DFSDM_RegConvStart+0x98>
 8004da0:	2202      	movs	r2, #2
 8004da2:	e000      	b.n	8004da6 <DFSDM_RegConvStart+0x9a>
 8004da4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b098      	sub	sp, #96	; 0x60
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004dc0:	4a84      	ldr	r2, [pc, #528]	; (8004fd4 <HAL_FDCAN_Init+0x21c>)
 8004dc2:	f107 030c 	add.w	r3, r7, #12
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	224c      	movs	r2, #76	; 0x4c
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f007 f9b4 	bl	800c138 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e1ca      	b.n	8005170 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a7e      	ldr	r2, [pc, #504]	; (8004fd8 <HAL_FDCAN_Init+0x220>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d106      	bne.n	8004df2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004dec:	461a      	mov	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fd f920 	bl	800204c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0210 	bic.w	r2, r2, #16
 8004e1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e1c:	f7fd fdae 	bl	800297c <HAL_GetTick>
 8004e20:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e22:	e014      	b.n	8004e4e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e24:	f7fd fdaa 	bl	800297c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b0a      	cmp	r3, #10
 8004e30:	d90d      	bls.n	8004e4e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e38:	f043 0201 	orr.w	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2203      	movs	r2, #3
 8004e46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e190      	b.n	8005170 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d0e3      	beq.n	8004e24 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e6c:	f7fd fd86 	bl	800297c <HAL_GetTick>
 8004e70:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e72:	e014      	b.n	8004e9e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e74:	f7fd fd82 	bl	800297c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b0a      	cmp	r3, #10
 8004e80:	d90d      	bls.n	8004e9e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e88:	f043 0201 	orr.w	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2203      	movs	r2, #3
 8004e96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e168      	b.n	8005170 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0e3      	beq.n	8004e74 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0202 	orr.w	r2, r2, #2
 8004eba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	7c1b      	ldrb	r3, [r3, #16]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d108      	bne.n	8004ed6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed2:	619a      	str	r2, [r3, #24]
 8004ed4:	e007      	b.n	8004ee6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ee4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7c5b      	ldrb	r3, [r3, #17]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d108      	bne.n	8004f00 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004efc:	619a      	str	r2, [r3, #24]
 8004efe:	e007      	b.n	8004f10 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f0e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	7c9b      	ldrb	r3, [r3, #18]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d108      	bne.n	8004f2a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f26:	619a      	str	r2, [r3, #24]
 8004f28:	e007      	b.n	8004f3a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f38:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004f5e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0210 	bic.w	r2, r2, #16
 8004f6e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d108      	bne.n	8004f8a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0204 	orr.w	r2, r2, #4
 8004f86:	619a      	str	r2, [r3, #24]
 8004f88:	e030      	b.n	8004fec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d02c      	beq.n	8004fec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d020      	beq.n	8004fdc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fa8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0210 	orr.w	r2, r2, #16
 8004fb8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d114      	bne.n	8004fec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0220 	orr.w	r2, r2, #32
 8004fd0:	619a      	str	r2, [r3, #24]
 8004fd2:	e00b      	b.n	8004fec <HAL_FDCAN_Init+0x234>
 8004fd4:	0800c17c 	.word	0x0800c17c
 8004fd8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0220 	orr.w	r2, r2, #32
 8004fea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ffc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005004:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	3b01      	subs	r3, #1
 800500e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005014:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005016:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005020:	d115      	bne.n	800504e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	3b01      	subs	r3, #1
 800502e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005030:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	3b01      	subs	r3, #1
 8005038:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800503a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	3b01      	subs	r3, #1
 8005044:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800504a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800504c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005074:	4413      	add	r3, r2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d012      	beq.n	80050a0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005082:	f023 0107 	bic.w	r1, r3, #7
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005090:	4413      	add	r3, r2
 8005092:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d012      	beq.n	80050ce <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80050b0:	f023 0107 	bic.w	r1, r3, #7
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80050be:	4413      	add	r3, r2
 80050c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d013      	beq.n	80050fe <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80050de:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80050ec:	4413      	add	r3, r2
 80050ee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80050f2:	011a      	lsls	r2, r3, #4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800510e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800511c:	4413      	add	r3, r2
 800511e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005122:	021a      	lsls	r2, r3, #8
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a11      	ldr	r2, [pc, #68]	; (8005178 <HAL_FDCAN_Init+0x3c0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d107      	bne.n	8005148 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f022 0203 	bic.w	r2, r2, #3
 8005146:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f80b 	bl	800517c <FDCAN_CalcultateRamBlockAddresses>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800516c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005170:	4618      	mov	r0, r3
 8005172:	3760      	adds	r7, #96	; 0x60
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	4000a000 	.word	0x4000a000

0800517c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005188:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005192:	4ba7      	ldr	r3, [pc, #668]	; (8005430 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005194:	4013      	ands	r3, r2
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	0091      	lsls	r1, r2, #2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	430b      	orrs	r3, r1
 80051a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ac:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	041a      	lsls	r2, r3, #16
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	4413      	add	r3, r2
 80051c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051d2:	4b97      	ldr	r3, [pc, #604]	; (8005430 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	0091      	lsls	r1, r2, #2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	430b      	orrs	r3, r1
 80051e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ec:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f4:	041a      	lsls	r2, r3, #16
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4413      	add	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005214:	4b86      	ldr	r3, [pc, #536]	; (8005430 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005216:	4013      	ands	r3, r2
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	0091      	lsls	r1, r2, #2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	430b      	orrs	r3, r1
 8005222:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800522e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	041a      	lsls	r2, r3, #16
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800525c:	4b74      	ldr	r3, [pc, #464]	; (8005430 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800525e:	4013      	ands	r3, r2
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	0091      	lsls	r1, r2, #2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	430b      	orrs	r3, r1
 800526a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005276:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	041a      	lsls	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	4413      	add	r3, r2
 800529a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80052a4:	4b62      	ldr	r3, [pc, #392]	; (8005430 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	0091      	lsls	r1, r2, #2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4413      	add	r3, r2
 80052c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80052d0:	4b57      	ldr	r3, [pc, #348]	; (8005430 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	0091      	lsls	r1, r2, #2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	430b      	orrs	r3, r1
 80052de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ea:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f2:	041a      	lsls	r2, r3, #16
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	4413      	add	r3, r2
 8005308:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005312:	4b47      	ldr	r3, [pc, #284]	; (8005430 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005314:	4013      	ands	r3, r2
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	0091      	lsls	r1, r2, #2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	430b      	orrs	r3, r1
 8005320:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800532c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005334:	041a      	lsls	r2, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005348:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005350:	061a      	lsls	r2, r3, #24
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005360:	4b34      	ldr	r3, [pc, #208]	; (8005434 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005362:	4413      	add	r3, r2
 8005364:	009a      	lsls	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	441a      	add	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	441a      	add	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	4a04      	ldr	r2, [pc, #16]	; (8005438 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d915      	bls.n	8005458 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800542c:	e006      	b.n	800543c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800542e:	bf00      	nop
 8005430:	ffff0003 	.word	0xffff0003
 8005434:	10002b00 	.word	0x10002b00
 8005438:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2203      	movs	r2, #3
 8005450:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e010      	b.n	800547a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	e005      	b.n	800546c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3304      	adds	r3, #4
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	429a      	cmp	r2, r3
 8005476:	d3f3      	bcc.n	8005460 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop

08005488 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e031      	b.n	80054fe <HAL_FMAC_Init+0x76>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <HAL_FMAC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmac->Lock = HAL_UNLOCKED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fc fe32 	bl	8002118 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0UL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f84c 	bl	8005558 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f820 	bl	8005506 <FMAC_Reset>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d10c      	bne.n	80054e6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_RESET;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2210      	movs	r2, #16
 80054d0:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	22a0      	movs	r2, #160	; 0xa0
 80054d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hfmac);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e00b      	b.n	80054fe <HAL_FMAC_Init+0x76>
  }

  /* Update FMAC error code and FMAC peripheral state */
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	635a      	str	r2, [r3, #52]	; 0x34
  hfmac->State = HAL_FMAC_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hfmac);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800550e:	f7fd fa35 	bl	800297c <HAL_GetTick>
 8005512:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005522:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 8005524:	e009      	b.n	800553a <FMAC_Reset+0x34>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005526:	f7fd fa29 	bl	800297c <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005534:	d901      	bls.n	800553a <FMAC_Reset+0x34>
    {
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e00a      	b.n	8005550 <FMAC_Reset+0x4a>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ee      	bne.n	8005526 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f807 	bl	8005574 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f81b 	bl	80055a2 <FMAC_ResetOutputStateAndDataPointers>
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b089      	sub	sp, #36	; 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055de:	4b86      	ldr	r3, [pc, #536]	; (80057f8 <HAL_GPIO_Init+0x228>)
 80055e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055e2:	e18c      	b.n	80058fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	2101      	movs	r1, #1
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	fa01 f303 	lsl.w	r3, r1, r3
 80055f0:	4013      	ands	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 817e 	beq.w	80058f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d00b      	beq.n	800561c <HAL_GPIO_Init+0x4c>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d007      	beq.n	800561c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005610:	2b11      	cmp	r3, #17
 8005612:	d003      	beq.n	800561c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b12      	cmp	r3, #18
 800561a:	d130      	bne.n	800567e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	2203      	movs	r2, #3
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	4313      	orrs	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005652:	2201      	movs	r2, #1
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43db      	mvns	r3, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4013      	ands	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 0201 	and.w	r2, r3, #1
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	2203      	movs	r2, #3
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d003      	beq.n	80056be <HAL_GPIO_Init+0xee>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b12      	cmp	r3, #18
 80056bc:	d123      	bne.n	8005706 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	08da      	lsrs	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3208      	adds	r2, #8
 80056c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	220f      	movs	r2, #15
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43db      	mvns	r3, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4013      	ands	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	08da      	lsrs	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3208      	adds	r2, #8
 8005700:	69b9      	ldr	r1, [r7, #24]
 8005702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	2203      	movs	r2, #3
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43db      	mvns	r3, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4013      	ands	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 0203 	and.w	r2, r3, #3
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 80d8 	beq.w	80058f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005748:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <HAL_GPIO_Init+0x22c>)
 800574a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800574e:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <HAL_GPIO_Init+0x22c>)
 8005750:	f043 0302 	orr.w	r3, r3, #2
 8005754:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005758:	4b28      	ldr	r3, [pc, #160]	; (80057fc <HAL_GPIO_Init+0x22c>)
 800575a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005766:	4a26      	ldr	r2, [pc, #152]	; (8005800 <HAL_GPIO_Init+0x230>)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	3302      	adds	r3, #2
 800576e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	220f      	movs	r2, #15
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	43db      	mvns	r3, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4013      	ands	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <HAL_GPIO_Init+0x234>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d04a      	beq.n	8005828 <HAL_GPIO_Init+0x258>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_GPIO_Init+0x238>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d02b      	beq.n	80057f2 <HAL_GPIO_Init+0x222>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_GPIO_Init+0x23c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d025      	beq.n	80057ee <HAL_GPIO_Init+0x21e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1a      	ldr	r2, [pc, #104]	; (8005810 <HAL_GPIO_Init+0x240>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01f      	beq.n	80057ea <HAL_GPIO_Init+0x21a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_GPIO_Init+0x244>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d019      	beq.n	80057e6 <HAL_GPIO_Init+0x216>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_GPIO_Init+0x248>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_GPIO_Init+0x212>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a17      	ldr	r2, [pc, #92]	; (800581c <HAL_GPIO_Init+0x24c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00d      	beq.n	80057de <HAL_GPIO_Init+0x20e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <HAL_GPIO_Init+0x250>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d007      	beq.n	80057da <HAL_GPIO_Init+0x20a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a15      	ldr	r2, [pc, #84]	; (8005824 <HAL_GPIO_Init+0x254>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d101      	bne.n	80057d6 <HAL_GPIO_Init+0x206>
 80057d2:	2309      	movs	r3, #9
 80057d4:	e029      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057d6:	230a      	movs	r3, #10
 80057d8:	e027      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057da:	2307      	movs	r3, #7
 80057dc:	e025      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057de:	2306      	movs	r3, #6
 80057e0:	e023      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057e2:	2305      	movs	r3, #5
 80057e4:	e021      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057e6:	2304      	movs	r3, #4
 80057e8:	e01f      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057ea:	2303      	movs	r3, #3
 80057ec:	e01d      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e01b      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e019      	b.n	800582a <HAL_GPIO_Init+0x25a>
 80057f6:	bf00      	nop
 80057f8:	58000080 	.word	0x58000080
 80057fc:	58024400 	.word	0x58024400
 8005800:	58000400 	.word	0x58000400
 8005804:	58020000 	.word	0x58020000
 8005808:	58020400 	.word	0x58020400
 800580c:	58020800 	.word	0x58020800
 8005810:	58020c00 	.word	0x58020c00
 8005814:	58021000 	.word	0x58021000
 8005818:	58021400 	.word	0x58021400
 800581c:	58021800 	.word	0x58021800
 8005820:	58021c00 	.word	0x58021c00
 8005824:	58022400 	.word	0x58022400
 8005828:	2300      	movs	r3, #0
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	f002 0203 	and.w	r2, r2, #3
 8005830:	0092      	lsls	r2, r2, #2
 8005832:	4093      	lsls	r3, r2
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800583a:	4938      	ldr	r1, [pc, #224]	; (800591c <HAL_GPIO_Init+0x34c>)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	3302      	adds	r3, #2
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	43db      	mvns	r3, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4013      	ands	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	43db      	mvns	r3, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4013      	ands	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	3301      	adds	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	f47f ae6b 	bne.w	80055e4 <HAL_GPIO_Init+0x14>
  }
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	3724      	adds	r7, #36	; 0x24
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	58000400 	.word	0x58000400

08005920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	807b      	strh	r3, [r7, #2]
 800592c:	4613      	mov	r3, r2
 800592e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005930:	787b      	ldrb	r3, [r7, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005936:	887a      	ldrh	r2, [r7, #2]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800593c:	e003      	b.n	8005946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800593e:	887b      	ldrh	r3, [r7, #2]
 8005940:	041a      	lsls	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	619a      	str	r2, [r3, #24]
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	460b      	mov	r3, r1
 800595c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005964:	887a      	ldrh	r2, [r7, #2]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4013      	ands	r3, r2
 800596a:	041a      	lsls	r2, r3, #16
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	43d9      	mvns	r1, r3
 8005970:	887b      	ldrh	r3, [r7, #2]
 8005972:	400b      	ands	r3, r1
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	619a      	str	r2, [r3, #24]
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e07f      	b.n	8005a9a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fc fbd4 	bl	800215c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2224      	movs	r2, #36	; 0x24
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d107      	bne.n	8005a02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	e006      	b.n	8005a10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d104      	bne.n	8005a22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6859      	ldr	r1, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_I2C_Init+0x11c>)
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	ea42 0103 	orr.w	r1, r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	021a      	lsls	r2, r3, #8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69d9      	ldr	r1, [r3, #28]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1a      	ldr	r2, [r3, #32]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	02008000 	.word	0x02008000

08005aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d138      	bne.n	8005b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e032      	b.n	8005b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2224      	movs	r2, #36	; 0x24
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0201 	bic.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d139      	bne.n	8005bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e033      	b.n	8005bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2224      	movs	r2, #36	; 0x24
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005be0:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d00a      	beq.n	8005c02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d001      	beq.n	8005bfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e01f      	b.n	8005c3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e01d      	b.n	8005c3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c02:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 0207 	bic.w	r2, r3, #7
 8005c0a:	490f      	ldr	r1, [pc, #60]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c12:	f7fc feb3 	bl	800297c <HAL_GetTick>
 8005c16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c18:	e009      	b.n	8005c2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c1a:	f7fc feaf 	bl	800297c <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c28:	d901      	bls.n	8005c2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e007      	b.n	8005c3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <HAL_PWREx_ConfigSupply+0x70>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3a:	d1ee      	bne.n	8005c1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	58024800 	.word	0x58024800

08005c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08c      	sub	sp, #48	; 0x30
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e37a      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8087 	beq.w	8005d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6c:	4ba0      	ldr	r3, [pc, #640]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c76:	4b9e      	ldr	r3, [pc, #632]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	d007      	beq.n	8005c92 <HAL_RCC_OscConfig+0x46>
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	2b18      	cmp	r3, #24
 8005c86:	d110      	bne.n	8005caa <HAL_RCC_OscConfig+0x5e>
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d10b      	bne.n	8005caa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c92:	4b97      	ldr	r3, [pc, #604]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d06c      	beq.n	8005d78 <HAL_RCC_OscConfig+0x12c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d168      	bne.n	8005d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e354      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x76>
 8005cb4:	4b8e      	ldr	r3, [pc, #568]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a8d      	ldr	r2, [pc, #564]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	e02e      	b.n	8005d20 <HAL_RCC_OscConfig+0xd4>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x98>
 8005cca:	4b89      	ldr	r3, [pc, #548]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a88      	ldr	r2, [pc, #544]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	4b86      	ldr	r3, [pc, #536]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a85      	ldr	r2, [pc, #532]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	e01d      	b.n	8005d20 <HAL_RCC_OscConfig+0xd4>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cec:	d10c      	bne.n	8005d08 <HAL_RCC_OscConfig+0xbc>
 8005cee:	4b80      	ldr	r3, [pc, #512]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a7f      	ldr	r2, [pc, #508]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b7d      	ldr	r3, [pc, #500]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a7c      	ldr	r2, [pc, #496]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e00b      	b.n	8005d20 <HAL_RCC_OscConfig+0xd4>
 8005d08:	4b79      	ldr	r3, [pc, #484]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a78      	ldr	r2, [pc, #480]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	4b76      	ldr	r3, [pc, #472]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a75      	ldr	r2, [pc, #468]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d013      	beq.n	8005d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fc fe28 	bl	800297c <HAL_GetTick>
 8005d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d30:	f7fc fe24 	bl	800297c <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b64      	cmp	r3, #100	; 0x64
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e308      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d42:	4b6b      	ldr	r3, [pc, #428]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0xe4>
 8005d4e:	e014      	b.n	8005d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fc fe14 	bl	800297c <HAL_GetTick>
 8005d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d58:	f7fc fe10 	bl	800297c <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b64      	cmp	r3, #100	; 0x64
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e2f4      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d6a:	4b61      	ldr	r3, [pc, #388]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x10c>
 8005d76:	e000      	b.n	8005d7a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d06d      	beq.n	8005e62 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d86:	4b5a      	ldr	r3, [pc, #360]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d8e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d90:	4b57      	ldr	r3, [pc, #348]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <HAL_RCC_OscConfig+0x160>
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b18      	cmp	r3, #24
 8005da0:	d11b      	bne.n	8005dda <HAL_RCC_OscConfig+0x18e>
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d116      	bne.n	8005dda <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dac:	4b50      	ldr	r3, [pc, #320]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x178>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e2c7      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc4:	4b4a      	ldr	r3, [pc, #296]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	061b      	lsls	r3, r3, #24
 8005dd2:	4947      	ldr	r1, [pc, #284]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dd8:	e043      	b.n	8005e62 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d026      	beq.n	8005e30 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005de2:	4b43      	ldr	r3, [pc, #268]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 0219 	bic.w	r2, r3, #25
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	4940      	ldr	r1, [pc, #256]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fc fdc2 	bl	800297c <HAL_GetTick>
 8005df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dfc:	f7fc fdbe 	bl	800297c <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e2a2      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e0e:	4b38      	ldr	r3, [pc, #224]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1a:	4b35      	ldr	r3, [pc, #212]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	061b      	lsls	r3, r3, #24
 8005e28:	4931      	ldr	r1, [pc, #196]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	604b      	str	r3, [r1, #4]
 8005e2e:	e018      	b.n	8005e62 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e30:	4b2f      	ldr	r3, [pc, #188]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2e      	ldr	r2, [pc, #184]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3c:	f7fc fd9e 	bl	800297c <HAL_GetTick>
 8005e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e44:	f7fc fd9a 	bl	800297c <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e27e      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e56:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d06c      	beq.n	8005f48 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e6e:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e78:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d007      	beq.n	8005e94 <HAL_RCC_OscConfig+0x248>
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b18      	cmp	r3, #24
 8005e88:	d11b      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x276>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d116      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e94:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_RCC_OscConfig+0x260>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	2b80      	cmp	r3, #128	; 0x80
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e253      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	061b      	lsls	r3, r3, #24
 8005eba:	490d      	ldr	r1, [pc, #52]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ec0:	e042      	b.n	8005f48 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d025      	beq.n	8005f16 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <HAL_RCC_OscConfig+0x2a4>)
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed6:	f7fc fd51 	bl	800297c <HAL_GetTick>
 8005eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005ede:	f7fc fd4d 	bl	800297c <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d903      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e231      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
 8005ef0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ef4:	4ba3      	ldr	r3, [pc, #652]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0ee      	beq.n	8005ede <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f00:	4ba0      	ldr	r3, [pc, #640]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	061b      	lsls	r3, r3, #24
 8005f0e:	499d      	ldr	r1, [pc, #628]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60cb      	str	r3, [r1, #12]
 8005f14:	e018      	b.n	8005f48 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f16:	4b9b      	ldr	r3, [pc, #620]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a9a      	ldr	r2, [pc, #616]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f22:	f7fc fd2b 	bl	800297c <HAL_GetTick>
 8005f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f2a:	f7fc fd27 	bl	800297c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e20b      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f3c:	4b91      	ldr	r3, [pc, #580]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d036      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d019      	beq.n	8005f90 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5c:	4b89      	ldr	r3, [pc, #548]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f60:	4a88      	ldr	r2, [pc, #544]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f68:	f7fc fd08 	bl	800297c <HAL_GetTick>
 8005f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f70:	f7fc fd04 	bl	800297c <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e1e8      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f82:	4b80      	ldr	r3, [pc, #512]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCC_OscConfig+0x324>
 8005f8e:	e018      	b.n	8005fc2 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f90:	4b7c      	ldr	r3, [pc, #496]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f94:	4a7b      	ldr	r2, [pc, #492]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9c:	f7fc fcee 	bl	800297c <HAL_GetTick>
 8005fa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa4:	f7fc fcea 	bl	800297c <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e1ce      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fb6:	4b73      	ldr	r3, [pc, #460]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f0      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d036      	beq.n	800603c <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d019      	beq.n	800600a <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fd6:	4b6b      	ldr	r3, [pc, #428]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a6a      	ldr	r2, [pc, #424]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005fdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fe0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fe2:	f7fc fccb 	bl	800297c <HAL_GetTick>
 8005fe6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005fea:	f7fc fcc7 	bl	800297c <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e1ab      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ffc:	4b61      	ldr	r3, [pc, #388]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0f0      	beq.n	8005fea <HAL_RCC_OscConfig+0x39e>
 8006008:	e018      	b.n	800603c <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800600a:	4b5e      	ldr	r3, [pc, #376]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a5d      	ldr	r2, [pc, #372]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8006010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006014:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006016:	f7fc fcb1 	bl	800297c <HAL_GetTick>
 800601a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800601e:	f7fc fcad 	bl	800297c <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e191      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006030:	4b54      	ldr	r3, [pc, #336]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f0      	bne.n	800601e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8081 	beq.w	800614c <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800604a:	4b4f      	ldr	r3, [pc, #316]	; (8006188 <HAL_RCC_OscConfig+0x53c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a4e      	ldr	r2, [pc, #312]	; (8006188 <HAL_RCC_OscConfig+0x53c>)
 8006050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006054:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006056:	f7fc fc91 	bl	800297c <HAL_GetTick>
 800605a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800605e:	f7fc fc8d 	bl	800297c <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b64      	cmp	r3, #100	; 0x64
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e171      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006070:	4b45      	ldr	r3, [pc, #276]	; (8006188 <HAL_RCC_OscConfig+0x53c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0f0      	beq.n	800605e <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d106      	bne.n	8006092 <HAL_RCC_OscConfig+0x446>
 8006084:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	4a3e      	ldr	r2, [pc, #248]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	6713      	str	r3, [r2, #112]	; 0x70
 8006090:	e02d      	b.n	80060ee <HAL_RCC_OscConfig+0x4a2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10c      	bne.n	80060b4 <HAL_RCC_OscConfig+0x468>
 800609a:	4b3a      	ldr	r3, [pc, #232]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	4a39      	ldr	r2, [pc, #228]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	6713      	str	r3, [r2, #112]	; 0x70
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	4a36      	ldr	r2, [pc, #216]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060ac:	f023 0304 	bic.w	r3, r3, #4
 80060b0:	6713      	str	r3, [r2, #112]	; 0x70
 80060b2:	e01c      	b.n	80060ee <HAL_RCC_OscConfig+0x4a2>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b05      	cmp	r3, #5
 80060ba:	d10c      	bne.n	80060d6 <HAL_RCC_OscConfig+0x48a>
 80060bc:	4b31      	ldr	r3, [pc, #196]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	4a30      	ldr	r2, [pc, #192]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060c2:	f043 0304 	orr.w	r3, r3, #4
 80060c6:	6713      	str	r3, [r2, #112]	; 0x70
 80060c8:	4b2e      	ldr	r3, [pc, #184]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060cc:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	6713      	str	r3, [r2, #112]	; 0x70
 80060d4:	e00b      	b.n	80060ee <HAL_RCC_OscConfig+0x4a2>
 80060d6:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060da:	4a2a      	ldr	r2, [pc, #168]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	6713      	str	r3, [r2, #112]	; 0x70
 80060e2:	4b28      	ldr	r3, [pc, #160]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	4a27      	ldr	r2, [pc, #156]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 80060e8:	f023 0304 	bic.w	r3, r3, #4
 80060ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d015      	beq.n	8006122 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f6:	f7fc fc41 	bl	800297c <HAL_GetTick>
 80060fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060fc:	e00a      	b.n	8006114 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fc fc3d 	bl	800297c <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e11f      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006114:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8006116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0ee      	beq.n	80060fe <HAL_RCC_OscConfig+0x4b2>
 8006120:	e014      	b.n	800614c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006122:	f7fc fc2b 	bl	800297c <HAL_GetTick>
 8006126:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006128:	e00a      	b.n	8006140 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f7fc fc27 	bl	800297c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f241 3288 	movw	r2, #5000	; 0x1388
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e109      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006140:	4b10      	ldr	r3, [pc, #64]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1ee      	bne.n	800612a <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80fe 	beq.w	8006352 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800615e:	2b18      	cmp	r3, #24
 8006160:	f000 80b9 	beq.w	80062d6 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2b02      	cmp	r3, #2
 800616a:	f040 809a 	bne.w	80062a2 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800616e:	4b05      	ldr	r3, [pc, #20]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a04      	ldr	r2, [pc, #16]	; (8006184 <HAL_RCC_OscConfig+0x538>)
 8006174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617a:	f7fc fbff 	bl	800297c <HAL_GetTick>
 800617e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006180:	e00d      	b.n	800619e <HAL_RCC_OscConfig+0x552>
 8006182:	bf00      	nop
 8006184:	58024400 	.word	0x58024400
 8006188:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800618c:	f7fc fbf6 	bl	800297c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e0da      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800619e:	4b6f      	ldr	r3, [pc, #444]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061aa:	4b6c      	ldr	r3, [pc, #432]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80061ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ae:	4b6c      	ldr	r3, [pc, #432]	; (8006360 <HAL_RCC_OscConfig+0x714>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061ba:	0112      	lsls	r2, r2, #4
 80061bc:	430a      	orrs	r2, r1
 80061be:	4967      	ldr	r1, [pc, #412]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	628b      	str	r3, [r1, #40]	; 0x28
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	3b01      	subs	r3, #1
 80061ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	3b01      	subs	r3, #1
 80061d4:	025b      	lsls	r3, r3, #9
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	3b01      	subs	r3, #1
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	3b01      	subs	r3, #1
 80061ee:	061b      	lsls	r3, r3, #24
 80061f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061f4:	4959      	ldr	r1, [pc, #356]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80061fa:	4b58      	ldr	r3, [pc, #352]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	4a57      	ldr	r2, [pc, #348]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006206:	4b55      	ldr	r3, [pc, #340]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800620a:	4b56      	ldr	r3, [pc, #344]	; (8006364 <HAL_RCC_OscConfig+0x718>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006212:	00d2      	lsls	r2, r2, #3
 8006214:	4951      	ldr	r1, [pc, #324]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006216:	4313      	orrs	r3, r2
 8006218:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800621a:	4b50      	ldr	r3, [pc, #320]	; (800635c <HAL_RCC_OscConfig+0x710>)
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	f023 020c 	bic.w	r2, r3, #12
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	494d      	ldr	r1, [pc, #308]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006228:	4313      	orrs	r3, r2
 800622a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800622c:	4b4b      	ldr	r3, [pc, #300]	; (800635c <HAL_RCC_OscConfig+0x710>)
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	f023 0202 	bic.w	r2, r3, #2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006238:	4948      	ldr	r1, [pc, #288]	; (800635c <HAL_RCC_OscConfig+0x710>)
 800623a:	4313      	orrs	r3, r2
 800623c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800623e:	4b47      	ldr	r3, [pc, #284]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	4a46      	ldr	r2, [pc, #280]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006248:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800624a:	4b44      	ldr	r3, [pc, #272]	; (800635c <HAL_RCC_OscConfig+0x710>)
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	4a43      	ldr	r2, [pc, #268]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006254:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006256:	4b41      	ldr	r3, [pc, #260]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	4a40      	ldr	r2, [pc, #256]	; (800635c <HAL_RCC_OscConfig+0x710>)
 800625c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006260:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006262:	4b3e      	ldr	r3, [pc, #248]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	4a3d      	ldr	r2, [pc, #244]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006268:	f043 0301 	orr.w	r3, r3, #1
 800626c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800626e:	4b3b      	ldr	r3, [pc, #236]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3a      	ldr	r2, [pc, #232]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627a:	f7fc fb7f 	bl	800297c <HAL_GetTick>
 800627e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006282:	f7fc fb7b 	bl	800297c <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e05f      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006294:	4b31      	ldr	r3, [pc, #196]	; (800635c <HAL_RCC_OscConfig+0x710>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f0      	beq.n	8006282 <HAL_RCC_OscConfig+0x636>
 80062a0:	e057      	b.n	8006352 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a2:	4b2e      	ldr	r3, [pc, #184]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2d      	ldr	r2, [pc, #180]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80062a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ae:	f7fc fb65 	bl	800297c <HAL_GetTick>
 80062b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062b6:	f7fc fb61 	bl	800297c <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e045      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062c8:	4b24      	ldr	r3, [pc, #144]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f0      	bne.n	80062b6 <HAL_RCC_OscConfig+0x66a>
 80062d4:	e03d      	b.n	8006352 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062d6:	4b21      	ldr	r3, [pc, #132]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062dc:	4b1f      	ldr	r3, [pc, #124]	; (800635c <HAL_RCC_OscConfig+0x710>)
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d031      	beq.n	800634e <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f003 0203 	and.w	r2, r3, #3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d12a      	bne.n	800634e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006304:	429a      	cmp	r2, r3
 8006306:	d122      	bne.n	800634e <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006314:	429a      	cmp	r2, r3
 8006316:	d11a      	bne.n	800634e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	0a5b      	lsrs	r3, r3, #9
 800631c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006326:	429a      	cmp	r2, r3
 8006328:	d111      	bne.n	800634e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	0c1b      	lsrs	r3, r3, #16
 800632e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006338:	429a      	cmp	r2, r3
 800633a:	d108      	bne.n	800634e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	0e1b      	lsrs	r3, r3, #24
 8006340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006348:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800634a:	429a      	cmp	r2, r3
 800634c:	d001      	beq.n	8006352 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3730      	adds	r7, #48	; 0x30
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	58024400 	.word	0x58024400
 8006360:	fffffc0c 	.word	0xfffffc0c
 8006364:	ffff0007 	.word	0xffff0007

08006368 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e19c      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800637c:	4b8a      	ldr	r3, [pc, #552]	; (80065a8 <HAL_RCC_ClockConfig+0x240>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d910      	bls.n	80063ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638a:	4b87      	ldr	r3, [pc, #540]	; (80065a8 <HAL_RCC_ClockConfig+0x240>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 020f 	bic.w	r2, r3, #15
 8006392:	4985      	ldr	r1, [pc, #532]	; (80065a8 <HAL_RCC_ClockConfig+0x240>)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	4313      	orrs	r3, r2
 8006398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800639a:	4b83      	ldr	r3, [pc, #524]	; (80065a8 <HAL_RCC_ClockConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d001      	beq.n	80063ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e184      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d010      	beq.n	80063da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	4b7b      	ldr	r3, [pc, #492]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d908      	bls.n	80063da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063c8:	4b78      	ldr	r3, [pc, #480]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	4975      	ldr	r1, [pc, #468]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d010      	beq.n	8006408 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695a      	ldr	r2, [r3, #20]
 80063ea:	4b70      	ldr	r3, [pc, #448]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d908      	bls.n	8006408 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063f6:	4b6d      	ldr	r3, [pc, #436]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	496a      	ldr	r1, [pc, #424]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006404:	4313      	orrs	r3, r2
 8006406:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b00      	cmp	r3, #0
 8006412:	d010      	beq.n	8006436 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	4b64      	ldr	r3, [pc, #400]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006420:	429a      	cmp	r2, r3
 8006422:	d908      	bls.n	8006436 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006424:	4b61      	ldr	r3, [pc, #388]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	495e      	ldr	r1, [pc, #376]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006432:	4313      	orrs	r3, r2
 8006434:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d010      	beq.n	8006464 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69da      	ldr	r2, [r3, #28]
 8006446:	4b59      	ldr	r3, [pc, #356]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800644e:	429a      	cmp	r2, r3
 8006450:	d908      	bls.n	8006464 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006452:	4b56      	ldr	r3, [pc, #344]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	4953      	ldr	r1, [pc, #332]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006460:	4313      	orrs	r3, r2
 8006462:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	4b4d      	ldr	r3, [pc, #308]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	429a      	cmp	r2, r3
 800647e:	d908      	bls.n	8006492 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006480:	4b4a      	ldr	r3, [pc, #296]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f023 020f 	bic.w	r2, r3, #15
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	4947      	ldr	r1, [pc, #284]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 800648e:	4313      	orrs	r3, r2
 8006490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d055      	beq.n	800654a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800649e:	4b43      	ldr	r3, [pc, #268]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	4940      	ldr	r1, [pc, #256]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d107      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064b8:	4b3c      	ldr	r3, [pc, #240]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d121      	bne.n	8006508 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0f6      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d107      	bne.n	80064e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064d0:	4b36      	ldr	r3, [pc, #216]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d115      	bne.n	8006508 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e0ea      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d107      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064e8:	4b30      	ldr	r3, [pc, #192]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d109      	bne.n	8006508 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0de      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064f8:	4b2c      	ldr	r3, [pc, #176]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e0d6      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006508:	4b28      	ldr	r3, [pc, #160]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f023 0207 	bic.w	r2, r3, #7
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4925      	ldr	r1, [pc, #148]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006516:	4313      	orrs	r3, r2
 8006518:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651a:	f7fc fa2f 	bl	800297c <HAL_GetTick>
 800651e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006520:	e00a      	b.n	8006538 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006522:	f7fc fa2b 	bl	800297c <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006530:	4293      	cmp	r3, r2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e0be      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006538:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	429a      	cmp	r2, r3
 8006548:	d1eb      	bne.n	8006522 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d010      	beq.n	8006578 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	4b14      	ldr	r3, [pc, #80]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	429a      	cmp	r2, r3
 8006564:	d208      	bcs.n	8006578 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006566:	4b11      	ldr	r3, [pc, #68]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	f023 020f 	bic.w	r2, r3, #15
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	490e      	ldr	r1, [pc, #56]	; (80065ac <HAL_RCC_ClockConfig+0x244>)
 8006574:	4313      	orrs	r3, r2
 8006576:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_RCC_ClockConfig+0x240>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d214      	bcs.n	80065b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006586:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <HAL_RCC_ClockConfig+0x240>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f023 020f 	bic.w	r2, r3, #15
 800658e:	4906      	ldr	r1, [pc, #24]	; (80065a8 <HAL_RCC_ClockConfig+0x240>)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	4313      	orrs	r3, r2
 8006594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006596:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <HAL_RCC_ClockConfig+0x240>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e086      	b.n	80066b6 <HAL_RCC_ClockConfig+0x34e>
 80065a8:	52002000 	.word	0x52002000
 80065ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d010      	beq.n	80065de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d208      	bcs.n	80065de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065cc:	4b3c      	ldr	r3, [pc, #240]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	4939      	ldr	r1, [pc, #228]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d010      	beq.n	800660c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	4b34      	ldr	r3, [pc, #208]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d208      	bcs.n	800660c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065fa:	4b31      	ldr	r3, [pc, #196]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	492e      	ldr	r1, [pc, #184]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006608:	4313      	orrs	r3, r2
 800660a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b00      	cmp	r3, #0
 8006616:	d010      	beq.n	800663a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	4b28      	ldr	r3, [pc, #160]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006624:	429a      	cmp	r2, r3
 8006626:	d208      	bcs.n	800663a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006628:	4b25      	ldr	r3, [pc, #148]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	4922      	ldr	r1, [pc, #136]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006636:	4313      	orrs	r3, r2
 8006638:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d010      	beq.n	8006668 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006652:	429a      	cmp	r2, r3
 8006654:	d208      	bcs.n	8006668 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006656:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	4917      	ldr	r1, [pc, #92]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006664:	4313      	orrs	r3, r2
 8006666:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006668:	f000 f834 	bl	80066d4 <HAL_RCC_GetSysClockFreq>
 800666c:	4602      	mov	r2, r0
 800666e:	4b14      	ldr	r3, [pc, #80]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	0a1b      	lsrs	r3, r3, #8
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	4912      	ldr	r1, [pc, #72]	; (80066c4 <HAL_RCC_ClockConfig+0x35c>)
 800667a:	5ccb      	ldrb	r3, [r1, r3]
 800667c:	f003 031f 	and.w	r3, r3, #31
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
 8006684:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006686:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <HAL_RCC_ClockConfig+0x358>)
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	4a0d      	ldr	r2, [pc, #52]	; (80066c4 <HAL_RCC_ClockConfig+0x35c>)
 8006690:	5cd3      	ldrb	r3, [r2, r3]
 8006692:	f003 031f 	and.w	r3, r3, #31
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
 800669c:	4a0a      	ldr	r2, [pc, #40]	; (80066c8 <HAL_RCC_ClockConfig+0x360>)
 800669e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <HAL_RCC_ClockConfig+0x364>)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <HAL_RCC_ClockConfig+0x368>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fb ffa4 	bl	80025f8 <HAL_InitTick>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	58024400 	.word	0x58024400
 80066c4:	0800c1c8 	.word	0x0800c1c8
 80066c8:	240005b0 	.word	0x240005b0
 80066cc:	240005ac 	.word	0x240005ac
 80066d0:	240005b4 	.word	0x240005b4

080066d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	; 0x24
 80066d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066da:	4bb3      	ldr	r3, [pc, #716]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066e2:	2b18      	cmp	r3, #24
 80066e4:	f200 8155 	bhi.w	8006992 <HAL_RCC_GetSysClockFreq+0x2be>
 80066e8:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006755 	.word	0x08006755
 80066f4:	08006993 	.word	0x08006993
 80066f8:	08006993 	.word	0x08006993
 80066fc:	08006993 	.word	0x08006993
 8006700:	08006993 	.word	0x08006993
 8006704:	08006993 	.word	0x08006993
 8006708:	08006993 	.word	0x08006993
 800670c:	08006993 	.word	0x08006993
 8006710:	0800677b 	.word	0x0800677b
 8006714:	08006993 	.word	0x08006993
 8006718:	08006993 	.word	0x08006993
 800671c:	08006993 	.word	0x08006993
 8006720:	08006993 	.word	0x08006993
 8006724:	08006993 	.word	0x08006993
 8006728:	08006993 	.word	0x08006993
 800672c:	08006993 	.word	0x08006993
 8006730:	08006781 	.word	0x08006781
 8006734:	08006993 	.word	0x08006993
 8006738:	08006993 	.word	0x08006993
 800673c:	08006993 	.word	0x08006993
 8006740:	08006993 	.word	0x08006993
 8006744:	08006993 	.word	0x08006993
 8006748:	08006993 	.word	0x08006993
 800674c:	08006993 	.word	0x08006993
 8006750:	08006787 	.word	0x08006787
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006754:	4b94      	ldr	r3, [pc, #592]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d009      	beq.n	8006774 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006760:	4b91      	ldr	r3, [pc, #580]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	08db      	lsrs	r3, r3, #3
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	4a90      	ldr	r2, [pc, #576]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800676c:	fa22 f303 	lsr.w	r3, r2, r3
 8006770:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006772:	e111      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006774:	4b8d      	ldr	r3, [pc, #564]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006776:	61bb      	str	r3, [r7, #24]
    break;
 8006778:	e10e      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800677a:	4b8d      	ldr	r3, [pc, #564]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800677c:	61bb      	str	r3, [r7, #24]
    break;
 800677e:	e10b      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006780:	4b8c      	ldr	r3, [pc, #560]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006782:	61bb      	str	r3, [r7, #24]
    break;
 8006784:	e108      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006786:	4b88      	ldr	r3, [pc, #544]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006790:	4b85      	ldr	r3, [pc, #532]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	091b      	lsrs	r3, r3, #4
 8006796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800679a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800679c:	4b82      	ldr	r3, [pc, #520]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80067a6:	4b80      	ldr	r3, [pc, #512]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067aa:	08db      	lsrs	r3, r3, #3
 80067ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80e1 	beq.w	800698c <HAL_RCC_GetSysClockFreq+0x2b8>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	f000 8083 	beq.w	80068d8 <HAL_RCC_GetSysClockFreq+0x204>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	f200 80a1 	bhi.w	800691c <HAL_RCC_GetSysClockFreq+0x248>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <HAL_RCC_GetSysClockFreq+0x114>
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d056      	beq.n	8006894 <HAL_RCC_GetSysClockFreq+0x1c0>
 80067e6:	e099      	b.n	800691c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067e8:	4b6f      	ldr	r3, [pc, #444]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d02d      	beq.n	8006850 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067f4:	4b6c      	ldr	r3, [pc, #432]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	08db      	lsrs	r3, r3, #3
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	4a6b      	ldr	r2, [pc, #428]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006800:	fa22 f303 	lsr.w	r3, r2, r3
 8006804:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681e:	4b62      	ldr	r3, [pc, #392]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006832:	eddf 5a61 	vldr	s11, [pc, #388]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800684e:	e087      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80069bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800685e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006862:	4b51      	ldr	r3, [pc, #324]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006872:	ed97 6a02 	vldr	s12, [r7, #8]
 8006876:	eddf 5a50 	vldr	s11, [pc, #320]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800687a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006892:	e065      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80069c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a6:	4b40      	ldr	r3, [pc, #256]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068d6:	e043      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80069c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80068e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ea:	4b2f      	ldr	r3, [pc, #188]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80068fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800690e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800691a:	e021      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006926:	eddf 6a26 	vldr	s13, [pc, #152]	; 80069c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800692a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800692e:	4b1e      	ldr	r3, [pc, #120]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006936:	ee07 3a90 	vmov	s15, r3
 800693a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800693e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006942:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800694e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800695e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006960:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	0a5b      	lsrs	r3, r3, #9
 8006966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696a:	3301      	adds	r3, #1
 800696c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	ee07 3a90 	vmov	s15, r3
 8006974:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006978:	edd7 6a07 	vldr	s13, [r7, #28]
 800697c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006984:	ee17 3a90 	vmov	r3, s15
 8006988:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800698a:	e005      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	61bb      	str	r3, [r7, #24]
    break;
 8006990:	e002      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006994:	61bb      	str	r3, [r7, #24]
    break;
 8006996:	bf00      	nop
  }

  return sysclockfreq;
 8006998:	69bb      	ldr	r3, [r7, #24]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3724      	adds	r7, #36	; 0x24
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	58024400 	.word	0x58024400
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	003d0900 	.word	0x003d0900
 80069b4:	017d7840 	.word	0x017d7840
 80069b8:	46000000 	.word	0x46000000
 80069bc:	4c742400 	.word	0x4c742400
 80069c0:	4a742400 	.word	0x4a742400
 80069c4:	4bbebc20 	.word	0x4bbebc20

080069c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069ce:	f7ff fe81 	bl	80066d4 <HAL_RCC_GetSysClockFreq>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	490f      	ldr	r1, [pc, #60]	; (8006a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80069e0:	5ccb      	ldrb	r3, [r1, r3]
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80069f6:	5cd3      	ldrb	r3, [r2, r3]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006a02:	4a07      	ldr	r2, [pc, #28]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a06:	4a07      	ldr	r2, [pc, #28]	; (8006a24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	0800c1c8 	.word	0x0800c1c8
 8006a20:	240005b0 	.word	0x240005b0
 8006a24:	240005ac 	.word	0x240005ac

08006a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a2c:	f7ff ffcc 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8006a30:	4602      	mov	r2, r0
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	4904      	ldr	r1, [pc, #16]	; (8006a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a3e:	5ccb      	ldrb	r3, [r1, r3]
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	58024400 	.word	0x58024400
 8006a50:	0800c1c8 	.word	0x0800c1c8

08006a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006a58:	f7ff ffb6 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	4904      	ldr	r1, [pc, #16]	; (8006a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a6a:	5ccb      	ldrb	r3, [r1, r3]
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	0800c1c8 	.word	0x0800c1c8

08006a80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	223f      	movs	r2, #63	; 0x3f
 8006a8e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a90:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <HAL_RCC_GetClockConfig+0x7c>)
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0207 	and.w	r2, r3, #7
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006a9c:	4b17      	ldr	r3, [pc, #92]	; (8006afc <HAL_RCC_GetClockConfig+0x7c>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006aa8:	4b14      	ldr	r3, [pc, #80]	; (8006afc <HAL_RCC_GetClockConfig+0x7c>)
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006ab4:	4b11      	ldr	r3, [pc, #68]	; (8006afc <HAL_RCC_GetClockConfig+0x7c>)
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <HAL_RCC_GetClockConfig+0x7c>)
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <HAL_RCC_GetClockConfig+0x7c>)
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006ad8:	4b08      	ldr	r3, [pc, #32]	; (8006afc <HAL_RCC_GetClockConfig+0x7c>)
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <HAL_RCC_GetClockConfig+0x80>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 020f 	and.w	r2, r3, #15
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	601a      	str	r2, [r3, #0]
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	58024400 	.word	0x58024400
 8006b00:	52002000 	.word	0x52002000

08006b04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b10:	2300      	movs	r3, #0
 8006b12:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d03f      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b28:	d02a      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006b2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b2e:	d824      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b34:	d018      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b3a:	d81e      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b44:	d007      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b46:	e018      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b48:	4bab      	ldr	r3, [pc, #684]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	4aaa      	ldr	r2, [pc, #680]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b54:	e015      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	2102      	movs	r1, #2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 feff 	bl	8008960 <RCCEx_PLL2_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b66:	e00c      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3324      	adds	r3, #36	; 0x24
 8006b6c:	2102      	movs	r1, #2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 ffa8 	bl	8008ac4 <RCCEx_PLL3_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b78:	e003      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7e:	e000      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b88:	4b9b      	ldr	r3, [pc, #620]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b94:	4998      	ldr	r1, [pc, #608]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	650b      	str	r3, [r1, #80]	; 0x50
 8006b9a:	e001      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d03d      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d826      	bhi.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006bb4:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006bd1 	.word	0x08006bd1
 8006bc0:	08006bdf 	.word	0x08006bdf
 8006bc4:	08006bf1 	.word	0x08006bf1
 8006bc8:	08006c09 	.word	0x08006c09
 8006bcc:	08006c09 	.word	0x08006c09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd0:	4b89      	ldr	r3, [pc, #548]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	4a88      	ldr	r2, [pc, #544]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006bdc:	e015      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3304      	adds	r3, #4
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 febb 	bl	8008960 <RCCEx_PLL2_Config>
 8006bea:	4603      	mov	r3, r0
 8006bec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006bee:	e00c      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3324      	adds	r3, #36	; 0x24
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f001 ff64 	bl	8008ac4 <RCCEx_PLL3_Config>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c00:	e003      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
      break;
 8006c06:	e000      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c10:	4b79      	ldr	r3, [pc, #484]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c14:	f023 0207 	bic.w	r2, r3, #7
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1c:	4976      	ldr	r1, [pc, #472]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	650b      	str	r3, [r1, #80]	; 0x50
 8006c22:	e001      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d051      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c3a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006c3e:	d036      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c40:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006c44:	d830      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006c46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c4a:	d032      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006c4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c50:	d82a      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006c52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c56:	d02e      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006c58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c5c:	d824      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c62:	d018      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c68:	d81e      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c72:	d007      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006c74:	e018      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c76:	4b60      	ldr	r3, [pc, #384]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	4a5f      	ldr	r2, [pc, #380]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c82:	e019      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3304      	adds	r3, #4
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fe68 	bl	8008960 <RCCEx_PLL2_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006c94:	e010      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3324      	adds	r3, #36	; 0x24
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 ff11 	bl	8008ac4 <RCCEx_PLL3_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ca6:	e007      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cac:	e004      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e002      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006cb2:	bf00      	nop
 8006cb4:	e000      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006cbe:	4b4e      	ldr	r3, [pc, #312]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ccc:	494a      	ldr	r1, [pc, #296]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	658b      	str	r3, [r1, #88]	; 0x58
 8006cd2:	e001      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d051      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006cea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006cee:	d036      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006cf0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006cf4:	d830      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006cf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cfa:	d032      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d00:	d82a      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006d02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d06:	d02e      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006d08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d0c:	d824      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d12:	d018      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d18:	d81e      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d22:	d007      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006d24:	e018      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d26:	4b34      	ldr	r3, [pc, #208]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	4a33      	ldr	r2, [pc, #204]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d32:	e019      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 fe10 	bl	8008960 <RCCEx_PLL2_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006d44:	e010      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3324      	adds	r3, #36	; 0x24
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 feb9 	bl	8008ac4 <RCCEx_PLL3_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d56:	e007      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5c:	e004      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006d5e:	bf00      	nop
 8006d60:	e002      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10a      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d6e:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d72:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d7c:	491e      	ldr	r1, [pc, #120]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	658b      	str	r3, [r1, #88]	; 0x58
 8006d82:	e001      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d035      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d98:	2b30      	cmp	r3, #48	; 0x30
 8006d9a:	d01c      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d9c:	2b30      	cmp	r3, #48	; 0x30
 8006d9e:	d817      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d00c      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d813      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d016      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d10f      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db0:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	4a10      	ldr	r2, [pc, #64]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006dbc:	e00e      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	2102      	movs	r1, #2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fdcb 	bl	8008960 <RCCEx_PLL2_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006dce:	e005      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd4:	e002      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006dd6:	bf00      	nop
 8006dd8:	e000      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10c      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006de2:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dee:	4902      	ldr	r1, [pc, #8]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006df4:	e004      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006df6:	bf00      	nop
 8006df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d047      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e14:	d030      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e1a:	d82a      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e20:	d02c      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006e22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e26:	d824      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2c:	d018      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e32:	d81e      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3c:	d007      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e3e:	e018      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e40:	4bac      	ldr	r3, [pc, #688]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	4aab      	ldr	r2, [pc, #684]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e4c:	e017      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3304      	adds	r3, #4
 8006e52:	2100      	movs	r1, #0
 8006e54:	4618      	mov	r0, r3
 8006e56:	f001 fd83 	bl	8008960 <RCCEx_PLL2_Config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e5e:	e00e      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3324      	adds	r3, #36	; 0x24
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 fe2c 	bl	8008ac4 <RCCEx_PLL3_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e70:	e005      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	75fb      	strb	r3, [r7, #23]
      break;
 8006e76:	e002      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006e78:	bf00      	nop
 8006e7a:	e000      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e84:	4b9b      	ldr	r3, [pc, #620]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e90:	4998      	ldr	r1, [pc, #608]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	650b      	str	r3, [r1, #80]	; 0x50
 8006e96:	e001      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d049      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eb0:	d02e      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006eb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eb6:	d828      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006eb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ebc:	d02a      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006ebe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ec2:	d822      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ec4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ec8:	d026      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006eca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ece:	d81c      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ed4:	d010      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eda:	d816      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01d      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee4:	d111      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	2101      	movs	r1, #1
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 fd37 	bl	8008960 <RCCEx_PLL2_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ef6:	e012      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3324      	adds	r3, #36	; 0x24
 8006efc:	2101      	movs	r1, #1
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 fde0 	bl	8008ac4 <RCCEx_PLL3_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f08:	e009      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0e:	e006      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006f10:	bf00      	nop
 8006f12:	e004      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006f14:	bf00      	nop
 8006f16:	e002      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f24:	4b73      	ldr	r3, [pc, #460]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	4970      	ldr	r1, [pc, #448]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	650b      	str	r3, [r1, #80]	; 0x50
 8006f36:	e001      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d04b      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f52:	d02e      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f58:	d828      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5e:	d02a      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f64:	d822      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006f66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f6a:	d026      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006f6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f70:	d81c      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f76:	d010      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f7c:	d816      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01d      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f86:	d111      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 fce6 	bl	8008960 <RCCEx_PLL2_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006f98:	e012      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3324      	adds	r3, #36	; 0x24
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f001 fd8f 	bl	8008ac4 <RCCEx_PLL3_Config>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006faa:	e009      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb0:	e006      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e004      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e002      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006fc6:	4b4b      	ldr	r3, [pc, #300]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fd4:	4947      	ldr	r1, [pc, #284]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	658b      	str	r3, [r1, #88]	; 0x58
 8006fda:	e001      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d02f      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff4:	d00e      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ffa:	d814      	bhi.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d015      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007004:	d10f      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007006:	4b3b      	ldr	r3, [pc, #236]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700a:	4a3a      	ldr	r2, [pc, #232]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800700c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007010:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007012:	e00c      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	2101      	movs	r1, #1
 800701a:	4618      	mov	r0, r3
 800701c:	f001 fca0 	bl	8008960 <RCCEx_PLL2_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007024:	e003      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]
      break;
 800702a:	e000      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800702c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d109      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007034:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007038:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007040:	492c      	ldr	r1, [pc, #176]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007042:	4313      	orrs	r3, r2
 8007044:	650b      	str	r3, [r1, #80]	; 0x50
 8007046:	e001      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d032      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705c:	2b03      	cmp	r3, #3
 800705e:	d81b      	bhi.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	0800709f 	.word	0x0800709f
 800706c:	08007079 	.word	0x08007079
 8007070:	08007087 	.word	0x08007087
 8007074:	0800709f 	.word	0x0800709f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007078:	4b1e      	ldr	r3, [pc, #120]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800707e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007082:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007084:	e00c      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	3304      	adds	r3, #4
 800708a:	2102      	movs	r1, #2
 800708c:	4618      	mov	r0, r3
 800708e:	f001 fc67 	bl	8008960 <RCCEx_PLL2_Config>
 8007092:	4603      	mov	r3, r0
 8007094:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007096:	e003      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	75fb      	strb	r3, [r7, #23]
      break;
 800709c:	e000      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800709e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80070a6:	4b13      	ldr	r3, [pc, #76]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80070a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070aa:	f023 0203 	bic.w	r2, r3, #3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b2:	4910      	ldr	r1, [pc, #64]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070b8:	e001      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 808a 	beq.w	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a09      	ldr	r2, [pc, #36]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80070d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070d8:	f7fb fc50 	bl	800297c <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070de:	e00d      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e0:	f7fb fc4c 	bl	800297c <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b64      	cmp	r3, #100	; 0x64
 80070ec:	d906      	bls.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	75fb      	strb	r3, [r7, #23]
        break;
 80070f2:	e009      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80070f4:	58024400 	.word	0x58024400
 80070f8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070fc:	4bb9      	ldr	r3, [pc, #740]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0eb      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d166      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800710e:	4bb6      	ldr	r3, [pc, #728]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007110:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007118:	4053      	eors	r3, r2
 800711a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711e:	2b00      	cmp	r3, #0
 8007120:	d013      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007122:	4bb1      	ldr	r3, [pc, #708]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800712c:	4bae      	ldr	r3, [pc, #696]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800712e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007130:	4aad      	ldr	r2, [pc, #692]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007136:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007138:	4bab      	ldr	r3, [pc, #684]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800713a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713c:	4aaa      	ldr	r2, [pc, #680]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800713e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007142:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007144:	4aa8      	ldr	r2, [pc, #672]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007154:	d115      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007156:	f7fb fc11 	bl	800297c <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800715c:	e00b      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800715e:	f7fb fc0d 	bl	800297c <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	f241 3288 	movw	r2, #5000	; 0x1388
 800716c:	4293      	cmp	r3, r2
 800716e:	d902      	bls.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	75fb      	strb	r3, [r7, #23]
            break;
 8007174:	e005      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007176:	4b9c      	ldr	r3, [pc, #624]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0ed      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d126      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800718e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007196:	d10d      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007198:	4b93      	ldr	r3, [pc, #588]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071a6:	0919      	lsrs	r1, r3, #4
 80071a8:	4b90      	ldr	r3, [pc, #576]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80071aa:	400b      	ands	r3, r1
 80071ac:	498e      	ldr	r1, [pc, #568]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	610b      	str	r3, [r1, #16]
 80071b2:	e005      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80071b4:	4b8c      	ldr	r3, [pc, #560]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	4a8b      	ldr	r2, [pc, #556]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80071ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80071be:	6113      	str	r3, [r2, #16]
 80071c0:	4b89      	ldr	r3, [pc, #548]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80071c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ce:	4986      	ldr	r1, [pc, #536]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	670b      	str	r3, [r1, #112]	; 0x70
 80071d4:	e004      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	75bb      	strb	r3, [r7, #22]
 80071da:	e001      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d07e      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f0:	2b28      	cmp	r3, #40	; 0x28
 80071f2:	d867      	bhi.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80071f4:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	080072cb 	.word	0x080072cb
 8007200:	080072c5 	.word	0x080072c5
 8007204:	080072c5 	.word	0x080072c5
 8007208:	080072c5 	.word	0x080072c5
 800720c:	080072c5 	.word	0x080072c5
 8007210:	080072c5 	.word	0x080072c5
 8007214:	080072c5 	.word	0x080072c5
 8007218:	080072c5 	.word	0x080072c5
 800721c:	080072a1 	.word	0x080072a1
 8007220:	080072c5 	.word	0x080072c5
 8007224:	080072c5 	.word	0x080072c5
 8007228:	080072c5 	.word	0x080072c5
 800722c:	080072c5 	.word	0x080072c5
 8007230:	080072c5 	.word	0x080072c5
 8007234:	080072c5 	.word	0x080072c5
 8007238:	080072c5 	.word	0x080072c5
 800723c:	080072b3 	.word	0x080072b3
 8007240:	080072c5 	.word	0x080072c5
 8007244:	080072c5 	.word	0x080072c5
 8007248:	080072c5 	.word	0x080072c5
 800724c:	080072c5 	.word	0x080072c5
 8007250:	080072c5 	.word	0x080072c5
 8007254:	080072c5 	.word	0x080072c5
 8007258:	080072c5 	.word	0x080072c5
 800725c:	080072cb 	.word	0x080072cb
 8007260:	080072c5 	.word	0x080072c5
 8007264:	080072c5 	.word	0x080072c5
 8007268:	080072c5 	.word	0x080072c5
 800726c:	080072c5 	.word	0x080072c5
 8007270:	080072c5 	.word	0x080072c5
 8007274:	080072c5 	.word	0x080072c5
 8007278:	080072c5 	.word	0x080072c5
 800727c:	080072cb 	.word	0x080072cb
 8007280:	080072c5 	.word	0x080072c5
 8007284:	080072c5 	.word	0x080072c5
 8007288:	080072c5 	.word	0x080072c5
 800728c:	080072c5 	.word	0x080072c5
 8007290:	080072c5 	.word	0x080072c5
 8007294:	080072c5 	.word	0x080072c5
 8007298:	080072c5 	.word	0x080072c5
 800729c:	080072cb 	.word	0x080072cb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3304      	adds	r3, #4
 80072a4:	2101      	movs	r1, #1
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fb5a 	bl	8008960 <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80072b0:	e00c      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3324      	adds	r3, #36	; 0x24
 80072b6:	2101      	movs	r1, #1
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fc03 	bl	8008ac4 <RCCEx_PLL3_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80072c2:	e003      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]
      break;
 80072c8:	e000      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80072ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072d2:	4b45      	ldr	r3, [pc, #276]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072de:	4942      	ldr	r1, [pc, #264]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	654b      	str	r3, [r1, #84]	; 0x54
 80072e4:	e001      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d037      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	d820      	bhi.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80072fe:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007347 	.word	0x08007347
 8007308:	0800731d 	.word	0x0800731d
 800730c:	0800732f 	.word	0x0800732f
 8007310:	08007347 	.word	0x08007347
 8007314:	08007347 	.word	0x08007347
 8007318:	08007347 	.word	0x08007347
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3304      	adds	r3, #4
 8007320:	2101      	movs	r1, #1
 8007322:	4618      	mov	r0, r3
 8007324:	f001 fb1c 	bl	8008960 <RCCEx_PLL2_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800732c:	e00c      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3324      	adds	r3, #36	; 0x24
 8007332:	2101      	movs	r1, #1
 8007334:	4618      	mov	r0, r3
 8007336:	f001 fbc5 	bl	8008ac4 <RCCEx_PLL3_Config>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800733e:	e003      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	75fb      	strb	r3, [r7, #23]
      break;
 8007344:	e000      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800734e:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007352:	f023 0207 	bic.w	r2, r3, #7
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735a:	4923      	ldr	r1, [pc, #140]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800735c:	4313      	orrs	r3, r2
 800735e:	654b      	str	r3, [r1, #84]	; 0x54
 8007360:	e001      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0304 	and.w	r3, r3, #4
 800736e:	2b00      	cmp	r3, #0
 8007370:	d040      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007378:	2b05      	cmp	r3, #5
 800737a:	d821      	bhi.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	080073c7 	.word	0x080073c7
 8007388:	0800739d 	.word	0x0800739d
 800738c:	080073af 	.word	0x080073af
 8007390:	080073c7 	.word	0x080073c7
 8007394:	080073c7 	.word	0x080073c7
 8007398:	080073c7 	.word	0x080073c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3304      	adds	r3, #4
 80073a0:	2101      	movs	r1, #1
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 fadc 	bl	8008960 <RCCEx_PLL2_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80073ac:	e00c      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3324      	adds	r3, #36	; 0x24
 80073b2:	2101      	movs	r1, #1
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fb85 	bl	8008ac4 <RCCEx_PLL3_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80073be:	e003      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	75fb      	strb	r3, [r7, #23]
      break;
 80073c4:	e000      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80073c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d110      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073ce:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80073d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d2:	f023 0207 	bic.w	r2, r3, #7
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073dc:	4902      	ldr	r1, [pc, #8]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	658b      	str	r3, [r1, #88]	; 0x58
 80073e2:	e007      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80073e4:	58024800 	.word	0x58024800
 80073e8:	58024400 	.word	0x58024400
 80073ec:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
 80073f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0320 	and.w	r3, r3, #32
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d04b      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800740a:	d02e      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800740c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007410:	d828      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007416:	d02a      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741c:	d822      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800741e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007422:	d026      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007424:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007428:	d81c      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800742a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800742e:	d010      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007434:	d816      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01d      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800743a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800743e:	d111      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f001 fa8a 	bl	8008960 <RCCEx_PLL2_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007450:	e012      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3324      	adds	r3, #36	; 0x24
 8007456:	2102      	movs	r1, #2
 8007458:	4618      	mov	r0, r3
 800745a:	f001 fb33 	bl	8008ac4 <RCCEx_PLL3_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007462:	e009      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
      break;
 8007468:	e006      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800746a:	bf00      	nop
 800746c:	e004      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800746e:	bf00      	nop
 8007470:	e002      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007472:	bf00      	nop
 8007474:	e000      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800747e:	4bb2      	ldr	r3, [pc, #712]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007482:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748c:	49ae      	ldr	r1, [pc, #696]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800748e:	4313      	orrs	r3, r2
 8007490:	654b      	str	r3, [r1, #84]	; 0x54
 8007492:	e001      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d04b      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074ae:	d02e      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80074b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074b4:	d828      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80074b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ba:	d02a      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80074bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c0:	d822      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80074c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074c6:	d026      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80074c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074cc:	d81c      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80074ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074d2:	d010      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80074d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074d8:	d816      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d01d      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80074de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e2:	d111      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3304      	adds	r3, #4
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 fa38 	bl	8008960 <RCCEx_PLL2_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80074f4:	e012      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3324      	adds	r3, #36	; 0x24
 80074fa:	2102      	movs	r1, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 fae1 	bl	8008ac4 <RCCEx_PLL3_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007506:	e009      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	75fb      	strb	r3, [r7, #23]
      break;
 800750c:	e006      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800750e:	bf00      	nop
 8007510:	e004      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007512:	bf00      	nop
 8007514:	e002      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007516:	bf00      	nop
 8007518:	e000      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800751a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007522:	4b89      	ldr	r3, [pc, #548]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007526:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007530:	4985      	ldr	r1, [pc, #532]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007532:	4313      	orrs	r3, r2
 8007534:	658b      	str	r3, [r1, #88]	; 0x58
 8007536:	e001      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007544:	2b00      	cmp	r3, #0
 8007546:	d04b      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800754e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007552:	d02e      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007554:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007558:	d828      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800755a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800755e:	d02a      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007564:	d822      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007566:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800756a:	d026      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800756c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007570:	d81c      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007576:	d010      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800757c:	d816      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d01d      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007586:	d111      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	2100      	movs	r1, #0
 800758e:	4618      	mov	r0, r3
 8007590:	f001 f9e6 	bl	8008960 <RCCEx_PLL2_Config>
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007598:	e012      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3324      	adds	r3, #36	; 0x24
 800759e:	2102      	movs	r1, #2
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 fa8f 	bl	8008ac4 <RCCEx_PLL3_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80075aa:	e009      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	75fb      	strb	r3, [r7, #23]
      break;
 80075b0:	e006      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80075b2:	bf00      	nop
 80075b4:	e004      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80075b6:	bf00      	nop
 80075b8:	e002      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80075ba:	bf00      	nop
 80075bc:	e000      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80075be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10a      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075c6:	4b60      	ldr	r3, [pc, #384]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075d4:	495c      	ldr	r1, [pc, #368]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	658b      	str	r3, [r1, #88]	; 0x58
 80075da:	e001      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
 80075de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d018      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f4:	d10a      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3324      	adds	r3, #36	; 0x24
 80075fa:	2102      	movs	r1, #2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f001 fa61 	bl	8008ac4 <RCCEx_PLL3_Config>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800760c:	4b4e      	ldr	r3, [pc, #312]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800760e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007610:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007618:	494b      	ldr	r1, [pc, #300]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800761a:	4313      	orrs	r3, r2
 800761c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01a      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007634:	d10a      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3324      	adds	r3, #36	; 0x24
 800763a:	2102      	movs	r1, #2
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fa41 	bl	8008ac4 <RCCEx_PLL3_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800764c:	4b3e      	ldr	r3, [pc, #248]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800764e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765a:	493b      	ldr	r1, [pc, #236]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800765c:	4313      	orrs	r3, r2
 800765e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d034      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007676:	d01d      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800767c:	d817      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007686:	d009      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007688:	e011      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3304      	adds	r3, #4
 800768e:	2100      	movs	r1, #0
 8007690:	4618      	mov	r0, r3
 8007692:	f001 f965 	bl	8008960 <RCCEx_PLL2_Config>
 8007696:	4603      	mov	r3, r0
 8007698:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800769a:	e00c      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3324      	adds	r3, #36	; 0x24
 80076a0:	2102      	movs	r1, #2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 fa0e 	bl	8008ac4 <RCCEx_PLL3_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80076ac:	e003      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	75fb      	strb	r3, [r7, #23]
      break;
 80076b2:	e000      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80076b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076bc:	4b22      	ldr	r3, [pc, #136]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80076be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ca:	491f      	ldr	r1, [pc, #124]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	658b      	str	r3, [r1, #88]	; 0x58
 80076d0:	e001      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d036      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076ec:	d01c      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80076ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076f2:	d816      	bhi.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80076f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f8:	d003      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80076fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076fe:	d007      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007700:	e00f      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007702:	4b11      	ldr	r3, [pc, #68]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	4a10      	ldr	r2, [pc, #64]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800770c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800770e:	e00c      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3324      	adds	r3, #36	; 0x24
 8007714:	2101      	movs	r1, #1
 8007716:	4618      	mov	r0, r3
 8007718:	f001 f9d4 	bl	8008ac4 <RCCEx_PLL3_Config>
 800771c:	4603      	mov	r3, r0
 800771e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007720:	e003      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	75fb      	strb	r3, [r7, #23]
      break;
 8007726:	e000      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10d      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800773e:	4902      	ldr	r1, [pc, #8]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007740:	4313      	orrs	r3, r2
 8007742:	654b      	str	r3, [r1, #84]	; 0x54
 8007744:	e004      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d029      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007768:	d007      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800776a:	e00f      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800776c:	4b61      	ldr	r3, [pc, #388]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4a60      	ldr	r2, [pc, #384]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007778:	e00b      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3304      	adds	r3, #4
 800777e:	2102      	movs	r1, #2
 8007780:	4618      	mov	r0, r3
 8007782:	f001 f8ed 	bl	8008960 <RCCEx_PLL2_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800778a:	e002      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	75fb      	strb	r3, [r7, #23]
      break;
 8007790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007798:	4b56      	ldr	r3, [pc, #344]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800779a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a4:	4953      	ldr	r1, [pc, #332]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077aa:	e001      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3324      	adds	r3, #36	; 0x24
 80077c0:	2102      	movs	r1, #2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f001 f97e 	bl	8008ac4 <RCCEx_PLL3_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d030      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077e6:	d017      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80077e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ec:	d811      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80077ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f2:	d013      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80077f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f8:	d80b      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d010      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80077fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007802:	d106      	bne.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007804:	4b3b      	ldr	r3, [pc, #236]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	4a3a      	ldr	r2, [pc, #232]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800780a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800780e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007810:	e007      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	75fb      	strb	r3, [r7, #23]
      break;
 8007816:	e004      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007818:	bf00      	nop
 800781a:	e002      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800781c:	bf00      	nop
 800781e:	e000      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007828:	4b32      	ldr	r3, [pc, #200]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800782a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007834:	492f      	ldr	r1, [pc, #188]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007836:	4313      	orrs	r3, r2
 8007838:	654b      	str	r3, [r1, #84]	; 0x54
 800783a:	e001      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d008      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800784c:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800784e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007850:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007858:	4926      	ldr	r1, [pc, #152]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800785a:	4313      	orrs	r3, r2
 800785c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800786a:	4b22      	ldr	r3, [pc, #136]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800786c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007876:	491f      	ldr	r1, [pc, #124]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007878:	4313      	orrs	r3, r2
 800787a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00d      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007888:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	4a19      	ldr	r2, [pc, #100]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800788e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007892:	6113      	str	r3, [r2, #16]
 8007894:	4b17      	ldr	r3, [pc, #92]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800789e:	4915      	ldr	r1, [pc, #84]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	da08      	bge.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80078ac:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b8:	490e      	ldr	r1, [pc, #56]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d009      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d8:	4906      	ldr	r1, [pc, #24]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80078de:	7dbb      	ldrb	r3, [r7, #22]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e000      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	58024400 	.word	0x58024400

080078f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b090      	sub	sp, #64	; 0x40
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007906:	f040 8089 	bne.w	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800790a:	4b95      	ldr	r3, [pc, #596]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800790c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	633b      	str	r3, [r7, #48]	; 0x30
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	2b04      	cmp	r3, #4
 8007918:	d87d      	bhi.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800791a:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007920:	08007935 	.word	0x08007935
 8007924:	08007959 	.word	0x08007959
 8007928:	0800797d 	.word	0x0800797d
 800792c:	08007a11 	.word	0x08007a11
 8007930:	080079a1 	.word	0x080079a1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007934:	4b8a      	ldr	r3, [pc, #552]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007940:	d107      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007946:	4618      	mov	r0, r3
 8007948:	f000 feb8 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007950:	e3ed      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007956:	e3ea      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007958:	4b81      	ldr	r3, [pc, #516]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007964:	d107      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007966:	f107 0318 	add.w	r3, r7, #24
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fbfe 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007974:	e3db      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800797a:	e3d8      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800797c:	4b78      	ldr	r3, [pc, #480]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007988:	d107      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	4618      	mov	r0, r3
 8007990:	f000 fd40 	bl	8008414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007998:	e3c9      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800799e:	e3c6      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079a0:	4b6f      	ldr	r3, [pc, #444]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079aa:	4b6d      	ldr	r3, [pc, #436]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d10c      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80079b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079bc:	4b68      	ldr	r3, [pc, #416]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	08db      	lsrs	r3, r3, #3
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	4a67      	ldr	r2, [pc, #412]	; (8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80079c8:	fa22 f303 	lsr.w	r3, r2, r3
 80079cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ce:	e01e      	b.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079d0:	4b63      	ldr	r3, [pc, #396]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079dc:	d106      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80079de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079e4:	d102      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079e6:	4b60      	ldr	r3, [pc, #384]	; (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ea:	e010      	b.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079ec:	4b5c      	ldr	r3, [pc, #368]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079f8:	d106      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80079fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a00:	d102      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a02:	4b5a      	ldr	r3, [pc, #360]	; (8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a06:	e002      	b.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a0c:	e38f      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007a0e:	e38e      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a10:	4b57      	ldr	r3, [pc, #348]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a14:	e38b      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a1a:	e388      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a22:	f040 80a7 	bne.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007a26:	4b4e      	ldr	r3, [pc, #312]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007a2e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a36:	d054      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a3e:	f200 808b 	bhi.w	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a48:	f000 8083 	beq.w	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a52:	f200 8081 	bhi.w	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a5c:	d02f      	beq.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a64:	d878      	bhi.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a72:	d012      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007a74:	e070      	b.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a76:	4b3a      	ldr	r3, [pc, #232]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a82:	d107      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fe17 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a92:	e34c      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a98:	e349      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a9a:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aa6:	d107      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa8:	f107 0318 	add.w	r3, r7, #24
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 fb5d 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ab6:	e33a      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007abc:	e337      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007abe:	4b28      	ldr	r3, [pc, #160]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aca:	d107      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007acc:	f107 030c 	add.w	r3, r7, #12
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fc9f 	bl	8008414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ada:	e328      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ae0:	e325      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ae2:	4b1f      	ldr	r3, [pc, #124]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007aec:	4b1c      	ldr	r3, [pc, #112]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d10c      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d109      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007afe:	4b18      	ldr	r3, [pc, #96]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	08db      	lsrs	r3, r3, #3
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b10:	e01e      	b.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b12:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b1e:	d106      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b26:	d102      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b2c:	e010      	b.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b3a:	d106      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b42:	d102      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b44:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b48:	e002      	b.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b4e:	e2ee      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007b50:	e2ed      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b52:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b56:	e2ea      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b5c:	e2e7      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007b5e:	bf00      	nop
 8007b60:	58024400 	.word	0x58024400
 8007b64:	03d09000 	.word	0x03d09000
 8007b68:	003d0900 	.word	0x003d0900
 8007b6c:	017d7840 	.word	0x017d7840
 8007b70:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b7a:	f040 809c 	bne.w	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007b7e:	4b9e      	ldr	r3, [pc, #632]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b82:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b8e:	d054      	beq.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b96:	f200 808b 	bhi.w	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ba0:	f000 8083 	beq.w	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007baa:	f200 8081 	bhi.w	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bb4:	d02f      	beq.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bbc:	d878      	bhi.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bca:	d012      	beq.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007bcc:	e070      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bce:	4b8a      	ldr	r3, [pc, #552]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bda:	d107      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 fd6b 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bea:	e2a0      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf0:	e29d      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bf2:	4b81      	ldr	r3, [pc, #516]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bfe:	d107      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c00:	f107 0318 	add.w	r3, r7, #24
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 fab1 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007c0e:	e28e      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c14:	e28b      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c16:	4b78      	ldr	r3, [pc, #480]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c22:	d107      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c24:	f107 030c 	add.w	r3, r7, #12
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fbf3 	bl	8008414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c32:	e27c      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c38:	e279      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c3a:	4b6f      	ldr	r3, [pc, #444]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c44:	4b6c      	ldr	r3, [pc, #432]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d10c      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c56:	4b68      	ldr	r3, [pc, #416]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	08db      	lsrs	r3, r3, #3
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	4a66      	ldr	r2, [pc, #408]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c62:	fa22 f303 	lsr.w	r3, r2, r3
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c68:	e01e      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c6a:	4b63      	ldr	r3, [pc, #396]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c76:	d106      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c7e:	d102      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c80:	4b5f      	ldr	r3, [pc, #380]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c84:	e010      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c86:	4b5c      	ldr	r3, [pc, #368]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c92:	d106      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9a:	d102      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c9c:	4b59      	ldr	r3, [pc, #356]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca0:	e002      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ca6:	e242      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007ca8:	e241      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007caa:	4b57      	ldr	r3, [pc, #348]	; (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cae:	e23e      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb4:	e23b      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cbc:	f040 80a6 	bne.w	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007cc0:	4b4d      	ldr	r3, [pc, #308]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007cc8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd0:	d054      	beq.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd8:	f200 808b 	bhi.w	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ce2:	f000 8083 	beq.w	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cec:	f200 8081 	bhi.w	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cf6:	d02f      	beq.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cfe:	d878      	bhi.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0c:	d012      	beq.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007d0e:	e070      	b.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d10:	4b39      	ldr	r3, [pc, #228]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fcca 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d2c:	e1ff      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d32:	e1fc      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d34:	4b30      	ldr	r3, [pc, #192]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d40:	d107      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d42:	f107 0318 	add.w	r3, r7, #24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fa10 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d50:	e1ed      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d56:	e1ea      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d58:	4b27      	ldr	r3, [pc, #156]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d64:	d107      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d66:	f107 030c 	add.w	r3, r7, #12
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fb52 	bl	8008414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d74:	e1db      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d7a:	e1d8      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d7c:	4b1e      	ldr	r3, [pc, #120]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d86:	4b1c      	ldr	r3, [pc, #112]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d10c      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d109      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d98:	4b17      	ldr	r3, [pc, #92]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	08db      	lsrs	r3, r3, #3
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007da4:	fa22 f303 	lsr.w	r3, r2, r3
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007daa:	e01e      	b.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dac:	4b12      	ldr	r3, [pc, #72]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db8:	d106      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dc0:	d102      	bne.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc6:	e010      	b.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dc8:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dd4:	d106      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ddc:	d102      	bne.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007dde:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de2:	e002      	b.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007de8:	e1a1      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007dea:	e1a0      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df0:	e19d      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df6:	e19a      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	03d09000 	.word	0x03d09000
 8007e00:	003d0900 	.word	0x003d0900
 8007e04:	017d7840 	.word	0x017d7840
 8007e08:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e12:	d173      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007e14:	4b9a      	ldr	r3, [pc, #616]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e24:	d02f      	beq.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e2c:	d863      	bhi.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3a:	d012      	beq.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007e3c:	e05b      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e3e:	4b90      	ldr	r3, [pc, #576]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e4a:	d107      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e4c:	f107 0318 	add.w	r3, r7, #24
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 f98b 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e5a:	e168      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e60:	e165      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e62:	4b87      	ldr	r3, [pc, #540]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e6e:	d107      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e70:	f107 030c 	add.w	r3, r7, #12
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 facd 	bl	8008414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e7e:	e156      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e84:	e153      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e86:	4b7e      	ldr	r3, [pc, #504]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e90:	4b7b      	ldr	r3, [pc, #492]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	d10c      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ea2:	4b77      	ldr	r3, [pc, #476]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	08db      	lsrs	r3, r3, #3
 8007ea8:	f003 0303 	and.w	r3, r3, #3
 8007eac:	4a75      	ldr	r2, [pc, #468]	; (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007eae:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eb4:	e01e      	b.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eb6:	4b72      	ldr	r3, [pc, #456]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec2:	d106      	bne.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eca:	d102      	bne.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ecc:	4b6e      	ldr	r3, [pc, #440]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed0:	e010      	b.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ed2:	4b6b      	ldr	r3, [pc, #428]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ede:	d106      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ee6:	d102      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ee8:	4b68      	ldr	r3, [pc, #416]	; (800808c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eec:	e002      	b.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ef2:	e11c      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007ef4:	e11b      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007efa:	e118      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f02:	d133      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007f04:	4b5e      	ldr	r3, [pc, #376]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1a:	d012      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007f1c:	e023      	b.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f1e:	4b58      	ldr	r3, [pc, #352]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f2a:	d107      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fbc3 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f3a:	e0f8      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f40:	e0f5      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f42:	4b4f      	ldr	r3, [pc, #316]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f4e:	d107      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f50:	f107 0318 	add.w	r3, r7, #24
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 f909 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f5e:	e0e6      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f64:	e0e3      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6a:	e0e0      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f72:	f040 808d 	bne.w	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007f76:	4b42      	ldr	r3, [pc, #264]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007f7e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f86:	d06b      	beq.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f8e:	d874      	bhi.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f96:	d056      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f9e:	d86c      	bhi.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fa6:	d03b      	beq.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fae:	d864      	bhi.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb6:	d021      	beq.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fbe:	d85c      	bhi.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d004      	beq.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fcc:	d004      	beq.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007fce:	e054      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007fd0:	f000 f8b6 	bl	8008140 <HAL_RCCEx_GetD3PCLK1Freq>
 8007fd4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007fd6:	e0aa      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fd8:	4b29      	ldr	r3, [pc, #164]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fe4:	d107      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe6:	f107 0318 	add.w	r3, r7, #24
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f8be 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ff4:	e09b      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ffa:	e098      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ffc:	4b20      	ldr	r3, [pc, #128]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008008:	d107      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800a:	f107 030c 	add.w	r3, r7, #12
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fa00 	bl	8008414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008018:	e089      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800801e:	e086      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008020:	4b17      	ldr	r3, [pc, #92]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b04      	cmp	r3, #4
 800802a:	d109      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800802c:	4b14      	ldr	r3, [pc, #80]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	08db      	lsrs	r3, r3, #3
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	4a13      	ldr	r2, [pc, #76]	; (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008038:	fa22 f303 	lsr.w	r3, r2, r3
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800803e:	e076      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008044:	e073      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008046:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008052:	d102      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008054:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008058:	e069      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800805e:	e066      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008060:	4b07      	ldr	r3, [pc, #28]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800806c:	d102      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800806e:	4b07      	ldr	r3, [pc, #28]	; (800808c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008072:	e05c      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008078:	e059      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800807e:	e056      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008080:	58024400 	.word	0x58024400
 8008084:	03d09000 	.word	0x03d09000
 8008088:	003d0900 	.word	0x003d0900
 800808c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008096:	d148      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008098:	4b27      	ldr	r3, [pc, #156]	; (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800809a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a8:	d02a      	beq.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080b0:	d838      	bhi.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80080b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d004      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080be:	d00d      	beq.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80080c0:	e030      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080c2:	4b1d      	ldr	r3, [pc, #116]	; (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080ce:	d102      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80080d0:	4b1a      	ldr	r3, [pc, #104]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080d4:	e02b      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080da:	e028      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080dc:	4b16      	ldr	r3, [pc, #88]	; (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080e8:	d107      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fae4 	bl	80086bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080f8:	e019      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080fe:	e016      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800810c:	d107      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800810e:	f107 0318 	add.w	r3, r7, #24
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f82a 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800811c:	e007      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008122:	e004      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008128:	e001      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800812e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008130:	4618      	mov	r0, r3
 8008132:	3740      	adds	r7, #64	; 0x40
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	58024400 	.word	0x58024400
 800813c:	017d7840 	.word	0x017d7840

08008140 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008144:	f7fe fc40 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8008148:	4602      	mov	r2, r0
 800814a:	4b06      	ldr	r3, [pc, #24]	; (8008164 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	091b      	lsrs	r3, r3, #4
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	4904      	ldr	r1, [pc, #16]	; (8008168 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008156:	5ccb      	ldrb	r3, [r1, r3]
 8008158:	f003 031f 	and.w	r3, r3, #31
 800815c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008160:	4618      	mov	r0, r3
 8008162:	bd80      	pop	{r7, pc}
 8008164:	58024400 	.word	0x58024400
 8008168:	0800c1c8 	.word	0x0800c1c8

0800816c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800816c:	b480      	push	{r7}
 800816e:	b089      	sub	sp, #36	; 0x24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008174:	4ba1      	ldr	r3, [pc, #644]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800817e:	4b9f      	ldr	r3, [pc, #636]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	0b1b      	lsrs	r3, r3, #12
 8008184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008188:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800818a:	4b9c      	ldr	r3, [pc, #624]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800818c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818e:	091b      	lsrs	r3, r3, #4
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008196:	4b99      	ldr	r3, [pc, #612]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	08db      	lsrs	r3, r3, #3
 800819c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	fb02 f303 	mul.w	r3, r2, r3
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8111 	beq.w	80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	f000 8083 	beq.w	80082c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	f200 80a1 	bhi.w	800830c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d056      	beq.n	8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80081d6:	e099      	b.n	800830c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081d8:	4b88      	ldr	r3, [pc, #544]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d02d      	beq.n	8008240 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081e4:	4b85      	ldr	r3, [pc, #532]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	08db      	lsrs	r3, r3, #3
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	4a84      	ldr	r2, [pc, #528]	; (8008400 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80081f0:	fa22 f303 	lsr.w	r3, r2, r3
 80081f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	ee07 3a90 	vmov	s15, r3
 80081fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820e:	4b7b      	ldr	r3, [pc, #492]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008222:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800822a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800823e:	e087      	b.n	8008350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008408 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800824e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008252:	4b6a      	ldr	r3, [pc, #424]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008262:	ed97 6a03 	vldr	s12, [r7, #12]
 8008266:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800826a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800827a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008282:	e065      	b.n	8008350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800840c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008296:	4b59      	ldr	r3, [pc, #356]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082c6:	e043      	b.n	8008350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008410 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80082d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082da:	4b48      	ldr	r3, [pc, #288]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800830a:	e021      	b.n	8008350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800840c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800831a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831e:	4b37      	ldr	r3, [pc, #220]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008332:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800834e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008350:	4b2a      	ldr	r3, [pc, #168]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	0a5b      	lsrs	r3, r3, #9
 8008356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800836a:	edd7 6a07 	vldr	s13, [r7, #28]
 800836e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008376:	ee17 2a90 	vmov	r2, s15
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800837e:	4b1f      	ldr	r3, [pc, #124]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008382:	0c1b      	lsrs	r3, r3, #16
 8008384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008388:	ee07 3a90 	vmov	s15, r3
 800838c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008394:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008398:	edd7 6a07 	vldr	s13, [r7, #28]
 800839c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083a4:	ee17 2a90 	vmov	r2, s15
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80083ac:	4b13      	ldr	r3, [pc, #76]	; (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	0e1b      	lsrs	r3, r3, #24
 80083b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083d2:	ee17 2a90 	vmov	r2, s15
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083da:	e008      	b.n	80083ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	609a      	str	r2, [r3, #8]
}
 80083ee:	bf00      	nop
 80083f0:	3724      	adds	r7, #36	; 0x24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	58024400 	.word	0x58024400
 8008400:	03d09000 	.word	0x03d09000
 8008404:	46000000 	.word	0x46000000
 8008408:	4c742400 	.word	0x4c742400
 800840c:	4a742400 	.word	0x4a742400
 8008410:	4bbebc20 	.word	0x4bbebc20

08008414 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008414:	b480      	push	{r7}
 8008416:	b089      	sub	sp, #36	; 0x24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800841c:	4ba1      	ldr	r3, [pc, #644]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008426:	4b9f      	ldr	r3, [pc, #636]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842a:	0d1b      	lsrs	r3, r3, #20
 800842c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008430:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008432:	4b9c      	ldr	r3, [pc, #624]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008436:	0a1b      	lsrs	r3, r3, #8
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800843e:	4b99      	ldr	r3, [pc, #612]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008442:	08db      	lsrs	r3, r3, #3
 8008444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	fb02 f303 	mul.w	r3, r2, r3
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008456:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8111 	beq.w	8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b02      	cmp	r3, #2
 8008466:	f000 8083 	beq.w	8008570 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	2b02      	cmp	r3, #2
 800846e:	f200 80a1 	bhi.w	80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d056      	beq.n	800852c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800847e:	e099      	b.n	80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008480:	4b88      	ldr	r3, [pc, #544]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	d02d      	beq.n	80084e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800848c:	4b85      	ldr	r3, [pc, #532]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	08db      	lsrs	r3, r3, #3
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	4a84      	ldr	r2, [pc, #528]	; (80086a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008498:	fa22 f303 	lsr.w	r3, r2, r3
 800849c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	ee07 3a90 	vmov	s15, r3
 80084a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b6:	4b7b      	ldr	r3, [pc, #492]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80084e6:	e087      	b.n	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80086b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80084f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fa:	4b6a      	ldr	r3, [pc, #424]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850a:	ed97 6a03 	vldr	s12, [r7, #12]
 800850e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800851e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800852a:	e065      	b.n	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800853a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853e:	4b59      	ldr	r3, [pc, #356]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008552:	eddf 5a56 	vldr	s11, [pc, #344]	; 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800856e:	e043      	b.n	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800857e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008582:	4b48      	ldr	r3, [pc, #288]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008592:	ed97 6a03 	vldr	s12, [r7, #12]
 8008596:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800859a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085b2:	e021      	b.n	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c6:	4b37      	ldr	r3, [pc, #220]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80085f8:	4b2a      	ldr	r3, [pc, #168]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	0a5b      	lsrs	r3, r3, #9
 80085fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008602:	ee07 3a90 	vmov	s15, r3
 8008606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800860e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008612:	edd7 6a07 	vldr	s13, [r7, #28]
 8008616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800861a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800861e:	ee17 2a90 	vmov	r2, s15
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008626:	4b1f      	ldr	r3, [pc, #124]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	0c1b      	lsrs	r3, r3, #16
 800862c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800863c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008640:	edd7 6a07 	vldr	s13, [r7, #28]
 8008644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800864c:	ee17 2a90 	vmov	r2, s15
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008654:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008658:	0e1b      	lsrs	r3, r3, #24
 800865a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800866a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800866e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867a:	ee17 2a90 	vmov	r2, s15
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008682:	e008      	b.n	8008696 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	609a      	str	r2, [r3, #8]
}
 8008696:	bf00      	nop
 8008698:	3724      	adds	r7, #36	; 0x24
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	58024400 	.word	0x58024400
 80086a8:	03d09000 	.word	0x03d09000
 80086ac:	46000000 	.word	0x46000000
 80086b0:	4c742400 	.word	0x4c742400
 80086b4:	4a742400 	.word	0x4a742400
 80086b8:	4bbebc20 	.word	0x4bbebc20

080086bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80086bc:	b480      	push	{r7}
 80086be:	b089      	sub	sp, #36	; 0x24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086c4:	4ba0      	ldr	r3, [pc, #640]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80086ce:	4b9e      	ldr	r3, [pc, #632]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	091b      	lsrs	r3, r3, #4
 80086d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80086da:	4b9b      	ldr	r3, [pc, #620]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086e4:	4b98      	ldr	r3, [pc, #608]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e8:	08db      	lsrs	r3, r3, #3
 80086ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	fb02 f303 	mul.w	r3, r2, r3
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 8111 	beq.w	800892a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	2b02      	cmp	r3, #2
 800870c:	f000 8083 	beq.w	8008816 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	2b02      	cmp	r3, #2
 8008714:	f200 80a1 	bhi.w	800885a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d056      	beq.n	80087d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008724:	e099      	b.n	800885a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008726:	4b88      	ldr	r3, [pc, #544]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d02d      	beq.n	800878e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008732:	4b85      	ldr	r3, [pc, #532]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	08db      	lsrs	r3, r3, #3
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	4a83      	ldr	r2, [pc, #524]	; (800894c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800873e:	fa22 f303 	lsr.w	r3, r2, r3
 8008742:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	ee07 3a90 	vmov	s15, r3
 8008754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875c:	4b7a      	ldr	r3, [pc, #488]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008764:	ee07 3a90 	vmov	s15, r3
 8008768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008770:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008788:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800878c:	e087      	b.n	800889e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008798:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008954 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800879c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a0:	4b69      	ldr	r3, [pc, #420]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a8:	ee07 3a90 	vmov	s15, r3
 80087ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087d0:	e065      	b.n	800889e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008958 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80087e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e4:	4b58      	ldr	r3, [pc, #352]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008810:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008814:	e043      	b.n	800889e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	ee07 3a90 	vmov	s15, r3
 800881c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008820:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800895c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008828:	4b47      	ldr	r3, [pc, #284]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800882a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008830:	ee07 3a90 	vmov	s15, r3
 8008834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008838:	ed97 6a03 	vldr	s12, [r7, #12]
 800883c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008854:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008858:	e021      	b.n	800889e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008864:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008954 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886c:	4b36      	ldr	r3, [pc, #216]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008880:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008898:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800889c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800889e:	4b2a      	ldr	r3, [pc, #168]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	0a5b      	lsrs	r3, r3, #9
 80088a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a8:	ee07 3a90 	vmov	s15, r3
 80088ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80088bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c4:	ee17 2a90 	vmov	r2, s15
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80088cc:	4b1e      	ldr	r3, [pc, #120]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	0c1b      	lsrs	r3, r3, #16
 80088d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088f2:	ee17 2a90 	vmov	r2, s15
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80088fa:	4b13      	ldr	r3, [pc, #76]	; (8008948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	0e1b      	lsrs	r3, r3, #24
 8008900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008904:	ee07 3a90 	vmov	s15, r3
 8008908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008910:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008914:	edd7 6a07 	vldr	s13, [r7, #28]
 8008918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800891c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008920:	ee17 2a90 	vmov	r2, s15
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008928:	e008      	b.n	800893c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	609a      	str	r2, [r3, #8]
}
 800893c:	bf00      	nop
 800893e:	3724      	adds	r7, #36	; 0x24
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	58024400 	.word	0x58024400
 800894c:	03d09000 	.word	0x03d09000
 8008950:	46000000 	.word	0x46000000
 8008954:	4c742400 	.word	0x4c742400
 8008958:	4a742400 	.word	0x4a742400
 800895c:	4bbebc20 	.word	0x4bbebc20

08008960 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800896e:	4b53      	ldr	r3, [pc, #332]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	f003 0303 	and.w	r3, r3, #3
 8008976:	2b03      	cmp	r3, #3
 8008978:	d101      	bne.n	800897e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e099      	b.n	8008ab2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800897e:	4b4f      	ldr	r3, [pc, #316]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a4e      	ldr	r2, [pc, #312]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800898a:	f7f9 fff7 	bl	800297c <HAL_GetTick>
 800898e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008990:	e008      	b.n	80089a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008992:	f7f9 fff3 	bl	800297c <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	2b02      	cmp	r3, #2
 800899e:	d901      	bls.n	80089a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e086      	b.n	8008ab2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089a4:	4b45      	ldr	r3, [pc, #276]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1f0      	bne.n	8008992 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089b0:	4b42      	ldr	r3, [pc, #264]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 80089b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	031b      	lsls	r3, r3, #12
 80089be:	493f      	ldr	r1, [pc, #252]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	628b      	str	r3, [r1, #40]	; 0x28
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	025b      	lsls	r3, r3, #9
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	431a      	orrs	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	3b01      	subs	r3, #1
 80089e0:	041b      	lsls	r3, r3, #16
 80089e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089e6:	431a      	orrs	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	061b      	lsls	r3, r3, #24
 80089f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089f4:	4931      	ldr	r1, [pc, #196]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80089fa:	4b30      	ldr	r3, [pc, #192]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	492d      	ldr	r1, [pc, #180]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a0c:	4b2b      	ldr	r3, [pc, #172]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	f023 0220 	bic.w	r2, r3, #32
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	4928      	ldr	r1, [pc, #160]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a1e:	4b27      	ldr	r3, [pc, #156]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	4a26      	ldr	r2, [pc, #152]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a24:	f023 0310 	bic.w	r3, r3, #16
 8008a28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a2a:	4b24      	ldr	r3, [pc, #144]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a2e:	4b24      	ldr	r3, [pc, #144]	; (8008ac0 <RCCEx_PLL2_Config+0x160>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	69d2      	ldr	r2, [r2, #28]
 8008a36:	00d2      	lsls	r2, r2, #3
 8008a38:	4920      	ldr	r1, [pc, #128]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a3e:	4b1f      	ldr	r3, [pc, #124]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a42:	4a1e      	ldr	r2, [pc, #120]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a44:	f043 0310 	orr.w	r3, r3, #16
 8008a48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d106      	bne.n	8008a5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a50:	4b1a      	ldr	r3, [pc, #104]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	4a19      	ldr	r2, [pc, #100]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a5c:	e00f      	b.n	8008a7e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d106      	bne.n	8008a72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a64:	4b15      	ldr	r3, [pc, #84]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	4a14      	ldr	r2, [pc, #80]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a70:	e005      	b.n	8008a7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a72:	4b12      	ldr	r3, [pc, #72]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	4a11      	ldr	r2, [pc, #68]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a7e:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a0e      	ldr	r2, [pc, #56]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008a84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a8a:	f7f9 ff77 	bl	800297c <HAL_GetTick>
 8008a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a90:	e008      	b.n	8008aa4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a92:	f7f9 ff73 	bl	800297c <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d901      	bls.n	8008aa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e006      	b.n	8008ab2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008aa4:	4b05      	ldr	r3, [pc, #20]	; (8008abc <RCCEx_PLL2_Config+0x15c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0f0      	beq.n	8008a92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	58024400 	.word	0x58024400
 8008ac0:	ffff0007 	.word	0xffff0007

08008ac4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ad2:	4b53      	ldr	r3, [pc, #332]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad6:	f003 0303 	and.w	r3, r3, #3
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d101      	bne.n	8008ae2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e099      	b.n	8008c16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ae2:	4b4f      	ldr	r3, [pc, #316]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a4e      	ldr	r2, [pc, #312]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aee:	f7f9 ff45 	bl	800297c <HAL_GetTick>
 8008af2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008af4:	e008      	b.n	8008b08 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008af6:	f7f9 ff41 	bl	800297c <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d901      	bls.n	8008b08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e086      	b.n	8008c16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b08:	4b45      	ldr	r3, [pc, #276]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1f0      	bne.n	8008af6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b14:	4b42      	ldr	r3, [pc, #264]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	051b      	lsls	r3, r3, #20
 8008b22:	493f      	ldr	r1, [pc, #252]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	628b      	str	r3, [r1, #40]	; 0x28
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	025b      	lsls	r3, r3, #9
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	041b      	lsls	r3, r3, #16
 8008b46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	061b      	lsls	r3, r3, #24
 8008b54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b58:	4931      	ldr	r1, [pc, #196]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b5e:	4b30      	ldr	r3, [pc, #192]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	492d      	ldr	r1, [pc, #180]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b70:	4b2b      	ldr	r3, [pc, #172]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	4928      	ldr	r1, [pc, #160]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b82:	4b27      	ldr	r3, [pc, #156]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b86:	4a26      	ldr	r2, [pc, #152]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b8e:	4b24      	ldr	r3, [pc, #144]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b92:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <RCCEx_PLL3_Config+0x160>)
 8008b94:	4013      	ands	r3, r2
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	69d2      	ldr	r2, [r2, #28]
 8008b9a:	00d2      	lsls	r2, r2, #3
 8008b9c:	4920      	ldr	r1, [pc, #128]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ba2:	4b1f      	ldr	r3, [pc, #124]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	4a1e      	ldr	r2, [pc, #120]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d106      	bne.n	8008bc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bb4:	4b1a      	ldr	r3, [pc, #104]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	4a19      	ldr	r2, [pc, #100]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008bba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bc0:	e00f      	b.n	8008be2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d106      	bne.n	8008bd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008bc8:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	4a14      	ldr	r2, [pc, #80]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008bce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bd4:	e005      	b.n	8008be2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008bd6:	4b12      	ldr	r3, [pc, #72]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bda:	4a11      	ldr	r2, [pc, #68]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008be2:	4b0f      	ldr	r3, [pc, #60]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a0e      	ldr	r2, [pc, #56]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bee:	f7f9 fec5 	bl	800297c <HAL_GetTick>
 8008bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bf4:	e008      	b.n	8008c08 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008bf6:	f7f9 fec1 	bl	800297c <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e006      	b.n	8008c16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c08:	4b05      	ldr	r3, [pc, #20]	; (8008c20 <RCCEx_PLL3_Config+0x15c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0f0      	beq.n	8008bf6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	58024400 	.word	0x58024400
 8008c24:	ffff0007 	.word	0xffff0007

08008c28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e0eb      	b.n	8008e16 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a75      	ldr	r2, [pc, #468]	; (8008e20 <HAL_SPI_Init+0x1f8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00f      	beq.n	8008c6e <HAL_SPI_Init+0x46>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a74      	ldr	r2, [pc, #464]	; (8008e24 <HAL_SPI_Init+0x1fc>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00a      	beq.n	8008c6e <HAL_SPI_Init+0x46>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a72      	ldr	r2, [pc, #456]	; (8008e28 <HAL_SPI_Init+0x200>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d005      	beq.n	8008c6e <HAL_SPI_Init+0x46>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	2b0f      	cmp	r3, #15
 8008c68:	d901      	bls.n	8008c6e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e0d3      	b.n	8008e16 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fc96 	bl	80095a0 <SPI_GetPacketSize>
 8008c74:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a69      	ldr	r2, [pc, #420]	; (8008e20 <HAL_SPI_Init+0x1f8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00c      	beq.n	8008c9a <HAL_SPI_Init+0x72>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a67      	ldr	r2, [pc, #412]	; (8008e24 <HAL_SPI_Init+0x1fc>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d007      	beq.n	8008c9a <HAL_SPI_Init+0x72>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a66      	ldr	r2, [pc, #408]	; (8008e28 <HAL_SPI_Init+0x200>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d002      	beq.n	8008c9a <HAL_SPI_Init+0x72>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2b08      	cmp	r3, #8
 8008c98:	d811      	bhi.n	8008cbe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c9e:	4a60      	ldr	r2, [pc, #384]	; (8008e20 <HAL_SPI_Init+0x1f8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d009      	beq.n	8008cb8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a5e      	ldr	r2, [pc, #376]	; (8008e24 <HAL_SPI_Init+0x1fc>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d004      	beq.n	8008cb8 <HAL_SPI_Init+0x90>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a5d      	ldr	r2, [pc, #372]	; (8008e28 <HAL_SPI_Init+0x200>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d104      	bne.n	8008cc2 <HAL_SPI_Init+0x9a>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b10      	cmp	r3, #16
 8008cbc:	d901      	bls.n	8008cc2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e0a9      	b.n	8008e16 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d106      	bne.n	8008cdc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7f9 facc 	bl	8002274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0201 	bic.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cfc:	d119      	bne.n	8008d32 <HAL_SPI_Init+0x10a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d06:	d103      	bne.n	8008d10 <HAL_SPI_Init+0xe8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d008      	beq.n	8008d22 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10c      	bne.n	8008d32 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d20:	d107      	bne.n	8008d32 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69da      	ldr	r2, [r3, #28]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d44:	ea42 0103 	orr.w	r1, r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d62:	431a      	orrs	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	431a      	orrs	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	431a      	orrs	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d92:	ea42 0103 	orr.w	r1, r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d113      	bne.n	8008dd2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dbc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dd0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0201 	bic.w	r2, r2, #1
 8008de0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	40013000 	.word	0x40013000
 8008e24:	40003800 	.word	0x40003800
 8008e28:	40003c00 	.word	0x40003c00

08008e2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08e      	sub	sp, #56	; 0x38
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3320      	adds	r3, #32
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3330      	adds	r3, #48	; 0x30
 8008e4e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_SPI_TransmitReceive+0x32>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	e2ce      	b.n	80093fc <HAL_SPI_TransmitReceive+0x5d0>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e66:	f7f9 fd89 	bl	800297c <HAL_GetTick>
 8008e6a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008e6c:	887b      	ldrh	r3, [r7, #2]
 8008e6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008e70:	887b      	ldrh	r3, [r7, #2]
 8008e72:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e7a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e82:	7efb      	ldrb	r3, [r7, #27]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d014      	beq.n	8008eb2 <HAL_SPI_TransmitReceive+0x86>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e8e:	d106      	bne.n	8008e9e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d102      	bne.n	8008e9e <HAL_SPI_TransmitReceive+0x72>
 8008e98:	7efb      	ldrb	r3, [r7, #27]
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d009      	beq.n	8008eb2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008eac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eb0:	e2a4      	b.n	80093fc <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <HAL_SPI_TransmitReceive+0x98>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <HAL_SPI_TransmitReceive+0x98>
 8008ebe:	887b      	ldrh	r3, [r7, #2]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d109      	bne.n	8008ed8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ed6:	e291      	b.n	80093fc <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d003      	beq.n	8008eec <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2205      	movs	r2, #5
 8008ee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	887a      	ldrh	r2, [r7, #2]
 8008efe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	887a      	ldrh	r2, [r7, #2]
 8008f06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	887a      	ldrh	r2, [r7, #2]
 8008f14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	887a      	ldrh	r2, [r7, #2]
 8008f1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	4b9f      	ldr	r3, [pc, #636]	; (80091b0 <HAL_SPI_TransmitReceive+0x384>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	8879      	ldrh	r1, [r7, #2]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	6812      	ldr	r2, [r2, #0]
 8008f3c:	430b      	orrs	r3, r1
 8008f3e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0201 	orr.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f58:	d107      	bne.n	8008f6a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	2b0f      	cmp	r3, #15
 8008f70:	d970      	bls.n	8009054 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f72:	e068      	b.n	8009046 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	f003 0302 	and.w	r3, r3, #2
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d11a      	bne.n	8008fb8 <HAL_SPI_TransmitReceive+0x18c>
 8008f82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d017      	beq.n	8008fb8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6812      	ldr	r2, [r2, #0]
 8008f92:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f98:	1d1a      	adds	r2, r3, #4
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	695a      	ldr	r2, [r3, #20]
 8008fbe:	f248 0308 	movw	r3, #32776	; 0x8008
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01a      	beq.n	8008ffe <HAL_SPI_TransmitReceive+0x1d2>
 8008fc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d017      	beq.n	8008ffe <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008fd8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fde:	1d1a      	adds	r2, r3, #4
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ffc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ffe:	f7f9 fcbd 	bl	800297c <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800900a:	429a      	cmp	r2, r3
 800900c:	d803      	bhi.n	8009016 <HAL_SPI_TransmitReceive+0x1ea>
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009014:	d102      	bne.n	800901c <HAL_SPI_TransmitReceive+0x1f0>
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d114      	bne.n	8009046 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f9f1 	bl	8009404 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009030:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e1da      	b.n	80093fc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009046:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009048:	2b00      	cmp	r3, #0
 800904a:	d193      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0x148>
 800904c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d190      	bne.n	8008f74 <HAL_SPI_TransmitReceive+0x148>
 8009052:	e1ac      	b.n	80093ae <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	2b07      	cmp	r3, #7
 800905a:	f240 81a0 	bls.w	800939e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800905e:	e0a9      	b.n	80091b4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b02      	cmp	r3, #2
 800906c:	d139      	bne.n	80090e2 <HAL_SPI_TransmitReceive+0x2b6>
 800906e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009070:	2b00      	cmp	r3, #0
 8009072:	d036      	beq.n	80090e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009074:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009076:	2b01      	cmp	r3, #1
 8009078:	d91c      	bls.n	80090b4 <HAL_SPI_TransmitReceive+0x288>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d018      	beq.n	80090b4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6812      	ldr	r2, [r2, #0]
 800908c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009092:	1d1a      	adds	r2, r3, #4
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800909e:	b29b      	uxth	r3, r3
 80090a0:	3b02      	subs	r3, #2
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80090b2:	e016      	b.n	80090e2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b8:	881a      	ldrh	r2, [r3, #0]
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c2:	1c9a      	adds	r2, r3, #2
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	3b01      	subs	r3, #1
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d03a      	beq.n	8009166 <HAL_SPI_TransmitReceive+0x33a>
 80090f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d037      	beq.n	8009166 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d018      	beq.n	8009136 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800910c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800910e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009114:	1d1a      	adds	r2, r3, #4
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009120:	b29b      	uxth	r3, r3
 8009122:	3b02      	subs	r3, #2
 8009124:	b29a      	uxth	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009132:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009134:	e017      	b.n	8009166 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800913a:	6a3a      	ldr	r2, [r7, #32]
 800913c:	8812      	ldrh	r2, [r2, #0]
 800913e:	b292      	uxth	r2, r2
 8009140:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009146:	1c9a      	adds	r2, r3, #2
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009164:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009166:	f7f9 fc09 	bl	800297c <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009172:	429a      	cmp	r2, r3
 8009174:	d803      	bhi.n	800917e <HAL_SPI_TransmitReceive+0x352>
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d102      	bne.n	8009184 <HAL_SPI_TransmitReceive+0x358>
 800917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009180:	2b00      	cmp	r3, #0
 8009182:	d117      	bne.n	80091b4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 f93d 	bl	8009404 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009198:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e126      	b.n	80093fc <HAL_SPI_TransmitReceive+0x5d0>
 80091ae:	bf00      	nop
 80091b0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80091b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f47f af52 	bne.w	8009060 <HAL_SPI_TransmitReceive+0x234>
 80091bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f47f af4e 	bne.w	8009060 <HAL_SPI_TransmitReceive+0x234>
 80091c4:	e0f3      	b.n	80093ae <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d15a      	bne.n	800928a <HAL_SPI_TransmitReceive+0x45e>
 80091d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d057      	beq.n	800928a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80091da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d91c      	bls.n	800921a <HAL_SPI_TransmitReceive+0x3ee>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e4:	2b40      	cmp	r3, #64	; 0x40
 80091e6:	d918      	bls.n	800921a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6812      	ldr	r2, [r2, #0]
 80091f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f8:	1d1a      	adds	r2, r3, #4
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009204:	b29b      	uxth	r3, r3
 8009206:	3b04      	subs	r3, #4
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009216:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009218:	e037      	b.n	800928a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800921a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800921c:	2b01      	cmp	r3, #1
 800921e:	d91b      	bls.n	8009258 <HAL_SPI_TransmitReceive+0x42c>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d017      	beq.n	8009258 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800922c:	881a      	ldrh	r2, [r3, #0]
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009236:	1c9a      	adds	r2, r3, #2
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009242:	b29b      	uxth	r3, r3
 8009244:	3b02      	subs	r3, #2
 8009246:	b29a      	uxth	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009254:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009256:	e018      	b.n	800928a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3320      	adds	r3, #32
 8009262:	7812      	ldrb	r2, [r2, #0]
 8009264:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009276:	b29b      	uxth	r3, r3
 8009278:	3b01      	subs	r3, #1
 800927a:	b29a      	uxth	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009288:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d05e      	beq.n	8009356 <HAL_SPI_TransmitReceive+0x52a>
 8009298:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800929a:	2b00      	cmp	r3, #0
 800929c:	d05b      	beq.n	8009356 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d018      	beq.n	80092de <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80092b6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092bc:	1d1a      	adds	r2, r3, #4
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b04      	subs	r3, #4
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80092dc:	e03b      	b.n	8009356 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ec:	d918      	bls.n	8009320 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f2:	6a3a      	ldr	r2, [r7, #32]
 80092f4:	8812      	ldrh	r2, [r2, #0]
 80092f6:	b292      	uxth	r2, r2
 80092f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092fe:	1c9a      	adds	r2, r3, #2
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800930a:	b29b      	uxth	r3, r3
 800930c:	3b02      	subs	r3, #2
 800930e:	b29a      	uxth	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800931c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800931e:	e01a      	b.n	8009356 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800932c:	7812      	ldrb	r2, [r2, #0]
 800932e:	b2d2      	uxtb	r2, r2
 8009330:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009342:	b29b      	uxth	r3, r3
 8009344:	3b01      	subs	r3, #1
 8009346:	b29a      	uxth	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009354:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009356:	f7f9 fb11 	bl	800297c <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009362:	429a      	cmp	r2, r3
 8009364:	d803      	bhi.n	800936e <HAL_SPI_TransmitReceive+0x542>
 8009366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936c:	d102      	bne.n	8009374 <HAL_SPI_TransmitReceive+0x548>
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	2b00      	cmp	r3, #0
 8009372:	d114      	bne.n	800939e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f845 	bl	8009404 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e02e      	b.n	80093fc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800939e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f47f af10 	bne.w	80091c6 <HAL_SPI_TransmitReceive+0x39a>
 80093a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f47f af0c 	bne.w	80091c6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80093ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	2200      	movs	r2, #0
 80093b6:	2108      	movs	r1, #8
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 f8c3 	bl	8009544 <SPI_WaitOnFlagUntilTimeout>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d007      	beq.n	80093d4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ca:	f043 0220 	orr.w	r2, r3, #32
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 f815 	bl	8009404 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e001      	b.n	80093fc <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 80093f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3730      	adds	r7, #48	; 0x30
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	699a      	ldr	r2, [r3, #24]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f042 0208 	orr.w	r2, r2, #8
 8009422:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699a      	ldr	r2, [r3, #24]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f042 0210 	orr.w	r2, r2, #16
 8009432:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f022 0201 	bic.w	r2, r2, #1
 8009442:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6919      	ldr	r1, [r3, #16]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	4b3c      	ldr	r3, [pc, #240]	; (8009540 <SPI_CloseTransfer+0x13c>)
 8009450:	400b      	ands	r3, r1
 8009452:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689a      	ldr	r2, [r3, #8]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009462:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b04      	cmp	r3, #4
 800946e:	d014      	beq.n	800949a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00f      	beq.n	800949a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009480:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	699a      	ldr	r2, [r3, #24]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f042 0220 	orr.w	r2, r2, #32
 8009498:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d014      	beq.n	80094d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00f      	beq.n	80094d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094b6:	f043 0204 	orr.w	r2, r3, #4
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00f      	beq.n	80094fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e0:	f043 0201 	orr.w	r2, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	699a      	ldr	r2, [r3, #24]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00f      	beq.n	8009524 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800950a:	f043 0208 	orr.w	r2, r3, #8
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699a      	ldr	r2, [r3, #24]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009522:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	fffffc90 	.word	0xfffffc90

08009544 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	603b      	str	r3, [r7, #0]
 8009550:	4613      	mov	r3, r2
 8009552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009554:	e010      	b.n	8009578 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009556:	f7f9 fa11 	bl	800297c <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	429a      	cmp	r2, r3
 8009564:	d803      	bhi.n	800956e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956c:	d102      	bne.n	8009574 <SPI_WaitOnFlagUntilTimeout+0x30>
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e00f      	b.n	8009598 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695a      	ldr	r2, [r3, #20]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	4013      	ands	r3, r2
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	429a      	cmp	r2, r3
 8009586:	bf0c      	ite	eq
 8009588:	2301      	moveq	r3, #1
 800958a:	2300      	movne	r3, #0
 800958c:	b2db      	uxtb	r3, r3
 800958e:	461a      	mov	r2, r3
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	429a      	cmp	r2, r3
 8009594:	d0df      	beq.n	8009556 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ac:	095b      	lsrs	r3, r3, #5
 80095ae:	3301      	adds	r3, #1
 80095b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	3307      	adds	r3, #7
 80095be:	08db      	lsrs	r3, r3, #3
 80095c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e049      	b.n	800967c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7f8 fec7 	bl	8002390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2202      	movs	r2, #2
 8009606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3304      	adds	r3, #4
 8009612:	4619      	mov	r1, r3
 8009614:	4610      	mov	r0, r2
 8009616:	f000 fd7b 	bl	800a110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b01      	cmp	r3, #1
 8009696:	d001      	beq.n	800969c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e05e      	b.n	800975a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f042 0201 	orr.w	r2, r2, #1
 80096b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a2b      	ldr	r2, [pc, #172]	; (8009768 <HAL_TIM_Base_Start_IT+0xe4>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d02c      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x94>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c6:	d027      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x94>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a27      	ldr	r2, [pc, #156]	; (800976c <HAL_TIM_Base_Start_IT+0xe8>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d022      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x94>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a26      	ldr	r2, [pc, #152]	; (8009770 <HAL_TIM_Base_Start_IT+0xec>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d01d      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x94>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a24      	ldr	r2, [pc, #144]	; (8009774 <HAL_TIM_Base_Start_IT+0xf0>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d018      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x94>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a23      	ldr	r2, [pc, #140]	; (8009778 <HAL_TIM_Base_Start_IT+0xf4>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d013      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x94>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a21      	ldr	r2, [pc, #132]	; (800977c <HAL_TIM_Base_Start_IT+0xf8>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00e      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x94>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a20      	ldr	r2, [pc, #128]	; (8009780 <HAL_TIM_Base_Start_IT+0xfc>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d009      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x94>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a1e      	ldr	r2, [pc, #120]	; (8009784 <HAL_TIM_Base_Start_IT+0x100>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d004      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x94>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a1d      	ldr	r2, [pc, #116]	; (8009788 <HAL_TIM_Base_Start_IT+0x104>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d115      	bne.n	8009744 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	4b1b      	ldr	r3, [pc, #108]	; (800978c <HAL_TIM_Base_Start_IT+0x108>)
 8009720:	4013      	ands	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b06      	cmp	r3, #6
 8009728:	d015      	beq.n	8009756 <HAL_TIM_Base_Start_IT+0xd2>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009730:	d011      	beq.n	8009756 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f042 0201 	orr.w	r2, r2, #1
 8009740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009742:	e008      	b.n	8009756 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0201 	orr.w	r2, r2, #1
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	e000      	b.n	8009758 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009756:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	40010000 	.word	0x40010000
 800976c:	40000400 	.word	0x40000400
 8009770:	40000800 	.word	0x40000800
 8009774:	40000c00 	.word	0x40000c00
 8009778:	40010400 	.word	0x40010400
 800977c:	40001800 	.word	0x40001800
 8009780:	40014000 	.word	0x40014000
 8009784:	4000e000 	.word	0x4000e000
 8009788:	4000e400 	.word	0x4000e400
 800978c:	00010007 	.word	0x00010007

08009790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e049      	b.n	8009836 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d106      	bne.n	80097bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7f8 fdc2 	bl	8002340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f000 fc9e 	bl	800a110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d109      	bne.n	8009864 <HAL_TIM_PWM_Start+0x24>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b01      	cmp	r3, #1
 800985a:	bf14      	ite	ne
 800985c:	2301      	movne	r3, #1
 800985e:	2300      	moveq	r3, #0
 8009860:	b2db      	uxtb	r3, r3
 8009862:	e03c      	b.n	80098de <HAL_TIM_PWM_Start+0x9e>
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b04      	cmp	r3, #4
 8009868:	d109      	bne.n	800987e <HAL_TIM_PWM_Start+0x3e>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b01      	cmp	r3, #1
 8009874:	bf14      	ite	ne
 8009876:	2301      	movne	r3, #1
 8009878:	2300      	moveq	r3, #0
 800987a:	b2db      	uxtb	r3, r3
 800987c:	e02f      	b.n	80098de <HAL_TIM_PWM_Start+0x9e>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b08      	cmp	r3, #8
 8009882:	d109      	bne.n	8009898 <HAL_TIM_PWM_Start+0x58>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	bf14      	ite	ne
 8009890:	2301      	movne	r3, #1
 8009892:	2300      	moveq	r3, #0
 8009894:	b2db      	uxtb	r3, r3
 8009896:	e022      	b.n	80098de <HAL_TIM_PWM_Start+0x9e>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2b0c      	cmp	r3, #12
 800989c:	d109      	bne.n	80098b2 <HAL_TIM_PWM_Start+0x72>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	bf14      	ite	ne
 80098aa:	2301      	movne	r3, #1
 80098ac:	2300      	moveq	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	e015      	b.n	80098de <HAL_TIM_PWM_Start+0x9e>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b10      	cmp	r3, #16
 80098b6:	d109      	bne.n	80098cc <HAL_TIM_PWM_Start+0x8c>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	bf14      	ite	ne
 80098c4:	2301      	movne	r3, #1
 80098c6:	2300      	moveq	r3, #0
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	e008      	b.n	80098de <HAL_TIM_PWM_Start+0x9e>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	bf14      	ite	ne
 80098d8:	2301      	movne	r3, #1
 80098da:	2300      	moveq	r3, #0
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e0ab      	b.n	8009a3e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <HAL_TIM_PWM_Start+0xb6>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098f4:	e023      	b.n	800993e <HAL_TIM_PWM_Start+0xfe>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d104      	bne.n	8009906 <HAL_TIM_PWM_Start+0xc6>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009904:	e01b      	b.n	800993e <HAL_TIM_PWM_Start+0xfe>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b08      	cmp	r3, #8
 800990a:	d104      	bne.n	8009916 <HAL_TIM_PWM_Start+0xd6>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009914:	e013      	b.n	800993e <HAL_TIM_PWM_Start+0xfe>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b0c      	cmp	r3, #12
 800991a:	d104      	bne.n	8009926 <HAL_TIM_PWM_Start+0xe6>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009924:	e00b      	b.n	800993e <HAL_TIM_PWM_Start+0xfe>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b10      	cmp	r3, #16
 800992a:	d104      	bne.n	8009936 <HAL_TIM_PWM_Start+0xf6>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009934:	e003      	b.n	800993e <HAL_TIM_PWM_Start+0xfe>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2202      	movs	r2, #2
 800993a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2201      	movs	r2, #1
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 fff4 	bl	800a934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a3d      	ldr	r2, [pc, #244]	; (8009a48 <HAL_TIM_PWM_Start+0x208>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d013      	beq.n	800997e <HAL_TIM_PWM_Start+0x13e>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a3c      	ldr	r2, [pc, #240]	; (8009a4c <HAL_TIM_PWM_Start+0x20c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d00e      	beq.n	800997e <HAL_TIM_PWM_Start+0x13e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a3a      	ldr	r2, [pc, #232]	; (8009a50 <HAL_TIM_PWM_Start+0x210>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d009      	beq.n	800997e <HAL_TIM_PWM_Start+0x13e>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a39      	ldr	r2, [pc, #228]	; (8009a54 <HAL_TIM_PWM_Start+0x214>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d004      	beq.n	800997e <HAL_TIM_PWM_Start+0x13e>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a37      	ldr	r2, [pc, #220]	; (8009a58 <HAL_TIM_PWM_Start+0x218>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d101      	bne.n	8009982 <HAL_TIM_PWM_Start+0x142>
 800997e:	2301      	movs	r3, #1
 8009980:	e000      	b.n	8009984 <HAL_TIM_PWM_Start+0x144>
 8009982:	2300      	movs	r3, #0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d007      	beq.n	8009998 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009996:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a2a      	ldr	r2, [pc, #168]	; (8009a48 <HAL_TIM_PWM_Start+0x208>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d02c      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1bc>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099aa:	d027      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1bc>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a2a      	ldr	r2, [pc, #168]	; (8009a5c <HAL_TIM_PWM_Start+0x21c>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d022      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1bc>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a29      	ldr	r2, [pc, #164]	; (8009a60 <HAL_TIM_PWM_Start+0x220>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d01d      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1bc>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a27      	ldr	r2, [pc, #156]	; (8009a64 <HAL_TIM_PWM_Start+0x224>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d018      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1bc>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a1f      	ldr	r2, [pc, #124]	; (8009a4c <HAL_TIM_PWM_Start+0x20c>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d013      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1bc>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a23      	ldr	r2, [pc, #140]	; (8009a68 <HAL_TIM_PWM_Start+0x228>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d00e      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1bc>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a1b      	ldr	r2, [pc, #108]	; (8009a50 <HAL_TIM_PWM_Start+0x210>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d009      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1bc>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a1f      	ldr	r2, [pc, #124]	; (8009a6c <HAL_TIM_PWM_Start+0x22c>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d004      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1bc>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a1e      	ldr	r2, [pc, #120]	; (8009a70 <HAL_TIM_PWM_Start+0x230>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d115      	bne.n	8009a28 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	4b1c      	ldr	r3, [pc, #112]	; (8009a74 <HAL_TIM_PWM_Start+0x234>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b06      	cmp	r3, #6
 8009a0c:	d015      	beq.n	8009a3a <HAL_TIM_PWM_Start+0x1fa>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a14:	d011      	beq.n	8009a3a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f042 0201 	orr.w	r2, r2, #1
 8009a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a26:	e008      	b.n	8009a3a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0201 	orr.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e000      	b.n	8009a3c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40010000 	.word	0x40010000
 8009a4c:	40010400 	.word	0x40010400
 8009a50:	40014000 	.word	0x40014000
 8009a54:	40014400 	.word	0x40014400
 8009a58:	40014800 	.word	0x40014800
 8009a5c:	40000400 	.word	0x40000400
 8009a60:	40000800 	.word	0x40000800
 8009a64:	40000c00 	.word	0x40000c00
 8009a68:	40001800 	.word	0x40001800
 8009a6c:	4000e000 	.word	0x4000e000
 8009a70:	4000e400 	.word	0x4000e400
 8009a74:	00010007 	.word	0x00010007

08009a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d122      	bne.n	8009ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f003 0302 	and.w	r3, r3, #2
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d11b      	bne.n	8009ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f06f 0202 	mvn.w	r2, #2
 8009aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	699b      	ldr	r3, [r3, #24]
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fb0a 	bl	800a0d4 <HAL_TIM_IC_CaptureCallback>
 8009ac0:	e005      	b.n	8009ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fafc 	bl	800a0c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fb0d 	bl	800a0e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	f003 0304 	and.w	r3, r3, #4
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d122      	bne.n	8009b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f003 0304 	and.w	r3, r3, #4
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	d11b      	bne.n	8009b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f06f 0204 	mvn.w	r2, #4
 8009af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2202      	movs	r2, #2
 8009afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fae0 	bl	800a0d4 <HAL_TIM_IC_CaptureCallback>
 8009b14:	e005      	b.n	8009b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fad2 	bl	800a0c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fae3 	bl	800a0e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	f003 0308 	and.w	r3, r3, #8
 8009b32:	2b08      	cmp	r3, #8
 8009b34:	d122      	bne.n	8009b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f003 0308 	and.w	r3, r3, #8
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	d11b      	bne.n	8009b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f06f 0208 	mvn.w	r2, #8
 8009b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2204      	movs	r2, #4
 8009b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fab6 	bl	800a0d4 <HAL_TIM_IC_CaptureCallback>
 8009b68:	e005      	b.n	8009b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 faa8 	bl	800a0c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fab9 	bl	800a0e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b10      	cmp	r3, #16
 8009b88:	d122      	bne.n	8009bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f003 0310 	and.w	r3, r3, #16
 8009b94:	2b10      	cmp	r3, #16
 8009b96:	d11b      	bne.n	8009bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f06f 0210 	mvn.w	r2, #16
 8009ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2208      	movs	r2, #8
 8009ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fa8c 	bl	800a0d4 <HAL_TIM_IC_CaptureCallback>
 8009bbc:	e005      	b.n	8009bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa7e 	bl	800a0c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fa8f 	bl	800a0e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d10e      	bne.n	8009bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d107      	bne.n	8009bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f06f 0201 	mvn.w	r2, #1
 8009bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7f7 ff74 	bl	8001ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c06:	2b80      	cmp	r3, #128	; 0x80
 8009c08:	d10e      	bne.n	8009c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c14:	2b80      	cmp	r3, #128	; 0x80
 8009c16:	d107      	bne.n	8009c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 f8a0 	bl	800ad68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c36:	d10e      	bne.n	8009c56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c42:	2b80      	cmp	r3, #128	; 0x80
 8009c44:	d107      	bne.n	8009c56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 f893 	bl	800ad7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c60:	2b40      	cmp	r3, #64	; 0x40
 8009c62:	d10e      	bne.n	8009c82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6e:	2b40      	cmp	r3, #64	; 0x40
 8009c70:	d107      	bne.n	8009c82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fa3d 	bl	800a0fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	f003 0320 	and.w	r3, r3, #32
 8009c8c:	2b20      	cmp	r3, #32
 8009c8e:	d10e      	bne.n	8009cae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	d107      	bne.n	8009cae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f06f 0220 	mvn.w	r2, #32
 8009ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 f853 	bl	800ad54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cae:	bf00      	nop
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
	...

08009cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e0fd      	b.n	8009ece <HAL_TIM_PWM_ConfigChannel+0x216>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b14      	cmp	r3, #20
 8009cde:	f200 80f0 	bhi.w	8009ec2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009ce2:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce8:	08009d3d 	.word	0x08009d3d
 8009cec:	08009ec3 	.word	0x08009ec3
 8009cf0:	08009ec3 	.word	0x08009ec3
 8009cf4:	08009ec3 	.word	0x08009ec3
 8009cf8:	08009d7d 	.word	0x08009d7d
 8009cfc:	08009ec3 	.word	0x08009ec3
 8009d00:	08009ec3 	.word	0x08009ec3
 8009d04:	08009ec3 	.word	0x08009ec3
 8009d08:	08009dbf 	.word	0x08009dbf
 8009d0c:	08009ec3 	.word	0x08009ec3
 8009d10:	08009ec3 	.word	0x08009ec3
 8009d14:	08009ec3 	.word	0x08009ec3
 8009d18:	08009dff 	.word	0x08009dff
 8009d1c:	08009ec3 	.word	0x08009ec3
 8009d20:	08009ec3 	.word	0x08009ec3
 8009d24:	08009ec3 	.word	0x08009ec3
 8009d28:	08009e41 	.word	0x08009e41
 8009d2c:	08009ec3 	.word	0x08009ec3
 8009d30:	08009ec3 	.word	0x08009ec3
 8009d34:	08009ec3 	.word	0x08009ec3
 8009d38:	08009e81 	.word	0x08009e81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fa8a 	bl	800a25c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f042 0208 	orr.w	r2, r2, #8
 8009d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	699a      	ldr	r2, [r3, #24]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 0204 	bic.w	r2, r2, #4
 8009d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6999      	ldr	r1, [r3, #24]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	691a      	ldr	r2, [r3, #16]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	619a      	str	r2, [r3, #24]
      break;
 8009d7a:	e0a3      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68b9      	ldr	r1, [r7, #8]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 fafa 	bl	800a37c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	699a      	ldr	r2, [r3, #24]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6999      	ldr	r1, [r3, #24]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	021a      	lsls	r2, r3, #8
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	619a      	str	r2, [r3, #24]
      break;
 8009dbc:	e082      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68b9      	ldr	r1, [r7, #8]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fb63 	bl	800a490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69da      	ldr	r2, [r3, #28]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f042 0208 	orr.w	r2, r2, #8
 8009dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	69da      	ldr	r2, [r3, #28]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0204 	bic.w	r2, r2, #4
 8009de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	69d9      	ldr	r1, [r3, #28]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	691a      	ldr	r2, [r3, #16]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	61da      	str	r2, [r3, #28]
      break;
 8009dfc:	e062      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 fbc9 	bl	800a59c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	69da      	ldr	r2, [r3, #28]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69da      	ldr	r2, [r3, #28]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	69d9      	ldr	r1, [r3, #28]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	021a      	lsls	r2, r3, #8
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	430a      	orrs	r2, r1
 8009e3c:	61da      	str	r2, [r3, #28]
      break;
 8009e3e:	e041      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 fc10 	bl	800a66c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f042 0208 	orr.w	r2, r2, #8
 8009e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 0204 	bic.w	r2, r2, #4
 8009e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	691a      	ldr	r2, [r3, #16]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e7e:	e021      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fc52 	bl	800a730 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	021a      	lsls	r2, r3, #8
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ec0:	e000      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009ec2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop

08009ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d101      	bne.n	8009ef0 <HAL_TIM_ConfigClockSource+0x18>
 8009eec:	2302      	movs	r3, #2
 8009eee:	e0db      	b.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2202      	movs	r2, #2
 8009efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4b69      	ldr	r3, [pc, #420]	; (800a0b0 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a63      	ldr	r2, [pc, #396]	; (800a0b4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	f000 80a9 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f2c:	4a61      	ldr	r2, [pc, #388]	; (800a0b4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	f200 80ae 	bhi.w	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f34:	4a60      	ldr	r2, [pc, #384]	; (800a0b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	f000 80a1 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f3c:	4a5e      	ldr	r2, [pc, #376]	; (800a0b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	f200 80a6 	bhi.w	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f44:	4a5d      	ldr	r2, [pc, #372]	; (800a0bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	f000 8099 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f4c:	4a5b      	ldr	r2, [pc, #364]	; (800a0bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	f200 809e 	bhi.w	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f58:	f000 8091 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f60:	f200 8096 	bhi.w	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f68:	f000 8089 	beq.w	800a07e <HAL_TIM_ConfigClockSource+0x1a6>
 8009f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f70:	f200 808e 	bhi.w	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f78:	d03e      	beq.n	8009ff8 <HAL_TIM_ConfigClockSource+0x120>
 8009f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f7e:	f200 8087 	bhi.w	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f86:	f000 8085 	beq.w	800a094 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f8e:	d87f      	bhi.n	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f90:	2b70      	cmp	r3, #112	; 0x70
 8009f92:	d01a      	beq.n	8009fca <HAL_TIM_ConfigClockSource+0xf2>
 8009f94:	2b70      	cmp	r3, #112	; 0x70
 8009f96:	d87b      	bhi.n	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009f98:	2b60      	cmp	r3, #96	; 0x60
 8009f9a:	d050      	beq.n	800a03e <HAL_TIM_ConfigClockSource+0x166>
 8009f9c:	2b60      	cmp	r3, #96	; 0x60
 8009f9e:	d877      	bhi.n	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fa0:	2b50      	cmp	r3, #80	; 0x50
 8009fa2:	d03c      	beq.n	800a01e <HAL_TIM_ConfigClockSource+0x146>
 8009fa4:	2b50      	cmp	r3, #80	; 0x50
 8009fa6:	d873      	bhi.n	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	d058      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x186>
 8009fac:	2b40      	cmp	r3, #64	; 0x40
 8009fae:	d86f      	bhi.n	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fb0:	2b30      	cmp	r3, #48	; 0x30
 8009fb2:	d064      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x1a6>
 8009fb4:	2b30      	cmp	r3, #48	; 0x30
 8009fb6:	d86b      	bhi.n	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fb8:	2b20      	cmp	r3, #32
 8009fba:	d060      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x1a6>
 8009fbc:	2b20      	cmp	r3, #32
 8009fbe:	d867      	bhi.n	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d05c      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x1a6>
 8009fc4:	2b10      	cmp	r3, #16
 8009fc6:	d05a      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009fc8:	e062      	b.n	800a090 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	6899      	ldr	r1, [r3, #8]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f000 fc8b 	bl	800a8f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	609a      	str	r2, [r3, #8]
      break;
 8009ff6:	e04e      	b.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6818      	ldr	r0, [r3, #0]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	6899      	ldr	r1, [r3, #8]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	f000 fc74 	bl	800a8f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a01a:	609a      	str	r2, [r3, #8]
      break;
 800a01c:	e03b      	b.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	6859      	ldr	r1, [r3, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	461a      	mov	r2, r3
 800a02c:	f000 fbe4 	bl	800a7f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2150      	movs	r1, #80	; 0x50
 800a036:	4618      	mov	r0, r3
 800a038:	f000 fc3e 	bl	800a8b8 <TIM_ITRx_SetConfig>
      break;
 800a03c:	e02b      	b.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	6859      	ldr	r1, [r3, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f000 fc03 	bl	800a856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2160      	movs	r1, #96	; 0x60
 800a056:	4618      	mov	r0, r3
 800a058:	f000 fc2e 	bl	800a8b8 <TIM_ITRx_SetConfig>
      break;
 800a05c:	e01b      	b.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6818      	ldr	r0, [r3, #0]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	6859      	ldr	r1, [r3, #4]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f000 fbc4 	bl	800a7f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2140      	movs	r1, #64	; 0x40
 800a076:	4618      	mov	r0, r3
 800a078:	f000 fc1e 	bl	800a8b8 <TIM_ITRx_SetConfig>
      break;
 800a07c:	e00b      	b.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4619      	mov	r1, r3
 800a088:	4610      	mov	r0, r2
 800a08a:	f000 fc15 	bl	800a8b8 <TIM_ITRx_SetConfig>
        break;
 800a08e:	e002      	b.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a090:	bf00      	nop
 800a092:	e000      	b.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a094:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	ffceff88 	.word	0xffceff88
 800a0b4:	00100040 	.word	0x00100040
 800a0b8:	00100030 	.word	0x00100030
 800a0bc:	00100020 	.word	0x00100020

0800a0c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a44      	ldr	r2, [pc, #272]	; (800a234 <TIM_Base_SetConfig+0x124>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d013      	beq.n	800a150 <TIM_Base_SetConfig+0x40>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12e:	d00f      	beq.n	800a150 <TIM_Base_SetConfig+0x40>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a41      	ldr	r2, [pc, #260]	; (800a238 <TIM_Base_SetConfig+0x128>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d00b      	beq.n	800a150 <TIM_Base_SetConfig+0x40>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a40      	ldr	r2, [pc, #256]	; (800a23c <TIM_Base_SetConfig+0x12c>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d007      	beq.n	800a150 <TIM_Base_SetConfig+0x40>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a3f      	ldr	r2, [pc, #252]	; (800a240 <TIM_Base_SetConfig+0x130>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d003      	beq.n	800a150 <TIM_Base_SetConfig+0x40>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a3e      	ldr	r2, [pc, #248]	; (800a244 <TIM_Base_SetConfig+0x134>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d108      	bne.n	800a162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a33      	ldr	r2, [pc, #204]	; (800a234 <TIM_Base_SetConfig+0x124>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d027      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a170:	d023      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a30      	ldr	r2, [pc, #192]	; (800a238 <TIM_Base_SetConfig+0x128>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d01f      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a2f      	ldr	r2, [pc, #188]	; (800a23c <TIM_Base_SetConfig+0x12c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d01b      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a2e      	ldr	r2, [pc, #184]	; (800a240 <TIM_Base_SetConfig+0x130>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d017      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a2d      	ldr	r2, [pc, #180]	; (800a244 <TIM_Base_SetConfig+0x134>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d013      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a2c      	ldr	r2, [pc, #176]	; (800a248 <TIM_Base_SetConfig+0x138>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00f      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a2b      	ldr	r2, [pc, #172]	; (800a24c <TIM_Base_SetConfig+0x13c>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d00b      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a2a      	ldr	r2, [pc, #168]	; (800a250 <TIM_Base_SetConfig+0x140>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d007      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a29      	ldr	r2, [pc, #164]	; (800a254 <TIM_Base_SetConfig+0x144>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d003      	beq.n	800a1ba <TIM_Base_SetConfig+0xaa>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a28      	ldr	r2, [pc, #160]	; (800a258 <TIM_Base_SetConfig+0x148>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d108      	bne.n	800a1cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	689a      	ldr	r2, [r3, #8]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a10      	ldr	r2, [pc, #64]	; (800a234 <TIM_Base_SetConfig+0x124>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00f      	beq.n	800a218 <TIM_Base_SetConfig+0x108>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a12      	ldr	r2, [pc, #72]	; (800a244 <TIM_Base_SetConfig+0x134>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d00b      	beq.n	800a218 <TIM_Base_SetConfig+0x108>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a11      	ldr	r2, [pc, #68]	; (800a248 <TIM_Base_SetConfig+0x138>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d007      	beq.n	800a218 <TIM_Base_SetConfig+0x108>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a10      	ldr	r2, [pc, #64]	; (800a24c <TIM_Base_SetConfig+0x13c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d003      	beq.n	800a218 <TIM_Base_SetConfig+0x108>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a0f      	ldr	r2, [pc, #60]	; (800a250 <TIM_Base_SetConfig+0x140>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d103      	bne.n	800a220 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	615a      	str	r2, [r3, #20]
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40010000 	.word	0x40010000
 800a238:	40000400 	.word	0x40000400
 800a23c:	40000800 	.word	0x40000800
 800a240:	40000c00 	.word	0x40000c00
 800a244:	40010400 	.word	0x40010400
 800a248:	40014000 	.word	0x40014000
 800a24c:	40014400 	.word	0x40014400
 800a250:	40014800 	.word	0x40014800
 800a254:	4000e000 	.word	0x4000e000
 800a258:	4000e400 	.word	0x4000e400

0800a25c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	f023 0201 	bic.w	r2, r3, #1
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	4b37      	ldr	r3, [pc, #220]	; (800a364 <TIM_OC1_SetConfig+0x108>)
 800a288:	4013      	ands	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f023 0303 	bic.w	r3, r3, #3
 800a292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f023 0302 	bic.w	r3, r3, #2
 800a2a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a2d      	ldr	r2, [pc, #180]	; (800a368 <TIM_OC1_SetConfig+0x10c>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d00f      	beq.n	800a2d8 <TIM_OC1_SetConfig+0x7c>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a2c      	ldr	r2, [pc, #176]	; (800a36c <TIM_OC1_SetConfig+0x110>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d00b      	beq.n	800a2d8 <TIM_OC1_SetConfig+0x7c>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a2b      	ldr	r2, [pc, #172]	; (800a370 <TIM_OC1_SetConfig+0x114>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d007      	beq.n	800a2d8 <TIM_OC1_SetConfig+0x7c>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a2a      	ldr	r2, [pc, #168]	; (800a374 <TIM_OC1_SetConfig+0x118>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d003      	beq.n	800a2d8 <TIM_OC1_SetConfig+0x7c>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a29      	ldr	r2, [pc, #164]	; (800a378 <TIM_OC1_SetConfig+0x11c>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d10c      	bne.n	800a2f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f023 0308 	bic.w	r3, r3, #8
 800a2de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f023 0304 	bic.w	r3, r3, #4
 800a2f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a1c      	ldr	r2, [pc, #112]	; (800a368 <TIM_OC1_SetConfig+0x10c>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d00f      	beq.n	800a31a <TIM_OC1_SetConfig+0xbe>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a1b      	ldr	r2, [pc, #108]	; (800a36c <TIM_OC1_SetConfig+0x110>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d00b      	beq.n	800a31a <TIM_OC1_SetConfig+0xbe>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a1a      	ldr	r2, [pc, #104]	; (800a370 <TIM_OC1_SetConfig+0x114>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d007      	beq.n	800a31a <TIM_OC1_SetConfig+0xbe>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a19      	ldr	r2, [pc, #100]	; (800a374 <TIM_OC1_SetConfig+0x118>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d003      	beq.n	800a31a <TIM_OC1_SetConfig+0xbe>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a18      	ldr	r2, [pc, #96]	; (800a378 <TIM_OC1_SetConfig+0x11c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d111      	bne.n	800a33e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4313      	orrs	r3, r2
 800a332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	621a      	str	r2, [r3, #32]
}
 800a358:	bf00      	nop
 800a35a:	371c      	adds	r7, #28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr
 800a364:	fffeff8f 	.word	0xfffeff8f
 800a368:	40010000 	.word	0x40010000
 800a36c:	40010400 	.word	0x40010400
 800a370:	40014000 	.word	0x40014000
 800a374:	40014400 	.word	0x40014400
 800a378:	40014800 	.word	0x40014800

0800a37c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	f023 0210 	bic.w	r2, r3, #16
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	4b34      	ldr	r3, [pc, #208]	; (800a478 <TIM_OC2_SetConfig+0xfc>)
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	021b      	lsls	r3, r3, #8
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f023 0320 	bic.w	r3, r3, #32
 800a3c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	011b      	lsls	r3, r3, #4
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a29      	ldr	r2, [pc, #164]	; (800a47c <TIM_OC2_SetConfig+0x100>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d003      	beq.n	800a3e4 <TIM_OC2_SetConfig+0x68>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a28      	ldr	r2, [pc, #160]	; (800a480 <TIM_OC2_SetConfig+0x104>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d10d      	bne.n	800a400 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	011b      	lsls	r3, r3, #4
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a1e      	ldr	r2, [pc, #120]	; (800a47c <TIM_OC2_SetConfig+0x100>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d00f      	beq.n	800a428 <TIM_OC2_SetConfig+0xac>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a1d      	ldr	r2, [pc, #116]	; (800a480 <TIM_OC2_SetConfig+0x104>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d00b      	beq.n	800a428 <TIM_OC2_SetConfig+0xac>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a1c      	ldr	r2, [pc, #112]	; (800a484 <TIM_OC2_SetConfig+0x108>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d007      	beq.n	800a428 <TIM_OC2_SetConfig+0xac>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a1b      	ldr	r2, [pc, #108]	; (800a488 <TIM_OC2_SetConfig+0x10c>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_OC2_SetConfig+0xac>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <TIM_OC2_SetConfig+0x110>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d113      	bne.n	800a450 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a42e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	4313      	orrs	r3, r2
 800a442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	621a      	str	r2, [r3, #32]
}
 800a46a:	bf00      	nop
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	feff8fff 	.word	0xfeff8fff
 800a47c:	40010000 	.word	0x40010000
 800a480:	40010400 	.word	0x40010400
 800a484:	40014000 	.word	0x40014000
 800a488:	40014400 	.word	0x40014400
 800a48c:	40014800 	.word	0x40014800

0800a490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	69db      	ldr	r3, [r3, #28]
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f023 0303 	bic.w	r3, r3, #3
 800a4c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	021b      	lsls	r3, r3, #8
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a27      	ldr	r2, [pc, #156]	; (800a588 <TIM_OC3_SetConfig+0xf8>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d003      	beq.n	800a4f6 <TIM_OC3_SetConfig+0x66>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a26      	ldr	r2, [pc, #152]	; (800a58c <TIM_OC3_SetConfig+0xfc>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d10d      	bne.n	800a512 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	021b      	lsls	r3, r3, #8
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	4313      	orrs	r3, r2
 800a508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a1c      	ldr	r2, [pc, #112]	; (800a588 <TIM_OC3_SetConfig+0xf8>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d00f      	beq.n	800a53a <TIM_OC3_SetConfig+0xaa>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a1b      	ldr	r2, [pc, #108]	; (800a58c <TIM_OC3_SetConfig+0xfc>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00b      	beq.n	800a53a <TIM_OC3_SetConfig+0xaa>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a1a      	ldr	r2, [pc, #104]	; (800a590 <TIM_OC3_SetConfig+0x100>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d007      	beq.n	800a53a <TIM_OC3_SetConfig+0xaa>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a19      	ldr	r2, [pc, #100]	; (800a594 <TIM_OC3_SetConfig+0x104>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d003      	beq.n	800a53a <TIM_OC3_SetConfig+0xaa>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a18      	ldr	r2, [pc, #96]	; (800a598 <TIM_OC3_SetConfig+0x108>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d113      	bne.n	800a562 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	011b      	lsls	r3, r3, #4
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	4313      	orrs	r3, r2
 800a554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	011b      	lsls	r3, r3, #4
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	621a      	str	r2, [r3, #32]
}
 800a57c:	bf00      	nop
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	40010000 	.word	0x40010000
 800a58c:	40010400 	.word	0x40010400
 800a590:	40014000 	.word	0x40014000
 800a594:	40014400 	.word	0x40014400
 800a598:	40014800 	.word	0x40014800

0800a59c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	021b      	lsls	r3, r3, #8
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	031b      	lsls	r3, r3, #12
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a18      	ldr	r2, [pc, #96]	; (800a658 <TIM_OC4_SetConfig+0xbc>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d00f      	beq.n	800a61c <TIM_OC4_SetConfig+0x80>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a17      	ldr	r2, [pc, #92]	; (800a65c <TIM_OC4_SetConfig+0xc0>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d00b      	beq.n	800a61c <TIM_OC4_SetConfig+0x80>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a16      	ldr	r2, [pc, #88]	; (800a660 <TIM_OC4_SetConfig+0xc4>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d007      	beq.n	800a61c <TIM_OC4_SetConfig+0x80>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a15      	ldr	r2, [pc, #84]	; (800a664 <TIM_OC4_SetConfig+0xc8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d003      	beq.n	800a61c <TIM_OC4_SetConfig+0x80>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a14      	ldr	r2, [pc, #80]	; (800a668 <TIM_OC4_SetConfig+0xcc>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d109      	bne.n	800a630 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	019b      	lsls	r3, r3, #6
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	621a      	str	r2, [r3, #32]
}
 800a64a:	bf00      	nop
 800a64c:	371c      	adds	r7, #28
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	40010000 	.word	0x40010000
 800a65c:	40010400 	.word	0x40010400
 800a660:	40014000 	.word	0x40014000
 800a664:	40014400 	.word	0x40014400
 800a668:	40014800 	.word	0x40014800

0800a66c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a69a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	041b      	lsls	r3, r3, #16
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a17      	ldr	r2, [pc, #92]	; (800a71c <TIM_OC5_SetConfig+0xb0>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d00f      	beq.n	800a6e2 <TIM_OC5_SetConfig+0x76>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a16      	ldr	r2, [pc, #88]	; (800a720 <TIM_OC5_SetConfig+0xb4>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d00b      	beq.n	800a6e2 <TIM_OC5_SetConfig+0x76>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a15      	ldr	r2, [pc, #84]	; (800a724 <TIM_OC5_SetConfig+0xb8>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d007      	beq.n	800a6e2 <TIM_OC5_SetConfig+0x76>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a14      	ldr	r2, [pc, #80]	; (800a728 <TIM_OC5_SetConfig+0xbc>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d003      	beq.n	800a6e2 <TIM_OC5_SetConfig+0x76>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a13      	ldr	r2, [pc, #76]	; (800a72c <TIM_OC5_SetConfig+0xc0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d109      	bne.n	800a6f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	621a      	str	r2, [r3, #32]
}
 800a710:	bf00      	nop
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	40010000 	.word	0x40010000
 800a720:	40010400 	.word	0x40010400
 800a724:	40014000 	.word	0x40014000
 800a728:	40014400 	.word	0x40014400
 800a72c:	40014800 	.word	0x40014800

0800a730 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a75e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	021b      	lsls	r3, r3, #8
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4313      	orrs	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	051b      	lsls	r3, r3, #20
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a18      	ldr	r2, [pc, #96]	; (800a7e4 <TIM_OC6_SetConfig+0xb4>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d00f      	beq.n	800a7a8 <TIM_OC6_SetConfig+0x78>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a17      	ldr	r2, [pc, #92]	; (800a7e8 <TIM_OC6_SetConfig+0xb8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d00b      	beq.n	800a7a8 <TIM_OC6_SetConfig+0x78>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a16      	ldr	r2, [pc, #88]	; (800a7ec <TIM_OC6_SetConfig+0xbc>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d007      	beq.n	800a7a8 <TIM_OC6_SetConfig+0x78>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a15      	ldr	r2, [pc, #84]	; (800a7f0 <TIM_OC6_SetConfig+0xc0>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d003      	beq.n	800a7a8 <TIM_OC6_SetConfig+0x78>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a14      	ldr	r2, [pc, #80]	; (800a7f4 <TIM_OC6_SetConfig+0xc4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d109      	bne.n	800a7bc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a7ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	029b      	lsls	r3, r3, #10
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	621a      	str	r2, [r3, #32]
}
 800a7d6:	bf00      	nop
 800a7d8:	371c      	adds	r7, #28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	40010000 	.word	0x40010000
 800a7e8:	40010400 	.word	0x40010400
 800a7ec:	40014000 	.word	0x40014000
 800a7f0:	40014400 	.word	0x40014400
 800a7f4:	40014800 	.word	0x40014800

0800a7f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	f023 0201 	bic.w	r2, r3, #1
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f023 030a 	bic.w	r3, r3, #10
 800a834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	621a      	str	r2, [r3, #32]
}
 800a84a:	bf00      	nop
 800a84c:	371c      	adds	r7, #28
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a856:	b480      	push	{r7}
 800a858:	b087      	sub	sp, #28
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	60f8      	str	r0, [r7, #12]
 800a85e:	60b9      	str	r1, [r7, #8]
 800a860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	f023 0210 	bic.w	r2, r3, #16
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6a1b      	ldr	r3, [r3, #32]
 800a878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	031b      	lsls	r3, r3, #12
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	4313      	orrs	r3, r2
 800a88a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	621a      	str	r2, [r3, #32]
}
 800a8aa:	bf00      	nop
 800a8ac:	371c      	adds	r7, #28
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
	...

0800a8b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <TIM_ITRx_SetConfig+0x38>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	f043 0307 	orr.w	r3, r3, #7
 800a8da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	609a      	str	r2, [r3, #8]
}
 800a8e2:	bf00      	nop
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	ffcfff8f 	.word	0xffcfff8f

0800a8f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a90e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	021a      	lsls	r2, r3, #8
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	431a      	orrs	r2, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	609a      	str	r2, [r3, #8]
}
 800a928:	bf00      	nop
 800a92a:	371c      	adds	r7, #28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	f003 031f 	and.w	r3, r3, #31
 800a946:	2201      	movs	r2, #1
 800a948:	fa02 f303 	lsl.w	r3, r2, r3
 800a94c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6a1a      	ldr	r2, [r3, #32]
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	43db      	mvns	r3, r3
 800a956:	401a      	ands	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6a1a      	ldr	r2, [r3, #32]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f003 031f 	and.w	r3, r3, #31
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	fa01 f303 	lsl.w	r3, r1, r3
 800a96c:	431a      	orrs	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	621a      	str	r2, [r3, #32]
}
 800a972:	bf00      	nop
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
	...

0800a980 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d109      	bne.n	800a9a4 <HAL_TIMEx_PWMN_Start+0x24>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b01      	cmp	r3, #1
 800a99a:	bf14      	ite	ne
 800a99c:	2301      	movne	r3, #1
 800a99e:	2300      	moveq	r3, #0
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	e022      	b.n	800a9ea <HAL_TIMEx_PWMN_Start+0x6a>
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d109      	bne.n	800a9be <HAL_TIMEx_PWMN_Start+0x3e>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	bf14      	ite	ne
 800a9b6:	2301      	movne	r3, #1
 800a9b8:	2300      	moveq	r3, #0
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	e015      	b.n	800a9ea <HAL_TIMEx_PWMN_Start+0x6a>
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	2b08      	cmp	r3, #8
 800a9c2:	d109      	bne.n	800a9d8 <HAL_TIMEx_PWMN_Start+0x58>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	bf14      	ite	ne
 800a9d0:	2301      	movne	r3, #1
 800a9d2:	2300      	moveq	r3, #0
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	e008      	b.n	800a9ea <HAL_TIMEx_PWMN_Start+0x6a>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	bf14      	ite	ne
 800a9e4:	2301      	movne	r3, #1
 800a9e6:	2300      	moveq	r3, #0
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e07d      	b.n	800aaee <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d104      	bne.n	800aa02 <HAL_TIMEx_PWMN_Start+0x82>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa00:	e013      	b.n	800aa2a <HAL_TIMEx_PWMN_Start+0xaa>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d104      	bne.n	800aa12 <HAL_TIMEx_PWMN_Start+0x92>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa10:	e00b      	b.n	800aa2a <HAL_TIMEx_PWMN_Start+0xaa>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d104      	bne.n	800aa22 <HAL_TIMEx_PWMN_Start+0xa2>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa20:	e003      	b.n	800aa2a <HAL_TIMEx_PWMN_Start+0xaa>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2202      	movs	r2, #2
 800aa26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2204      	movs	r2, #4
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 f9ac 	bl	800ad90 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a2a      	ldr	r2, [pc, #168]	; (800aaf8 <HAL_TIMEx_PWMN_Start+0x178>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d02c      	beq.n	800aaac <HAL_TIMEx_PWMN_Start+0x12c>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa5a:	d027      	beq.n	800aaac <HAL_TIMEx_PWMN_Start+0x12c>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a26      	ldr	r2, [pc, #152]	; (800aafc <HAL_TIMEx_PWMN_Start+0x17c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d022      	beq.n	800aaac <HAL_TIMEx_PWMN_Start+0x12c>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a25      	ldr	r2, [pc, #148]	; (800ab00 <HAL_TIMEx_PWMN_Start+0x180>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d01d      	beq.n	800aaac <HAL_TIMEx_PWMN_Start+0x12c>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a23      	ldr	r2, [pc, #140]	; (800ab04 <HAL_TIMEx_PWMN_Start+0x184>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d018      	beq.n	800aaac <HAL_TIMEx_PWMN_Start+0x12c>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a22      	ldr	r2, [pc, #136]	; (800ab08 <HAL_TIMEx_PWMN_Start+0x188>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d013      	beq.n	800aaac <HAL_TIMEx_PWMN_Start+0x12c>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a20      	ldr	r2, [pc, #128]	; (800ab0c <HAL_TIMEx_PWMN_Start+0x18c>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00e      	beq.n	800aaac <HAL_TIMEx_PWMN_Start+0x12c>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a1f      	ldr	r2, [pc, #124]	; (800ab10 <HAL_TIMEx_PWMN_Start+0x190>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d009      	beq.n	800aaac <HAL_TIMEx_PWMN_Start+0x12c>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a1d      	ldr	r2, [pc, #116]	; (800ab14 <HAL_TIMEx_PWMN_Start+0x194>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d004      	beq.n	800aaac <HAL_TIMEx_PWMN_Start+0x12c>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a1c      	ldr	r2, [pc, #112]	; (800ab18 <HAL_TIMEx_PWMN_Start+0x198>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d115      	bne.n	800aad8 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	689a      	ldr	r2, [r3, #8]
 800aab2:	4b1a      	ldr	r3, [pc, #104]	; (800ab1c <HAL_TIMEx_PWMN_Start+0x19c>)
 800aab4:	4013      	ands	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2b06      	cmp	r3, #6
 800aabc:	d015      	beq.n	800aaea <HAL_TIMEx_PWMN_Start+0x16a>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac4:	d011      	beq.n	800aaea <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f042 0201 	orr.w	r2, r2, #1
 800aad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad6:	e008      	b.n	800aaea <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f042 0201 	orr.w	r2, r2, #1
 800aae6:	601a      	str	r2, [r3, #0]
 800aae8:	e000      	b.n	800aaec <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	40010000 	.word	0x40010000
 800aafc:	40000400 	.word	0x40000400
 800ab00:	40000800 	.word	0x40000800
 800ab04:	40000c00 	.word	0x40000c00
 800ab08:	40010400 	.word	0x40010400
 800ab0c:	40001800 	.word	0x40001800
 800ab10:	40014000 	.word	0x40014000
 800ab14:	4000e000 	.word	0x4000e000
 800ab18:	4000e400 	.word	0x4000e400
 800ab1c:	00010007 	.word	0x00010007

0800ab20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d101      	bne.n	800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab34:	2302      	movs	r3, #2
 800ab36:	e077      	b.n	800ac28 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a35      	ldr	r2, [pc, #212]	; (800ac34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d004      	beq.n	800ab6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a34      	ldr	r2, [pc, #208]	; (800ac38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d108      	bne.n	800ab7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a25      	ldr	r2, [pc, #148]	; (800ac34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d02c      	beq.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abaa:	d027      	beq.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a22      	ldr	r2, [pc, #136]	; (800ac3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d022      	beq.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a21      	ldr	r2, [pc, #132]	; (800ac40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d01d      	beq.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a1f      	ldr	r2, [pc, #124]	; (800ac44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d018      	beq.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a1a      	ldr	r2, [pc, #104]	; (800ac38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d013      	beq.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a1b      	ldr	r2, [pc, #108]	; (800ac48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d00e      	beq.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a1a      	ldr	r2, [pc, #104]	; (800ac4c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d009      	beq.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a18      	ldr	r2, [pc, #96]	; (800ac50 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d004      	beq.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a17      	ldr	r2, [pc, #92]	; (800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d10c      	bne.n	800ac16 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40010400 	.word	0x40010400
 800ac3c:	40000400 	.word	0x40000400
 800ac40:	40000800 	.word	0x40000800
 800ac44:	40000c00 	.word	0x40000c00
 800ac48:	40001800 	.word	0x40001800
 800ac4c:	40014000 	.word	0x40014000
 800ac50:	4000e000 	.word	0x4000e000
 800ac54:	4000e400 	.word	0x4000e400

0800ac58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d101      	bne.n	800ac74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac70:	2302      	movs	r3, #2
 800ac72:	e065      	b.n	800ad40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	4313      	orrs	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acda:	4313      	orrs	r3, r2
 800acdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	041b      	lsls	r3, r3, #16
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a16      	ldr	r2, [pc, #88]	; (800ad4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d004      	beq.n	800ad02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a14      	ldr	r2, [pc, #80]	; (800ad50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d115      	bne.n	800ad2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	051b      	lsls	r3, r3, #20
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	40010000 	.word	0x40010000
 800ad50:	40010400 	.word	0x40010400

0800ad54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b087      	sub	sp, #28
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	f003 031f 	and.w	r3, r3, #31
 800ada2:	2204      	movs	r2, #4
 800ada4:	fa02 f303 	lsl.w	r3, r2, r3
 800ada8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6a1a      	ldr	r2, [r3, #32]
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	43db      	mvns	r3, r3
 800adb2:	401a      	ands	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6a1a      	ldr	r2, [r3, #32]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	f003 031f 	and.w	r3, r3, #31
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	fa01 f303 	lsl.w	r3, r1, r3
 800adc8:	431a      	orrs	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	621a      	str	r2, [r3, #32]
}
 800adce:	bf00      	nop
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b082      	sub	sp, #8
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e042      	b.n	800ae72 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d106      	bne.n	800ae04 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7f7 fb4a 	bl	8002498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2224      	movs	r2, #36	; 0x24
 800ae08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f022 0201 	bic.w	r2, r2, #1
 800ae1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f82d 	bl	800ae7c <UART_SetConfig>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d101      	bne.n	800ae2c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e022      	b.n	800ae72 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fe7f 	bl	800bb38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f042 0201 	orr.w	r2, r2, #1
 800ae68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 ff06 	bl	800bc7c <UART_CheckIdleState>
 800ae70:	4603      	mov	r3, r0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae7c:	b5b0      	push	{r4, r5, r7, lr}
 800ae7e:	b08e      	sub	sp, #56	; 0x38
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689a      	ldr	r2, [r3, #8]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	431a      	orrs	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	4bbf      	ldr	r3, [pc, #764]	; (800b1a8 <UART_SetConfig+0x32c>)
 800aeaa:	4013      	ands	r3, r2
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	6812      	ldr	r2, [r2, #0]
 800aeb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aeb2:	430b      	orrs	r3, r1
 800aeb4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	430a      	orrs	r2, r1
 800aeca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4ab5      	ldr	r2, [pc, #724]	; (800b1ac <UART_SetConfig+0x330>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d004      	beq.n	800aee6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aee2:	4313      	orrs	r3, r2
 800aee4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	689a      	ldr	r2, [r3, #8]
 800aeec:	4bb0      	ldr	r3, [pc, #704]	; (800b1b0 <UART_SetConfig+0x334>)
 800aeee:	4013      	ands	r3, r2
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	6812      	ldr	r2, [r2, #0]
 800aef4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aef6:	430b      	orrs	r3, r1
 800aef8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	f023 010f 	bic.w	r1, r3, #15
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	430a      	orrs	r2, r1
 800af0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4aa7      	ldr	r2, [pc, #668]	; (800b1b4 <UART_SetConfig+0x338>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d176      	bne.n	800b008 <UART_SetConfig+0x18c>
 800af1a:	4ba7      	ldr	r3, [pc, #668]	; (800b1b8 <UART_SetConfig+0x33c>)
 800af1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af22:	2b28      	cmp	r3, #40	; 0x28
 800af24:	d86c      	bhi.n	800b000 <UART_SetConfig+0x184>
 800af26:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <UART_SetConfig+0xb0>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800afd1 	.word	0x0800afd1
 800af30:	0800b001 	.word	0x0800b001
 800af34:	0800b001 	.word	0x0800b001
 800af38:	0800b001 	.word	0x0800b001
 800af3c:	0800b001 	.word	0x0800b001
 800af40:	0800b001 	.word	0x0800b001
 800af44:	0800b001 	.word	0x0800b001
 800af48:	0800b001 	.word	0x0800b001
 800af4c:	0800afd9 	.word	0x0800afd9
 800af50:	0800b001 	.word	0x0800b001
 800af54:	0800b001 	.word	0x0800b001
 800af58:	0800b001 	.word	0x0800b001
 800af5c:	0800b001 	.word	0x0800b001
 800af60:	0800b001 	.word	0x0800b001
 800af64:	0800b001 	.word	0x0800b001
 800af68:	0800b001 	.word	0x0800b001
 800af6c:	0800afe1 	.word	0x0800afe1
 800af70:	0800b001 	.word	0x0800b001
 800af74:	0800b001 	.word	0x0800b001
 800af78:	0800b001 	.word	0x0800b001
 800af7c:	0800b001 	.word	0x0800b001
 800af80:	0800b001 	.word	0x0800b001
 800af84:	0800b001 	.word	0x0800b001
 800af88:	0800b001 	.word	0x0800b001
 800af8c:	0800afe9 	.word	0x0800afe9
 800af90:	0800b001 	.word	0x0800b001
 800af94:	0800b001 	.word	0x0800b001
 800af98:	0800b001 	.word	0x0800b001
 800af9c:	0800b001 	.word	0x0800b001
 800afa0:	0800b001 	.word	0x0800b001
 800afa4:	0800b001 	.word	0x0800b001
 800afa8:	0800b001 	.word	0x0800b001
 800afac:	0800aff1 	.word	0x0800aff1
 800afb0:	0800b001 	.word	0x0800b001
 800afb4:	0800b001 	.word	0x0800b001
 800afb8:	0800b001 	.word	0x0800b001
 800afbc:	0800b001 	.word	0x0800b001
 800afc0:	0800b001 	.word	0x0800b001
 800afc4:	0800b001 	.word	0x0800b001
 800afc8:	0800b001 	.word	0x0800b001
 800afcc:	0800aff9 	.word	0x0800aff9
 800afd0:	2301      	movs	r3, #1
 800afd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afd6:	e326      	b.n	800b626 <UART_SetConfig+0x7aa>
 800afd8:	2304      	movs	r3, #4
 800afda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afde:	e322      	b.n	800b626 <UART_SetConfig+0x7aa>
 800afe0:	2308      	movs	r3, #8
 800afe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe6:	e31e      	b.n	800b626 <UART_SetConfig+0x7aa>
 800afe8:	2310      	movs	r3, #16
 800afea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afee:	e31a      	b.n	800b626 <UART_SetConfig+0x7aa>
 800aff0:	2320      	movs	r3, #32
 800aff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff6:	e316      	b.n	800b626 <UART_SetConfig+0x7aa>
 800aff8:	2340      	movs	r3, #64	; 0x40
 800affa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affe:	e312      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b000:	2380      	movs	r3, #128	; 0x80
 800b002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b006:	e30e      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a6b      	ldr	r2, [pc, #428]	; (800b1bc <UART_SetConfig+0x340>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d130      	bne.n	800b074 <UART_SetConfig+0x1f8>
 800b012:	4b69      	ldr	r3, [pc, #420]	; (800b1b8 <UART_SetConfig+0x33c>)
 800b014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b016:	f003 0307 	and.w	r3, r3, #7
 800b01a:	2b05      	cmp	r3, #5
 800b01c:	d826      	bhi.n	800b06c <UART_SetConfig+0x1f0>
 800b01e:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <UART_SetConfig+0x1a8>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b03d 	.word	0x0800b03d
 800b028:	0800b045 	.word	0x0800b045
 800b02c:	0800b04d 	.word	0x0800b04d
 800b030:	0800b055 	.word	0x0800b055
 800b034:	0800b05d 	.word	0x0800b05d
 800b038:	0800b065 	.word	0x0800b065
 800b03c:	2300      	movs	r3, #0
 800b03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b042:	e2f0      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b044:	2304      	movs	r3, #4
 800b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b04a:	e2ec      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b04c:	2308      	movs	r3, #8
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e2e8      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b054:	2310      	movs	r3, #16
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e2e4      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b05c:	2320      	movs	r3, #32
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b062:	e2e0      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b064:	2340      	movs	r3, #64	; 0x40
 800b066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b06a:	e2dc      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b06c:	2380      	movs	r3, #128	; 0x80
 800b06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b072:	e2d8      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a51      	ldr	r2, [pc, #324]	; (800b1c0 <UART_SetConfig+0x344>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d130      	bne.n	800b0e0 <UART_SetConfig+0x264>
 800b07e:	4b4e      	ldr	r3, [pc, #312]	; (800b1b8 <UART_SetConfig+0x33c>)
 800b080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b082:	f003 0307 	and.w	r3, r3, #7
 800b086:	2b05      	cmp	r3, #5
 800b088:	d826      	bhi.n	800b0d8 <UART_SetConfig+0x25c>
 800b08a:	a201      	add	r2, pc, #4	; (adr r2, 800b090 <UART_SetConfig+0x214>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b0a9 	.word	0x0800b0a9
 800b094:	0800b0b1 	.word	0x0800b0b1
 800b098:	0800b0b9 	.word	0x0800b0b9
 800b09c:	0800b0c1 	.word	0x0800b0c1
 800b0a0:	0800b0c9 	.word	0x0800b0c9
 800b0a4:	0800b0d1 	.word	0x0800b0d1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ae:	e2ba      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b0b0:	2304      	movs	r3, #4
 800b0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b6:	e2b6      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b0b8:	2308      	movs	r3, #8
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0be:	e2b2      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c6:	e2ae      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ce:	e2aa      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b0d0:	2340      	movs	r3, #64	; 0x40
 800b0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d6:	e2a6      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b0d8:	2380      	movs	r3, #128	; 0x80
 800b0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0de:	e2a2      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a37      	ldr	r2, [pc, #220]	; (800b1c4 <UART_SetConfig+0x348>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d130      	bne.n	800b14c <UART_SetConfig+0x2d0>
 800b0ea:	4b33      	ldr	r3, [pc, #204]	; (800b1b8 <UART_SetConfig+0x33c>)
 800b0ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	d826      	bhi.n	800b144 <UART_SetConfig+0x2c8>
 800b0f6:	a201      	add	r2, pc, #4	; (adr r2, 800b0fc <UART_SetConfig+0x280>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b115 	.word	0x0800b115
 800b100:	0800b11d 	.word	0x0800b11d
 800b104:	0800b125 	.word	0x0800b125
 800b108:	0800b12d 	.word	0x0800b12d
 800b10c:	0800b135 	.word	0x0800b135
 800b110:	0800b13d 	.word	0x0800b13d
 800b114:	2300      	movs	r3, #0
 800b116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b11a:	e284      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b11c:	2304      	movs	r3, #4
 800b11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b122:	e280      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b124:	2308      	movs	r3, #8
 800b126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12a:	e27c      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b12c:	2310      	movs	r3, #16
 800b12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b132:	e278      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b134:	2320      	movs	r3, #32
 800b136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13a:	e274      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b13c:	2340      	movs	r3, #64	; 0x40
 800b13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b142:	e270      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b144:	2380      	movs	r3, #128	; 0x80
 800b146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b14a:	e26c      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a1d      	ldr	r2, [pc, #116]	; (800b1c8 <UART_SetConfig+0x34c>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d142      	bne.n	800b1dc <UART_SetConfig+0x360>
 800b156:	4b18      	ldr	r3, [pc, #96]	; (800b1b8 <UART_SetConfig+0x33c>)
 800b158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	2b05      	cmp	r3, #5
 800b160:	d838      	bhi.n	800b1d4 <UART_SetConfig+0x358>
 800b162:	a201      	add	r2, pc, #4	; (adr r2, 800b168 <UART_SetConfig+0x2ec>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b181 	.word	0x0800b181
 800b16c:	0800b189 	.word	0x0800b189
 800b170:	0800b191 	.word	0x0800b191
 800b174:	0800b199 	.word	0x0800b199
 800b178:	0800b1a1 	.word	0x0800b1a1
 800b17c:	0800b1cd 	.word	0x0800b1cd
 800b180:	2300      	movs	r3, #0
 800b182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b186:	e24e      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b188:	2304      	movs	r3, #4
 800b18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b18e:	e24a      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b190:	2308      	movs	r3, #8
 800b192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b196:	e246      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b198:	2310      	movs	r3, #16
 800b19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b19e:	e242      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b1a0:	2320      	movs	r3, #32
 800b1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1a6:	e23e      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b1a8:	cfff69f3 	.word	0xcfff69f3
 800b1ac:	58000c00 	.word	0x58000c00
 800b1b0:	11fff4ff 	.word	0x11fff4ff
 800b1b4:	40011000 	.word	0x40011000
 800b1b8:	58024400 	.word	0x58024400
 800b1bc:	40004400 	.word	0x40004400
 800b1c0:	40004800 	.word	0x40004800
 800b1c4:	40004c00 	.word	0x40004c00
 800b1c8:	40005000 	.word	0x40005000
 800b1cc:	2340      	movs	r3, #64	; 0x40
 800b1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d2:	e228      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b1d4:	2380      	movs	r3, #128	; 0x80
 800b1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1da:	e224      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4ab1      	ldr	r2, [pc, #708]	; (800b4a8 <UART_SetConfig+0x62c>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d176      	bne.n	800b2d4 <UART_SetConfig+0x458>
 800b1e6:	4bb1      	ldr	r3, [pc, #708]	; (800b4ac <UART_SetConfig+0x630>)
 800b1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1ee:	2b28      	cmp	r3, #40	; 0x28
 800b1f0:	d86c      	bhi.n	800b2cc <UART_SetConfig+0x450>
 800b1f2:	a201      	add	r2, pc, #4	; (adr r2, 800b1f8 <UART_SetConfig+0x37c>)
 800b1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f8:	0800b29d 	.word	0x0800b29d
 800b1fc:	0800b2cd 	.word	0x0800b2cd
 800b200:	0800b2cd 	.word	0x0800b2cd
 800b204:	0800b2cd 	.word	0x0800b2cd
 800b208:	0800b2cd 	.word	0x0800b2cd
 800b20c:	0800b2cd 	.word	0x0800b2cd
 800b210:	0800b2cd 	.word	0x0800b2cd
 800b214:	0800b2cd 	.word	0x0800b2cd
 800b218:	0800b2a5 	.word	0x0800b2a5
 800b21c:	0800b2cd 	.word	0x0800b2cd
 800b220:	0800b2cd 	.word	0x0800b2cd
 800b224:	0800b2cd 	.word	0x0800b2cd
 800b228:	0800b2cd 	.word	0x0800b2cd
 800b22c:	0800b2cd 	.word	0x0800b2cd
 800b230:	0800b2cd 	.word	0x0800b2cd
 800b234:	0800b2cd 	.word	0x0800b2cd
 800b238:	0800b2ad 	.word	0x0800b2ad
 800b23c:	0800b2cd 	.word	0x0800b2cd
 800b240:	0800b2cd 	.word	0x0800b2cd
 800b244:	0800b2cd 	.word	0x0800b2cd
 800b248:	0800b2cd 	.word	0x0800b2cd
 800b24c:	0800b2cd 	.word	0x0800b2cd
 800b250:	0800b2cd 	.word	0x0800b2cd
 800b254:	0800b2cd 	.word	0x0800b2cd
 800b258:	0800b2b5 	.word	0x0800b2b5
 800b25c:	0800b2cd 	.word	0x0800b2cd
 800b260:	0800b2cd 	.word	0x0800b2cd
 800b264:	0800b2cd 	.word	0x0800b2cd
 800b268:	0800b2cd 	.word	0x0800b2cd
 800b26c:	0800b2cd 	.word	0x0800b2cd
 800b270:	0800b2cd 	.word	0x0800b2cd
 800b274:	0800b2cd 	.word	0x0800b2cd
 800b278:	0800b2bd 	.word	0x0800b2bd
 800b27c:	0800b2cd 	.word	0x0800b2cd
 800b280:	0800b2cd 	.word	0x0800b2cd
 800b284:	0800b2cd 	.word	0x0800b2cd
 800b288:	0800b2cd 	.word	0x0800b2cd
 800b28c:	0800b2cd 	.word	0x0800b2cd
 800b290:	0800b2cd 	.word	0x0800b2cd
 800b294:	0800b2cd 	.word	0x0800b2cd
 800b298:	0800b2c5 	.word	0x0800b2c5
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2a2:	e1c0      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b2a4:	2304      	movs	r3, #4
 800b2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2aa:	e1bc      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b2ac:	2308      	movs	r3, #8
 800b2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b2:	e1b8      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b2b4:	2310      	movs	r3, #16
 800b2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ba:	e1b4      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b2bc:	2320      	movs	r3, #32
 800b2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c2:	e1b0      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b2c4:	2340      	movs	r3, #64	; 0x40
 800b2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ca:	e1ac      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b2cc:	2380      	movs	r3, #128	; 0x80
 800b2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d2:	e1a8      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a75      	ldr	r2, [pc, #468]	; (800b4b0 <UART_SetConfig+0x634>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d130      	bne.n	800b340 <UART_SetConfig+0x4c4>
 800b2de:	4b73      	ldr	r3, [pc, #460]	; (800b4ac <UART_SetConfig+0x630>)
 800b2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e2:	f003 0307 	and.w	r3, r3, #7
 800b2e6:	2b05      	cmp	r3, #5
 800b2e8:	d826      	bhi.n	800b338 <UART_SetConfig+0x4bc>
 800b2ea:	a201      	add	r2, pc, #4	; (adr r2, 800b2f0 <UART_SetConfig+0x474>)
 800b2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f0:	0800b309 	.word	0x0800b309
 800b2f4:	0800b311 	.word	0x0800b311
 800b2f8:	0800b319 	.word	0x0800b319
 800b2fc:	0800b321 	.word	0x0800b321
 800b300:	0800b329 	.word	0x0800b329
 800b304:	0800b331 	.word	0x0800b331
 800b308:	2300      	movs	r3, #0
 800b30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b30e:	e18a      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b310:	2304      	movs	r3, #4
 800b312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b316:	e186      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b318:	2308      	movs	r3, #8
 800b31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31e:	e182      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b320:	2310      	movs	r3, #16
 800b322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b326:	e17e      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b328:	2320      	movs	r3, #32
 800b32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b32e:	e17a      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b330:	2340      	movs	r3, #64	; 0x40
 800b332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b336:	e176      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b338:	2380      	movs	r3, #128	; 0x80
 800b33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33e:	e172      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a5b      	ldr	r2, [pc, #364]	; (800b4b4 <UART_SetConfig+0x638>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d130      	bne.n	800b3ac <UART_SetConfig+0x530>
 800b34a:	4b58      	ldr	r3, [pc, #352]	; (800b4ac <UART_SetConfig+0x630>)
 800b34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b34e:	f003 0307 	and.w	r3, r3, #7
 800b352:	2b05      	cmp	r3, #5
 800b354:	d826      	bhi.n	800b3a4 <UART_SetConfig+0x528>
 800b356:	a201      	add	r2, pc, #4	; (adr r2, 800b35c <UART_SetConfig+0x4e0>)
 800b358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35c:	0800b375 	.word	0x0800b375
 800b360:	0800b37d 	.word	0x0800b37d
 800b364:	0800b385 	.word	0x0800b385
 800b368:	0800b38d 	.word	0x0800b38d
 800b36c:	0800b395 	.word	0x0800b395
 800b370:	0800b39d 	.word	0x0800b39d
 800b374:	2300      	movs	r3, #0
 800b376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b37a:	e154      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b37c:	2304      	movs	r3, #4
 800b37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b382:	e150      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b384:	2308      	movs	r3, #8
 800b386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38a:	e14c      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b38c:	2310      	movs	r3, #16
 800b38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b392:	e148      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b394:	2320      	movs	r3, #32
 800b396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b39a:	e144      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b39c:	2340      	movs	r3, #64	; 0x40
 800b39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a2:	e140      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b3a4:	2380      	movs	r3, #128	; 0x80
 800b3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3aa:	e13c      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a41      	ldr	r2, [pc, #260]	; (800b4b8 <UART_SetConfig+0x63c>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	f040 8082 	bne.w	800b4bc <UART_SetConfig+0x640>
 800b3b8:	4b3c      	ldr	r3, [pc, #240]	; (800b4ac <UART_SetConfig+0x630>)
 800b3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3c0:	2b28      	cmp	r3, #40	; 0x28
 800b3c2:	d86d      	bhi.n	800b4a0 <UART_SetConfig+0x624>
 800b3c4:	a201      	add	r2, pc, #4	; (adr r2, 800b3cc <UART_SetConfig+0x550>)
 800b3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ca:	bf00      	nop
 800b3cc:	0800b471 	.word	0x0800b471
 800b3d0:	0800b4a1 	.word	0x0800b4a1
 800b3d4:	0800b4a1 	.word	0x0800b4a1
 800b3d8:	0800b4a1 	.word	0x0800b4a1
 800b3dc:	0800b4a1 	.word	0x0800b4a1
 800b3e0:	0800b4a1 	.word	0x0800b4a1
 800b3e4:	0800b4a1 	.word	0x0800b4a1
 800b3e8:	0800b4a1 	.word	0x0800b4a1
 800b3ec:	0800b479 	.word	0x0800b479
 800b3f0:	0800b4a1 	.word	0x0800b4a1
 800b3f4:	0800b4a1 	.word	0x0800b4a1
 800b3f8:	0800b4a1 	.word	0x0800b4a1
 800b3fc:	0800b4a1 	.word	0x0800b4a1
 800b400:	0800b4a1 	.word	0x0800b4a1
 800b404:	0800b4a1 	.word	0x0800b4a1
 800b408:	0800b4a1 	.word	0x0800b4a1
 800b40c:	0800b481 	.word	0x0800b481
 800b410:	0800b4a1 	.word	0x0800b4a1
 800b414:	0800b4a1 	.word	0x0800b4a1
 800b418:	0800b4a1 	.word	0x0800b4a1
 800b41c:	0800b4a1 	.word	0x0800b4a1
 800b420:	0800b4a1 	.word	0x0800b4a1
 800b424:	0800b4a1 	.word	0x0800b4a1
 800b428:	0800b4a1 	.word	0x0800b4a1
 800b42c:	0800b489 	.word	0x0800b489
 800b430:	0800b4a1 	.word	0x0800b4a1
 800b434:	0800b4a1 	.word	0x0800b4a1
 800b438:	0800b4a1 	.word	0x0800b4a1
 800b43c:	0800b4a1 	.word	0x0800b4a1
 800b440:	0800b4a1 	.word	0x0800b4a1
 800b444:	0800b4a1 	.word	0x0800b4a1
 800b448:	0800b4a1 	.word	0x0800b4a1
 800b44c:	0800b491 	.word	0x0800b491
 800b450:	0800b4a1 	.word	0x0800b4a1
 800b454:	0800b4a1 	.word	0x0800b4a1
 800b458:	0800b4a1 	.word	0x0800b4a1
 800b45c:	0800b4a1 	.word	0x0800b4a1
 800b460:	0800b4a1 	.word	0x0800b4a1
 800b464:	0800b4a1 	.word	0x0800b4a1
 800b468:	0800b4a1 	.word	0x0800b4a1
 800b46c:	0800b499 	.word	0x0800b499
 800b470:	2301      	movs	r3, #1
 800b472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b476:	e0d6      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b478:	2304      	movs	r3, #4
 800b47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b47e:	e0d2      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b480:	2308      	movs	r3, #8
 800b482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b486:	e0ce      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b488:	2310      	movs	r3, #16
 800b48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b48e:	e0ca      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b490:	2320      	movs	r3, #32
 800b492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b496:	e0c6      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b498:	2340      	movs	r3, #64	; 0x40
 800b49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b49e:	e0c2      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b4a0:	2380      	movs	r3, #128	; 0x80
 800b4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4a6:	e0be      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b4a8:	40011400 	.word	0x40011400
 800b4ac:	58024400 	.word	0x58024400
 800b4b0:	40007800 	.word	0x40007800
 800b4b4:	40007c00 	.word	0x40007c00
 800b4b8:	40011800 	.word	0x40011800
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4aad      	ldr	r2, [pc, #692]	; (800b778 <UART_SetConfig+0x8fc>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d176      	bne.n	800b5b4 <UART_SetConfig+0x738>
 800b4c6:	4bad      	ldr	r3, [pc, #692]	; (800b77c <UART_SetConfig+0x900>)
 800b4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4ce:	2b28      	cmp	r3, #40	; 0x28
 800b4d0:	d86c      	bhi.n	800b5ac <UART_SetConfig+0x730>
 800b4d2:	a201      	add	r2, pc, #4	; (adr r2, 800b4d8 <UART_SetConfig+0x65c>)
 800b4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d8:	0800b57d 	.word	0x0800b57d
 800b4dc:	0800b5ad 	.word	0x0800b5ad
 800b4e0:	0800b5ad 	.word	0x0800b5ad
 800b4e4:	0800b5ad 	.word	0x0800b5ad
 800b4e8:	0800b5ad 	.word	0x0800b5ad
 800b4ec:	0800b5ad 	.word	0x0800b5ad
 800b4f0:	0800b5ad 	.word	0x0800b5ad
 800b4f4:	0800b5ad 	.word	0x0800b5ad
 800b4f8:	0800b585 	.word	0x0800b585
 800b4fc:	0800b5ad 	.word	0x0800b5ad
 800b500:	0800b5ad 	.word	0x0800b5ad
 800b504:	0800b5ad 	.word	0x0800b5ad
 800b508:	0800b5ad 	.word	0x0800b5ad
 800b50c:	0800b5ad 	.word	0x0800b5ad
 800b510:	0800b5ad 	.word	0x0800b5ad
 800b514:	0800b5ad 	.word	0x0800b5ad
 800b518:	0800b58d 	.word	0x0800b58d
 800b51c:	0800b5ad 	.word	0x0800b5ad
 800b520:	0800b5ad 	.word	0x0800b5ad
 800b524:	0800b5ad 	.word	0x0800b5ad
 800b528:	0800b5ad 	.word	0x0800b5ad
 800b52c:	0800b5ad 	.word	0x0800b5ad
 800b530:	0800b5ad 	.word	0x0800b5ad
 800b534:	0800b5ad 	.word	0x0800b5ad
 800b538:	0800b595 	.word	0x0800b595
 800b53c:	0800b5ad 	.word	0x0800b5ad
 800b540:	0800b5ad 	.word	0x0800b5ad
 800b544:	0800b5ad 	.word	0x0800b5ad
 800b548:	0800b5ad 	.word	0x0800b5ad
 800b54c:	0800b5ad 	.word	0x0800b5ad
 800b550:	0800b5ad 	.word	0x0800b5ad
 800b554:	0800b5ad 	.word	0x0800b5ad
 800b558:	0800b59d 	.word	0x0800b59d
 800b55c:	0800b5ad 	.word	0x0800b5ad
 800b560:	0800b5ad 	.word	0x0800b5ad
 800b564:	0800b5ad 	.word	0x0800b5ad
 800b568:	0800b5ad 	.word	0x0800b5ad
 800b56c:	0800b5ad 	.word	0x0800b5ad
 800b570:	0800b5ad 	.word	0x0800b5ad
 800b574:	0800b5ad 	.word	0x0800b5ad
 800b578:	0800b5a5 	.word	0x0800b5a5
 800b57c:	2301      	movs	r3, #1
 800b57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b582:	e050      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b584:	2304      	movs	r3, #4
 800b586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b58a:	e04c      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b58c:	2308      	movs	r3, #8
 800b58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b592:	e048      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b594:	2310      	movs	r3, #16
 800b596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b59a:	e044      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b59c:	2320      	movs	r3, #32
 800b59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5a2:	e040      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b5a4:	2340      	movs	r3, #64	; 0x40
 800b5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5aa:	e03c      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b5ac:	2380      	movs	r3, #128	; 0x80
 800b5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5b2:	e038      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a71      	ldr	r2, [pc, #452]	; (800b780 <UART_SetConfig+0x904>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d130      	bne.n	800b620 <UART_SetConfig+0x7a4>
 800b5be:	4b6f      	ldr	r3, [pc, #444]	; (800b77c <UART_SetConfig+0x900>)
 800b5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c2:	f003 0307 	and.w	r3, r3, #7
 800b5c6:	2b05      	cmp	r3, #5
 800b5c8:	d826      	bhi.n	800b618 <UART_SetConfig+0x79c>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <UART_SetConfig+0x754>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b5e9 	.word	0x0800b5e9
 800b5d4:	0800b5f1 	.word	0x0800b5f1
 800b5d8:	0800b5f9 	.word	0x0800b5f9
 800b5dc:	0800b601 	.word	0x0800b601
 800b5e0:	0800b609 	.word	0x0800b609
 800b5e4:	0800b611 	.word	0x0800b611
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ee:	e01a      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5f6:	e016      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5fe:	e012      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b600:	2310      	movs	r3, #16
 800b602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b606:	e00e      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b608:	2320      	movs	r3, #32
 800b60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b60e:	e00a      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b610:	2340      	movs	r3, #64	; 0x40
 800b612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b616:	e006      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b618:	2380      	movs	r3, #128	; 0x80
 800b61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b61e:	e002      	b.n	800b626 <UART_SetConfig+0x7aa>
 800b620:	2380      	movs	r3, #128	; 0x80
 800b622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a55      	ldr	r2, [pc, #340]	; (800b780 <UART_SetConfig+0x904>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	f040 80f0 	bne.w	800b812 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b632:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b636:	2b20      	cmp	r3, #32
 800b638:	dc46      	bgt.n	800b6c8 <UART_SetConfig+0x84c>
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	db75      	blt.n	800b72a <UART_SetConfig+0x8ae>
 800b63e:	3b02      	subs	r3, #2
 800b640:	2b1e      	cmp	r3, #30
 800b642:	d872      	bhi.n	800b72a <UART_SetConfig+0x8ae>
 800b644:	a201      	add	r2, pc, #4	; (adr r2, 800b64c <UART_SetConfig+0x7d0>)
 800b646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64a:	bf00      	nop
 800b64c:	0800b6cf 	.word	0x0800b6cf
 800b650:	0800b72b 	.word	0x0800b72b
 800b654:	0800b6d7 	.word	0x0800b6d7
 800b658:	0800b72b 	.word	0x0800b72b
 800b65c:	0800b72b 	.word	0x0800b72b
 800b660:	0800b72b 	.word	0x0800b72b
 800b664:	0800b6e7 	.word	0x0800b6e7
 800b668:	0800b72b 	.word	0x0800b72b
 800b66c:	0800b72b 	.word	0x0800b72b
 800b670:	0800b72b 	.word	0x0800b72b
 800b674:	0800b72b 	.word	0x0800b72b
 800b678:	0800b72b 	.word	0x0800b72b
 800b67c:	0800b72b 	.word	0x0800b72b
 800b680:	0800b72b 	.word	0x0800b72b
 800b684:	0800b6f7 	.word	0x0800b6f7
 800b688:	0800b72b 	.word	0x0800b72b
 800b68c:	0800b72b 	.word	0x0800b72b
 800b690:	0800b72b 	.word	0x0800b72b
 800b694:	0800b72b 	.word	0x0800b72b
 800b698:	0800b72b 	.word	0x0800b72b
 800b69c:	0800b72b 	.word	0x0800b72b
 800b6a0:	0800b72b 	.word	0x0800b72b
 800b6a4:	0800b72b 	.word	0x0800b72b
 800b6a8:	0800b72b 	.word	0x0800b72b
 800b6ac:	0800b72b 	.word	0x0800b72b
 800b6b0:	0800b72b 	.word	0x0800b72b
 800b6b4:	0800b72b 	.word	0x0800b72b
 800b6b8:	0800b72b 	.word	0x0800b72b
 800b6bc:	0800b72b 	.word	0x0800b72b
 800b6c0:	0800b72b 	.word	0x0800b72b
 800b6c4:	0800b71d 	.word	0x0800b71d
 800b6c8:	2b40      	cmp	r3, #64	; 0x40
 800b6ca:	d02a      	beq.n	800b722 <UART_SetConfig+0x8a6>
 800b6cc:	e02d      	b.n	800b72a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b6ce:	f7fc fd37 	bl	8008140 <HAL_RCCEx_GetD3PCLK1Freq>
 800b6d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b6d4:	e02f      	b.n	800b736 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6d6:	f107 0314 	add.w	r3, r7, #20
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fc fd46 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6e4:	e027      	b.n	800b736 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6e6:	f107 0308 	add.w	r3, r7, #8
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fc fe92 	bl	8008414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6f4:	e01f      	b.n	800b736 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6f6:	4b21      	ldr	r3, [pc, #132]	; (800b77c <UART_SetConfig+0x900>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d009      	beq.n	800b716 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b702:	4b1e      	ldr	r3, [pc, #120]	; (800b77c <UART_SetConfig+0x900>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	08db      	lsrs	r3, r3, #3
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	4a1d      	ldr	r2, [pc, #116]	; (800b784 <UART_SetConfig+0x908>)
 800b70e:	fa22 f303 	lsr.w	r3, r2, r3
 800b712:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b714:	e00f      	b.n	800b736 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800b716:	4b1b      	ldr	r3, [pc, #108]	; (800b784 <UART_SetConfig+0x908>)
 800b718:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b71a:	e00c      	b.n	800b736 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b71c:	4b1a      	ldr	r3, [pc, #104]	; (800b788 <UART_SetConfig+0x90c>)
 800b71e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b720:	e009      	b.n	800b736 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b726:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b728:	e005      	b.n	800b736 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f000 81e6 	beq.w	800bb0a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b742:	4a12      	ldr	r2, [pc, #72]	; (800b78c <UART_SetConfig+0x910>)
 800b744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b748:	461a      	mov	r2, r3
 800b74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b750:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	4613      	mov	r3, r2
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	4413      	add	r3, r2
 800b75c:	6a3a      	ldr	r2, [r7, #32]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d305      	bcc.n	800b76e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b768:	6a3a      	ldr	r2, [r7, #32]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d910      	bls.n	800b790 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b774:	e1c9      	b.n	800bb0a <UART_SetConfig+0xc8e>
 800b776:	bf00      	nop
 800b778:	40011c00 	.word	0x40011c00
 800b77c:	58024400 	.word	0x58024400
 800b780:	58000c00 	.word	0x58000c00
 800b784:	03d09000 	.word	0x03d09000
 800b788:	003d0900 	.word	0x003d0900
 800b78c:	0800c1d8 	.word	0x0800c1d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b792:	4618      	mov	r0, r3
 800b794:	f04f 0100 	mov.w	r1, #0
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79c:	4ac1      	ldr	r2, [pc, #772]	; (800baa4 <UART_SetConfig+0xc28>)
 800b79e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	f04f 0300 	mov.w	r3, #0
 800b7a8:	f7f4 fdb2 	bl	8000310 <__aeabi_uldivmod>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	f04f 0200 	mov.w	r2, #0
 800b7b8:	f04f 0300 	mov.w	r3, #0
 800b7bc:	020b      	lsls	r3, r1, #8
 800b7be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7c2:	0202      	lsls	r2, r0, #8
 800b7c4:	6879      	ldr	r1, [r7, #4]
 800b7c6:	6849      	ldr	r1, [r1, #4]
 800b7c8:	0849      	lsrs	r1, r1, #1
 800b7ca:	4608      	mov	r0, r1
 800b7cc:	f04f 0100 	mov.w	r1, #0
 800b7d0:	1814      	adds	r4, r2, r0
 800b7d2:	eb43 0501 	adc.w	r5, r3, r1
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f04f 0300 	mov.w	r3, #0
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	f7f4 fd94 	bl	8000310 <__aeabi_uldivmod>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7f6:	d308      	bcc.n	800b80a <UART_SetConfig+0x98e>
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7fe:	d204      	bcs.n	800b80a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b806:	60da      	str	r2, [r3, #12]
 800b808:	e17f      	b.n	800bb0a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b810:	e17b      	b.n	800bb0a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	69db      	ldr	r3, [r3, #28]
 800b816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b81a:	f040 80be 	bne.w	800b99a <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800b81e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b822:	2b20      	cmp	r3, #32
 800b824:	dc48      	bgt.n	800b8b8 <UART_SetConfig+0xa3c>
 800b826:	2b00      	cmp	r3, #0
 800b828:	db7b      	blt.n	800b922 <UART_SetConfig+0xaa6>
 800b82a:	2b20      	cmp	r3, #32
 800b82c:	d879      	bhi.n	800b922 <UART_SetConfig+0xaa6>
 800b82e:	a201      	add	r2, pc, #4	; (adr r2, 800b834 <UART_SetConfig+0x9b8>)
 800b830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b834:	0800b8bf 	.word	0x0800b8bf
 800b838:	0800b8c7 	.word	0x0800b8c7
 800b83c:	0800b923 	.word	0x0800b923
 800b840:	0800b923 	.word	0x0800b923
 800b844:	0800b8cf 	.word	0x0800b8cf
 800b848:	0800b923 	.word	0x0800b923
 800b84c:	0800b923 	.word	0x0800b923
 800b850:	0800b923 	.word	0x0800b923
 800b854:	0800b8df 	.word	0x0800b8df
 800b858:	0800b923 	.word	0x0800b923
 800b85c:	0800b923 	.word	0x0800b923
 800b860:	0800b923 	.word	0x0800b923
 800b864:	0800b923 	.word	0x0800b923
 800b868:	0800b923 	.word	0x0800b923
 800b86c:	0800b923 	.word	0x0800b923
 800b870:	0800b923 	.word	0x0800b923
 800b874:	0800b8ef 	.word	0x0800b8ef
 800b878:	0800b923 	.word	0x0800b923
 800b87c:	0800b923 	.word	0x0800b923
 800b880:	0800b923 	.word	0x0800b923
 800b884:	0800b923 	.word	0x0800b923
 800b888:	0800b923 	.word	0x0800b923
 800b88c:	0800b923 	.word	0x0800b923
 800b890:	0800b923 	.word	0x0800b923
 800b894:	0800b923 	.word	0x0800b923
 800b898:	0800b923 	.word	0x0800b923
 800b89c:	0800b923 	.word	0x0800b923
 800b8a0:	0800b923 	.word	0x0800b923
 800b8a4:	0800b923 	.word	0x0800b923
 800b8a8:	0800b923 	.word	0x0800b923
 800b8ac:	0800b923 	.word	0x0800b923
 800b8b0:	0800b923 	.word	0x0800b923
 800b8b4:	0800b915 	.word	0x0800b915
 800b8b8:	2b40      	cmp	r3, #64	; 0x40
 800b8ba:	d02e      	beq.n	800b91a <UART_SetConfig+0xa9e>
 800b8bc:	e031      	b.n	800b922 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8be:	f7fb f8b3 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 800b8c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8c4:	e033      	b.n	800b92e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8c6:	f7fb f8c5 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
 800b8ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8cc:	e02f      	b.n	800b92e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ce:	f107 0314 	add.w	r3, r7, #20
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fc fc4a 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8dc:	e027      	b.n	800b92e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8de:	f107 0308 	add.w	r3, r7, #8
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fc fd96 	bl	8008414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8ec:	e01f      	b.n	800b92e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8ee:	4b6e      	ldr	r3, [pc, #440]	; (800baa8 <UART_SetConfig+0xc2c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0320 	and.w	r3, r3, #32
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d009      	beq.n	800b90e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8fa:	4b6b      	ldr	r3, [pc, #428]	; (800baa8 <UART_SetConfig+0xc2c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	08db      	lsrs	r3, r3, #3
 800b900:	f003 0303 	and.w	r3, r3, #3
 800b904:	4a69      	ldr	r2, [pc, #420]	; (800baac <UART_SetConfig+0xc30>)
 800b906:	fa22 f303 	lsr.w	r3, r2, r3
 800b90a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b90c:	e00f      	b.n	800b92e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800b90e:	4b67      	ldr	r3, [pc, #412]	; (800baac <UART_SetConfig+0xc30>)
 800b910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b912:	e00c      	b.n	800b92e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b914:	4b66      	ldr	r3, [pc, #408]	; (800bab0 <UART_SetConfig+0xc34>)
 800b916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b918:	e009      	b.n	800b92e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b91a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b91e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b920:	e005      	b.n	800b92e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800b922:	2300      	movs	r3, #0
 800b924:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b92c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 80ea 	beq.w	800bb0a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93a:	4a5a      	ldr	r2, [pc, #360]	; (800baa4 <UART_SetConfig+0xc28>)
 800b93c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b940:	461a      	mov	r2, r3
 800b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b944:	fbb3 f3f2 	udiv	r3, r3, r2
 800b948:	005a      	lsls	r2, r3, #1
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	085b      	lsrs	r3, r3, #1
 800b950:	441a      	add	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	fbb2 f3f3 	udiv	r3, r2, r3
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	2b0f      	cmp	r3, #15
 800b962:	d916      	bls.n	800b992 <UART_SetConfig+0xb16>
 800b964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b96a:	d212      	bcs.n	800b992 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	b29b      	uxth	r3, r3
 800b970:	f023 030f 	bic.w	r3, r3, #15
 800b974:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	085b      	lsrs	r3, r3, #1
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	f003 0307 	and.w	r3, r3, #7
 800b980:	b29a      	uxth	r2, r3
 800b982:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b984:	4313      	orrs	r3, r2
 800b986:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b98e:	60da      	str	r2, [r3, #12]
 800b990:	e0bb      	b.n	800bb0a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b998:	e0b7      	b.n	800bb0a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b99a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b99e:	2b20      	cmp	r3, #32
 800b9a0:	dc4a      	bgt.n	800ba38 <UART_SetConfig+0xbbc>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f2c0 8086 	blt.w	800bab4 <UART_SetConfig+0xc38>
 800b9a8:	2b20      	cmp	r3, #32
 800b9aa:	f200 8083 	bhi.w	800bab4 <UART_SetConfig+0xc38>
 800b9ae:	a201      	add	r2, pc, #4	; (adr r2, 800b9b4 <UART_SetConfig+0xb38>)
 800b9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b4:	0800ba3f 	.word	0x0800ba3f
 800b9b8:	0800ba47 	.word	0x0800ba47
 800b9bc:	0800bab5 	.word	0x0800bab5
 800b9c0:	0800bab5 	.word	0x0800bab5
 800b9c4:	0800ba4f 	.word	0x0800ba4f
 800b9c8:	0800bab5 	.word	0x0800bab5
 800b9cc:	0800bab5 	.word	0x0800bab5
 800b9d0:	0800bab5 	.word	0x0800bab5
 800b9d4:	0800ba5f 	.word	0x0800ba5f
 800b9d8:	0800bab5 	.word	0x0800bab5
 800b9dc:	0800bab5 	.word	0x0800bab5
 800b9e0:	0800bab5 	.word	0x0800bab5
 800b9e4:	0800bab5 	.word	0x0800bab5
 800b9e8:	0800bab5 	.word	0x0800bab5
 800b9ec:	0800bab5 	.word	0x0800bab5
 800b9f0:	0800bab5 	.word	0x0800bab5
 800b9f4:	0800ba6f 	.word	0x0800ba6f
 800b9f8:	0800bab5 	.word	0x0800bab5
 800b9fc:	0800bab5 	.word	0x0800bab5
 800ba00:	0800bab5 	.word	0x0800bab5
 800ba04:	0800bab5 	.word	0x0800bab5
 800ba08:	0800bab5 	.word	0x0800bab5
 800ba0c:	0800bab5 	.word	0x0800bab5
 800ba10:	0800bab5 	.word	0x0800bab5
 800ba14:	0800bab5 	.word	0x0800bab5
 800ba18:	0800bab5 	.word	0x0800bab5
 800ba1c:	0800bab5 	.word	0x0800bab5
 800ba20:	0800bab5 	.word	0x0800bab5
 800ba24:	0800bab5 	.word	0x0800bab5
 800ba28:	0800bab5 	.word	0x0800bab5
 800ba2c:	0800bab5 	.word	0x0800bab5
 800ba30:	0800bab5 	.word	0x0800bab5
 800ba34:	0800ba95 	.word	0x0800ba95
 800ba38:	2b40      	cmp	r3, #64	; 0x40
 800ba3a:	d02e      	beq.n	800ba9a <UART_SetConfig+0xc1e>
 800ba3c:	e03a      	b.n	800bab4 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba3e:	f7fa fff3 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 800ba42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba44:	e03c      	b.n	800bac0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba46:	f7fb f805 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
 800ba4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba4c:	e038      	b.n	800bac0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba4e:	f107 0314 	add.w	r3, r7, #20
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fc fb8a 	bl	800816c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba5c:	e030      	b.n	800bac0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fc fcd6 	bl	8008414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba6c:	e028      	b.n	800bac0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba6e:	4b0e      	ldr	r3, [pc, #56]	; (800baa8 <UART_SetConfig+0xc2c>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f003 0320 	and.w	r3, r3, #32
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d009      	beq.n	800ba8e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba7a:	4b0b      	ldr	r3, [pc, #44]	; (800baa8 <UART_SetConfig+0xc2c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	08db      	lsrs	r3, r3, #3
 800ba80:	f003 0303 	and.w	r3, r3, #3
 800ba84:	4a09      	ldr	r2, [pc, #36]	; (800baac <UART_SetConfig+0xc30>)
 800ba86:	fa22 f303 	lsr.w	r3, r2, r3
 800ba8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba8c:	e018      	b.n	800bac0 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ba8e:	4b07      	ldr	r3, [pc, #28]	; (800baac <UART_SetConfig+0xc30>)
 800ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba92:	e015      	b.n	800bac0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba94:	4b06      	ldr	r3, [pc, #24]	; (800bab0 <UART_SetConfig+0xc34>)
 800ba96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba98:	e012      	b.n	800bac0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800baa0:	e00e      	b.n	800bac0 <UART_SetConfig+0xc44>
 800baa2:	bf00      	nop
 800baa4:	0800c1d8 	.word	0x0800c1d8
 800baa8:	58024400 	.word	0x58024400
 800baac:	03d09000 	.word	0x03d09000
 800bab0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800bab4:	2300      	movs	r3, #0
 800bab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800babe:	bf00      	nop
    }

    if (pclk != 0U)
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d021      	beq.n	800bb0a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	4a1a      	ldr	r2, [pc, #104]	; (800bb34 <UART_SetConfig+0xcb8>)
 800bacc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bad0:	461a      	mov	r2, r3
 800bad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad4:	fbb3 f2f2 	udiv	r2, r3, r2
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	085b      	lsrs	r3, r3, #1
 800bade:	441a      	add	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae8:	b29b      	uxth	r3, r3
 800baea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	2b0f      	cmp	r3, #15
 800baf0:	d908      	bls.n	800bb04 <UART_SetConfig+0xc88>
 800baf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baf8:	d204      	bcs.n	800bb04 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb00:	60da      	str	r2, [r3, #12]
 800bb02:	e002      	b.n	800bb0a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bb26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3738      	adds	r7, #56	; 0x38
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bdb0      	pop	{r4, r5, r7, pc}
 800bb32:	bf00      	nop
 800bb34:	0800c1d8 	.word	0x0800c1d8

0800bb38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00a      	beq.n	800bb62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb66:	f003 0302 	and.w	r3, r3, #2
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00a      	beq.n	800bb84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	430a      	orrs	r2, r1
 800bb82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb88:	f003 0304 	and.w	r3, r3, #4
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00a      	beq.n	800bba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	430a      	orrs	r2, r1
 800bba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbaa:	f003 0308 	and.w	r3, r3, #8
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00a      	beq.n	800bbc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbcc:	f003 0310 	and.w	r3, r3, #16
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00a      	beq.n	800bbea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	430a      	orrs	r2, r1
 800bbe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbee:	f003 0320 	and.w	r3, r3, #32
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00a      	beq.n	800bc0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	430a      	orrs	r2, r1
 800bc0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d01a      	beq.n	800bc4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc36:	d10a      	bne.n	800bc4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	430a      	orrs	r2, r1
 800bc4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00a      	beq.n	800bc70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	430a      	orrs	r2, r1
 800bc6e:	605a      	str	r2, [r3, #4]
  }
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af02      	add	r7, sp, #8
 800bc82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc8c:	f7f6 fe76 	bl	800297c <HAL_GetTick>
 800bc90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 0308 	and.w	r3, r3, #8
 800bc9c:	2b08      	cmp	r3, #8
 800bc9e:	d10e      	bne.n	800bcbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 f82f 	bl	800bd12 <UART_WaitOnFlagUntilTimeout>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e025      	b.n	800bd0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 0304 	and.w	r3, r3, #4
 800bcc8:	2b04      	cmp	r3, #4
 800bcca:	d10e      	bne.n	800bcea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f819 	bl	800bd12 <UART_WaitOnFlagUntilTimeout>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e00f      	b.n	800bd0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	603b      	str	r3, [r7, #0]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd22:	e062      	b.n	800bdea <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2a:	d05e      	beq.n	800bdea <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd2c:	f7f6 fe26 	bl	800297c <HAL_GetTick>
 800bd30:	4602      	mov	r2, r0
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	69ba      	ldr	r2, [r7, #24]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d302      	bcc.n	800bd42 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d11d      	bne.n	800bd7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	689a      	ldr	r2, [r3, #8]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f022 0201 	bic.w	r2, r2, #1
 800bd60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2220      	movs	r2, #32
 800bd6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e045      	b.n	800be0a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0304 	and.w	r3, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d02e      	beq.n	800bdea <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	69db      	ldr	r3, [r3, #28]
 800bd92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd9a:	d126      	bne.n	800bdea <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bda4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdb4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689a      	ldr	r2, [r3, #8]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f022 0201 	bic.w	r2, r2, #1
 800bdc4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2220      	movs	r2, #32
 800bdca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2220      	movs	r2, #32
 800bdda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bde6:	2303      	movs	r3, #3
 800bde8:	e00f      	b.n	800be0a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	69da      	ldr	r2, [r3, #28]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	bf0c      	ite	eq
 800bdfa:	2301      	moveq	r3, #1
 800bdfc:	2300      	movne	r3, #0
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	461a      	mov	r2, r3
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	429a      	cmp	r2, r3
 800be06:	d08d      	beq.n	800bd24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
 800be20:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d101      	bne.n	800be2c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800be28:	2301      	movs	r3, #1
 800be2a:	e056      	b.n	800beda <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be32:	2b00      	cmp	r3, #0
 800be34:	d106      	bne.n	800be44 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7f6 fb2a 	bl	8002498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2224      	movs	r2, #36	; 0x24
 800be48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f022 0201 	bic.w	r2, r2, #1
 800be5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f7ff f80d 	bl	800ae7c <UART_SetConfig>
 800be62:	4603      	mov	r3, r0
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e036      	b.n	800beda <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f7ff fe5f 	bl	800bb38 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689a      	ldr	r2, [r3, #8]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be88:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	430a      	orrs	r2, r1
 800be9c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	055b      	lsls	r3, r3, #21
 800bea2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	041b      	lsls	r3, r3, #16
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	4313      	orrs	r3, r2
 800beac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	4b0b      	ldr	r3, [pc, #44]	; (800bee4 <HAL_RS485Ex_Init+0xd0>)
 800beb6:	4013      	ands	r3, r2
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	6812      	ldr	r2, [r2, #0]
 800bebc:	6979      	ldr	r1, [r7, #20]
 800bebe:	430b      	orrs	r3, r1
 800bec0:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f042 0201 	orr.w	r2, r2, #1
 800bed0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7ff fed2 	bl	800bc7c <UART_CheckIdleState>
 800bed8:	4603      	mov	r3, r0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	fc00ffff 	.word	0xfc00ffff

0800bee8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d101      	bne.n	800befe <HAL_UARTEx_DisableFifoMode+0x16>
 800befa:	2302      	movs	r3, #2
 800befc:	e027      	b.n	800bf4e <HAL_UARTEx_DisableFifoMode+0x66>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2224      	movs	r2, #36	; 0x24
 800bf0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f022 0201 	bic.w	r2, r2, #1
 800bf24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2220      	movs	r2, #32
 800bf40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3714      	adds	r7, #20
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d101      	bne.n	800bf72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf6e:	2302      	movs	r3, #2
 800bf70:	e02d      	b.n	800bfce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2201      	movs	r2, #1
 800bf76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2224      	movs	r2, #36	; 0x24
 800bf7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f022 0201 	bic.w	r2, r2, #1
 800bf98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	430a      	orrs	r2, r1
 800bfac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f850 	bl	800c054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b084      	sub	sp, #16
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d101      	bne.n	800bfee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfea:	2302      	movs	r3, #2
 800bfec:	e02d      	b.n	800c04a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2224      	movs	r2, #36	; 0x24
 800bffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f022 0201 	bic.w	r2, r2, #1
 800c014:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	430a      	orrs	r2, r1
 800c028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f812 	bl	800c054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2220      	movs	r2, #32
 800c03c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c060:	2b00      	cmp	r3, #0
 800c062:	d108      	bne.n	800c076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c074:	e031      	b.n	800c0da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c076:	2310      	movs	r3, #16
 800c078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c07a:	2310      	movs	r3, #16
 800c07c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	0e5b      	lsrs	r3, r3, #25
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f003 0307 	and.w	r3, r3, #7
 800c08c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	0f5b      	lsrs	r3, r3, #29
 800c096:	b2db      	uxtb	r3, r3
 800c098:	f003 0307 	and.w	r3, r3, #7
 800c09c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	7b3a      	ldrb	r2, [r7, #12]
 800c0a2:	4911      	ldr	r1, [pc, #68]	; (800c0e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c0a4:	5c8a      	ldrb	r2, [r1, r2]
 800c0a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c0aa:	7b3a      	ldrb	r2, [r7, #12]
 800c0ac:	490f      	ldr	r1, [pc, #60]	; (800c0ec <UARTEx_SetNbDataToProcess+0x98>)
 800c0ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	7b7a      	ldrb	r2, [r7, #13]
 800c0c0:	4909      	ldr	r1, [pc, #36]	; (800c0e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c0c2:	5c8a      	ldrb	r2, [r1, r2]
 800c0c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c0c8:	7b7a      	ldrb	r2, [r7, #13]
 800c0ca:	4908      	ldr	r1, [pc, #32]	; (800c0ec <UARTEx_SetNbDataToProcess+0x98>)
 800c0cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c0da:	bf00      	nop
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	0800c1f0 	.word	0x0800c1f0
 800c0ec:	0800c1f8 	.word	0x0800c1f8

0800c0f0 <__libc_init_array>:
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	4d0d      	ldr	r5, [pc, #52]	; (800c128 <__libc_init_array+0x38>)
 800c0f4:	4c0d      	ldr	r4, [pc, #52]	; (800c12c <__libc_init_array+0x3c>)
 800c0f6:	1b64      	subs	r4, r4, r5
 800c0f8:	10a4      	asrs	r4, r4, #2
 800c0fa:	2600      	movs	r6, #0
 800c0fc:	42a6      	cmp	r6, r4
 800c0fe:	d109      	bne.n	800c114 <__libc_init_array+0x24>
 800c100:	4d0b      	ldr	r5, [pc, #44]	; (800c130 <__libc_init_array+0x40>)
 800c102:	4c0c      	ldr	r4, [pc, #48]	; (800c134 <__libc_init_array+0x44>)
 800c104:	f000 f82e 	bl	800c164 <_init>
 800c108:	1b64      	subs	r4, r4, r5
 800c10a:	10a4      	asrs	r4, r4, #2
 800c10c:	2600      	movs	r6, #0
 800c10e:	42a6      	cmp	r6, r4
 800c110:	d105      	bne.n	800c11e <__libc_init_array+0x2e>
 800c112:	bd70      	pop	{r4, r5, r6, pc}
 800c114:	f855 3b04 	ldr.w	r3, [r5], #4
 800c118:	4798      	blx	r3
 800c11a:	3601      	adds	r6, #1
 800c11c:	e7ee      	b.n	800c0fc <__libc_init_array+0xc>
 800c11e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c122:	4798      	blx	r3
 800c124:	3601      	adds	r6, #1
 800c126:	e7f2      	b.n	800c10e <__libc_init_array+0x1e>
 800c128:	0800c208 	.word	0x0800c208
 800c12c:	0800c208 	.word	0x0800c208
 800c130:	0800c208 	.word	0x0800c208
 800c134:	0800c20c 	.word	0x0800c20c

0800c138 <memcpy>:
 800c138:	440a      	add	r2, r1
 800c13a:	4291      	cmp	r1, r2
 800c13c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c140:	d100      	bne.n	800c144 <memcpy+0xc>
 800c142:	4770      	bx	lr
 800c144:	b510      	push	{r4, lr}
 800c146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c14a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c14e:	4291      	cmp	r1, r2
 800c150:	d1f9      	bne.n	800c146 <memcpy+0xe>
 800c152:	bd10      	pop	{r4, pc}

0800c154 <memset>:
 800c154:	4402      	add	r2, r0
 800c156:	4603      	mov	r3, r0
 800c158:	4293      	cmp	r3, r2
 800c15a:	d100      	bne.n	800c15e <memset+0xa>
 800c15c:	4770      	bx	lr
 800c15e:	f803 1b01 	strb.w	r1, [r3], #1
 800c162:	e7f9      	b.n	800c158 <memset+0x4>

0800c164 <_init>:
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	bf00      	nop
 800c168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16a:	bc08      	pop	{r3}
 800c16c:	469e      	mov	lr, r3
 800c16e:	4770      	bx	lr

0800c170 <_fini>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	bf00      	nop
 800c174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c176:	bc08      	pop	{r3}
 800c178:	469e      	mov	lr, r3
 800c17a:	4770      	bx	lr
