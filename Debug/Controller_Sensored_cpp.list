
Controller_Sensored_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d784  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800da54  0800da54  0001da54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf4  0800daf4  000205c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800daf4  0800daf4  0001daf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dafc  0800dafc  000205c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dafc  0800dafc  0001dafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db00  0800db00  0001db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c0  24000000  0800db04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  240005c0  0800e0c4  000205c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000d20  0800e0c4  00020d20  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000205c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042c07  00000000  00000000  000205ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057c1  00000000  00000000  000631f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002290  00000000  00000000  000689b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020f8  00000000  00000000  0006ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c93e  00000000  00000000  0006cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b1cd  00000000  00000000  000a967e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017e045  00000000  00000000  000d484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00252890  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000989c  00000000  00000000  002528e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240005c0 	.word	0x240005c0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800da3c 	.word	0x0800da3c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240005c4 	.word	0x240005c4
 800030c:	0800da3c 	.word	0x0800da3c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <_ZN18Current_Controller11update_vqvdEffffffRfS0_>:
 * feedback: Measurement of current system state
 * ts: sample time (microseconds)
 *
 * returns:nothing
 */
void Current_Controller::update_vqvd(float iq_target, float iq_act, float id_target,float id_act,float speed_mech,float Ts, float &vq, float &vd){
 8000608:	b580      	push	{r7, lr}
 800060a:	b090      	sub	sp, #64	; 0x40
 800060c:	af00      	add	r7, sp, #0
 800060e:	6278      	str	r0, [r7, #36]	; 0x24
 8000610:	ed87 0a08 	vstr	s0, [r7, #32]
 8000614:	edc7 0a07 	vstr	s1, [r7, #28]
 8000618:	ed87 1a06 	vstr	s2, [r7, #24]
 800061c:	edc7 1a05 	vstr	s3, [r7, #20]
 8000620:	ed87 2a04 	vstr	s4, [r7, #16]
 8000624:	edc7 2a03 	vstr	s5, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	float speed_erads = speed_mech*motor.polepairs*0.1047;
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000632:	edd7 7a04 	vldr	s15, [r7, #16]
 8000636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800063e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8000718 <_ZN18Current_Controller11update_vqvdEffffffRfS0_+0x110>
 8000642:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000646:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800064a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float vq_forward = motor.rs*iq_target-speed_erads*motor.ld*id_target+speed_erads*motor.lambda_m;
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	ed93 7a04 	vldr	s14, [r3, #16]
 8000654:	edd7 7a08 	vldr	s15, [r7, #32]
 8000658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065e:	edd3 6a00 	vldr	s13, [r3]
 8000662:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000666:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800066a:	edd7 7a06 	vldr	s15, [r7, #24]
 800066e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000678:	edd3 6a02 	vldr	s13, [r3, #8]
 800067c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000688:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float vd_forward = motor.rs*id_target-speed_erads*motor.lq*iq_target;
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000692:	edd7 7a06 	vldr	s15, [r7, #24]
 8000696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	edd3 6a01 	vldr	s13, [r3, #4]
 80006a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80006a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80006a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80006ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float vq_adj = iq_PI.update(iq_target,iq_act,Ts);
 80006b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ba:	3334      	adds	r3, #52	; 0x34
 80006bc:	ed97 1a03 	vldr	s2, [r7, #12]
 80006c0:	edd7 0a07 	vldr	s1, [r7, #28]
 80006c4:	ed97 0a08 	vldr	s0, [r7, #32]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 faa0 	bl	8000c0e <_ZN13PI_controller6updateEfff>
 80006ce:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float vd_adj = id_PI.update(id_target,id_act,Ts);
 80006d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d4:	3314      	adds	r3, #20
 80006d6:	ed97 1a03 	vldr	s2, [r7, #12]
 80006da:	edd7 0a05 	vldr	s1, [r7, #20]
 80006de:	ed97 0a06 	vldr	s0, [r7, #24]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fa93 	bl	8000c0e <_ZN13PI_controller6updateEfff>
 80006e8:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	vq=vq_adj+vq_forward;
 80006ec:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80006f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80006f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	edc3 7a00 	vstr	s15, [r3]
	vd=vd_adj+vd_forward;
 80006fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000702:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	edc3 7a00 	vstr	s15, [r3]
}
 8000710:	bf00      	nop
 8000712:	3740      	adds	r7, #64	; 0x40
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	83e425af 	.word	0x83e425af
 800071c:	3fbacd9e 	.word	0x3fbacd9e

08000720 <_ZN18Current_ControllerC1E11pi_settingsS0_16motor_parameters>:
Current_Controller::Current_Controller(pi_settings iq_settigns, pi_settings id_settigns,motor_parameters _motor_parameters){
 8000720:	b084      	sub	sp, #16
 8000722:	b5b0      	push	{r4, r5, r7, lr}
 8000724:	b092      	sub	sp, #72	; 0x48
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800072e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3314      	adds	r3, #20
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f9c6 	bl	8000ac8 <_ZN13PI_controllerC1Ev>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3334      	adds	r3, #52	; 0x34
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f9c1 	bl	8000ac8 <_ZN13PI_controllerC1Ev>
	PI_controller _iq_PI(iq_settigns.ki, iq_settigns.kp,iq_settigns.min_intergrator,iq_settigns.max_intergrator,iq_settigns.min_output,iq_settigns.max_output,iq_settigns.slew);
 8000746:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800074a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800074e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8000752:	ed97 6a1a 	vldr	s12, [r7, #104]	; 0x68
 8000756:	edd7 5a1b 	vldr	s11, [r7, #108]	; 0x6c
 800075a:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800075e:	edd7 4a1d 	vldr	s9, [r7, #116]	; 0x74
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	eeb0 3a64 	vmov.f32	s6, s9
 800076a:	eef0 2a45 	vmov.f32	s5, s10
 800076e:	eeb0 2a65 	vmov.f32	s4, s11
 8000772:	eef0 1a46 	vmov.f32	s3, s12
 8000776:	eeb0 1a66 	vmov.f32	s2, s13
 800077a:	eef0 0a47 	vmov.f32	s1, s14
 800077e:	eeb0 0a67 	vmov.f32	s0, s15
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fa06 	bl	8000b94 <_ZN13PI_controllerC1Efffffff>
	PI_controller _id_PI(id_settigns.ki, id_settigns.kp,id_settigns.min_intergrator,id_settigns.max_intergrator,id_settigns.min_output,id_settigns.max_output,id_settigns.slew);
 8000788:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800078c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8000790:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8000794:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8000798:	edd7 5a22 	vldr	s11, [r7, #136]	; 0x88
 800079c:	ed97 5a23 	vldr	s10, [r7, #140]	; 0x8c
 80007a0:	edd7 4a24 	vldr	s9, [r7, #144]	; 0x90
 80007a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a8:	eeb0 3a64 	vmov.f32	s6, s9
 80007ac:	eef0 2a45 	vmov.f32	s5, s10
 80007b0:	eeb0 2a65 	vmov.f32	s4, s11
 80007b4:	eef0 1a46 	vmov.f32	s3, s12
 80007b8:	eeb0 1a66 	vmov.f32	s2, s13
 80007bc:	eef0 0a47 	vmov.f32	s1, s14
 80007c0:	eeb0 0a67 	vmov.f32	s0, s15
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f9e5 	bl	8000b94 <_ZN13PI_controllerC1Efffffff>
	id_PI=_id_PI;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f103 0414 	add.w	r4, r3, #20
 80007d0:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80007d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	iq_PI=_iq_PI;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80007e6:	f107 0508 	add.w	r5, r7, #8
 80007ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motor = _motor_parameters;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	461d      	mov	r5, r3
 80007fa:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80007fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	602b      	str	r3, [r5, #0]
	PI_controller _id_PI(id_settigns.ki, id_settigns.kp,id_settigns.min_intergrator,id_settigns.max_intergrator,id_settigns.min_output,id_settigns.max_output,id_settigns.slew);
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f9f4 	bl	8000bf8 <_ZN13PI_controllerD1Ev>
	PI_controller _iq_PI(iq_settigns.ki, iq_settigns.kp,iq_settigns.min_intergrator,iq_settigns.max_intergrator,iq_settigns.min_output,iq_settigns.max_output,iq_settigns.slew);
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f9ef 	bl	8000bf8 <_ZN13PI_controllerD1Ev>
}
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4618      	mov	r0, r3
 800081e:	3748      	adds	r7, #72	; 0x48
 8000820:	46bd      	mov	sp, r7
 8000822:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000826:	b004      	add	sp, #16
 8000828:	4770      	bx	lr
	...

0800082c <_Z16rawdata_to_anglelRlS_ll>:
 * rawdata: 12 bit value from encoder
 *
 * returns:angle in milli mechanical degrees
 */
void rawdata_to_angle(int32_t rawdata,int32_t &mech_angle,int32_t &electrical_angle,int32_t debug_offset,int32_t pole_pairs)
{
 800082c:	b480      	push	{r7}
 800082e:	b087      	sub	sp, #28
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	603b      	str	r3, [r7, #0]
	float mech_angle_temp = rawdata*0.087890625000000f;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000844:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80008b0 <_Z16rawdata_to_anglelRlS_ll+0x84>
 8000848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800084c:	edc7 7a05 	vstr	s15, [r7, #20]
	electrical_angle = ((int32_t)(mech_angle_temp*pole_pairs+debug_offset))%360;
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	ee07 3a90 	vmov	s15, r3
 8000856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800085a:	edd7 7a05 	vldr	s15, [r7, #20]
 800085e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	ee07 3a90 	vmov	s15, r3
 8000868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800086c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000874:	ee17 2a90 	vmov	r2, s15
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <_Z16rawdata_to_anglelRlS_ll+0x88>)
 800087a:	fb83 1302 	smull	r1, r3, r3, r2
 800087e:	4413      	add	r3, r2
 8000880:	1219      	asrs	r1, r3, #8
 8000882:	17d3      	asrs	r3, r2, #31
 8000884:	1acb      	subs	r3, r1, r3
 8000886:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800088a:	fb01 f303 	mul.w	r3, r1, r3
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	6013      	str	r3, [r2, #0]
	mech_angle = mech_angle_temp;
 8000894:	edd7 7a05 	vldr	s15, [r7, #20]
 8000898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089c:	ee17 2a90 	vmov	r2, s15
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	3db40000 	.word	0x3db40000
 80008b4:	b60b60b7 	.word	0xb60b60b7

080008b8 <_Z3dqzffflRfS_>:
 * Id: pointer to where the result of Id in mA should be stored
 *
 * returns:nothing
 */
void dqz(float Ia,float Ib,float Ic,int32_t theta,float &Iq,float &Id )
{
 80008b8:	b480      	push	{r7}
 80008ba:	b08b      	sub	sp, #44	; 0x2c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	ed87 0a05 	vstr	s0, [r7, #20]
 80008c2:	edc7 0a04 	vstr	s1, [r7, #16]
 80008c6:	ed87 1a03 	vstr	s2, [r7, #12]
 80008ca:	60b8      	str	r0, [r7, #8]
 80008cc:	6079      	str	r1, [r7, #4]
 80008ce:	603a      	str	r2, [r7, #0]
	float alpha = (2*Ia-Ib-Ic)*sqrt1_6;
 80008d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80008d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80008d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80008dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <_Z3dqzffflRfS_+0xf4>)
 80008ea:	edd3 7a00 	vldr	s15, [r3]
 80008ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float beta = (Ib - Ic) * sqrt1_2;
 80008f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80008fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80008fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <_Z3dqzffflRfS_+0xf8>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800090c:	edc7 7a08 	vstr	s15, [r7, #32]
	float si = sin_lut_table[theta%360];
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4a28      	ldr	r2, [pc, #160]	; (80009b4 <_Z3dqzffflRfS_+0xfc>)
 8000914:	fb82 1203 	smull	r1, r2, r2, r3
 8000918:	441a      	add	r2, r3
 800091a:	1211      	asrs	r1, r2, #8
 800091c:	17da      	asrs	r2, r3, #31
 800091e:	1a8a      	subs	r2, r1, r2
 8000920:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000924:	fb01 f202 	mul.w	r2, r1, r2
 8000928:	1a9a      	subs	r2, r3, r2
 800092a:	4923      	ldr	r1, [pc, #140]	; (80009b8 <_Z3dqzffflRfS_+0x100>)
 800092c:	0093      	lsls	r3, r2, #2
 800092e:	440b      	add	r3, r1
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	61fb      	str	r3, [r7, #28]
	float co = sin_lut_table[(theta+90)%360];
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	335a      	adds	r3, #90	; 0x5a
 8000938:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <_Z3dqzffflRfS_+0xfc>)
 800093a:	fb82 1203 	smull	r1, r2, r2, r3
 800093e:	441a      	add	r2, r3
 8000940:	1211      	asrs	r1, r2, #8
 8000942:	17da      	asrs	r2, r3, #31
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800094a:	fb01 f202 	mul.w	r2, r1, r2
 800094e:	1a9a      	subs	r2, r3, r2
 8000950:	4919      	ldr	r1, [pc, #100]	; (80009b8 <_Z3dqzffflRfS_+0x100>)
 8000952:	0093      	lsls	r3, r2, #2
 8000954:	440b      	add	r3, r1
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	61bb      	str	r3, [r7, #24]
	Id = (co*alpha+si*beta);
 800095a:	ed97 7a06 	vldr	s14, [r7, #24]
 800095e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000966:	edd7 6a07 	vldr	s13, [r7, #28]
 800096a:	edd7 7a08 	vldr	s15, [r7, #32]
 800096e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	edc3 7a00 	vstr	s15, [r3]
	Iq = (co*beta-si*alpha);
 800097c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000980:	edd7 7a08 	vldr	s15, [r7, #32]
 8000984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000988:	edd7 6a07 	vldr	s13, [r7, #28]
 800098c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	edc3 7a00 	vstr	s15, [r3]
}
 800099e:	bf00      	nop
 80009a0:	372c      	adds	r7, #44	; 0x2c
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	240005a4 	.word	0x240005a4
 80009b0:	240005a8 	.word	0x240005a8
 80009b4:	b60b60b7 	.word	0xb60b60b7
 80009b8:	24000000 	.word	0x24000000

080009bc <_Z7inv_dqzRfS_S_lff>:
 * Vd: voltage of Vd in mV
 *
 * returns:nothing
 */
void inv_dqz(float &Va,float &Vb,float &Vc,int32_t theta,float Vq,float Vd )
{
 80009bc:	b480      	push	{r7}
 80009be:	b08d      	sub	sp, #52	; 0x34
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6178      	str	r0, [r7, #20]
 80009c4:	6139      	str	r1, [r7, #16]
 80009c6:	60fa      	str	r2, [r7, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80009ce:	edc7 0a00 	vstr	s1, [r7]
	float si=sin_lut_table[theta];
 80009d2:	4a38      	ldr	r2, [pc, #224]	; (8000ab4 <_Z7inv_dqzRfS_S_lff+0xf8>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	float co=sin_lut_table[(theta+90)%360];
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	335a      	adds	r3, #90	; 0x5a
 80009e2:	4a35      	ldr	r2, [pc, #212]	; (8000ab8 <_Z7inv_dqzRfS_S_lff+0xfc>)
 80009e4:	fb82 1203 	smull	r1, r2, r2, r3
 80009e8:	441a      	add	r2, r3
 80009ea:	1211      	asrs	r1, r2, #8
 80009ec:	17da      	asrs	r2, r3, #31
 80009ee:	1a8a      	subs	r2, r1, r2
 80009f0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80009f4:	fb01 f202 	mul.w	r2, r1, r2
 80009f8:	1a9a      	subs	r2, r3, r2
 80009fa:	492e      	ldr	r1, [pc, #184]	; (8000ab4 <_Z7inv_dqzRfS_S_lff+0xf8>)
 80009fc:	0093      	lsls	r3, r2, #2
 80009fe:	440b      	add	r3, r1
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
	float alpha = co*Vd- si *Vq;
 8000a04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000a08:	edd7 7a00 	vldr	s15, [r7]
 8000a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a10:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float beta = si*Vd+co*Vq;
 8000a24:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000a28:	edd7 7a00 	vldr	s15, [r7]
 8000a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a30:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a40:	edc7 7a08 	vstr	s15, [r7, #32]
	float Vb_temp = -sqrt1_6*alpha;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <_Z7inv_dqzRfS_S_lff+0x100>)
 8000a46:	edd3 7a00 	vldr	s15, [r3]
 8000a4a:	eef1 7a67 	vneg.f32	s15, s15
 8000a4e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a56:	edc7 7a07 	vstr	s15, [r7, #28]
	Va = (sqrt2_3*alpha);
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <_Z7inv_dqzRfS_S_lff+0x104>)
 8000a5c:	ed93 7a00 	vldr	s14, [r3]
 8000a60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	edc3 7a00 	vstr	s15, [r3]
	Vc = (Vb_temp-sqrt1_2*beta);
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <_Z7inv_dqzRfS_S_lff+0x108>)
 8000a70:	ed93 7a00 	vldr	s14, [r3]
 8000a74:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	edc3 7a00 	vstr	s15, [r3]
	Vb = (Vb_temp+sqrt1_2*beta);
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <_Z7inv_dqzRfS_S_lff+0x108>)
 8000a8c:	ed93 7a00 	vldr	s14, [r3]
 8000a90:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a98:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	edc3 7a00 	vstr	s15, [r3]
}
 8000aa6:	bf00      	nop
 8000aa8:	3734      	adds	r7, #52	; 0x34
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	24000000 	.word	0x24000000
 8000ab8:	b60b60b7 	.word	0xb60b60b7
 8000abc:	240005a4 	.word	0x240005a4
 8000ac0:	240005a0 	.word	0x240005a0
 8000ac4:	240005a8 	.word	0x240005a8

08000ac8 <_ZN13PI_controllerC1Ev>:
 * feedback: Measurement of current system state
 * ts: sample time (microseconds)
 *
 * returns:nothing
 */
PI_controller::PI_controller(){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	ki = 0;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f04f 0200 	mov.w	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
	kp = 0;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
	min_intergrator = 0;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f04f 0200 	mov.w	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
	max_intergrator = 0;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
	min_output = 0;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
	max_output = 0;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
	error_intergration=0;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f04f 0200 	mov.w	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
	slew=999999;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <_ZN13PI_controllerC1Ev+0x54>)
 8000b0c:	61da      	str	r2, [r3, #28]
}
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	497423f0 	.word	0x497423f0

08000b20 <_ZN13PI_controllerC1Effff>:
PI_controller::PI_controller(float _ki, float _kp,float _min_output,float _max_output){
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6178      	str	r0, [r7, #20]
 8000b28:	ed87 0a04 	vstr	s0, [r7, #16]
 8000b2c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b30:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b34:	edc7 1a01 	vstr	s3, [r7, #4]
	ki = _ki;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	601a      	str	r2, [r3, #0]
	kp = _kp;
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	605a      	str	r2, [r3, #4]
	min_intergrator = _min_output/_ki;
 8000b44:	edd7 6a02 	vldr	s13, [r7, #8]
 8000b48:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	edc3 7a03 	vstr	s15, [r3, #12]
	max_intergrator = _max_output/_ki;
 8000b56:	edd7 6a01 	vldr	s13, [r7, #4]
 8000b5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	edc3 7a04 	vstr	s15, [r3, #16]
	min_output = _min_output;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	615a      	str	r2, [r3, #20]
	max_output = _max_output;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	619a      	str	r2, [r3, #24]
	error_intergration=0;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
	slew=999999;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <_ZN13PI_controllerC1Effff+0x70>)
 8000b80:	61da      	str	r2, [r3, #28]
}
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	4618      	mov	r0, r3
 8000b86:	371c      	adds	r7, #28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	497423f0 	.word	0x497423f0

08000b94 <_ZN13PI_controllerC1Efffffff>:
	min_output = _min_output;
	max_output = _max_output;
	error_intergration=0;
	slew=999999;
}
PI_controller::PI_controller(float _ki, float _kp,float _min_intergrator,float _max_intergrator,
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	61f8      	str	r0, [r7, #28]
 8000b9c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000ba0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000ba4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000ba8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000bac:	ed87 2a02 	vstr	s4, [r7, #8]
 8000bb0:	edc7 2a01 	vstr	s5, [r7, #4]
 8000bb4:	ed87 3a00 	vstr	s6, [r7]
		float _min_output,float _max_output,float _slew){
	ki = _ki;
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	601a      	str	r2, [r3, #0]
	kp = _kp;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	605a      	str	r2, [r3, #4]
	min_intergrator = _min_intergrator;
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	60da      	str	r2, [r3, #12]
	max_intergrator = _max_intergrator;
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	611a      	str	r2, [r3, #16]
	min_output = _min_output;
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	615a      	str	r2, [r3, #20]
	max_output = _max_output;
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	619a      	str	r2, [r3, #24]
	error_intergration=0;
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f04f 0200 	mov.w	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
	slew=_slew;
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	61da      	str	r2, [r3, #28]
}
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	4618      	mov	r0, r3
 8000bee:	3724      	adds	r7, #36	; 0x24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_ZN13PI_controllerD1Ev>:
PI_controller::~PI_controller(){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]


}
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_ZN13PI_controller6updateEfff>:
 * feedback: Measurement of current system state
 * ts: sample time (microseconds)
 *
 * returns:nothing
 */
float PI_controller::update(float input,float feedback,float ts){
 8000c0e:	b480      	push	{r7}
 8000c10:	b087      	sub	sp, #28
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c1a:	edc7 0a01 	vstr	s1, [r7, #4]
 8000c1e:	ed87 1a00 	vstr	s2, [r7]
		float error=input-feedback;
 8000c22:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c2e:	edc7 7a04 	vstr	s15, [r7, #16]
		error_intergration=error_intergration+error*ts;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c38:	edd7 6a04 	vldr	s13, [r7, #16]
 8000c3c:	edd7 7a00 	vldr	s15, [r7]
 8000c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	edc3 7a02 	vstr	s15, [r3, #8]
		if(min_intergrator > error_intergration){
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c62:	dd03      	ble.n	8000c6c <_ZN13PI_controller6updateEfff+0x5e>
			error_intergration=min_intergrator;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	609a      	str	r2, [r3, #8]
		}
		if(max_intergrator < error_intergration){
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c80:	d503      	bpl.n	8000c8a <_ZN13PI_controller6updateEfff+0x7c>
			error_intergration=max_intergrator;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	691a      	ldr	r2, [r3, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	609a      	str	r2, [r3, #8]
		}
		float output = ki*error_intergration+error*kp;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	ed93 7a00 	vldr	s14, [r3]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ca0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cac:	edc7 7a05 	vstr	s15, [r7, #20]
		if(min_output > output){
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	d502      	bpl.n	8000cca <_ZN13PI_controller6updateEfff+0xbc>
			output = min_output;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	617b      	str	r3, [r7, #20]
		}
		if(max_output < output){
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	edd3 7a06 	vldr	s15, [r3, #24]
 8000cd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	dd02      	ble.n	8000ce4 <_ZN13PI_controller6updateEfff+0xd6>
			output = max_output;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	617b      	str	r3, [r7, #20]
		}
		return(output);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	ee07 3a90 	vmov	s15, r3
}
 8000cea:	eeb0 0a67 	vmov.f32	s0, s15
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	b0ed      	sub	sp, #436	; 0x1b4
 8000cfc:	af10      	add	r7, sp, #64	; 0x40
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000cfe:	4b41      	ldr	r3, [pc, #260]	; (8000e04 <main+0x10c>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bf14      	ite	ne
 8000d0a:	2301      	movne	r3, #1
 8000d0c:	2300      	moveq	r3, #0
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d11b      	bne.n	8000d4c <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d14:	f3bf 8f4f 	dsb	sy
}
 8000d18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d1a:	f3bf 8f6f 	isb	sy
}
 8000d1e:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <main+0x10c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d28:	f3bf 8f4f 	dsb	sy
}
 8000d2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d2e:	f3bf 8f6f 	isb	sy
}
 8000d32:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d34:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <main+0x10c>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <main+0x10c>)
 8000d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d40:	f3bf 8f4f 	dsb	sy
}
 8000d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d46:	f3bf 8f6f 	isb	sy
}
 8000d4a:	e000      	b.n	8000d4e <main+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d4c:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <main+0x10c>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	bf14      	ite	ne
 8000d5a:	2301      	movne	r3, #1
 8000d5c:	2300      	moveq	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d151      	bne.n	8000e08 <main+0x110>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <main+0x10c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6c:	f3bf 8f4f 	dsb	sy
}
 8000d70:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <main+0x10c>)
 8000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000d80:	0b5b      	lsrs	r3, r3, #13
 8000d82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000d9c:	015a      	lsls	r2, r3, #5
 8000d9e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000da2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000da4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000da8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000daa:	4916      	ldr	r1, [pc, #88]	; (8000e04 <main+0x10c>)
 8000dac:	4313      	orrs	r3, r2
 8000dae:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000db2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bf14      	ite	ne
 8000dc0:	2301      	movne	r3, #1
 8000dc2:	2300      	moveq	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d000      	beq.n	8000dcc <main+0xd4>
      do {
 8000dca:	e7e5      	b.n	8000d98 <main+0xa0>
    } while(sets-- != 0U);
 8000dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bf14      	ite	ne
 8000dda:	2301      	movne	r3, #1
 8000ddc:	2300      	moveq	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d000      	beq.n	8000de6 <main+0xee>
    do {
 8000de4:	e7d1      	b.n	8000d8a <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 8000de6:	f3bf 8f4f 	dsb	sy
}
 8000dea:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <main+0x10c>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <main+0x10c>)
 8000df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df8:	f3bf 8f4f 	dsb	sy
}
 8000dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dfe:	f3bf 8f6f 	isb	sy
}
 8000e02:	e002      	b.n	8000e0a <main+0x112>
 8000e04:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e08:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f002 fa8b 	bl	8003324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 fc07 	bl	8001620 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e12:	f000 fc8f 	bl	8001734 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f001 faf5 	bl	8002404 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000e1a:	f000 fcc1 	bl	80017a0 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000e1e:	f000 fd47 	bl	80018b0 <_ZL12MX_ADC2_Initv>
  MX_ADC3_Init();
 8000e22:	f000 fdb5 	bl	8001990 <_ZL12MX_ADC3_Initv>
  MX_CORDIC_Init();
 8000e26:	f000 fe33 	bl	8001a90 <_ZL14MX_CORDIC_Initv>
  MX_DFSDM1_Init();
 8000e2a:	f000 fe49 	bl	8001ac0 <_ZL14MX_DFSDM1_Initv>
  MX_FDCAN1_Init();
 8000e2e:	f000 ff63 	bl	8001cf8 <_ZL14MX_FDCAN1_Initv>
  MX_FMAC_Init();
 8000e32:	f000 ffcb 	bl	8001dcc <_ZL12MX_FMAC_Initv>
  MX_SPI2_Init();
 8000e36:	f001 f82f 	bl	8001e98 <_ZL12MX_SPI2_Initv>
  MX_TIM1_Init();
 8000e3a:	f001 f88b 	bl	8001f54 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8000e3e:	f001 fa7d 	bl	800233c <_ZL19MX_USART2_UART_Initv>
  MX_I2C3_Init();
 8000e42:	f000 ffdb 	bl	8001dfc <_ZL12MX_I2C3_Initv>
  MX_USART1_UART_Init();
 8000e46:	f001 fa19 	bl	800227c <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 8000e4a:	f001 f95b 	bl	8002104 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000e4e:	f001 f9b7 	bl	80021c0 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
//  	HAL_ADC_MspInit(&hadc3);
  	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000e52:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000e56:	2100      	movs	r1, #0
 8000e58:	48b0      	ldr	r0, [pc, #704]	; (800111c <main+0x424>)
 8000e5a:	f003 ffd7 	bl	8004e0c <HAL_ADCEx_Calibration_Start>
	HAL_StatusTypeDef adcstart2_ret = HAL_ADC_Start(&hadc2);
 8000e5e:	48b0      	ldr	r0, [pc, #704]	; (8001120 <main+0x428>)
 8000e60:	f002 ffa0 	bl	8003da4 <HAL_ADC_Start>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	HAL_StatusTypeDef adcstart3_ret = HAL_ADC_Start(&hadc3);
 8000e6a:	48ac      	ldr	r0, [pc, #688]	; (800111c <main+0x424>)
 8000e6c:	f002 ff9a 	bl	8003da4 <HAL_ADC_Start>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
	HAL_TIM_Base_Start_IT(&htim3);
 8000e76:	48ab      	ldr	r0, [pc, #684]	; (8001124 <main+0x42c>)
 8000e78:	f00a f870 	bl	800af5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000e7c:	48aa      	ldr	r0, [pc, #680]	; (8001128 <main+0x430>)
 8000e7e:	f00a f86d 	bl	800af5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000e82:	48aa      	ldr	r0, [pc, #680]	; (800112c <main+0x434>)
 8000e84:	f00a f86a 	bl	800af5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	48a7      	ldr	r0, [pc, #668]	; (8001128 <main+0x430>)
 8000e8c:	f00a f944 	bl	800b118 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000e90:	2100      	movs	r1, #0
 8000e92:	48a5      	ldr	r0, [pc, #660]	; (8001128 <main+0x430>)
 8000e94:	f00b f9e0 	bl	800c258 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e98:	2104      	movs	r1, #4
 8000e9a:	48a3      	ldr	r0, [pc, #652]	; (8001128 <main+0x430>)
 8000e9c:	f00a f93c 	bl	800b118 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	48a1      	ldr	r0, [pc, #644]	; (8001128 <main+0x430>)
 8000ea4:	f00b f9d8 	bl	800c258 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	489f      	ldr	r0, [pc, #636]	; (8001128 <main+0x430>)
 8000eac:	f00a f934 	bl	800b118 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	489d      	ldr	r0, [pc, #628]	; (8001128 <main+0x430>)
 8000eb4:	f00b f9d0 	bl	800c258 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000eb8:	210c      	movs	r1, #12
 8000eba:	489b      	ldr	r0, [pc, #620]	; (8001128 <main+0x430>)
 8000ebc:	f00a f92c 	bl	800b118 <HAL_TIM_PWM_Start>
	TIM1->CCER = 0b0000010101010101;
 8000ec0:	4b9b      	ldr	r3, [pc, #620]	; (8001130 <main+0x438>)
 8000ec2:	f240 5255 	movw	r2, #1365	; 0x555
 8000ec6:	621a      	str	r2, [r3, #32]
	TIM1->CCR1 = 0;
 8000ec8:	4b99      	ldr	r3, [pc, #612]	; (8001130 <main+0x438>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000ece:	4b98      	ldr	r3, [pc, #608]	; (8001130 <main+0x438>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000ed4:	4b96      	ldr	r3, [pc, #600]	; (8001130 <main+0x438>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 4998;
 8000eda:	4b95      	ldr	r3, [pc, #596]	; (8001130 <main+0x438>)
 8000edc:	f241 3286 	movw	r2, #4998	; 0x1386
 8000ee0:	641a      	str	r2, [r3, #64]	; 0x40
	uint32_t channel1 = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	uint32_t channel5 = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint32_t channel6 = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint8_t request_pos[2] = {0xff};
 8000ef4:	23ff      	movs	r3, #255	; 0xff
 8000ef6:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
	float data2angle = 360.0 / 4096;
 8000efa:	4b8e      	ldr	r3, [pc, #568]	; (8001134 <main+0x43c>)
 8000efc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t position[2]={0};
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
	int32_t mech_angle=0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0) != HAL_OK){
 8000f0c:	488a      	ldr	r0, [pc, #552]	; (8001138 <main+0x440>)
 8000f0e:	f004 fbbf 	bl	8005690 <HAL_DFSDM_FilterRegularStart>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <main+0x22e>
		  Error_Handler();
 8000f22:	f001 fb00 	bl	8002526 <Error_Handler>
	  }

	if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1) != HAL_OK){
 8000f26:	4885      	ldr	r0, [pc, #532]	; (800113c <main+0x444>)
 8000f28:	f004 fbb2 	bl	8005690 <HAL_DFSDM_FilterRegularStart>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf14      	ite	ne
 8000f32:	2301      	movne	r3, #1
 8000f34:	2300      	moveq	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <main+0x248>
		  Error_Handler();
 8000f3c:	f001 faf3 	bl	8002526 <Error_Handler>
	  }
	uint32_t adc_buff1 = 0, adc_buff3 = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float current_A = 0,current_B = 0, current_C= 0;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	float dc_bus = 0;
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	uint32_t speed_loop_counter= 0,current_loop_counter= 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	int32_t speed_accumulator = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	int32_t last_angle=0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float Va=0,Vb=0,Vc=0,Vq=0,Vd=0,id,iq;
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	int32_t pwm_A=0,pwm_B=0,pwm_C=0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	//get intial angle
	HAL_SPI_TransmitReceive(&hspi2, request_pos, position, 1, 100);
 8000fbe:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8000fc2:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	485c      	ldr	r0, [pc, #368]	; (8001140 <main+0x448>)
 8000fce:	f008 feb9 	bl	8009d44 <HAL_SPI_TransmitReceive>
	int32_t position_raw = (((uint16_t)position[1])<<8)+position[0];
 8000fd2:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
 8000fdc:	4413      	add	r3, r2
 8000fde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	int32_t position_temp = position_raw >> 4;
 8000fe2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fe6:	111b      	asrs	r3, r3, #4
 8000fe8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	float speed=0;
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	int32_t electrical_angle= 0,electrical_angle_past= 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float iq_accumulator = 0;
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	float id_accumulator = 0;
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	struct pi_settings iq_settings = {.ki=IQ_KI,.kp=IQ_KP,.min_intergrator=-V_MAX/IQ_KI,.max_intergrator=V_MAX/IQ_KI,.min_output=-V_MAX,.max_output=V_MAX,5000};
 8001010:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <main+0x44c>)
 8001012:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001016:	461d      	mov	r5, r3
 8001018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	struct pi_settings id_settings = {.ki=IQ_KI,.kp=IQ_KP,.min_intergrator=-V_MAX/IQ_KI,.max_intergrator=V_MAX/IQ_KI,.min_output=-V_MAX,.max_output=V_MAX,5000};
 8001024:	4b47      	ldr	r3, [pc, #284]	; (8001144 <main+0x44c>)
 8001026:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800102a:	461d      	mov	r5, r3
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//	struct motor_parameters motor = {.ld=62e-6,.lq=110e-6,.lambda_m=3e-3,.polepairs=POLE_PAIRS,.rs=27e-3};
	struct motor_parameters motor = {.ld=0e-6,.lq=0e-6,.lambda_m=0e-3,.polepairs=POLE_PAIRS,.rs=0e-3};
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	67bb      	str	r3, [r7, #120]	; 0x78
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800104c:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <main+0x450>)
 800104e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	Current_Controller idiq_controller(iq_settings, id_settings, motor);
 800105a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800105e:	ad0b      	add	r5, sp, #44	; 0x2c
 8001060:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	602b      	str	r3, [r5, #0]
 800106c:	ad04      	add	r5, sp, #16
 800106e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001076:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800107a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800107e:	466c      	mov	r4, sp
 8001080:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800108a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800108e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001090:	4630      	mov	r0, r6
 8001092:	f7ff fb45 	bl	8000720 <_ZN18Current_ControllerC1E11pi_settingsS0_16motor_parameters>
	last_angle = (879 * position_temp)/10000;
 8001096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800109a:	f240 326f 	movw	r2, #879	; 0x36f
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	4a2a      	ldr	r2, [pc, #168]	; (800114c <main+0x454>)
 80010a4:	fb82 1203 	smull	r1, r2, r2, r3
 80010a8:	1312      	asrs	r2, r2, #12
 80010aa:	17db      	asrs	r3, r3, #31
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	PI_controller speed_controller(SPEED_KI, SPEED_KP,-IQ_MAX,IQ_MAX);
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80010b8:	eeba 1a04 	vmov.f32	s2, #164	; 0xc1200000 -10.0
 80010bc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80010c0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001150 <main+0x458>
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fd2b 	bl	8000b20 <_ZN13PI_controllerC1Effff>
//	PI_controller Iq_PI_loop(IQ_KI, IQ_KP,-V_MAX*100000,V_MAX*100000);
	HAL_Delay(500);//wait 4s, helpful if test code is bad and need time to program before controller goes awal
 80010ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ce:	f002 f985 	bl	80033dc <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		int32_t debug_waittime = debug_time_started-debug_waitstart;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <main+0x45c>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <main+0x460>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		int32_t debug_time2run = debug_time_ended-debug_time_started;
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <main+0x464>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <main+0x45c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if(debug_worst_t<debug_time2run){
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <main+0x468>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dd03      	ble.n	8001102 <main+0x40a>
			debug_worst_t = debug_time2run;
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <main+0x468>)
 80010fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001100:	6013      	str	r3, [r2, #0]
		}
		TIM4->CNT=0;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <main+0x46c>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
		debug_waitstart=TIM4->CNT;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <main+0x46c>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	461a      	mov	r2, r3
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <main+0x460>)
 8001110:	601a      	str	r2, [r3, #0]
		while(pwm_flag==0){
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <main+0x470>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d128      	bne.n	800116c <main+0x474>
 800111a:	e7fa      	b.n	8001112 <main+0x41a>
 800111c:	240006bc 	.word	0x240006bc
 8001120:	2400064c 	.word	0x2400064c
 8001124:	24000a9c 	.word	0x24000a9c
 8001128:	24000a50 	.word	0x24000a50
 800112c:	24000ae8 	.word	0x24000ae8
 8001130:	40010000 	.word	0x40010000
 8001134:	3db40000 	.word	0x3db40000
 8001138:	24000754 	.word	0x24000754
 800113c:	240007a8 	.word	0x240007a8
 8001140:	240009c8 	.word	0x240009c8
 8001144:	0800da54 	.word	0x0800da54
 8001148:	40a00000 	.word	0x40a00000
 800114c:	68db8bad 	.word	0x68db8bad
 8001150:	3ca3d70a 	.word	0x3ca3d70a
 8001154:	24000c80 	.word	0x24000c80
 8001158:	24000c88 	.word	0x24000c88
 800115c:	24000c84 	.word	0x24000c84
 8001160:	24000c9c 	.word	0x24000c9c
 8001164:	40000800 	.word	0x40000800
 8001168:	24000c54 	.word	0x24000c54
		}
		debug_time_started = TIM4->CNT;
 800116c:	4bc6      	ldr	r3, [pc, #792]	; (8001488 <main+0x790>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	461a      	mov	r2, r3
 8001172:	4bc6      	ldr	r3, [pc, #792]	; (800148c <main+0x794>)
 8001174:	601a      	str	r2, [r3, #0]
		//Loop Chores
		speed_loop_counter++;
 8001176:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800117a:	3301      	adds	r3, #1
 800117c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		current_loop_counter++;
 8001180:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001184:	3301      	adds	r3, #1
 8001186:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		pwm_flag=0;
 800118a:	4bc1      	ldr	r3, [pc, #772]	; (8001490 <main+0x798>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
		//Get angle
		int32_t position_raw = (((uint16_t)position[1])<<8)+position[0];
 8001190:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
 800119a:	4413      	add	r3, r2
 800119c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		int32_t position_temp = position_raw >> 4;
 80011a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011a4:	111b      	asrs	r3, r3, #4
 80011a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		rawdata_to_angle(position_temp,mech_angle,electrical_angle,debug_offset,POLE_PAIRS);
 80011aa:	4bba      	ldr	r3, [pc, #744]	; (8001494 <main+0x79c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80011b2:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80011b6:	2005      	movs	r0, #5
 80011b8:	9000      	str	r0, [sp, #0]
 80011ba:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80011be:	f7ff fb35 	bl	800082c <_Z16rawdata_to_anglelRlS_ll>
//		debug_fake_angle = (debug_fake_angle+1)%36000;
//		electrical_angle = debug_fake_angle/100;
		//Get Currents
		current_A = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &channel5)*0.0012;
 80011c2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011c6:	4619      	mov	r1, r3
 80011c8:	48b3      	ldr	r0, [pc, #716]	; (8001498 <main+0x7a0>)
 80011ca:	f004 fa7c 	bl	80056c6 <HAL_DFSDM_FilterGetRegularValue>
 80011ce:	ee07 0a90 	vmov	s15, r0
 80011d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011d6:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001478 <main+0x780>
 80011da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011e2:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
		current_C = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1, &channel6)*0.0012;
 80011e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011ea:	4619      	mov	r1, r3
 80011ec:	48ab      	ldr	r0, [pc, #684]	; (800149c <main+0x7a4>)
 80011ee:	f004 fa6a 	bl	80056c6 <HAL_DFSDM_FilterGetRegularValue>
 80011f2:	ee07 0a90 	vmov	s15, r0
 80011f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011fa:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8001478 <main+0x780>
 80011fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001202:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001206:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
		current_B=0-current_C-current_A;
 800120a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80014a0 <main+0x7a8>
 800120e:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8001212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001216:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800121a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121e:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
		dqz(current_A,current_B,current_C,electrical_angle_past,iq,id);
 8001222:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001226:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800122a:	4619      	mov	r1, r3
 800122c:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8001230:	ed97 1a4b 	vldr	s2, [r7, #300]	; 0x12c
 8001234:	edd7 0a4c 	vldr	s1, [r7, #304]	; 0x130
 8001238:	ed97 0a4d 	vldr	s0, [r7, #308]	; 0x134
 800123c:	f7ff fb3c 	bl	80008b8 <_Z3dqzffflRfS_>
		electrical_angle_past=electrical_angle;
 8001240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001244:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		iq_accumulator+=iq;
 8001248:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800124c:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
		id_accumulator+=id;
 8001258:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800125c:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
		//Measure DC Bus
		adc_buff3 = HAL_ADC_GetValue(&hadc3);
 8001268:	488e      	ldr	r0, [pc, #568]	; (80014a4 <main+0x7ac>)
 800126a:	f002 fe65 	bl	8003f38 <HAL_ADC_GetValue>
 800126e:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		dc_bus = (.0374*adc_buff3);
 8001272:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800127e:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8001480 <main+0x788>
 8001282:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001286:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800128a:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
		//Update speed accumulator
		int32_t diff_angle = mech_angle-last_angle;
 800128e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001292:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		if(diff_angle<-180){
 800129c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80012a0:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80012a4:	da06      	bge.n	80012b4 <main+0x5bc>
			diff_angle=360+diff_angle;
 80012a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80012aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012ae:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012b2:	e009      	b.n	80012c8 <main+0x5d0>
		}else if(diff_angle>180){
 80012b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80012b8:	2bb4      	cmp	r3, #180	; 0xb4
 80012ba:	dd05      	ble.n	80012c8 <main+0x5d0>
			diff_angle=diff_angle-360;
 80012bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80012c0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80012c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		}
		speed_accumulator+=diff_angle;
 80012c8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80012cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80012d0:	4413      	add	r3, r2
 80012d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		last_angle=mech_angle;
 80012d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		if(speed_loop_counter>=SPEED_SAMPLES){
 80012de:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80012e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e6:	d327      	bcc.n	8001338 <main+0x640>
			speed=speed_accumulator*RPM_COEF;
 80012e8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80012f4:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 80012f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001300:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
			speed_accumulator=0;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
			speed_loop_counter=0;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
			debug_target_iq=-1*speed_controller.update(debug_target_speed,speed,TS*SPEED_SAMPLES);
 8001310:	4b65      	ldr	r3, [pc, #404]	; (80014a8 <main+0x7b0>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	ed9f 1a64 	vldr	s2, [pc, #400]	; 80014ac <main+0x7b4>
 800131c:	edd7 0a57 	vldr	s1, [r7, #348]	; 0x15c
 8001320:	eeb0 0a67 	vmov.f32	s0, s15
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fc72 	bl	8000c0e <_ZN13PI_controller6updateEfff>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	eef1 7a67 	vneg.f32	s15, s15
 8001332:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <main+0x7b8>)
 8001334:	edc3 7a00 	vstr	s15, [r3]
		}
		if(current_loop_counter>=CURRENT_SAMPLES){
 8001338:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800133c:	2b13      	cmp	r3, #19
 800133e:	d93a      	bls.n	80013b6 <main+0x6be>
			current_loop_counter=0;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
			debug_ID=id_accumulator/CURRENT_SAMPLES;
 8001346:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 800134a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800134e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001352:	4b58      	ldr	r3, [pc, #352]	; (80014b4 <main+0x7bc>)
 8001354:	edc3 7a00 	vstr	s15, [r3]
			debug_IQ=iq_accumulator/CURRENT_SAMPLES;
 8001358:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800135c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001364:	4b54      	ldr	r3, [pc, #336]	; (80014b8 <main+0x7c0>)
 8001366:	edc3 7a00 	vstr	s15, [r3]
//			Vq = Iq_PI_loop.update(debug_target_iq,iq,25*CURRENT_SAMPLES)/100;
			idiq_controller.update_vqvd(debug_target_iq, debug_IQ, 0.0f,debug_ID,speed,TS*CURRENT_SAMPLES, Vq, Vd);
 800136a:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <main+0x7b8>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <main+0x7c0>)
 8001372:	ed93 7a00 	vldr	s14, [r3]
 8001376:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <main+0x7bc>)
 8001378:	edd3 6a00 	vldr	s13, [r3]
 800137c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001380:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	eddf 2a4c 	vldr	s5, [pc, #304]	; 80014bc <main+0x7c4>
 800138c:	ed97 2a57 	vldr	s4, [r7, #348]	; 0x15c
 8001390:	eef0 1a66 	vmov.f32	s3, s13
 8001394:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80014a0 <main+0x7a8>
 8001398:	eef0 0a47 	vmov.f32	s1, s14
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f931 	bl	8000608 <_ZN18Current_Controller11update_vqvdEffffffRfS0_>
//			Vd=0;
//			Vd=-Vd;
			//TODO: REMOVE WHEN DONE WITH DEBUG (global vars for cube monitor)
			iq_accumulator=0;
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			id_accumulator=0;
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		//TODO enforce Vs max by reducing vq or at least consider it... could the vs/field weakening control loop just handle this?
		//cal va,vb,vc

		//FOC Control

		inv_dqz(Va,Vb,Vc,electrical_angle,Vq,Vd);
 80013b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013ba:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80013be:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 80013c2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80013c6:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80013ca:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80013ce:	eef0 0a47 	vmov.f32	s1, s14
 80013d2:	eeb0 0a67 	vmov.f32	s0, s15
 80013d6:	f7ff faf1 	bl	80009bc <_Z7inv_dqzRfS_S_lff>
		//Space Vector (set lowest voltage to zero)
		if(Va<=Vb && Va<=Vc){
 80013da:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80013de:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80013e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d81d      	bhi.n	8001428 <main+0x730>
 80013ec:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80013f0:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80013f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	d814      	bhi.n	8001428 <main+0x730>
			Vb-=Va;
 80013fe:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001402:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
			Vc-=Va;
 800140e:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001412:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
			Va=0;
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001426:	e061      	b.n	80014ec <main+0x7f4>
		}else if(Vb<=Va && Vb<=Vc){
 8001428:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800142c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d844      	bhi.n	80014c4 <main+0x7cc>
 800143a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800143e:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144a:	d83b      	bhi.n	80014c4 <main+0x7cc>
			Va-=Vb;
 800144c:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001450:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
			Vc-=Vb;
 800145c:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001460:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001468:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
			Vb=0;
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001474:	e03a      	b.n	80014ec <main+0x7f4>
 8001476:	bf00      	nop
 8001478:	30553261 	.word	0x30553261
 800147c:	3f53a92a 	.word	0x3f53a92a
 8001480:	c1bda512 	.word	0xc1bda512
 8001484:	3fa32617 	.word	0x3fa32617
 8001488:	40000800 	.word	0x40000800
 800148c:	24000c80 	.word	0x24000c80
 8001490:	24000c54 	.word	0x24000c54
 8001494:	240005ac 	.word	0x240005ac
 8001498:	24000754 	.word	0x24000754
 800149c:	240007a8 	.word	0x240007a8
 80014a0:	00000000 	.word	0x00000000
 80014a4:	240006bc 	.word	0x240006bc
 80014a8:	24000c98 	.word	0x24000c98
 80014ac:	3ccccccd 	.word	0x3ccccccd
 80014b0:	24000c94 	.word	0x24000c94
 80014b4:	24000c90 	.word	0x24000c90
 80014b8:	24000c8c 	.word	0x24000c8c
 80014bc:	3a03126f 	.word	0x3a03126f
 80014c0:	45d6e000 	.word	0x45d6e000
		}else{
			Va-=Vc;
 80014c4:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80014c8:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80014cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d0:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
			Vb-=Vc;
 80014d4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80014d8:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 80014dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e0:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
			Vc=0;
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		}
		//convert voltage to PWM
		pwm_A = (TIMER_PERIOD*Va)/dc_bus;
 80014ec:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80014f0:	ed1f 7a0d 	vldr	s14, [pc, #-52]	; 80014c0 <main+0x7c8>
 80014f4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80014f8:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 80014fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001504:	ee17 3a90 	vmov	r3, s15
 8001508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		pwm_B = (TIMER_PERIOD*Vb)/dc_bus;
 800150c:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001510:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 80014c0 <main+0x7c8>
 8001514:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001518:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 800151c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001524:	ee17 3a90 	vmov	r3, s15
 8001528:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		pwm_C = (TIMER_PERIOD*Vc)/dc_bus;
 800152c:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001530:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 80014c0 <main+0x7c8>
 8001534:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001538:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 800153c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001544:	ee17 3a90 	vmov	r3, s15
 8001548:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		//Write PWM to timer shadow registers
		TIM1->CCR1 = pwm_A;
 800154c:	4a25      	ldr	r2, [pc, #148]	; (80015e4 <main+0x8ec>)
 800154e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001552:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = pwm_B;
 8001554:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <main+0x8ec>)
 8001556:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800155a:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = pwm_C;
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <main+0x8ec>)
 800155e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001562:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_SPI_TransmitReceive_IT(&hspi2, request_pos, position, 1);
 8001564:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001568:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800156c:	2301      	movs	r3, #1
 800156e:	481e      	ldr	r0, [pc, #120]	; (80015e8 <main+0x8f0>)
 8001570:	f008 fed4 	bl	800a31c <HAL_SPI_TransmitReceive_IT>

		//TODO: REMOVE WHEN DONE WITH DEBUG (global vars for cube monitor)
		debug_time_ended = TIM4->CNT;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <main+0x8f4>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	461a      	mov	r2, r3
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <main+0x8f8>)
 800157c:	601a      	str	r2, [r3, #0]
		debug_angle =electrical_angle;
 800157e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <main+0x8fc>)
 8001584:	6013      	str	r3, [r2, #0]
		debug_DC_Bus =dc_bus/1000.0;
 8001586:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 800158a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80015f8 <main+0x900>
 800158e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <main+0x904>)
 8001594:	edc3 7a00 	vstr	s15, [r3]
		debug_Current_A = current_A;
 8001598:	4a19      	ldr	r2, [pc, #100]	; (8001600 <main+0x908>)
 800159a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800159e:	6013      	str	r3, [r2, #0]
		debug_Current_C =current_C;
 80015a0:	4a18      	ldr	r2, [pc, #96]	; (8001604 <main+0x90c>)
 80015a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015a6:	6013      	str	r3, [r2, #0]
		debug_vq=Vq;
 80015a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80015ac:	4a16      	ldr	r2, [pc, #88]	; (8001608 <main+0x910>)
 80015ae:	6013      	str	r3, [r2, #0]
		debug_vd=Vd;
 80015b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015b4:	4a15      	ldr	r2, [pc, #84]	; (800160c <main+0x914>)
 80015b6:	6013      	str	r3, [r2, #0]
		debug_speed=speed;
 80015b8:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 80015bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c0:	ee17 2a90 	vmov	r2, s15
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <main+0x918>)
 80015c6:	601a      	str	r2, [r3, #0]
		debug_va=Va;
 80015c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <main+0x91c>)
 80015ce:	6013      	str	r3, [r2, #0]
		debug_vb=Vb;
 80015d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80015d4:	4a10      	ldr	r2, [pc, #64]	; (8001618 <main+0x920>)
 80015d6:	6013      	str	r3, [r2, #0]
		debug_vc=Vc;
 80015d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015dc:	4a0f      	ldr	r2, [pc, #60]	; (800161c <main+0x924>)
 80015de:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 80015e0:	e577      	b.n	80010d2 <main+0x3da>
 80015e2:	bf00      	nop
 80015e4:	40010000 	.word	0x40010000
 80015e8:	240009c8 	.word	0x240009c8
 80015ec:	40000800 	.word	0x40000800
 80015f0:	24000c84 	.word	0x24000c84
 80015f4:	24000c58 	.word	0x24000c58
 80015f8:	447a0000 	.word	0x447a0000
 80015fc:	24000c5c 	.word	0x24000c5c
 8001600:	24000c60 	.word	0x24000c60
 8001604:	24000c64 	.word	0x24000c64
 8001608:	24000c68 	.word	0x24000c68
 800160c:	24000c6c 	.word	0x24000c6c
 8001610:	24000c7c 	.word	0x24000c7c
 8001614:	24000c70 	.word	0x24000c70
 8001618:	24000c74 	.word	0x24000c74
 800161c:	24000c78 	.word	0x24000c78

08001620 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b09c      	sub	sp, #112	; 0x70
 8001624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	224c      	movs	r2, #76	; 0x4c
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f00c f9fc 	bl	800da2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2220      	movs	r2, #32
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f00c f9f6 	bl	800da2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001640:	2002      	movs	r0, #2
 8001642:	f005 fa55 	bl	8006af0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b38      	ldr	r3, [pc, #224]	; (800172c <_Z18SystemClock_Configv+0x10c>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a37      	ldr	r2, [pc, #220]	; (800172c <_Z18SystemClock_Configv+0x10c>)
 8001650:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b35      	ldr	r3, [pc, #212]	; (800172c <_Z18SystemClock_Configv+0x10c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <_Z18SystemClock_Configv+0x10c>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d000      	beq.n	800167c <_Z18SystemClock_Configv+0x5c>
 800167a:	e7f2      	b.n	8001662 <_Z18SystemClock_Configv+0x42>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800167c:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <_Z18SystemClock_Configv+0x110>)
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	f023 0303 	bic.w	r3, r3, #3
 8001684:	4a2a      	ldr	r2, [pc, #168]	; (8001730 <_Z18SystemClock_Configv+0x110>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800168c:	2303      	movs	r3, #3
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001696:	2301      	movs	r3, #1
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a2:	2302      	movs	r3, #2
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80016aa:	232c      	movs	r3, #44	; 0x2c
 80016ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016b2:	2303      	movs	r3, #3
 80016b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80016ba:	230c      	movs	r3, #12
 80016bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016be:	2300      	movs	r3, #0
 80016c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 fa4a 	bl	8006b64 <HAL_RCC_OscConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf14      	ite	ne
 80016d6:	2301      	movne	r3, #1
 80016d8:	2300      	moveq	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80016e0:	f000 ff21 	bl	8002526 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e4:	233f      	movs	r3, #63	; 0x3f
 80016e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e8:	2303      	movs	r3, #3
 80016ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016f0:	2308      	movs	r3, #8
 80016f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016f8:	2340      	movs	r3, #64	; 0x40
 80016fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001700:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001702:	2340      	movs	r3, #64	; 0x40
 8001704:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2103      	movs	r1, #3
 800170a:	4618      	mov	r0, r3
 800170c:	f005 fdb8 	bl	8007280 <HAL_RCC_ClockConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf14      	ite	ne
 8001716:	2301      	movne	r3, #1
 8001718:	2300      	moveq	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001720:	f000 ff01 	bl	8002526 <Error_Handler>
  }
}
 8001724:	bf00      	nop
 8001726:	3770      	adds	r7, #112	; 0x70
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	58024800 	.word	0x58024800
 8001730:	58024400 	.word	0x58024400

08001734 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0ae      	sub	sp, #184	; 0xb8
 8001738:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	22b4      	movs	r2, #180	; 0xb4
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f00c f973 	bl	800da2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_Z24PeriphCommonClock_Configv+0x68>)
 8001748:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800174a:	2302      	movs	r3, #2
 800174c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 800174e:	230f      	movs	r3, #15
 8001750:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001752:	2302      	movs	r3, #2
 8001754:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001756:	2302      	movs	r3, #2
 8001758:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800175e:	23c0      	movs	r3, #192	; 0xc0
 8001760:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8001766:	f640 3386 	movw	r3, #2950	; 0xb86
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800176c:	2300      	movs	r3, #0
 800176e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f006 f94f 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf14      	ite	ne
 8001784:	2301      	movne	r3, #1
 8001786:	2300      	moveq	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <_Z24PeriphCommonClock_Configv+0x5e>
  {
    Error_Handler();
 800178e:	f000 feca 	bl	8002526 <Error_Handler>
  }
}
 8001792:	bf00      	nop
 8001794:	37b8      	adds	r7, #184	; 0xb8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	80080000 	.word	0x80080000

080017a0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2224      	movs	r2, #36	; 0x24
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00c f937 	bl	800da2c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017be:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017c0:	4a38      	ldr	r2, [pc, #224]	; (80018a4 <_ZL12MX_ADC1_Initv+0x104>)
 80017c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017c6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80017ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80017cc:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017d2:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d8:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017da:	2204      	movs	r2, #4
 80017dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 8001800:	2200      	movs	r2, #0
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 8001806:	2200      	movs	r2, #0
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 800180c:	2200      	movs	r2, #0
 800180e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 8001812:	2200      	movs	r2, #0
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800181e:	4820      	ldr	r0, [pc, #128]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 8001820:	f002 f8b8 	bl	8003994 <HAL_ADC_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf14      	ite	ne
 800182a:	2301      	movne	r3, #1
 800182c:	2300      	moveq	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <_ZL12MX_ADC1_Initv+0x98>
  {
    Error_Handler();
 8001834:	f000 fe77 	bl	8002526 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	4817      	ldr	r0, [pc, #92]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 8001844:	f003 fb46 	bl	8004ed4 <HAL_ADCEx_MultiModeConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf14      	ite	ne
 800184e:	2301      	movne	r3, #1
 8001850:	2300      	moveq	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <_ZL12MX_ADC1_Initv+0xbc>
  {
    Error_Handler();
 8001858:	f000 fe65 	bl	8002526 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <_ZL12MX_ADC1_Initv+0x108>)
 800185e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001860:	2306      	movs	r3, #6
 8001862:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_ZL12MX_ADC1_Initv+0x10c>)
 800186a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800186c:	2304      	movs	r3, #4
 800186e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800187a:	463b      	mov	r3, r7
 800187c:	4619      	mov	r1, r3
 800187e:	4808      	ldr	r0, [pc, #32]	; (80018a0 <_ZL12MX_ADC1_Initv+0x100>)
 8001880:	f002 fb68 	bl	8003f54 <HAL_ADC_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8001894:	f000 fe47 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3730      	adds	r7, #48	; 0x30
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	240005dc 	.word	0x240005dc
 80018a4:	40022000 	.word	0x40022000
 80018a8:	0c900008 	.word	0x0c900008
 80018ac:	47ff0000 	.word	0x47ff0000

080018b0 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2224      	movs	r2, #36	; 0x24
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f00c f8b5 	bl	800da2c <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018c4:	4a2f      	ldr	r2, [pc, #188]	; (8001984 <_ZL12MX_ADC2_Initv+0xd4>)
 80018c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018ca:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80018ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018de:	2204      	movs	r2, #4
 80018e0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 8001904:	2200      	movs	r2, #0
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 800190a:	2200      	movs	r2, #0
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 8001910:	2200      	movs	r2, #0
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 8001916:	2200      	movs	r2, #0
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001922:	4817      	ldr	r0, [pc, #92]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 8001924:	f002 f836 	bl	8003994 <HAL_ADC_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <_ZL12MX_ADC2_Initv+0x8c>
  {
    Error_Handler();
 8001938:	f000 fdf5 	bl	8002526 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <_ZL12MX_ADC2_Initv+0xd8>)
 800193e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001940:	2306      	movs	r3, #6
 8001942:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <_ZL12MX_ADC2_Initv+0xdc>)
 800194a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800194c:	2304      	movs	r3, #4
 800194e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	4619      	mov	r1, r3
 800195e:	4808      	ldr	r0, [pc, #32]	; (8001980 <_ZL12MX_ADC2_Initv+0xd0>)
 8001960:	f002 faf8 	bl	8003f54 <HAL_ADC_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf14      	ite	ne
 800196a:	2301      	movne	r3, #1
 800196c:	2300      	moveq	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 8001974:	f000 fdd7 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2400064c 	.word	0x2400064c
 8001984:	40022100 	.word	0x40022100
 8001988:	10c00010 	.word	0x10c00010
 800198c:	47ff0000 	.word	0x47ff0000

08001990 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2224      	movs	r2, #36	; 0x24
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f00c f845 	bl	800da2c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019a4:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <_ZL12MX_ADC3_Initv+0xf8>)
 80019a6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 80019a8:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019aa:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80019ae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019b2:	2208      	movs	r2, #8
 80019b4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80019b6:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019bc:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019c4:	2204      	movs	r2, #4
 80019c6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019c8:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 8001a04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a08:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a18:	481a      	ldr	r0, [pc, #104]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 8001a1a:	f001 ffbb 	bl	8003994 <HAL_ADC_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <_ZL12MX_ADC3_Initv+0xa2>
  {
    Error_Handler();
 8001a2e:	f000 fd7a 	bl	8002526 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <_ZL12MX_ADC3_Initv+0xfc>)
 8001a34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a36:	2306      	movs	r3, #6
 8001a38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a42:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a44:	2304      	movs	r3, #4
 8001a46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <_ZL12MX_ADC3_Initv+0xf4>)
 8001a62:	f002 fa77 	bl	8003f54 <HAL_ADC_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <_ZL12MX_ADC3_Initv+0xea>
  {
    Error_Handler();
 8001a76:	f000 fd56 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	240006bc 	.word	0x240006bc
 8001a88:	58026000 	.word	0x58026000
 8001a8c:	04300002 	.word	0x04300002

08001a90 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <_ZL14MX_CORDIC_Initv+0x28>)
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <_ZL14MX_CORDIC_Initv+0x2c>)
 8001a98:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001a9a:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <_ZL14MX_CORDIC_Initv+0x28>)
 8001a9c:	f003 fafc 	bl	8005098 <HAL_CORDIC_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 8001ab0:	f000 fd39 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2400072c 	.word	0x2400072c
 8001abc:	48024400 	.word	0x48024400

08001ac0 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001ac4:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001ac6:	4a81      	ldr	r2, [pc, #516]	; (8001ccc <_ZL14MX_DFSDM1_Initv+0x20c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001aca:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8001ad0:	4b7d      	ldr	r3, [pc, #500]	; (8001cc8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8001ad6:	4b7c      	ldr	r3, [pc, #496]	; (8001cc8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001adc:	4b7a      	ldr	r3, [pc, #488]	; (8001cc8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001ade:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ae2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8001ae4:	4b78      	ldr	r3, [pc, #480]	; (8001cc8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001aea:	4b77      	ldr	r3, [pc, #476]	; (8001cc8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001af0:	4875      	ldr	r0, [pc, #468]	; (8001cc8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001af2:	f003 fcab 	bl	800544c <HAL_DFSDM_FilterInit>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <_ZL14MX_DFSDM1_Initv+0x4a>
  {
    Error_Handler();
 8001b06:	f000 fd0e 	bl	8002526 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8001b0a:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001b0c:	4a71      	ldr	r2, [pc, #452]	; (8001cd4 <_ZL14MX_DFSDM1_Initv+0x214>)
 8001b0e:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001b10:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = DISABLE;
 8001b16:	4b6e      	ldr	r3, [pc, #440]	; (8001cd0 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 8001b1c:	4b6c      	ldr	r3, [pc, #432]	; (8001cd0 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001b22:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001b24:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b28:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 8001b2a:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001b2c:	2240      	movs	r2, #64	; 0x40
 8001b2e:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8001b30:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8001b36:	4866      	ldr	r0, [pc, #408]	; (8001cd0 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001b38:	f003 fc88 	bl	800544c <HAL_DFSDM_FilterInit>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf14      	ite	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	2300      	moveq	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <_ZL14MX_DFSDM1_Initv+0x90>
  {
    Error_Handler();
 8001b4c:	f000 fceb 	bl	8002526 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001b50:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b52:	4a62      	ldr	r2, [pc, #392]	; (8001cdc <_ZL14MX_DFSDM1_Initv+0x21c>)
 8001b54:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = DISABLE;
 8001b56:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001b5c:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b64:	2202      	movs	r2, #2
 8001b66:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001b68:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001b7a:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001b80:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001b8c:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001b92:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001b9e:	484e      	ldr	r0, [pc, #312]	; (8001cd8 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001ba0:	f003 fb8c 	bl	80052bc <HAL_DFSDM_ChannelInit>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <_ZL14MX_DFSDM1_Initv+0xf8>
  {
    Error_Handler();
 8001bb4:	f000 fcb7 	bl	8002526 <Error_Handler>
  }
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 8001bb8:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bba:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <_ZL14MX_DFSDM1_Initv+0x224>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = DISABLE;
 8001bbe:	4b48      	ldr	r3, [pc, #288]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 2;
 8001bca:	4b45      	ldr	r3, [pc, #276]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001bd0:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001bd6:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001bdc:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001be2:	4b3f      	ldr	r3, [pc, #252]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001be8:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001bee:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 8001bfa:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 8001c00:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 8001c06:	4836      	ldr	r0, [pc, #216]	; (8001ce0 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001c08:	f003 fb58 	bl	80052bc <HAL_DFSDM_ChannelInit>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bf14      	ite	ne
 8001c12:	2301      	movne	r3, #1
 8001c14:	2300      	moveq	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <_ZL14MX_DFSDM1_Initv+0x160>
  {
    Error_Handler();
 8001c1c:	f000 fc83 	bl	8002526 <Error_Handler>
  }
  hdfsdm1_channel6.Instance = DFSDM1_Channel6;
 8001c20:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <_ZL14MX_DFSDM1_Initv+0x22c>)
 8001c24:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel6.Init.OutputClock.Activation = DISABLE;
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel6.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel6.Init.OutputClock.Divider = 2;
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c34:	2202      	movs	r2, #2
 8001c36:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel6.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel6.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel6.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel6.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001c4a:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel6.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel6.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel6.Init.Awd.Oversampling = 1;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel6.Init.Offset = 0;
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel6.Init.RightBitShift = 0x00;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel6) != HAL_OK)
 8001c6e:	481e      	ldr	r0, [pc, #120]	; (8001ce8 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001c70:	f003 fb24 	bl	80052bc <HAL_DFSDM_ChannelInit>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <_ZL14MX_DFSDM1_Initv+0x1c8>
  {
    Error_Handler();
 8001c84:	f000 fc4f 	bl	8002526 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4919      	ldr	r1, [pc, #100]	; (8001cf0 <_ZL14MX_DFSDM1_Initv+0x230>)
 8001c8c:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001c8e:	f003 fcb9 	bl	8005604 <HAL_DFSDM_FilterConfigRegChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <_ZL14MX_DFSDM1_Initv+0x1e6>
  {
    Error_Handler();
 8001ca2:	f000 fc40 	bl	8002526 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_6, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4912      	ldr	r1, [pc, #72]	; (8001cf4 <_ZL14MX_DFSDM1_Initv+0x234>)
 8001caa:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001cac:	f003 fcaa 	bl	8005604 <HAL_DFSDM_FilterConfigRegChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf14      	ite	ne
 8001cb6:	2301      	movne	r3, #1
 8001cb8:	2300      	moveq	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <_ZL14MX_DFSDM1_Initv+0x204>
  {
    Error_Handler();
 8001cc0:	f000 fc31 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	24000754 	.word	0x24000754
 8001ccc:	40017900 	.word	0x40017900
 8001cd0:	240007a8 	.word	0x240007a8
 8001cd4:	40017980 	.word	0x40017980
 8001cd8:	240007fc 	.word	0x240007fc
 8001cdc:	40017820 	.word	0x40017820
 8001ce0:	24000834 	.word	0x24000834
 8001ce4:	400178a0 	.word	0x400178a0
 8001ce8:	2400086c 	.word	0x2400086c
 8001cec:	400178c0 	.word	0x400178c0
 8001cf0:	00050020 	.word	0x00050020
 8001cf4:	00060040 	.word	0x00060040

08001cf8 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001cfc:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001cfe:	4a32      	ldr	r2, [pc, #200]	; (8001dc8 <_ZL14MX_FDCAN1_Initv+0xd0>)
 8001d00:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d2e:	2202      	movs	r2, #2
 8001d30:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d34:	2202      	movs	r2, #2
 8001d36:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001d44:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 20;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d64:	2214      	movs	r2, #20
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d76:	2204      	movs	r2, #4
 8001d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d82:	2204      	movs	r2, #4
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 20;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d8e:	2214      	movs	r2, #20
 8001d90:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001da0:	2204      	movs	r2, #4
 8001da2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001da4:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001da6:	f003 ff93 	bl	8005cd0 <HAL_FDCAN_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf14      	ite	ne
 8001db0:	2301      	movne	r3, #1
 8001db2:	2300      	moveq	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <_ZL14MX_FDCAN1_Initv+0xc6>
  {
    Error_Handler();
 8001dba:	f000 fbb4 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	240008a4 	.word	0x240008a4
 8001dc8:	4000a000 	.word	0x4000a000

08001dcc <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <_ZL12MX_FMAC_Initv+0x28>)
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <_ZL12MX_FMAC_Initv+0x2c>)
 8001dd4:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001dd6:	4807      	ldr	r0, [pc, #28]	; (8001df4 <_ZL12MX_FMAC_Initv+0x28>)
 8001dd8:	f004 fae2 	bl	80063a0 <HAL_FMAC_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 8001dec:	f000 fb9b 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	24000944 	.word	0x24000944
 8001df8:	48024000 	.word	0x48024000

08001dfc <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e02:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <_ZL12MX_I2C3_Initv+0x94>)
 8001e04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x60404E72;
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e08:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <_ZL12MX_I2C3_Initv+0x98>)
 8001e0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e36:	4815      	ldr	r0, [pc, #84]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e38:	f004 fd32 	bl	80068a0 <HAL_I2C_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8001e4c:	f000 fb6b 	bl	8002526 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e50:	2100      	movs	r1, #0
 8001e52:	480e      	ldr	r0, [pc, #56]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e54:	f004 fdb4 	bl	80069c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf14      	ite	ne
 8001e5e:	2301      	movne	r3, #1
 8001e60:	2300      	moveq	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001e68:	f000 fb5d 	bl	8002526 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <_ZL12MX_I2C3_Initv+0x90>)
 8001e70:	f004 fdf1 	bl	8006a56 <HAL_I2CEx_ConfigDigitalFilter>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf14      	ite	ne
 8001e7a:	2301      	movne	r3, #1
 8001e7c:	2300      	moveq	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8001e84:	f000 fb4f 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2400097c 	.word	0x2400097c
 8001e90:	40005c00 	.word	0x40005c00
 8001e94:	60404e72 	.word	0x60404e72

08001e98 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001e9e:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <_ZL12MX_SPI2_Initv+0xb8>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001ea4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ea8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001eb6:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ebc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001ec0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ec4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001ec8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ecc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001ef0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f2c:	4807      	ldr	r0, [pc, #28]	; (8001f4c <_ZL12MX_SPI2_Initv+0xb4>)
 8001f2e:	f007 fe07 	bl	8009b40 <HAL_SPI_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <_ZL12MX_SPI2_Initv+0xae>
  {
    Error_Handler();
 8001f42:	f000 faf0 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	240009c8 	.word	0x240009c8
 8001f50:	40003800 	.word	0x40003800

08001f54 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b096      	sub	sp, #88	; 0x58
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]
 8001f76:	615a      	str	r2, [r3, #20]
 8001f78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	222c      	movs	r2, #44	; 0x2c
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00b fd53 	bl	800da2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8001f88:	4a5d      	ldr	r2, [pc, #372]	; (8002100 <_ZL12MX_TIM1_Initv+0x1ac>)
 8001f8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f8c:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8001f94:	2220      	movs	r2, #32
 8001f96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6875;
 8001f98:	4b58      	ldr	r3, [pc, #352]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8001f9a:	f641 22db 	movw	r2, #6875	; 0x1adb
 8001f9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa0:	4b56      	ldr	r3, [pc, #344]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fa6:	4b55      	ldr	r3, [pc, #340]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b53      	ldr	r3, [pc, #332]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fb2:	4852      	ldr	r0, [pc, #328]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8001fb4:	f009 f858 	bl	800b068 <HAL_TIM_PWM_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8001fc8:	f000 faad 	bl	8002526 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4847      	ldr	r0, [pc, #284]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8001fe0:	f00a fa0a 	bl	800c3f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 8001ff4:	f000 fa97 	bl	8002526 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff8:	2360      	movs	r3, #96	; 0x60
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002000:	2300      	movs	r3, #0
 8002002:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002004:	2300      	movs	r3, #0
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002018:	2200      	movs	r2, #0
 800201a:	4619      	mov	r1, r3
 800201c:	4837      	ldr	r0, [pc, #220]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 800201e:	f009 fab7 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 8002032:	f000 fa78 	bl	8002526 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002036:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800203a:	2204      	movs	r2, #4
 800203c:	4619      	mov	r1, r3
 800203e:	482f      	ldr	r0, [pc, #188]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8002040:	f009 faa6 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 8002054:	f000 fa67 	bl	8002526 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800205c:	2208      	movs	r2, #8
 800205e:	4619      	mov	r1, r3
 8002060:	4826      	ldr	r0, [pc, #152]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8002062:	f009 fa95 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <_ZL12MX_TIM1_Initv+0x126>
  {
    Error_Handler();
 8002076:	f000 fa56 	bl	8002526 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800207a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207e:	220c      	movs	r2, #12
 8002080:	4619      	mov	r1, r3
 8002082:	481e      	ldr	r0, [pc, #120]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 8002084:	f009 fa84 	bl	800b590 <HAL_TIM_PWM_ConfigChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <_ZL12MX_TIM1_Initv+0x148>
  {
    Error_Handler();
 8002098:	f000 fa45 	bl	8002526 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 80020a8:	230a      	movs	r3, #10
 80020aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80020c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	480a      	ldr	r0, [pc, #40]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 80020d4:	f00a fa2c 	bl	800c530 <HAL_TIMEx_ConfigBreakDeadTime>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <_ZL12MX_TIM1_Initv+0x198>
  {
    Error_Handler();
 80020e8:	f000 fa1d 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020ec:	4803      	ldr	r0, [pc, #12]	; (80020fc <_ZL12MX_TIM1_Initv+0x1a8>)
 80020ee:	f000 feb1 	bl	8002e54 <HAL_TIM_MspPostInit>

}
 80020f2:	bf00      	nop
 80020f4:	3758      	adds	r7, #88	; 0x58
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	24000a50 	.word	0x24000a50
 8002100:	40010000 	.word	0x40010000

08002104 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <_ZL12MX_TIM3_Initv+0xb8>)
 8002126:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27500;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <_ZL12MX_TIM3_Initv+0xb4>)
 800212a:	f646 326c 	movw	r2, #27500	; 0x6b6c
 800212e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8002138:	f242 720f 	movw	r2, #9999	; 0x270f
 800213c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002144:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800214a:	481b      	ldr	r0, [pc, #108]	; (80021b8 <_ZL12MX_TIM3_Initv+0xb4>)
 800214c:	f008 feaf 	bl	800aeae <HAL_TIM_Base_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8002160:	f000 f9e1 	bl	8002526 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002168:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	4619      	mov	r1, r3
 8002170:	4811      	ldr	r0, [pc, #68]	; (80021b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8002172:	f009 fb1d 	bl	800b7b0 <HAL_TIM_ConfigClockSource>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8002186:	f000 f9ce 	bl	8002526 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4808      	ldr	r0, [pc, #32]	; (80021b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8002198:	f00a f92e 	bl	800c3f8 <HAL_TIMEx_MasterConfigSynchronization>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80021ac:	f000 f9bb 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	24000a9c 	.word	0x24000a9c
 80021bc:	40000400 	.word	0x40000400

080021c0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <_ZL12MX_TIM4_Initv+0xb4>)
 80021e0:	4a25      	ldr	r2, [pc, #148]	; (8002278 <_ZL12MX_TIM4_Initv+0xb8>)
 80021e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 275;
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <_ZL12MX_TIM4_Initv+0xb4>)
 80021e6:	f240 1213 	movw	r2, #275	; 0x113
 80021ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <_ZL12MX_TIM4_Initv+0xb4>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <_ZL12MX_TIM4_Initv+0xb4>)
 80021f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80021f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <_ZL12MX_TIM4_Initv+0xb4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <_ZL12MX_TIM4_Initv+0xb4>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002206:	481b      	ldr	r0, [pc, #108]	; (8002274 <_ZL12MX_TIM4_Initv+0xb4>)
 8002208:	f008 fe51 	bl	800aeae <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <_ZL12MX_TIM4_Initv+0x60>
  {
    Error_Handler();
 800221c:	f000 f983 	bl	8002526 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002224:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4619      	mov	r1, r3
 800222c:	4811      	ldr	r0, [pc, #68]	; (8002274 <_ZL12MX_TIM4_Initv+0xb4>)
 800222e:	f009 fabf 	bl	800b7b0 <HAL_TIM_ConfigClockSource>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002242:	f000 f970 	bl	8002526 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	4619      	mov	r1, r3
 8002252:	4808      	ldr	r0, [pc, #32]	; (8002274 <_ZL12MX_TIM4_Initv+0xb4>)
 8002254:	f00a f8d0 	bl	800c3f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002268:	f000 f95d 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	24000ae8 	.word	0x24000ae8
 8002278:	40000800 	.word	0x40000800

0800227c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002282:	4a2d      	ldr	r2, [pc, #180]	; (8002338 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8002284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800228c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b23      	ldr	r3, [pc, #140]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022c4:	481b      	ldr	r0, [pc, #108]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022c6:	f00a f9f4 	bl	800c6b2 <HAL_UART_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80022da:	f000 f924 	bl	8002526 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022de:	2100      	movs	r1, #0
 80022e0:	4814      	ldr	r0, [pc, #80]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022e2:	f00b faa6 	bl	800d832 <HAL_UARTEx_SetTxFifoThreshold>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80022f6:	f000 f916 	bl	8002526 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022fa:	2100      	movs	r1, #0
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022fe:	f00b fad6 	bl	800d8ae <HAL_UARTEx_SetRxFifoThreshold>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf14      	ite	ne
 8002308:	2301      	movne	r3, #1
 800230a:	2300      	moveq	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8002312:	f000 f908 	bl	8002526 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002318:	f00b fa52 	bl	800d7c0 <HAL_UARTEx_DisableFifoMode>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf14      	ite	ne
 8002322:	2301      	movne	r3, #1
 8002324:	2300      	moveq	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 800232c:	f000 f8fb 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	24000b34 	.word	0x24000b34
 8002338:	40011000 	.word	0x40011000

0800233c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 8002342:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <_ZL19MX_USART2_UART_Initv+0xc4>)
 8002344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 8002348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800234c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b29      	ldr	r3, [pc, #164]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800235a:	4b28      	ldr	r3, [pc, #160]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 8002362:	220c      	movs	r2, #12
 8002364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002372:	4b22      	ldr	r3, [pc, #136]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 800237a:	2200      	movs	r2, #0
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800237e:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 8002380:	2200      	movs	r2, #0
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002384:	2300      	movs	r3, #0
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	481c      	ldr	r0, [pc, #112]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 800238c:	f00b f9ae 	bl	800d6ec <HAL_RS485Ex_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf14      	ite	ne
 8002396:	2301      	movne	r3, #1
 8002398:	2300      	moveq	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <_ZL19MX_USART2_UART_Initv+0x68>
  {
    Error_Handler();
 80023a0:	f000 f8c1 	bl	8002526 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a4:	2100      	movs	r1, #0
 80023a6:	4815      	ldr	r0, [pc, #84]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 80023a8:	f00b fa43 	bl	800d832 <HAL_UARTEx_SetTxFifoThreshold>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <_ZL19MX_USART2_UART_Initv+0x84>
  {
    Error_Handler();
 80023bc:	f000 f8b3 	bl	8002526 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c0:	2100      	movs	r1, #0
 80023c2:	480e      	ldr	r0, [pc, #56]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 80023c4:	f00b fa73 	bl	800d8ae <HAL_UARTEx_SetRxFifoThreshold>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf14      	ite	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	2300      	moveq	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <_ZL19MX_USART2_UART_Initv+0xa0>
  {
    Error_Handler();
 80023d8:	f000 f8a5 	bl	8002526 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <_ZL19MX_USART2_UART_Initv+0xc0>)
 80023de:	f00b f9ef 	bl	800d7c0 <HAL_UARTEx_DisableFifoMode>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <_ZL19MX_USART2_UART_Initv+0xba>
  {
    Error_Handler();
 80023f2:	f000 f898 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	24000bc4 	.word	0x24000bc4
 8002400:	40004400 	.word	0x40004400

08002404 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	; 0x30
 8002408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 800241c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002420:	4a37      	ldr	r2, [pc, #220]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800242a:	4b35      	ldr	r3, [pc, #212]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 800243a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243e:	4a30      	ldr	r2, [pc, #192]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 800244a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 8002458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 8002476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247a:	4a21      	ldr	r2, [pc, #132]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 8002486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002498:	4a19      	ldr	r2, [pc, #100]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 800249a:	f043 0310 	orr.w	r3, r3, #16
 800249e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 80024b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 80024b8:	f043 0308 	orr.w	r3, r3, #8
 80024bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <_ZL12MX_GPIO_Initv+0xfc>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024ce:	2200      	movs	r2, #0
 80024d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d4:	480b      	ldr	r0, [pc, #44]	; (8002504 <_ZL12MX_GPIO_Initv+0x100>)
 80024d6:	f004 f9af 	bl	8006838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4619      	mov	r1, r3
 80024f2:	4804      	ldr	r0, [pc, #16]	; (8002504 <_ZL12MX_GPIO_Initv+0x100>)
 80024f4:	f003 fff8 	bl	80064e8 <HAL_GPIO_Init>

}
 80024f8:	bf00      	nop
 80024fa:	3730      	adds	r7, #48	; 0x30
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	58024400 	.word	0x58024400
 8002504:	58020800 	.word	0x58020800

08002508 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002518:	d101      	bne.n	800251e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800251a:	f000 ff3f 	bl	800339c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_MspInit+0x30>)
 800253c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002540:	4a08      	ldr	r2, [pc, #32]	; (8002564 <HAL_MspInit+0x30>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_MspInit+0x30>)
 800254c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	58024400 	.word	0x58024400

08002568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08e      	sub	sp, #56	; 0x38
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5b      	ldr	r2, [pc, #364]	; (80026f4 <HAL_ADC_MspInit+0x18c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d14e      	bne.n	8002628 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_ADC_MspInit+0x190>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	4a59      	ldr	r2, [pc, #356]	; (80026f8 <HAL_ADC_MspInit+0x190>)
 8002592:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002594:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_ADC_MspInit+0x190>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d10e      	bne.n	80025ba <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <HAL_ADC_MspInit+0x194>)
 800259e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025a2:	4a56      	ldr	r2, [pc, #344]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80025a4:	f043 0320 	orr.w	r3, r3, #32
 80025a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80025ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80025bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c0:	4a4e      	ldr	r2, [pc, #312]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80025cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d8:	4b48      	ldr	r3, [pc, #288]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80025da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025de:	4a47      	ldr	r2, [pc, #284]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80025ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	69bb      	ldr	r3, [r7, #24]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f6:	23c0      	movs	r3, #192	; 0xc0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025fa:	2303      	movs	r3, #3
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002606:	4619      	mov	r1, r3
 8002608:	483d      	ldr	r0, [pc, #244]	; (8002700 <HAL_ADC_MspInit+0x198>)
 800260a:	f003 ff6d 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800260e:	2303      	movs	r3, #3
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002612:	2303      	movs	r3, #3
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261e:	4619      	mov	r1, r3
 8002620:	4838      	ldr	r0, [pc, #224]	; (8002704 <HAL_ADC_MspInit+0x19c>)
 8002622:	f003 ff61 	bl	80064e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002626:	e061      	b.n	80026ec <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a36      	ldr	r2, [pc, #216]	; (8002708 <HAL_ADC_MspInit+0x1a0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d133      	bne.n	800269a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002632:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_ADC_MspInit+0x190>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3301      	adds	r3, #1
 8002638:	4a2f      	ldr	r2, [pc, #188]	; (80026f8 <HAL_ADC_MspInit+0x190>)
 800263a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800263c:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <HAL_ADC_MspInit+0x190>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10e      	bne.n	8002662 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_ADC_MspInit+0x194>)
 8002646:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800264a:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <HAL_ADC_MspInit+0x194>)
 800264c:	f043 0320 	orr.w	r3, r3, #32
 8002650:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002654:	4b29      	ldr	r3, [pc, #164]	; (80026fc <HAL_ADC_MspInit+0x194>)
 8002656:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_ADC_MspInit+0x194>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002668:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_ADC_MspInit+0x194>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_ADC_MspInit+0x194>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002680:	2330      	movs	r3, #48	; 0x30
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002684:	2303      	movs	r3, #3
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002690:	4619      	mov	r1, r3
 8002692:	481e      	ldr	r0, [pc, #120]	; (800270c <HAL_ADC_MspInit+0x1a4>)
 8002694:	f003 ff28 	bl	80064e8 <HAL_GPIO_Init>
}
 8002698:	e028      	b.n	80026ec <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC3)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <HAL_ADC_MspInit+0x1a8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d123      	bne.n	80026ec <HAL_ADC_MspInit+0x184>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026aa:	4a14      	ldr	r2, [pc, #80]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80026ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80026c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80026ca:	f043 0304 	orr.w	r3, r3, #4
 80026ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_ADC_MspInit+0x194>)
 80026d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80026e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80026e4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80026e8:	f000 fe9c 	bl	8003424 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80026ec:	bf00      	nop
 80026ee:	3738      	adds	r7, #56	; 0x38
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40022000 	.word	0x40022000
 80026f8:	24000ca0 	.word	0x24000ca0
 80026fc:	58024400 	.word	0x58024400
 8002700:	58020000 	.word	0x58020000
 8002704:	58020400 	.word	0x58020400
 8002708:	40022100 	.word	0x40022100
 800270c:	58020800 	.word	0x58020800
 8002710:	58026000 	.word	0x58026000

08002714 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <HAL_CORDIC_MspInit+0x3c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10e      	bne.n	8002744 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_CORDIC_MspInit+0x40>)
 8002728:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800272c:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_CORDIC_MspInit+0x40>)
 800272e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002732:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_CORDIC_MspInit+0x40>)
 8002738:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	48024400 	.word	0x48024400
 8002754:	58024400 	.word	0x58024400

08002758 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b0b8      	sub	sp, #224	; 0xe0
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002770:	f107 0318 	add.w	r3, r7, #24
 8002774:	22b4      	movs	r2, #180	; 0xb4
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f00b f957 	bl	800da2c <memset>
  if(DFSDM1_Init == 0)
 800277e:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <HAL_DFSDM_FilterMspInit+0x178>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 809f 	bne.w	80028c6 <HAL_DFSDM_FilterMspInit+0x16e>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002788:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800278c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800278e:	2300      	movs	r3, #0
 8002790:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002792:	f107 0318 	add.w	r3, r7, #24
 8002796:	4618      	mov	r0, r3
 8002798:	f005 f940 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80027a2:	f7ff fec0 	bl	8002526 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80027a6:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_DFSDM_FilterMspInit+0x17c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a49      	ldr	r2, [pc, #292]	; (80028d4 <HAL_DFSDM_FilterMspInit+0x17c>)
 80027ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80027b0:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_DFSDM_FilterMspInit+0x17c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10e      	bne.n	80027d6 <HAL_DFSDM_FilterMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80027b8:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80027ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027be:	4a46      	ldr	r2, [pc, #280]	; (80028d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80027c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027c8:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80027ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d6:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80027d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027dc:	4a3e      	ldr	r2, [pc, #248]	; (80028d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e6:	4b3c      	ldr	r3, [pc, #240]	; (80028d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f4:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80027f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fa:	4a37      	ldr	r2, [pc, #220]	; (80028d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002804:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <HAL_DFSDM_FilterMspInit+0x180>)
 8002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> DFSDM1_CKIN6
    PD1     ------> DFSDM1_DATIN6
    PD6     ------> DFSDM1_DATIN1
    PD7     ------> DFSDM1_CKIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002812:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800282c:	2303      	movs	r3, #3
 800282e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002832:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002836:	4619      	mov	r1, r3
 8002838:	4828      	ldr	r0, [pc, #160]	; (80028dc <HAL_DFSDM_FilterMspInit+0x184>)
 800283a:	f003 fe55 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800283e:	2303      	movs	r3, #3
 8002840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8002856:	2303      	movs	r3, #3
 8002858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002860:	4619      	mov	r1, r3
 8002862:	481f      	ldr	r0, [pc, #124]	; (80028e0 <HAL_DFSDM_FilterMspInit+0x188>)
 8002864:	f003 fe40 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002868:	2340      	movs	r3, #64	; 0x40
 800286a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 8002880:	2304      	movs	r3, #4
 8002882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002886:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800288a:	4619      	mov	r1, r3
 800288c:	4814      	ldr	r0, [pc, #80]	; (80028e0 <HAL_DFSDM_FilterMspInit+0x188>)
 800288e:	f003 fe2b 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80028aa:	2306      	movs	r3, #6
 80028ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028b4:	4619      	mov	r1, r3
 80028b6:	480a      	ldr	r0, [pc, #40]	; (80028e0 <HAL_DFSDM_FilterMspInit+0x188>)
 80028b8:	f003 fe16 	bl	80064e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_DFSDM_FilterMspInit+0x178>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <HAL_DFSDM_FilterMspInit+0x178>)
 80028c4:	6013      	str	r3, [r2, #0]
  }

}
 80028c6:	bf00      	nop
 80028c8:	37e0      	adds	r7, #224	; 0xe0
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	24000ca8 	.word	0x24000ca8
 80028d4:	24000ca4 	.word	0x24000ca4
 80028d8:	58024400 	.word	0x58024400
 80028dc:	58020800 	.word	0x58020800
 80028e0:	58020c00 	.word	0x58020c00

080028e4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0b8      	sub	sp, #224	; 0xe0
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028fc:	f107 0318 	add.w	r3, r7, #24
 8002900:	22b4      	movs	r2, #180	; 0xb4
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f00b f891 	bl	800da2c <memset>
  if(DFSDM1_Init == 0)
 800290a:	4b54      	ldr	r3, [pc, #336]	; (8002a5c <HAL_DFSDM_ChannelMspInit+0x178>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 809f 	bne.w	8002a52 <HAL_DFSDM_ChannelMspInit+0x16e>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002914:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002918:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800291a:	2300      	movs	r3, #0
 800291c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800291e:	f107 0318 	add.w	r3, r7, #24
 8002922:	4618      	mov	r0, r3
 8002924:	f005 f87a 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800292e:	f7ff fdfa 	bl	8002526 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002932:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <HAL_DFSDM_ChannelMspInit+0x17c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	4a49      	ldr	r2, [pc, #292]	; (8002a60 <HAL_DFSDM_ChannelMspInit+0x17c>)
 800293a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800293c:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_DFSDM_ChannelMspInit+0x17c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10e      	bne.n	8002962 <HAL_DFSDM_ChannelMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002944:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800294a:	4a46      	ldr	r2, [pc, #280]	; (8002a64 <HAL_DFSDM_ChannelMspInit+0x180>)
 800294c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002950:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002954:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800295a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002968:	4a3e      	ldr	r2, [pc, #248]	; (8002a64 <HAL_DFSDM_ChannelMspInit+0x180>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002980:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002986:	4a37      	ldr	r2, [pc, #220]	; (8002a64 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> DFSDM1_CKIN6
    PD1     ------> DFSDM1_DATIN6
    PD6     ------> DFSDM1_DATIN1
    PD7     ------> DFSDM1_CKIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800299e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80029b8:	2303      	movs	r3, #3
 80029ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029c2:	4619      	mov	r1, r3
 80029c4:	4828      	ldr	r0, [pc, #160]	; (8002a68 <HAL_DFSDM_ChannelMspInit+0x184>)
 80029c6:	f003 fd8f 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029ca:	2303      	movs	r3, #3
 80029cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80029e2:	2303      	movs	r3, #3
 80029e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ec:	4619      	mov	r1, r3
 80029ee:	481f      	ldr	r0, [pc, #124]	; (8002a6c <HAL_DFSDM_ChannelMspInit+0x188>)
 80029f0:	f003 fd7a 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029f4:	2340      	movs	r3, #64	; 0x40
 80029f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a16:	4619      	mov	r1, r3
 8002a18:	4814      	ldr	r0, [pc, #80]	; (8002a6c <HAL_DFSDM_ChannelMspInit+0x188>)
 8002a1a:	f003 fd65 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002a36:	2306      	movs	r3, #6
 8002a38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a40:	4619      	mov	r1, r3
 8002a42:	480a      	ldr	r0, [pc, #40]	; (8002a6c <HAL_DFSDM_ChannelMspInit+0x188>)
 8002a44:	f003 fd50 	bl	80064e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_DFSDM_ChannelMspInit+0x178>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <HAL_DFSDM_ChannelMspInit+0x178>)
 8002a50:	6013      	str	r3, [r2, #0]
  }

}
 8002a52:	bf00      	nop
 8002a54:	37e0      	adds	r7, #224	; 0xe0
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	24000ca8 	.word	0x24000ca8
 8002a60:	24000ca4 	.word	0x24000ca4
 8002a64:	58024400 	.word	0x58024400
 8002a68:	58020800 	.word	0x58020800
 8002a6c:	58020c00 	.word	0x58020c00

08002a70 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0b6      	sub	sp, #216	; 0xd8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	22b4      	movs	r2, #180	; 0xb4
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f00a ffcb 	bl	800da2c <memset>
  if(hfdcan->Instance==FDCAN1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_FDCAN_MspInit+0xc0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d142      	bne.n	8002b26 <HAL_FDCAN_MspInit+0xb6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aa4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 ffb4 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 8002aba:	f7ff fd34 	bl	8002526 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_FDCAN_MspInit+0xc4>)
 8002ac0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_FDCAN_MspInit+0xc4>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_FDCAN_MspInit+0xc4>)
 8002ad0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <HAL_FDCAN_MspInit+0xc4>)
 8002ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae2:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_FDCAN_MspInit+0xc4>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_FDCAN_MspInit+0xc4>)
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002afa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002afe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002b14:	2309      	movs	r3, #9
 8002b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4805      	ldr	r0, [pc, #20]	; (8002b38 <HAL_FDCAN_MspInit+0xc8>)
 8002b22:	f003 fce1 	bl	80064e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002b26:	bf00      	nop
 8002b28:	37d8      	adds	r7, #216	; 0xd8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	4000a000 	.word	0x4000a000
 8002b34:	58024400 	.word	0x58024400
 8002b38:	58020000 	.word	0x58020000

08002b3c <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0b      	ldr	r2, [pc, #44]	; (8002b78 <HAL_FMAC_MspInit+0x3c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10e      	bne.n	8002b6c <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_FMAC_MspInit+0x40>)
 8002b50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b54:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_FMAC_MspInit+0x40>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_FMAC_MspInit+0x40>)
 8002b60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	48024000 	.word	0x48024000
 8002b7c:	58024400 	.word	0x58024400

08002b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b0b8      	sub	sp, #224	; 0xe0
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b98:	f107 0318 	add.w	r3, r7, #24
 8002b9c:	22b4      	movs	r2, #180	; 0xb4
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f00a ff43 	bl	800da2c <memset>
  if(hi2c->Instance==I2C3)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <HAL_I2C_MspInit+0x108>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d167      	bne.n	8002c80 <HAL_I2C_MspInit+0x100>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bba:	f107 0318 	add.w	r3, r7, #24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 ff2c 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002bca:	f7ff fcac 	bl	8002526 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bce:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <HAL_I2C_MspInit+0x10c>)
 8002bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd4:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <HAL_I2C_MspInit+0x10c>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_I2C_MspInit+0x10c>)
 8002be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bec:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <HAL_I2C_MspInit+0x10c>)
 8002bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf2:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <HAL_I2C_MspInit+0x10c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <HAL_I2C_MspInit+0x10c>)
 8002bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c12:	2312      	movs	r3, #18
 8002c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c24:	2304      	movs	r3, #4
 8002c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4817      	ldr	r0, [pc, #92]	; (8002c90 <HAL_I2C_MspInit+0x110>)
 8002c32:	f003 fc59 	bl	80064e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3e:	2312      	movs	r3, #18
 8002c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c50:	2304      	movs	r3, #4
 8002c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480d      	ldr	r0, [pc, #52]	; (8002c94 <HAL_I2C_MspInit+0x114>)
 8002c5e:	f003 fc43 	bl	80064e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_I2C_MspInit+0x10c>)
 8002c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_I2C_MspInit+0x10c>)
 8002c6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_I2C_MspInit+0x10c>)
 8002c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c80:	bf00      	nop
 8002c82:	37e0      	adds	r7, #224	; 0xe0
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40005c00 	.word	0x40005c00
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	58020800 	.word	0x58020800
 8002c94:	58020000 	.word	0x58020000

08002c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0b6      	sub	sp, #216	; 0xd8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	22b4      	movs	r2, #180	; 0xb4
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f00a feb7 	bl	800da2c <memset>
  if(hspi->Instance==SPI2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <HAL_SPI_MspInit+0xd0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d14b      	bne.n	8002d60 <HAL_SPI_MspInit+0xc8>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ccc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002cce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cd2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd4:	f107 0310 	add.w	r3, r7, #16
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f004 fe9f 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002ce4:	f7ff fc1f 	bl	8002526 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ce8:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_SPI_MspInit+0xd4>)
 8002cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <HAL_SPI_MspInit+0xd4>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <HAL_SPI_MspInit+0xd4>)
 8002cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_SPI_MspInit+0xd4>)
 8002d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_SPI_MspInit+0xd4>)
 8002d0e:	f043 0302 	orr.w	r3, r3, #2
 8002d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_SPI_MspInit+0xd4>)
 8002d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d24:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d3e:	2305      	movs	r3, #5
 8002d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4809      	ldr	r0, [pc, #36]	; (8002d70 <HAL_SPI_MspInit+0xd8>)
 8002d4c:	f003 fbcc 	bl	80064e8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	2024      	movs	r0, #36	; 0x24
 8002d56:	f002 fa89 	bl	800526c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002d5a:	2024      	movs	r0, #36	; 0x24
 8002d5c:	f002 faa0 	bl	80052a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d60:	bf00      	nop
 8002d62:	37d8      	adds	r7, #216	; 0xd8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40003800 	.word	0x40003800
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	58020400 	.word	0x58020400

08002d74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <HAL_TIM_PWM_MspInit+0x48>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d116      	bne.n	8002db4 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_TIM_PWM_MspInit+0x4c>)
 8002d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d8c:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_TIM_PWM_MspInit+0x4c>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_TIM_PWM_MspInit+0x4c>)
 8002d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002da4:	2200      	movs	r2, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	2019      	movs	r0, #25
 8002daa:	f002 fa5f 	bl	800526c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002dae:	2019      	movs	r0, #25
 8002db0:	f002 fa76 	bl	80052a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	58024400 	.word	0x58024400

08002dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_TIM_Base_MspInit+0x84>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d117      	bne.n	8002e06 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_TIM_Base_MspInit+0x88>)
 8002dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <HAL_TIM_Base_MspInit+0x88>)
 8002dde:	f043 0302 	orr.w	r3, r3, #2
 8002de2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002de6:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_TIM_Base_MspInit+0x88>)
 8002de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	201d      	movs	r0, #29
 8002dfa:	f002 fa37 	bl	800526c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dfe:	201d      	movs	r0, #29
 8002e00:	f002 fa4e 	bl	80052a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e04:	e01b      	b.n	8002e3e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <HAL_TIM_Base_MspInit+0x8c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d116      	bne.n	8002e3e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e10:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_TIM_Base_MspInit+0x88>)
 8002e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e16:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <HAL_TIM_Base_MspInit+0x88>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_TIM_Base_MspInit+0x88>)
 8002e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	201e      	movs	r0, #30
 8002e34:	f002 fa1a 	bl	800526c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e38:	201e      	movs	r0, #30
 8002e3a:	f002 fa31 	bl	80052a0 <HAL_NVIC_EnableIRQ>
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	40000800 	.word	0x40000800

08002e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 030c 	add.w	r3, r7, #12
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <HAL_TIM_MspPostInit+0x6c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d11f      	bne.n	8002eb6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_TIM_MspPostInit+0x70>)
 8002e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7c:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_TIM_MspPostInit+0x70>)
 8002e7e:	f043 0310 	orr.w	r3, r3, #16
 8002e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <HAL_TIM_MspPostInit+0x70>)
 8002e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e94:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8002e98:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <HAL_TIM_MspPostInit+0x74>)
 8002eb2:	f003 fb19 	bl	80064e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	58024400 	.word	0x58024400
 8002ec8:	58021000 	.word	0x58021000

08002ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b0b8      	sub	sp, #224	; 0xe0
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	22b4      	movs	r2, #180	; 0xb4
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f00a fd9d 	bl	800da2c <memset>
  if(huart->Instance==USART1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a49      	ldr	r2, [pc, #292]	; (800301c <HAL_UART_MspInit+0x150>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d143      	bne.n	8002f84 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f06:	f107 0318 	add.w	r3, r7, #24
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f004 fd86 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f16:	f7ff fb06 	bl	8002526 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f20:	4a3f      	ldr	r2, [pc, #252]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002f22:	f043 0310 	orr.w	r3, r3, #16
 8002f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3e:	4a38      	ldr	r2, [pc, #224]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f48:	4b35      	ldr	r3, [pc, #212]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f70:	2307      	movs	r3, #7
 8002f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f76:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4829      	ldr	r0, [pc, #164]	; (8003024 <HAL_UART_MspInit+0x158>)
 8002f7e:	f003 fab3 	bl	80064e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f82:	e046      	b.n	8003012 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a27      	ldr	r2, [pc, #156]	; (8003028 <HAL_UART_MspInit+0x15c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d141      	bne.n	8003012 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f98:	f107 0318 	add.w	r3, r7, #24
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 fd3d 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002fa8:	f7ff fabd 	bl	8002526 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fac:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb2:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fbc:	4b18      	ldr	r3, [pc, #96]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd0:	4a13      	ldr	r2, [pc, #76]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_UART_MspInit+0x154>)
 8002fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002fe8:	230e      	movs	r3, #14
 8002fea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003000:	2307      	movs	r3, #7
 8003002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003006:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800300a:	4619      	mov	r1, r3
 800300c:	4805      	ldr	r0, [pc, #20]	; (8003024 <HAL_UART_MspInit+0x158>)
 800300e:	f003 fa6b 	bl	80064e8 <HAL_GPIO_Init>
}
 8003012:	bf00      	nop
 8003014:	37e0      	adds	r7, #224	; 0xe0
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40011000 	.word	0x40011000
 8003020:	58024400 	.word	0x58024400
 8003024:	58020000 	.word	0x58020000
 8003028:	40004400 	.word	0x40004400

0800302c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b090      	sub	sp, #64	; 0x40
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b0f      	cmp	r3, #15
 8003038:	d827      	bhi.n	800308a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 800303a:	2200      	movs	r2, #0
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	201c      	movs	r0, #28
 8003040:	f002 f914 	bl	800526c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003044:	201c      	movs	r0, #28
 8003046:	f002 f92b 	bl	80052a0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800304a:	4a29      	ldr	r2, [pc, #164]	; (80030f0 <HAL_InitTick+0xc4>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_InitTick+0xc8>)
 8003052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003056:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <HAL_InitTick+0xc8>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_InitTick+0xc8>)
 8003062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800306e:	f107 0210 	add.w	r2, r7, #16
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f004 fc8d 	bl	8007998 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <HAL_InitTick+0x6a>
 8003088:	e001      	b.n	800308e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e02c      	b.n	80030e8 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800308e:	f004 fc57 	bl	8007940 <HAL_RCC_GetPCLK1Freq>
 8003092:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003094:	e004      	b.n	80030a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003096:	f004 fc53 	bl	8007940 <HAL_RCC_GetPCLK1Freq>
 800309a:	4603      	mov	r3, r0
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <HAL_InitTick+0xcc>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	0c9b      	lsrs	r3, r3, #18
 80030aa:	3b01      	subs	r3, #1
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_InitTick+0xd0>)
 80030b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_InitTick+0xd0>)
 80030b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030bc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80030be:	4a0f      	ldr	r2, [pc, #60]	; (80030fc <HAL_InitTick+0xd0>)
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80030c4:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <HAL_InitTick+0xd0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_InitTick+0xd0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80030d0:	480a      	ldr	r0, [pc, #40]	; (80030fc <HAL_InitTick+0xd0>)
 80030d2:	f007 feec 	bl	800aeae <HAL_TIM_Base_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80030dc:	4807      	ldr	r0, [pc, #28]	; (80030fc <HAL_InitTick+0xd0>)
 80030de:	f007 ff3d 	bl	800af5c <HAL_TIM_Base_Start_IT>
 80030e2:	4603      	mov	r3, r0
 80030e4:	e000      	b.n	80030e8 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3740      	adds	r7, #64	; 0x40
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	240005b8 	.word	0x240005b8
 80030f4:	58024400 	.word	0x58024400
 80030f8:	431bde83 	.word	0x431bde83
 80030fc:	24000cd0 	.word	0x24000cd0

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003112:	e7fe      	b.n	8003112 <HardFault_Handler+0x4>

08003114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003118:	e7fe      	b.n	8003118 <MemManage_Handler+0x4>

0800311a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800311e:	e7fe      	b.n	800311e <BusFault_Handler+0x4>

08003120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003124:	e7fe      	b.n	8003124 <UsageFault_Handler+0x4>

08003126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	pwm_flag=1;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <TIM1_UP_IRQHandler+0x14>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800316a:	4803      	ldr	r0, [pc, #12]	; (8003178 <TIM1_UP_IRQHandler+0x18>)
 800316c:	f008 f8f0 	bl	800b350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	24000c54 	.word	0x24000c54
 8003178:	24000a50 	.word	0x24000a50

0800317c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003180:	4802      	ldr	r0, [pc, #8]	; (800318c <TIM2_IRQHandler+0x10>)
 8003182:	f008 f8e5 	bl	800b350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	24000cd0 	.word	0x24000cd0

08003190 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003198:	4803      	ldr	r0, [pc, #12]	; (80031a8 <TIM3_IRQHandler+0x18>)
 800319a:	f003 fb66 	bl	800686a <HAL_GPIO_TogglePin>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800319e:	4803      	ldr	r0, [pc, #12]	; (80031ac <TIM3_IRQHandler+0x1c>)
 80031a0:	f008 f8d6 	bl	800b350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	58020800 	.word	0x58020800
 80031ac:	24000a9c 	.word	0x24000a9c

080031b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <TIM4_IRQHandler+0x10>)
 80031b6:	f008 f8cb 	bl	800b350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	24000ae8 	.word	0x24000ae8

080031c4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <SPI2_IRQHandler+0x10>)
 80031ca:	f007 fa51 	bl	800a670 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	240009c8 	.word	0x240009c8

080031d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031dc:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <SystemInit+0xd8>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	4a33      	ldr	r2, [pc, #204]	; (80032b0 <SystemInit+0xd8>)
 80031e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80031ec:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <SystemInit+0xdc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	2b06      	cmp	r3, #6
 80031f6:	d807      	bhi.n	8003208 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80031f8:	4b2e      	ldr	r3, [pc, #184]	; (80032b4 <SystemInit+0xdc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 030f 	bic.w	r3, r3, #15
 8003200:	4a2c      	ldr	r2, [pc, #176]	; (80032b4 <SystemInit+0xdc>)
 8003202:	f043 0307 	orr.w	r3, r3, #7
 8003206:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003208:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <SystemInit+0xe0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <SystemInit+0xe0>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <SystemInit+0xe0>)
 8003216:	2200      	movs	r2, #0
 8003218:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <SystemInit+0xe0>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4926      	ldr	r1, [pc, #152]	; (80032b8 <SystemInit+0xe0>)
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <SystemInit+0xe4>)
 8003222:	4013      	ands	r3, r2
 8003224:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <SystemInit+0xdc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <SystemInit+0xdc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 030f 	bic.w	r3, r3, #15
 800323a:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <SystemInit+0xdc>)
 800323c:	f043 0307 	orr.w	r3, r3, #7
 8003240:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <SystemInit+0xe0>)
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <SystemInit+0xe0>)
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <SystemInit+0xe0>)
 8003250:	2200      	movs	r2, #0
 8003252:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003254:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <SystemInit+0xe0>)
 8003256:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <SystemInit+0xe8>)
 8003258:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <SystemInit+0xe0>)
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <SystemInit+0xec>)
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <SystemInit+0xe0>)
 8003262:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <SystemInit+0xf0>)
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <SystemInit+0xe0>)
 8003268:	2200      	movs	r2, #0
 800326a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <SystemInit+0xe0>)
 800326e:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <SystemInit+0xf0>)
 8003270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <SystemInit+0xe0>)
 8003274:	2200      	movs	r2, #0
 8003276:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <SystemInit+0xe0>)
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <SystemInit+0xf0>)
 800327c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <SystemInit+0xe0>)
 8003280:	2200      	movs	r2, #0
 8003282:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <SystemInit+0xe0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <SystemInit+0xe0>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <SystemInit+0xe0>)
 8003292:	2200      	movs	r2, #0
 8003294:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <SystemInit+0xf4>)
 8003298:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800329c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SystemInit+0xd8>)
 80032a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032a4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00
 80032b4:	52002000 	.word	0x52002000
 80032b8:	58024400 	.word	0x58024400
 80032bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80032c0:	02020200 	.word	0x02020200
 80032c4:	01ff0000 	.word	0x01ff0000
 80032c8:	01010280 	.word	0x01010280
 80032cc:	52004000 	.word	0x52004000

080032d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003308 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032d4:	f7ff ff80 	bl	80031d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032da:	e003      	b.n	80032e4 <LoopCopyDataInit>

080032dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80032de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032e2:	3104      	adds	r1, #4

080032e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032e4:	480a      	ldr	r0, [pc, #40]	; (8003310 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80032e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032ec:	d3f6      	bcc.n	80032dc <CopyDataInit>
  ldr  r2, =_sbss
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80032f0:	e002      	b.n	80032f8 <LoopFillZerobss>

080032f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032f4:	f842 3b04 	str.w	r3, [r2], #4

080032f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80032fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032fc:	d3f9      	bcc.n	80032f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032fe:	f00a fb63 	bl	800d9c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003302:	f7fd fcf9 	bl	8000cf8 <main>
  bx  lr    
 8003306:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003308:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 800330c:	0800db04 	.word	0x0800db04
  ldr  r0, =_sdata
 8003310:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003314:	240005c0 	.word	0x240005c0
  ldr  r2, =_sbss
 8003318:	240005c0 	.word	0x240005c0
  ldr  r3, = _ebss
 800331c:	24000d20 	.word	0x24000d20

08003320 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003320:	e7fe      	b.n	8003320 <ADC3_IRQHandler>
	...

08003324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800332a:	2003      	movs	r0, #3
 800332c:	f001 ff93 	bl	8005256 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003330:	f004 f95c 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_Init+0x68>)
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	4913      	ldr	r1, [pc, #76]	; (8003390 <HAL_Init+0x6c>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
 800334c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_Init+0x68>)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <HAL_Init+0x6c>)
 8003358:	5cd3      	ldrb	r3, [r2, r3]
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <HAL_Init+0x70>)
 8003366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003368:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <HAL_Init+0x74>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800336e:	2000      	movs	r0, #0
 8003370:	f7ff fe5c 	bl	800302c <HAL_InitTick>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e002      	b.n	8003384 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800337e:	f7ff f8d9 	bl	8002534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58024400 	.word	0x58024400
 8003390:	0800dabc 	.word	0x0800dabc
 8003394:	240005b4 	.word	0x240005b4
 8003398:	240005b0 	.word	0x240005b0

0800339c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_IncTick+0x20>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_IncTick+0x24>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <HAL_IncTick+0x24>)
 80033ae:	6013      	str	r3, [r2, #0]
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	240005bc 	.word	0x240005bc
 80033c0:	24000d1c 	.word	0x24000d1c

080033c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return uwTick;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_GetTick+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	24000d1c 	.word	0x24000d1c

080033dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e4:	f7ff ffee 	bl	80033c4 <HAL_GetTick>
 80033e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d005      	beq.n	8003402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_Delay+0x44>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003402:	bf00      	nop
 8003404:	f7ff ffde 	bl	80033c4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	429a      	cmp	r2, r3
 8003412:	d8f7      	bhi.n	8003404 <HAL_Delay+0x28>
  {
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	240005bc 	.word	0x240005bc

08003424 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	4904      	ldr	r1, [pc, #16]	; (800344c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	58000400 	.word	0x58000400

08003450 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3360      	adds	r3, #96	; 0x60
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a10      	ldr	r2, [pc, #64]	; (8003518 <LL_ADC_SetOffset+0x60>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d10b      	bne.n	80034f4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80034f2:	e00b      	b.n	800350c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	430b      	orrs	r3, r1
 8003506:	431a      	orrs	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	58026000 	.word	0x58026000

0800351c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3360      	adds	r3, #96	; 0x60
 800352a:	461a      	mov	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	611a      	str	r2, [r3, #16]
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3360      	adds	r3, #96	; 0x60
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	601a      	str	r2, [r3, #0]
  }
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	58026000 	.word	0x58026000

080035c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <LL_ADC_SetOffsetSaturation+0x40>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10e      	bne.n	80035f2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3360      	adds	r3, #96	; 0x60
 80035d8:	461a      	mov	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	58026000 	.word	0x58026000

08003604 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <LL_ADC_SetOffsetSign+0x40>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d10e      	bne.n	8003636 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3360      	adds	r3, #96	; 0x60
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	431a      	orrs	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	58026000 	.word	0x58026000

08003648 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3360      	adds	r3, #96	; 0x60
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <LL_ADC_SetOffsetState+0x50>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d108      	bne.n	800367c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	431a      	orrs	r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800367a:	e007      	b.n	800368c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	431a      	orrs	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	601a      	str	r2, [r3, #0]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	58026000 	.word	0x58026000

0800369c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3330      	adds	r3, #48	; 0x30
 80036ac:	461a      	mov	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	4413      	add	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	211f      	movs	r1, #31
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	0e9b      	lsrs	r3, r3, #26
 80036d4:	f003 011f 	and.w	r1, r3, #31
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	fa01 f303 	lsl.w	r3, r1, r3
 80036e2:	431a      	orrs	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3314      	adds	r3, #20
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0e5b      	lsrs	r3, r3, #25
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	4413      	add	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	0d1b      	lsrs	r3, r3, #20
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2107      	movs	r1, #7
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	401a      	ands	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	0d1b      	lsrs	r3, r3, #20
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d115      	bne.n	800378c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800376c:	43db      	mvns	r3, r3
 800376e:	401a      	ands	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f003 0318 	and.w	r3, r3, #24
 8003776:	4914      	ldr	r1, [pc, #80]	; (80037c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003778:	40d9      	lsrs	r1, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	400b      	ands	r3, r1
 800377e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800378a:	e014      	b.n	80037b6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003798:	43db      	mvns	r3, r3
 800379a:	401a      	ands	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0318 	and.w	r3, r3, #24
 80037a2:	4909      	ldr	r1, [pc, #36]	; (80037c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80037a4:	40d9      	lsrs	r1, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	400b      	ands	r3, r1
 80037aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ae:	431a      	orrs	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	58026000 	.word	0x58026000
 80037c8:	000fffff 	.word	0x000fffff

080037cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 031f 	and.w	r3, r3, #31
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <LL_ADC_DisableDeepPowerDown+0x20>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6093      	str	r3, [r2, #8]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	5fffffc0 	.word	0x5fffffc0

0800380c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800381c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003820:	d101      	bne.n	8003826 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <LL_ADC_EnableInternalRegulator+0x24>)
 8003842:	4013      	ands	r3, r2
 8003844:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	6fffffc0 	.word	0x6fffffc0

0800385c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003870:	d101      	bne.n	8003876 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <LL_ADC_Enable+0x24>)
 8003892:	4013      	ands	r3, r2
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	7fffffc0 	.word	0x7fffffc0

080038ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <LL_ADC_Disable+0x24>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	f043 0202 	orr.w	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	7fffffc0 	.word	0x7fffffc0

080038d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <LL_ADC_IsEnabled+0x18>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <LL_ADC_IsEnabled+0x1a>
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d101      	bne.n	8003912 <LL_ADC_IsDisableOngoing+0x18>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <LL_ADC_IsDisableOngoing+0x1a>
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <LL_ADC_REG_StartConversion+0x24>)
 800392e:	4013      	ands	r3, r2
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	7fffffc0 	.word	0x7fffffc0

08003948 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b04      	cmp	r3, #4
 800395a:	d101      	bne.n	8003960 <LL_ADC_REG_IsConversionOngoing+0x18>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	d101      	bne.n	8003986 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b089      	sub	sp, #36	; 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e1ee      	b.n	8003d8c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fe fdd3 	bl	8002568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff19 	bl	800380c <LL_ADC_IsDeepPowerDownEnabled>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff feff 	bl	80037e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff34 	bl	800385c <LL_ADC_IsInternalRegulatorEnabled>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d114      	bne.n	8003a24 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ff18 	bl	8003834 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a04:	4b8e      	ldr	r3, [pc, #568]	; (8003c40 <HAL_ADC_Init+0x2ac>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	4a8e      	ldr	r2, [pc, #568]	; (8003c44 <HAL_ADC_Init+0x2b0>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	3301      	adds	r3, #1
 8003a14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a16:	e002      	b.n	8003a1e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f9      	bne.n	8003a18 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff17 	bl	800385c <LL_ADC_IsInternalRegulatorEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a38:	f043 0210 	orr.w	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff ff77 	bl	8003948 <LL_ADC_REG_IsConversionOngoing>
 8003a5a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 8188 	bne.w	8003d7a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 8184 	bne.w	8003d7a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a76:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a7a:	f043 0202 	orr.w	r2, r3, #2
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ff24 	bl	80038d4 <LL_ADC_IsEnabled>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d136      	bne.n	8003b00 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a6c      	ldr	r2, [pc, #432]	; (8003c48 <HAL_ADC_Init+0x2b4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_ADC_Init+0x112>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a6a      	ldr	r2, [pc, #424]	; (8003c4c <HAL_ADC_Init+0x2b8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_ADC_Init+0x130>
 8003aa6:	4868      	ldr	r0, [pc, #416]	; (8003c48 <HAL_ADC_Init+0x2b4>)
 8003aa8:	f7ff ff14 	bl	80038d4 <LL_ADC_IsEnabled>
 8003aac:	4604      	mov	r4, r0
 8003aae:	4867      	ldr	r0, [pc, #412]	; (8003c4c <HAL_ADC_Init+0x2b8>)
 8003ab0:	f7ff ff10 	bl	80038d4 <LL_ADC_IsEnabled>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4323      	orrs	r3, r4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e008      	b.n	8003ad6 <HAL_ADC_Init+0x142>
 8003ac4:	4862      	ldr	r0, [pc, #392]	; (8003c50 <HAL_ADC_Init+0x2bc>)
 8003ac6:	f7ff ff05 	bl	80038d4 <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d012      	beq.n	8003b00 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5a      	ldr	r2, [pc, #360]	; (8003c48 <HAL_ADC_Init+0x2b4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_ADC_Init+0x15a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <HAL_ADC_Init+0x2b8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_Init+0x15e>
 8003aee:	4a59      	ldr	r2, [pc, #356]	; (8003c54 <HAL_ADC_Init+0x2c0>)
 8003af0:	e000      	b.n	8003af4 <HAL_ADC_Init+0x160>
 8003af2:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <HAL_ADC_Init+0x2c4>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f7ff fca8 	bl	8003450 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a52      	ldr	r2, [pc, #328]	; (8003c50 <HAL_ADC_Init+0x2bc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d129      	bne.n	8003b5e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7e5b      	ldrb	r3, [r3, #25]
 8003b0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b14:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003b1a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d013      	beq.n	8003b4c <HAL_ADC_Init+0x1b8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b0c      	cmp	r3, #12
 8003b2a:	d00d      	beq.n	8003b48 <HAL_ADC_Init+0x1b4>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b1c      	cmp	r3, #28
 8003b32:	d007      	beq.n	8003b44 <HAL_ADC_Init+0x1b0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b18      	cmp	r3, #24
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_Init+0x1ac>
 8003b3c:	2318      	movs	r3, #24
 8003b3e:	e006      	b.n	8003b4e <HAL_ADC_Init+0x1ba>
 8003b40:	2300      	movs	r3, #0
 8003b42:	e004      	b.n	8003b4e <HAL_ADC_Init+0x1ba>
 8003b44:	2310      	movs	r3, #16
 8003b46:	e002      	b.n	8003b4e <HAL_ADC_Init+0x1ba>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	e000      	b.n	8003b4e <HAL_ADC_Init+0x1ba>
 8003b4c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003b4e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b56:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	e00e      	b.n	8003b7c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7e5b      	ldrb	r3, [r3, #25]
 8003b62:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b68:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d106      	bne.n	8003b94 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	045b      	lsls	r3, r3, #17
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d009      	beq.n	8003bb0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a26      	ldr	r2, [pc, #152]	; (8003c50 <HAL_ADC_Init+0x2bc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d115      	bne.n	8003be6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <HAL_ADC_Init+0x2c8>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	69b9      	ldr	r1, [r7, #24]
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	611a      	str	r2, [r3, #16]
 8003be4:	e009      	b.n	8003bfa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_ADC_Init+0x2cc>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	69b9      	ldr	r1, [r7, #24]
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fea2 	bl	8003948 <LL_ADC_REG_IsConversionOngoing>
 8003c04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff feaf 	bl	800396e <LL_ADC_INJ_IsConversionOngoing>
 8003c10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f040 808e 	bne.w	8003d36 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 808a 	bne.w	8003d36 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <HAL_ADC_Init+0x2bc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d11b      	bne.n	8003c64 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7e1b      	ldrb	r3, [r3, #24]
 8003c30:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c38:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e018      	b.n	8003c72 <HAL_ADC_Init+0x2de>
 8003c40:	240005b0 	.word	0x240005b0
 8003c44:	053e2d63 	.word	0x053e2d63
 8003c48:	40022000 	.word	0x40022000
 8003c4c:	40022100 	.word	0x40022100
 8003c50:	58026000 	.word	0x58026000
 8003c54:	40022300 	.word	0x40022300
 8003c58:	58026300 	.word	0x58026300
 8003c5c:	fff04007 	.word	0xfff04007
 8003c60:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7e1b      	ldrb	r3, [r3, #24]
 8003c68:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <HAL_ADC_Init+0x400>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	430b      	orrs	r3, r1
 8003c84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d137      	bne.n	8003d00 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3f      	ldr	r2, [pc, #252]	; (8003d98 <HAL_ADC_Init+0x404>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d116      	bne.n	8003cce <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	4b3d      	ldr	r3, [pc, #244]	; (8003d9c <HAL_ADC_Init+0x408>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cb8:	4311      	orrs	r1, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	611a      	str	r2, [r3, #16]
 8003ccc:	e020      	b.n	8003d10 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	4b32      	ldr	r3, [pc, #200]	; (8003da0 <HAL_ADC_Init+0x40c>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	0411      	lsls	r1, r2, #16
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	611a      	str	r2, [r3, #16]
 8003cfe:	e007      	b.n	8003d10 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_ADC_Init+0x404>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d002      	beq.n	8003d36 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 ff25 	bl	8004b80 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d10c      	bne.n	8003d58 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	f023 010f 	bic.w	r1, r3, #15
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	1e5a      	subs	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
 8003d56:	e007      	b.n	8003d68 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 020f 	bic.w	r2, r2, #15
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6c:	f023 0303 	bic.w	r3, r3, #3
 8003d70:	f043 0201 	orr.w	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	661a      	str	r2, [r3, #96]	; 0x60
 8003d78:	e007      	b.n	8003d8a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7e:	f043 0210 	orr.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3724      	adds	r7, #36	; 0x24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}
 8003d94:	ffffbffc 	.word	0xffffbffc
 8003d98:	58026000 	.word	0x58026000
 8003d9c:	fc00f81f 	.word	0xfc00f81f
 8003da0:	fc00f81e 	.word	0xfc00f81e

08003da4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5c      	ldr	r2, [pc, #368]	; (8003f24 <HAL_ADC_Start+0x180>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_ADC_Start+0x1c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a5b      	ldr	r2, [pc, #364]	; (8003f28 <HAL_ADC_Start+0x184>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <HAL_ADC_Start+0x20>
 8003dc0:	4b5a      	ldr	r3, [pc, #360]	; (8003f2c <HAL_ADC_Start+0x188>)
 8003dc2:	e000      	b.n	8003dc6 <HAL_ADC_Start+0x22>
 8003dc4:	4b5a      	ldr	r3, [pc, #360]	; (8003f30 <HAL_ADC_Start+0x18c>)
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fd00 	bl	80037cc <LL_ADC_GetMultimode>
 8003dcc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fdb8 	bl	8003948 <LL_ADC_REG_IsConversionOngoing>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 809a 	bne.w	8003f14 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_Start+0x4a>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e095      	b.n	8003f1a <HAL_ADC_Start+0x176>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fdd8 	bl	80049ac <ADC_Enable>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 8081 	bne.w	8003f0a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e0c:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <HAL_ADC_Start+0x190>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a42      	ldr	r2, [pc, #264]	; (8003f28 <HAL_ADC_Start+0x184>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d002      	beq.n	8003e28 <HAL_ADC_Start+0x84>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	e000      	b.n	8003e2a <HAL_ADC_Start+0x86>
 8003e28:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <HAL_ADC_Start+0x180>)
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d002      	beq.n	8003e38 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e50:	d106      	bne.n	8003e60 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e56:	f023 0206 	bic.w	r2, r3, #6
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	665a      	str	r2, [r3, #100]	; 0x64
 8003e5e:	e002      	b.n	8003e66 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	221c      	movs	r2, #28
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <HAL_ADC_Start+0x184>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d002      	beq.n	8003e86 <HAL_ADC_Start+0xe2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	e000      	b.n	8003e88 <HAL_ADC_Start+0xe4>
 8003e86:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <HAL_ADC_Start+0x180>)
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d008      	beq.n	8003ea2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d002      	beq.n	8003ea2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d114      	bne.n	8003ecc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fd2b 	bl	8003920 <LL_ADC_REG_StartConversion>
 8003eca:	e025      	b.n	8003f18 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <HAL_ADC_Start+0x184>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d002      	beq.n	8003ee8 <HAL_ADC_Start+0x144>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	e000      	b.n	8003eea <HAL_ADC_Start+0x146>
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_ADC_Start+0x180>)
 8003eea:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00f      	beq.n	8003f18 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	661a      	str	r2, [r3, #96]	; 0x60
 8003f08:	e006      	b.n	8003f18 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003f12:	e001      	b.n	8003f18 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
 8003f16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40022000 	.word	0x40022000
 8003f28:	40022100 	.word	0x40022100
 8003f2c:	40022300 	.word	0x40022300
 8003f30:	58026300 	.word	0x58026300
 8003f34:	fffff0fe 	.word	0xfffff0fe

08003f38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b0b9      	sub	sp, #228	; 0xe4
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f6e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4ab3      	ldr	r2, [pc, #716]	; (8004244 <HAL_ADC_ConfigChannel+0x2f0>)
 8003f76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d102      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x34>
 8003f82:	2302      	movs	r3, #2
 8003f84:	f000 bcfa 	b.w	800497c <HAL_ADC_ConfigChannel+0xa28>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fcd7 	bl	8003948 <LL_ADC_REG_IsConversionOngoing>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f040 84de 	bne.w	800495e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4aa8      	ldr	r2, [pc, #672]	; (8004248 <HAL_ADC_ConfigChannel+0x2f4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d033      	beq.n	8004014 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d108      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x76>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0e9b      	lsrs	r3, r3, #26
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	e01d      	b.n	8004006 <HAL_ADC_ConfigChannel+0xb2>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	e004      	b.n	8003ffc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2201      	movs	r2, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	69d1      	ldr	r1, [r2, #28]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	430b      	orrs	r3, r1
 8004012:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	f7ff fb3b 	bl	800369c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fc8c 	bl	8003948 <LL_ADC_REG_IsConversionOngoing>
 8004030:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fc98 	bl	800396e <LL_ADC_INJ_IsConversionOngoing>
 800403e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004046:	2b00      	cmp	r3, #0
 8004048:	f040 8270 	bne.w	800452c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800404c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004050:	2b00      	cmp	r3, #0
 8004052:	f040 826b 	bne.w	800452c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	461a      	mov	r2, r3
 8004064:	f7ff fb46 	bl	80036f4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a76      	ldr	r2, [pc, #472]	; (8004248 <HAL_ADC_ConfigChannel+0x2f4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10d      	bne.n	800408e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800408c:	e032      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800408e:	4b6f      	ldr	r3, [pc, #444]	; (800424c <HAL_ADC_ConfigChannel+0x2f8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800409a:	d10b      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x160>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	e01d      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x19c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_ADC_ConfigChannel+0x186>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	089b      	lsrs	r3, r3, #2
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	e00a      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x19c>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d048      	beq.n	800418e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6919      	ldr	r1, [r3, #16]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800410c:	f7ff f9d4 	bl	80034b8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a4c      	ldr	r2, [pc, #304]	; (8004248 <HAL_ADC_ConfigChannel+0x2f4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d119      	bne.n	800414e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6919      	ldr	r1, [r3, #16]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	461a      	mov	r2, r3
 8004128:	f7ff fa6c 	bl	8003604 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6919      	ldr	r1, [r3, #16]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d102      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x1f0>
 800413e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004142:	e000      	b.n	8004146 <HAL_ADC_ConfigChannel+0x1f2>
 8004144:	2300      	movs	r3, #0
 8004146:	461a      	mov	r2, r3
 8004148:	f7ff fa3a 	bl	80035c0 <LL_ADC_SetOffsetSaturation>
 800414c:	e1ee      	b.n	800452c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6919      	ldr	r1, [r3, #16]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800415c:	2b01      	cmp	r3, #1
 800415e:	d102      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x212>
 8004160:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004164:	e000      	b.n	8004168 <HAL_ADC_ConfigChannel+0x214>
 8004166:	2300      	movs	r3, #0
 8004168:	461a      	mov	r2, r3
 800416a:	f7ff fa07 	bl	800357c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6919      	ldr	r1, [r3, #16]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	7e1b      	ldrb	r3, [r3, #24]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d102      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x230>
 800417e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004182:	e000      	b.n	8004186 <HAL_ADC_ConfigChannel+0x232>
 8004184:	2300      	movs	r3, #0
 8004186:	461a      	mov	r2, r3
 8004188:	f7ff f9de 	bl	8003548 <LL_ADC_SetDataRightShift>
 800418c:	e1ce      	b.n	800452c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <HAL_ADC_ConfigChannel+0x2f4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	f040 8181 	bne.w	800449c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff f9bb 	bl	800351c <LL_ADC_GetOffsetChannel>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x272>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2100      	movs	r1, #0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff f9b0 	bl	800351c <LL_ADC_GetOffsetChannel>
 80041bc:	4603      	mov	r3, r0
 80041be:	0e9b      	lsrs	r3, r3, #26
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	e01e      	b.n	8004204 <HAL_ADC_ConfigChannel+0x2b0>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff f9a5 	bl	800351c <LL_ADC_GetOffsetChannel>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80041e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80041ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80041f4:	2320      	movs	r3, #32
 80041f6:	e004      	b.n	8004202 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80041f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041fc:	fab3 f383 	clz	r3, r3
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <HAL_ADC_ConfigChannel+0x2c8>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	0e9b      	lsrs	r3, r3, #26
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	e01e      	b.n	800425a <HAL_ADC_ConfigChannel+0x306>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d107      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004240:	2320      	movs	r3, #32
 8004242:	e00a      	b.n	800425a <HAL_ADC_ConfigChannel+0x306>
 8004244:	47ff0000 	.word	0x47ff0000
 8004248:	58026000 	.word	0x58026000
 800424c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8004250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	429a      	cmp	r2, r3
 800425c:	d106      	bne.n	800426c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	2100      	movs	r1, #0
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff f9ee 	bl	8003648 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff f952 	bl	800351c <LL_ADC_GetOffsetChannel>
 8004278:	4603      	mov	r3, r0
 800427a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x344>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2101      	movs	r1, #1
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff f947 	bl	800351c <LL_ADC_GetOffsetChannel>
 800428e:	4603      	mov	r3, r0
 8004290:	0e9b      	lsrs	r3, r3, #26
 8004292:	f003 021f 	and.w	r2, r3, #31
 8004296:	e01e      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x382>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2101      	movs	r1, #1
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff f93c 	bl	800351c <LL_ADC_GetOffsetChannel>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80042b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80042be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80042c6:	2320      	movs	r3, #32
 80042c8:	e004      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80042ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d105      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x39a>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	0e9b      	lsrs	r3, r3, #26
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	e018      	b.n	8004320 <HAL_ADC_ConfigChannel+0x3cc>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004302:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004306:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800430a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004312:	2320      	movs	r3, #32
 8004314:	e004      	b.n	8004320 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	429a      	cmp	r2, r3
 8004322:	d106      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff f98b 	bl	8003648 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2102      	movs	r1, #2
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f8ef 	bl	800351c <LL_ADC_GetOffsetChannel>
 800433e:	4603      	mov	r3, r0
 8004340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <HAL_ADC_ConfigChannel+0x40a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2102      	movs	r1, #2
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff f8e4 	bl	800351c <LL_ADC_GetOffsetChannel>
 8004354:	4603      	mov	r3, r0
 8004356:	0e9b      	lsrs	r3, r3, #26
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	e01e      	b.n	800439c <HAL_ADC_ConfigChannel+0x448>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff f8d9 	bl	800351c <LL_ADC_GetOffsetChannel>
 800436a:	4603      	mov	r3, r0
 800436c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800437c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800438c:	2320      	movs	r3, #32
 800438e:	e004      	b.n	800439a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x460>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	0e9b      	lsrs	r3, r3, #26
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	e014      	b.n	80043de <HAL_ADC_ConfigChannel+0x48a>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80043c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80043c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80043d0:	2320      	movs	r3, #32
 80043d2:	e004      	b.n	80043de <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80043d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043d8:	fab3 f383 	clz	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	429a      	cmp	r2, r3
 80043e0:	d106      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2200      	movs	r2, #0
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff f92c 	bl	8003648 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2103      	movs	r1, #3
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff f890 	bl	800351c <LL_ADC_GetOffsetChannel>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_ADC_ConfigChannel+0x4c8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2103      	movs	r1, #3
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff f885 	bl	800351c <LL_ADC_GetOffsetChannel>
 8004412:	4603      	mov	r3, r0
 8004414:	0e9b      	lsrs	r3, r3, #26
 8004416:	f003 021f 	and.w	r2, r3, #31
 800441a:	e017      	b.n	800444c <HAL_ADC_ConfigChannel+0x4f8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2103      	movs	r1, #3
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff f87a 	bl	800351c <LL_ADC_GetOffsetChannel>
 8004428:	4603      	mov	r3, r0
 800442a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004436:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800443e:	2320      	movs	r3, #32
 8004440:	e003      	b.n	800444a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004454:	2b00      	cmp	r3, #0
 8004456:	d105      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x510>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	0e9b      	lsrs	r3, r3, #26
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	e011      	b.n	8004488 <HAL_ADC_ConfigChannel+0x534>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004474:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800447c:	2320      	movs	r3, #32
 800447e:	e003      	b.n	8004488 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004482:	fab3 f383 	clz	r3, r3
 8004486:	b2db      	uxtb	r3, r3
 8004488:	429a      	cmp	r2, r3
 800448a:	d14f      	bne.n	800452c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	2103      	movs	r1, #3
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff f8d7 	bl	8003648 <LL_ADC_SetOffsetState>
 800449a:	e047      	b.n	800452c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	069b      	lsls	r3, r3, #26
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d107      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044be:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	069b      	lsls	r3, r3, #26
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d107      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044e2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	069b      	lsls	r3, r3, #26
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d107      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004506:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	069b      	lsls	r3, r3, #26
 8004518:	429a      	cmp	r2, r3
 800451a:	d107      	bne.n	800452c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800452a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff f9cf 	bl	80038d4 <LL_ADC_IsEnabled>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 8219 	bne.w	8004970 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6819      	ldr	r1, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	461a      	mov	r2, r3
 800454c:	f7ff f8fe 	bl	800374c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4aa1      	ldr	r2, [pc, #644]	; (80047dc <HAL_ADC_ConfigChannel+0x888>)
 8004556:	4293      	cmp	r3, r2
 8004558:	f040 812e 	bne.w	80047b8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10b      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x630>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0e9b      	lsrs	r3, r3, #26
 8004572:	3301      	adds	r3, #1
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	2b09      	cmp	r3, #9
 800457a:	bf94      	ite	ls
 800457c:	2301      	movls	r3, #1
 800457e:	2300      	movhi	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e019      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x664>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004594:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800459c:	2320      	movs	r3, #32
 800459e:	e003      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80045a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	2b09      	cmp	r3, #9
 80045b0:	bf94      	ite	ls
 80045b2:	2301      	movls	r3, #1
 80045b4:	2300      	movhi	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d079      	beq.n	80046b0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x684>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0e9b      	lsrs	r3, r3, #26
 80045ce:	3301      	adds	r3, #1
 80045d0:	069b      	lsls	r3, r3, #26
 80045d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045d6:	e015      	b.n	8004604 <HAL_ADC_ConfigChannel+0x6b0>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e0:	fa93 f3a3 	rbit	r3, r3
 80045e4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80045e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80045ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80045f0:	2320      	movs	r3, #32
 80045f2:	e003      	b.n	80045fc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80045f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f6:	fab3 f383 	clz	r3, r3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	3301      	adds	r3, #1
 80045fe:	069b      	lsls	r3, r3, #26
 8004600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x6d0>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0e9b      	lsrs	r3, r3, #26
 8004616:	3301      	adds	r3, #1
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	2101      	movs	r1, #1
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	e017      	b.n	8004654 <HAL_ADC_ConfigChannel+0x700>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004634:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800463c:	2320      	movs	r3, #32
 800463e:	e003      	b.n	8004648 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	3301      	adds	r3, #1
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	ea42 0103 	orr.w	r1, r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <HAL_ADC_ConfigChannel+0x726>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	0e9b      	lsrs	r3, r3, #26
 800466a:	3301      	adds	r3, #1
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	4613      	mov	r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	4413      	add	r3, r2
 8004676:	051b      	lsls	r3, r3, #20
 8004678:	e018      	b.n	80046ac <HAL_ADC_ConfigChannel+0x758>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004692:	2320      	movs	r3, #32
 8004694:	e003      	b.n	800469e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	3301      	adds	r3, #1
 80046a0:	f003 021f 	and.w	r2, r3, #31
 80046a4:	4613      	mov	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4413      	add	r3, r2
 80046aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ac:	430b      	orrs	r3, r1
 80046ae:	e07e      	b.n	80047ae <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d107      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x778>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	0e9b      	lsrs	r3, r3, #26
 80046c2:	3301      	adds	r3, #1
 80046c4:	069b      	lsls	r3, r3, #26
 80046c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ca:	e015      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x7a4>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	fa93 f3a3 	rbit	r3, r3
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80046e4:	2320      	movs	r3, #32
 80046e6:	e003      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	fab3 f383 	clz	r3, r3
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	3301      	adds	r3, #1
 80046f2:	069b      	lsls	r3, r3, #26
 80046f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x7c4>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	0e9b      	lsrs	r3, r3, #26
 800470a:	3301      	adds	r3, #1
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	2101      	movs	r1, #1
 8004712:	fa01 f303 	lsl.w	r3, r1, r3
 8004716:	e017      	b.n	8004748 <HAL_ADC_ConfigChannel+0x7f4>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa93 f3a3 	rbit	r3, r3
 8004724:	61bb      	str	r3, [r7, #24]
  return result;
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004730:	2320      	movs	r3, #32
 8004732:	e003      	b.n	800473c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	3301      	adds	r3, #1
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	2101      	movs	r1, #1
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	ea42 0103 	orr.w	r1, r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10d      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x820>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	0e9b      	lsrs	r3, r3, #26
 800475e:	3301      	adds	r3, #1
 8004760:	f003 021f 	and.w	r2, r3, #31
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	3b1e      	subs	r3, #30
 800476c:	051b      	lsls	r3, r3, #20
 800476e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004772:	e01b      	b.n	80047ac <HAL_ADC_ConfigChannel+0x858>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	60fb      	str	r3, [r7, #12]
  return result;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800478c:	2320      	movs	r3, #32
 800478e:	e003      	b.n	8004798 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	3301      	adds	r3, #1
 800479a:	f003 021f 	and.w	r2, r3, #31
 800479e:	4613      	mov	r3, r2
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	4413      	add	r3, r2
 80047a4:	3b1e      	subs	r3, #30
 80047a6:	051b      	lsls	r3, r3, #20
 80047a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047ac:	430b      	orrs	r3, r1
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	6892      	ldr	r2, [r2, #8]
 80047b2:	4619      	mov	r1, r3
 80047b4:	f7fe ff9e 	bl	80036f4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f280 80d7 	bge.w	8004970 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a06      	ldr	r2, [pc, #24]	; (80047e0 <HAL_ADC_ConfigChannel+0x88c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_ADC_ConfigChannel+0x882>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <HAL_ADC_ConfigChannel+0x890>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10a      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x898>
 80047d6:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <HAL_ADC_ConfigChannel+0x894>)
 80047d8:	e009      	b.n	80047ee <HAL_ADC_ConfigChannel+0x89a>
 80047da:	bf00      	nop
 80047dc:	47ff0000 	.word	0x47ff0000
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40022100 	.word	0x40022100
 80047e8:	40022300 	.word	0x40022300
 80047ec:	4b65      	ldr	r3, [pc, #404]	; (8004984 <HAL_ADC_ConfigChannel+0xa30>)
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fe54 	bl	800349c <LL_ADC_GetCommonPathInternalCh>
 80047f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a62      	ldr	r2, [pc, #392]	; (8004988 <HAL_ADC_ConfigChannel+0xa34>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_ADC_ConfigChannel+0x8b8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a61      	ldr	r2, [pc, #388]	; (800498c <HAL_ADC_ConfigChannel+0xa38>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10e      	bne.n	800482a <HAL_ADC_ConfigChannel+0x8d6>
 800480c:	485e      	ldr	r0, [pc, #376]	; (8004988 <HAL_ADC_ConfigChannel+0xa34>)
 800480e:	f7ff f861 	bl	80038d4 <LL_ADC_IsEnabled>
 8004812:	4604      	mov	r4, r0
 8004814:	485d      	ldr	r0, [pc, #372]	; (800498c <HAL_ADC_ConfigChannel+0xa38>)
 8004816:	f7ff f85d 	bl	80038d4 <LL_ADC_IsEnabled>
 800481a:	4603      	mov	r3, r0
 800481c:	4323      	orrs	r3, r4
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	e008      	b.n	800483c <HAL_ADC_ConfigChannel+0x8e8>
 800482a:	4859      	ldr	r0, [pc, #356]	; (8004990 <HAL_ADC_ConfigChannel+0xa3c>)
 800482c:	f7ff f852 	bl	80038d4 <LL_ADC_IsEnabled>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8084 	beq.w	800494a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a53      	ldr	r2, [pc, #332]	; (8004994 <HAL_ADC_ConfigChannel+0xa40>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d132      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x95e>
 800484c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d12c      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a4c      	ldr	r2, [pc, #304]	; (8004990 <HAL_ADC_ConfigChannel+0xa3c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	f040 8086 	bne.w	8004970 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a47      	ldr	r2, [pc, #284]	; (8004988 <HAL_ADC_ConfigChannel+0xa34>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_ADC_ConfigChannel+0x924>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a46      	ldr	r2, [pc, #280]	; (800498c <HAL_ADC_ConfigChannel+0xa38>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d101      	bne.n	800487c <HAL_ADC_ConfigChannel+0x928>
 8004878:	4a47      	ldr	r2, [pc, #284]	; (8004998 <HAL_ADC_ConfigChannel+0xa44>)
 800487a:	e000      	b.n	800487e <HAL_ADC_ConfigChannel+0x92a>
 800487c:	4a41      	ldr	r2, [pc, #260]	; (8004984 <HAL_ADC_ConfigChannel+0xa30>)
 800487e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004882:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f7fe fdf4 	bl	8003476 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800488e:	4b43      	ldr	r3, [pc, #268]	; (800499c <HAL_ADC_ConfigChannel+0xa48>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	099b      	lsrs	r3, r3, #6
 8004894:	4a42      	ldr	r2, [pc, #264]	; (80049a0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	099b      	lsrs	r3, r3, #6
 800489c:	3301      	adds	r3, #1
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80048a2:	e002      	b.n	80048aa <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f9      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048b0:	e05e      	b.n	8004970 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3b      	ldr	r2, [pc, #236]	; (80049a4 <HAL_ADC_ConfigChannel+0xa50>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d120      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x9aa>
 80048bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d11a      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a30      	ldr	r2, [pc, #192]	; (8004990 <HAL_ADC_ConfigChannel+0xa3c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d14e      	bne.n	8004970 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2c      	ldr	r2, [pc, #176]	; (8004988 <HAL_ADC_ConfigChannel+0xa34>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_ADC_ConfigChannel+0x992>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2a      	ldr	r2, [pc, #168]	; (800498c <HAL_ADC_ConfigChannel+0xa38>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x996>
 80048e6:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <HAL_ADC_ConfigChannel+0xa44>)
 80048e8:	e000      	b.n	80048ec <HAL_ADC_ConfigChannel+0x998>
 80048ea:	4a26      	ldr	r2, [pc, #152]	; (8004984 <HAL_ADC_ConfigChannel+0xa30>)
 80048ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7fe fdbd 	bl	8003476 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048fc:	e038      	b.n	8004970 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <HAL_ADC_ConfigChannel+0xa54>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d133      	bne.n	8004970 <HAL_ADC_ConfigChannel+0xa1c>
 8004908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800490c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d12d      	bne.n	8004970 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <HAL_ADC_ConfigChannel+0xa3c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d128      	bne.n	8004970 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a19      	ldr	r2, [pc, #100]	; (8004988 <HAL_ADC_ConfigChannel+0xa34>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_ADC_ConfigChannel+0x9de>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a17      	ldr	r2, [pc, #92]	; (800498c <HAL_ADC_ConfigChannel+0xa38>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d101      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x9e2>
 8004932:	4a19      	ldr	r2, [pc, #100]	; (8004998 <HAL_ADC_ConfigChannel+0xa44>)
 8004934:	e000      	b.n	8004938 <HAL_ADC_ConfigChannel+0x9e4>
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <HAL_ADC_ConfigChannel+0xa30>)
 8004938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800493c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fe fd97 	bl	8003476 <LL_ADC_SetCommonPathInternalCh>
 8004948:	e012      	b.n	8004970 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800495c:	e008      	b.n	8004970 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004978:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800497c:	4618      	mov	r0, r3
 800497e:	37e4      	adds	r7, #228	; 0xe4
 8004980:	46bd      	mov	sp, r7
 8004982:	bd90      	pop	{r4, r7, pc}
 8004984:	58026300 	.word	0x58026300
 8004988:	40022000 	.word	0x40022000
 800498c:	40022100 	.word	0x40022100
 8004990:	58026000 	.word	0x58026000
 8004994:	c7520000 	.word	0xc7520000
 8004998:	40022300 	.word	0x40022300
 800499c:	240005b0 	.word	0x240005b0
 80049a0:	053e2d63 	.word	0x053e2d63
 80049a4:	c3210000 	.word	0xc3210000
 80049a8:	cb840000 	.word	0xcb840000

080049ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe ff8b 	bl	80038d4 <LL_ADC_IsEnabled>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d16e      	bne.n	8004aa2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	4b38      	ldr	r3, [pc, #224]	; (8004aac <ADC_Enable+0x100>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d6:	f043 0210 	orr.w	r2, r3, #16
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e2:	f043 0201 	orr.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e05a      	b.n	8004aa4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe ff46 	bl	8003884 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049f8:	f7fe fce4 	bl	80033c4 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2b      	ldr	r2, [pc, #172]	; (8004ab0 <ADC_Enable+0x104>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <ADC_Enable+0x66>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <ADC_Enable+0x108>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <ADC_Enable+0x6a>
 8004a12:	4b29      	ldr	r3, [pc, #164]	; (8004ab8 <ADC_Enable+0x10c>)
 8004a14:	e000      	b.n	8004a18 <ADC_Enable+0x6c>
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <ADC_Enable+0x110>)
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe fed7 	bl	80037cc <LL_ADC_GetMultimode>
 8004a1e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a23      	ldr	r2, [pc, #140]	; (8004ab4 <ADC_Enable+0x108>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d002      	beq.n	8004a30 <ADC_Enable+0x84>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	e000      	b.n	8004a32 <ADC_Enable+0x86>
 8004a30:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <ADC_Enable+0x104>)
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d02c      	beq.n	8004a94 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d130      	bne.n	8004aa2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a40:	e028      	b.n	8004a94 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe ff44 	bl	80038d4 <LL_ADC_IsEnabled>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe ff14 	bl	8003884 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a5c:	f7fe fcb2 	bl	80033c4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d914      	bls.n	8004a94 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d00d      	beq.n	8004a94 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7c:	f043 0210 	orr.w	r2, r3, #16
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a88:	f043 0201 	orr.w	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e007      	b.n	8004aa4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d1cf      	bne.n	8004a42 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	8000003f 	.word	0x8000003f
 8004ab0:	40022000 	.word	0x40022000
 8004ab4:	40022100 	.word	0x40022100
 8004ab8:	40022300 	.word	0x40022300
 8004abc:	58026300 	.word	0x58026300

08004ac0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe ff14 	bl	80038fa <LL_ADC_IsDisableOngoing>
 8004ad2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fe fefb 	bl	80038d4 <LL_ADC_IsEnabled>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d047      	beq.n	8004b74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d144      	bne.n	8004b74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030d 	and.w	r3, r3, #13
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10c      	bne.n	8004b12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fed5 	bl	80038ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2203      	movs	r2, #3
 8004b08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b0a:	f7fe fc5b 	bl	80033c4 <HAL_GetTick>
 8004b0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b10:	e029      	b.n	8004b66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	f043 0210 	orr.w	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b22:	f043 0201 	orr.w	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e023      	b.n	8004b76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b2e:	f7fe fc49 	bl	80033c4 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d914      	bls.n	8004b66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4e:	f043 0210 	orr.w	r2, r3, #16
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b5a:	f043 0201 	orr.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e007      	b.n	8004b76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1dc      	bne.n	8004b2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a6b      	ldr	r2, [pc, #428]	; (8004d3c <ADC_ConfigureBoostMode+0x1bc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <ADC_ConfigureBoostMode+0x1c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a6a      	ldr	r2, [pc, #424]	; (8004d40 <ADC_ConfigureBoostMode+0x1c0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d109      	bne.n	8004bb0 <ADC_ConfigureBoostMode+0x30>
 8004b9c:	4b69      	ldr	r3, [pc, #420]	; (8004d44 <ADC_ConfigureBoostMode+0x1c4>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e008      	b.n	8004bc2 <ADC_ConfigureBoostMode+0x42>
 8004bb0:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <ADC_ConfigureBoostMode+0x1c8>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01c      	beq.n	8004c00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004bc6:	f002 fe8b 	bl	80078e0 <HAL_RCC_GetHCLKFreq>
 8004bca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bd4:	d010      	beq.n	8004bf8 <ADC_ConfigureBoostMode+0x78>
 8004bd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bda:	d871      	bhi.n	8004cc0 <ADC_ConfigureBoostMode+0x140>
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d002      	beq.n	8004be8 <ADC_ConfigureBoostMode+0x68>
 8004be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be6:	d16b      	bne.n	8004cc0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf4:	60fb      	str	r3, [r7, #12]
        break;
 8004bf6:	e066      	b.n	8004cc6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	089b      	lsrs	r3, r3, #2
 8004bfc:	60fb      	str	r3, [r7, #12]
        break;
 8004bfe:	e062      	b.n	8004cc6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004c00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004c04:	f003 fe04 	bl	8008810 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c08:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c12:	d051      	beq.n	8004cb8 <ADC_ConfigureBoostMode+0x138>
 8004c14:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c18:	d854      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
 8004c1a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c1e:	d047      	beq.n	8004cb0 <ADC_ConfigureBoostMode+0x130>
 8004c20:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c24:	d84e      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
 8004c26:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c2a:	d03d      	beq.n	8004ca8 <ADC_ConfigureBoostMode+0x128>
 8004c2c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c30:	d848      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
 8004c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c36:	d033      	beq.n	8004ca0 <ADC_ConfigureBoostMode+0x120>
 8004c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c3c:	d842      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
 8004c3e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c42:	d029      	beq.n	8004c98 <ADC_ConfigureBoostMode+0x118>
 8004c44:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c48:	d83c      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
 8004c4a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c4e:	d01a      	beq.n	8004c86 <ADC_ConfigureBoostMode+0x106>
 8004c50:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c54:	d836      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
 8004c56:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c5a:	d014      	beq.n	8004c86 <ADC_ConfigureBoostMode+0x106>
 8004c5c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c60:	d830      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
 8004c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c66:	d00e      	beq.n	8004c86 <ADC_ConfigureBoostMode+0x106>
 8004c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c6c:	d82a      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
 8004c6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c72:	d008      	beq.n	8004c86 <ADC_ConfigureBoostMode+0x106>
 8004c74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c78:	d824      	bhi.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
 8004c7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c7e:	d002      	beq.n	8004c86 <ADC_ConfigureBoostMode+0x106>
 8004c80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c84:	d11e      	bne.n	8004cc4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	0c9b      	lsrs	r3, r3, #18
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	60fb      	str	r3, [r7, #12]
        break;
 8004c96:	e016      	b.n	8004cc6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	60fb      	str	r3, [r7, #12]
        break;
 8004c9e:	e012      	b.n	8004cc6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	60fb      	str	r3, [r7, #12]
        break;
 8004ca6:	e00e      	b.n	8004cc6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	099b      	lsrs	r3, r3, #6
 8004cac:	60fb      	str	r3, [r7, #12]
        break;
 8004cae:	e00a      	b.n	8004cc6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	09db      	lsrs	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
        break;
 8004cb6:	e006      	b.n	8004cc6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	60fb      	str	r3, [r7, #12]
        break;
 8004cbe:	e002      	b.n	8004cc6 <ADC_ConfigureBoostMode+0x146>
        break;
 8004cc0:	bf00      	nop
 8004cc2:	e000      	b.n	8004cc6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004cc4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <ADC_ConfigureBoostMode+0x1cc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d808      	bhi.n	8004ce6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ce2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ce4:	e025      	b.n	8004d32 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <ADC_ConfigureBoostMode+0x1d0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d80a      	bhi.n	8004d04 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d00:	609a      	str	r2, [r3, #8]
}
 8004d02:	e016      	b.n	8004d32 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <ADC_ConfigureBoostMode+0x1d4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d80a      	bhi.n	8004d22 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	e007      	b.n	8004d32 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d30:	609a      	str	r2, [r3, #8]
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40022000 	.word	0x40022000
 8004d40:	40022100 	.word	0x40022100
 8004d44:	40022300 	.word	0x40022300
 8004d48:	58026300 	.word	0x58026300
 8004d4c:	005f5e10 	.word	0x005f5e10
 8004d50:	00bebc20 	.word	0x00bebc20
 8004d54:	017d7840 	.word	0x017d7840

08004d58 <LL_ADC_IsEnabled>:
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <LL_ADC_IsEnabled+0x18>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <LL_ADC_IsEnabled+0x1a>
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <LL_ADC_StartCalibration>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <LL_ADC_StartCalibration+0x38>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004da0:	430a      	orrs	r2, r1
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	609a      	str	r2, [r3, #8]
}
 8004dac:	bf00      	nop
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	3ffeffc0 	.word	0x3ffeffc0

08004dbc <LL_ADC_IsCalibrationOnGoing>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd0:	d101      	bne.n	8004dd6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <LL_ADC_REG_IsConversionOngoing>:
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d101      	bne.n	8004dfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_ADCEx_Calibration_Start+0x1e>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e04c      	b.n	8004ec4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f7ff fe44 	bl	8004ac0 <ADC_Disable>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d135      	bne.n	8004eae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e46:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	f043 0202 	orr.w	r2, r3, #2
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff ff90 	bl	8004d80 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e60:	e014      	b.n	8004e8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3301      	adds	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4a19      	ldr	r2, [pc, #100]	; (8004ed0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d30d      	bcc.n	8004e8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e74:	f023 0312 	bic.w	r3, r3, #18
 8004e78:	f043 0210 	orr.w	r2, r3, #16
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e01b      	b.n	8004ec4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff ff93 	bl	8004dbc <LL_ADC_IsCalibrationOnGoing>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e2      	bne.n	8004e62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea0:	f023 0303 	bic.w	r3, r3, #3
 8004ea4:	f043 0201 	orr.w	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60
 8004eac:	e005      	b.n	8004eba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	f043 0210 	orr.w	r2, r3, #16
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	ffffeefd 	.word	0xffffeefd
 8004ed0:	25c3f800 	.word	0x25c3f800

08004ed4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ed4:	b590      	push	{r4, r7, lr}
 8004ed6:	b0a3      	sub	sp, #140	; 0x8c
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e0c1      	b.n	8005076 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5e      	ldr	r2, [pc, #376]	; (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d102      	bne.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f0c:	4b5d      	ldr	r3, [pc, #372]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e001      	b.n	8004f16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10b      	bne.n	8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0a0      	b.n	8005076 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff ff54 	bl	8004de4 <LL_ADC_REG_IsConversionOngoing>
 8004f3c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff4d 	bl	8004de4 <LL_ADC_REG_IsConversionOngoing>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 8081 	bne.w	8005054 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d17c      	bne.n	8005054 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a48      	ldr	r2, [pc, #288]	; (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a46      	ldr	r2, [pc, #280]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d101      	bne.n	8004f72 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004f6e:	4b46      	ldr	r3, [pc, #280]	; (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004f70:	e000      	b.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004f72:	4b46      	ldr	r3, [pc, #280]	; (800508c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f74:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d039      	beq.n	8004ff2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004f7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a3a      	ldr	r2, [pc, #232]	; (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a39      	ldr	r2, [pc, #228]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d10e      	bne.n	8004fc2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004fa4:	4836      	ldr	r0, [pc, #216]	; (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fa6:	f7ff fed7 	bl	8004d58 <LL_ADC_IsEnabled>
 8004faa:	4604      	mov	r4, r0
 8004fac:	4835      	ldr	r0, [pc, #212]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fae:	f7ff fed3 	bl	8004d58 <LL_ADC_IsEnabled>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4323      	orrs	r3, r4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	e008      	b.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004fc2:	4833      	ldr	r0, [pc, #204]	; (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004fc4:	f7ff fec8 	bl	8004d58 <LL_ADC_IsEnabled>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d047      	beq.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	6811      	ldr	r1, [r2, #0]
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	6892      	ldr	r2, [r2, #8]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	431a      	orrs	r2, r3
 8004fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ff0:	e03a      	b.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ff2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ffa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ffc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10e      	bne.n	8005030 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005012:	481b      	ldr	r0, [pc, #108]	; (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005014:	f7ff fea0 	bl	8004d58 <LL_ADC_IsEnabled>
 8005018:	4604      	mov	r4, r0
 800501a:	481a      	ldr	r0, [pc, #104]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800501c:	f7ff fe9c 	bl	8004d58 <LL_ADC_IsEnabled>
 8005020:	4603      	mov	r3, r0
 8005022:	4323      	orrs	r3, r4
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	e008      	b.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005030:	4817      	ldr	r0, [pc, #92]	; (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005032:	f7ff fe91 	bl	8004d58 <LL_ADC_IsEnabled>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d010      	beq.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005046:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800504c:	4013      	ands	r3, r2
 800504e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005050:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005052:	e009      	b.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005066:	e000      	b.n	800506a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005068:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005072:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005076:	4618      	mov	r0, r3
 8005078:	378c      	adds	r7, #140	; 0x8c
 800507a:	46bd      	mov	sp, r7
 800507c:	bd90      	pop	{r4, r7, pc}
 800507e:	bf00      	nop
 8005080:	40022000 	.word	0x40022000
 8005084:	40022100 	.word	0x40022100
 8005088:	40022300 	.word	0x40022300
 800508c:	58026300 	.word	0x58026300
 8005090:	58026000 	.word	0x58026000
 8005094:	fffff0e0 	.word	0xfffff0e0

08005098 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e023      	b.n	80050f2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fd fb28 	bl	8002714 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <__NVIC_SetPriorityGrouping>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <__NVIC_SetPriorityGrouping+0x40>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005118:	4013      	ands	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <__NVIC_SetPriorityGrouping+0x44>)
 8005126:	4313      	orrs	r3, r2
 8005128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800512a:	4a04      	ldr	r2, [pc, #16]	; (800513c <__NVIC_SetPriorityGrouping+0x40>)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	60d3      	str	r3, [r2, #12]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	e000ed00 	.word	0xe000ed00
 8005140:	05fa0000 	.word	0x05fa0000

08005144 <__NVIC_GetPriorityGrouping>:
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005148:	4b04      	ldr	r3, [pc, #16]	; (800515c <__NVIC_GetPriorityGrouping+0x18>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 0307 	and.w	r3, r3, #7
}
 8005152:	4618      	mov	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	e000ed00 	.word	0xe000ed00

08005160 <__NVIC_EnableIRQ>:
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800516a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516e:	2b00      	cmp	r3, #0
 8005170:	db0b      	blt.n	800518a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	f003 021f 	and.w	r2, r3, #31
 8005178:	4907      	ldr	r1, [pc, #28]	; (8005198 <__NVIC_EnableIRQ+0x38>)
 800517a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2001      	movs	r0, #1
 8005182:	fa00 f202 	lsl.w	r2, r0, r2
 8005186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000e100 	.word	0xe000e100

0800519c <__NVIC_SetPriority>:
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	6039      	str	r1, [r7, #0]
 80051a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	db0a      	blt.n	80051c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	490c      	ldr	r1, [pc, #48]	; (80051e8 <__NVIC_SetPriority+0x4c>)
 80051b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ba:	0112      	lsls	r2, r2, #4
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	440b      	add	r3, r1
 80051c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80051c4:	e00a      	b.n	80051dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	4908      	ldr	r1, [pc, #32]	; (80051ec <__NVIC_SetPriority+0x50>)
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	3b04      	subs	r3, #4
 80051d4:	0112      	lsls	r2, r2, #4
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	440b      	add	r3, r1
 80051da:	761a      	strb	r2, [r3, #24]
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	e000e100 	.word	0xe000e100
 80051ec:	e000ed00 	.word	0xe000ed00

080051f0 <NVIC_EncodePriority>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	b089      	sub	sp, #36	; 0x24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f1c3 0307 	rsb	r3, r3, #7
 800520a:	2b04      	cmp	r3, #4
 800520c:	bf28      	it	cs
 800520e:	2304      	movcs	r3, #4
 8005210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3304      	adds	r3, #4
 8005216:	2b06      	cmp	r3, #6
 8005218:	d902      	bls.n	8005220 <NVIC_EncodePriority+0x30>
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	3b03      	subs	r3, #3
 800521e:	e000      	b.n	8005222 <NVIC_EncodePriority+0x32>
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005224:	f04f 32ff 	mov.w	r2, #4294967295
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43da      	mvns	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	401a      	ands	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005238:	f04f 31ff 	mov.w	r1, #4294967295
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	43d9      	mvns	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005248:	4313      	orrs	r3, r2
}
 800524a:	4618      	mov	r0, r3
 800524c:	3724      	adds	r7, #36	; 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff ff4c 	bl	80050fc <__NVIC_SetPriorityGrouping>
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800527a:	f7ff ff63 	bl	8005144 <__NVIC_GetPriorityGrouping>
 800527e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	6978      	ldr	r0, [r7, #20]
 8005286:	f7ff ffb3 	bl	80051f0 <NVIC_EncodePriority>
 800528a:	4602      	mov	r2, r0
 800528c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ff82 	bl	800519c <__NVIC_SetPriority>
}
 8005298:	bf00      	nop
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff ff56 	bl	8005160 <__NVIC_EnableIRQ>
}
 80052b4:	bf00      	nop
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0b4      	b.n	8005438 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80052ce:	4b5c      	ldr	r3, [pc, #368]	; (8005440 <HAL_DFSDM_ChannelInit+0x184>)
 80052d0:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 80052d2:	4b5c      	ldr	r3, [pc, #368]	; (8005444 <HAL_DFSDM_ChannelInit+0x188>)
 80052d4:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 80052d6:	4b5c      	ldr	r3, [pc, #368]	; (8005448 <HAL_DFSDM_ChannelInit+0x18c>)
 80052d8:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fa10 	bl	8005704 <DFSDM_GetChannelFromInstance>
 80052e4:	4603      	mov	r3, r0
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e0a0      	b.n	8005438 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fd faf4 	bl	80028e4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d125      	bne.n	800535a <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	431a      	orrs	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	791b      	ldrb	r3, [r3, #4]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d108      	bne.n	800534e <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	3b01      	subs	r3, #1
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	431a      	orrs	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8005368:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005378:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800537e:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 020f 	bic.w	r2, r2, #15
 8005396:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80053be:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	3b01      	subs	r3, #1
 80053d0:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f002 0207 	and.w	r2, r2, #7
 80053ea:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005416:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f96d 	bl	8005704 <DFSDM_GetChannelFromInstance>
 800542a:	4603      	mov	r3, r0
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	24000cac 	.word	0x24000cac
 8005444:	24000cb0 	.word	0x24000cb0
 8005448:	40017800 	.word	0x40017800

0800544c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e0c8      	b.n	80055f0 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 800545e:	4b66      	ldr	r3, [pc, #408]	; (80055f8 <HAL_DFSDM_FilterInit+0x1ac>)
 8005460:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	429a      	cmp	r2, r3
 800546a:	d109      	bne.n	8005480 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8005470:	2b01      	cmp	r3, #1
 8005472:	d003      	beq.n	800547c <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0b7      	b.n	80055f0 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7fd f95d 	bl	8002758 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80054ac:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7a1b      	ldrb	r3, [r3, #8]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d108      	bne.n	80054c8 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e007      	b.n	80054d8 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80054d6:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	7a5b      	ldrb	r3, [r3, #9]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d108      	bne.n	80054f2 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e007      	b.n	8005502 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005500:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6819      	ldr	r1, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_DFSDM_FilterInit+0x1b0>)
 800550e:	400b      	ands	r3, r1
 8005510:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d108      	bne.n	800552c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	7c1b      	ldrb	r3, [r3, #16]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d108      	bne.n	8005546 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0210 	orr.w	r2, r2, #16
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e007      	b.n	8005556 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0210 	bic.w	r2, r2, #16
 8005554:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	7c5b      	ldrb	r3, [r3, #17]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d108      	bne.n	8005570 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0220 	orr.w	r2, r2, #32
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e007      	b.n	8005580 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0220 	bic.w	r2, r2, #32
 800557e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6959      	ldr	r1, [r3, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b1d      	ldr	r3, [pc, #116]	; (8005600 <HAL_DFSDM_FilterInit+0x1b4>)
 800558c:	400b      	ands	r3, r1
 800558e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6959      	ldr	r1, [r3, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	3b01      	subs	r3, #1
 80055a0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80055a2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80055aa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	7c1a      	ldrb	r2, [r3, #16]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0201 	orr.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40017900 	.word	0x40017900
 80055fc:	ffff80f7 	.word	0xffff80f7
 8005600:	1c00ff00 	.word	0x1c00ff00

08005604 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d02c      	beq.n	8005678 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005624:	2bff      	cmp	r3, #255	; 0xff
 8005626:	d027      	beq.n	8005678 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b16      	ldr	r3, [pc, #88]	; (800568c <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8005634:	400b      	ands	r3, r1
 8005636:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d10d      	bne.n	800565a <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800564c:	431a      	orrs	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	e00a      	b.n	8005670 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
 8005676:	e001      	b.n	800567c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800567c:	7dfb      	ldrb	r3, [r7, #23]
}
 800567e:	4618      	mov	r0, r3
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	f8fbffff 	.word	0xf8fbffff

08005690 <HAL_DFSDM_FilterRegularStart>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d004      	beq.n	80056b0 <HAL_DFSDM_FilterRegularStart+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d103      	bne.n	80056b8 <HAL_DFSDM_FilterRegularStart+0x28>
  {
    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f873 	bl	800579c <DFSDM_RegConvStart>
 80056b6:	e001      	b.n	80056bc <HAL_DFSDM_FilterRegularStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0207 	and.w	r2, r3, #7
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056e8:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da00      	bge.n	80056f2 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 80056f0:	33ff      	adds	r3, #255	; 0xff
 80056f2:	121b      	asrs	r3, r3, #8
 80056f4:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 80056f6:	68bb      	ldr	r3, [r7, #8]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <DFSDM_GetChannelFromInstance+0x7c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d102      	bne.n	800571a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e02b      	b.n	8005772 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <DFSDM_GetChannelFromInstance+0x80>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d102      	bne.n	8005728 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005722:	2301      	movs	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	e024      	b.n	8005772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <DFSDM_GetChannelFromInstance+0x84>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d102      	bne.n	8005736 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005730:	2302      	movs	r3, #2
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e01d      	b.n	8005772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a14      	ldr	r2, [pc, #80]	; (800578c <DFSDM_GetChannelFromInstance+0x88>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d102      	bne.n	8005744 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800573e:	2303      	movs	r3, #3
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e016      	b.n	8005772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a12      	ldr	r2, [pc, #72]	; (8005790 <DFSDM_GetChannelFromInstance+0x8c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d102      	bne.n	8005752 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800574c:	2304      	movs	r3, #4
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	e00f      	b.n	8005772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a0f      	ldr	r2, [pc, #60]	; (8005794 <DFSDM_GetChannelFromInstance+0x90>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d102      	bne.n	8005760 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800575a:	2305      	movs	r3, #5
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	e008      	b.n	8005772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a0d      	ldr	r2, [pc, #52]	; (8005798 <DFSDM_GetChannelFromInstance+0x94>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d102      	bne.n	800576e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8005768:	2306      	movs	r3, #6
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e001      	b.n	8005772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800576e:	2307      	movs	r3, #7
 8005770:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005772:	68fb      	ldr	r3, [r7, #12]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	40017800 	.word	0x40017800
 8005784:	40017820 	.word	0x40017820
 8005788:	40017840 	.word	0x40017840
 800578c:	40017860 	.word	0x40017860
 8005790:	40017880 	.word	0x40017880
 8005794:	400178a0 	.word	0x400178a0
 8005798:	400178c0 	.word	0x400178c0

0800579c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d108      	bne.n	80057be <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	e033      	b.n	8005826 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0201 	bic.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80057dc:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d116      	bne.n	8005826 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d107      	bne.n	8005810 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0202 	orr.w	r2, r2, #2
 800580e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8005816:	2b01      	cmp	r3, #1
 8005818:	d102      	bne.n	8005820 <DFSDM_RegConvStart+0x84>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581e:	e000      	b.n	8005822 <DFSDM_RegConvStart+0x86>
 8005820:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <DFSDM_RegConvStart+0x98>
 8005830:	2202      	movs	r2, #2
 8005832:	e000      	b.n	8005836 <DFSDM_RegConvStart+0x9a>
 8005834:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e205      	b.n	8005c66 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d004      	beq.n	8005870 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e1fa      	b.n	8005c66 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a8c      	ldr	r2, [pc, #560]	; (8005aa8 <HAL_DMA_Abort_IT+0x260>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d04a      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a8b      	ldr	r2, [pc, #556]	; (8005aac <HAL_DMA_Abort_IT+0x264>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d045      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a89      	ldr	r2, [pc, #548]	; (8005ab0 <HAL_DMA_Abort_IT+0x268>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d040      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a88      	ldr	r2, [pc, #544]	; (8005ab4 <HAL_DMA_Abort_IT+0x26c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d03b      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a86      	ldr	r2, [pc, #536]	; (8005ab8 <HAL_DMA_Abort_IT+0x270>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d036      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a85      	ldr	r2, [pc, #532]	; (8005abc <HAL_DMA_Abort_IT+0x274>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d031      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a83      	ldr	r2, [pc, #524]	; (8005ac0 <HAL_DMA_Abort_IT+0x278>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d02c      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a82      	ldr	r2, [pc, #520]	; (8005ac4 <HAL_DMA_Abort_IT+0x27c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d027      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a80      	ldr	r2, [pc, #512]	; (8005ac8 <HAL_DMA_Abort_IT+0x280>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d022      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a7f      	ldr	r2, [pc, #508]	; (8005acc <HAL_DMA_Abort_IT+0x284>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d01d      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a7d      	ldr	r2, [pc, #500]	; (8005ad0 <HAL_DMA_Abort_IT+0x288>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d018      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a7c      	ldr	r2, [pc, #496]	; (8005ad4 <HAL_DMA_Abort_IT+0x28c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a7a      	ldr	r2, [pc, #488]	; (8005ad8 <HAL_DMA_Abort_IT+0x290>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00e      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a79      	ldr	r2, [pc, #484]	; (8005adc <HAL_DMA_Abort_IT+0x294>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d009      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a77      	ldr	r2, [pc, #476]	; (8005ae0 <HAL_DMA_Abort_IT+0x298>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_DMA_Abort_IT+0xc8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a76      	ldr	r2, [pc, #472]	; (8005ae4 <HAL_DMA_Abort_IT+0x29c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d101      	bne.n	8005914 <HAL_DMA_Abort_IT+0xcc>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <HAL_DMA_Abort_IT+0xce>
 8005914:	2300      	movs	r3, #0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d065      	beq.n	80059e6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2204      	movs	r2, #4
 800591e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a60      	ldr	r2, [pc, #384]	; (8005aa8 <HAL_DMA_Abort_IT+0x260>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d04a      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a5e      	ldr	r2, [pc, #376]	; (8005aac <HAL_DMA_Abort_IT+0x264>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d045      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a5d      	ldr	r2, [pc, #372]	; (8005ab0 <HAL_DMA_Abort_IT+0x268>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d040      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a5b      	ldr	r2, [pc, #364]	; (8005ab4 <HAL_DMA_Abort_IT+0x26c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d03b      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a5a      	ldr	r2, [pc, #360]	; (8005ab8 <HAL_DMA_Abort_IT+0x270>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d036      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a58      	ldr	r2, [pc, #352]	; (8005abc <HAL_DMA_Abort_IT+0x274>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d031      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a57      	ldr	r2, [pc, #348]	; (8005ac0 <HAL_DMA_Abort_IT+0x278>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d02c      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a55      	ldr	r2, [pc, #340]	; (8005ac4 <HAL_DMA_Abort_IT+0x27c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d027      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a54      	ldr	r2, [pc, #336]	; (8005ac8 <HAL_DMA_Abort_IT+0x280>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a52      	ldr	r2, [pc, #328]	; (8005acc <HAL_DMA_Abort_IT+0x284>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01d      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a51      	ldr	r2, [pc, #324]	; (8005ad0 <HAL_DMA_Abort_IT+0x288>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a4f      	ldr	r2, [pc, #316]	; (8005ad4 <HAL_DMA_Abort_IT+0x28c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a4e      	ldr	r2, [pc, #312]	; (8005ad8 <HAL_DMA_Abort_IT+0x290>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a4c      	ldr	r2, [pc, #304]	; (8005adc <HAL_DMA_Abort_IT+0x294>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a4b      	ldr	r2, [pc, #300]	; (8005ae0 <HAL_DMA_Abort_IT+0x298>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x17a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a49      	ldr	r2, [pc, #292]	; (8005ae4 <HAL_DMA_Abort_IT+0x29c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <HAL_DMA_Abort_IT+0x18c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e147      	b.n	8005c64 <HAL_DMA_Abort_IT+0x41c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	e13e      	b.n	8005c64 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 020e 	bic.w	r2, r2, #14
 80059f4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <HAL_DMA_Abort_IT+0x260>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d04a      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a29      	ldr	r2, [pc, #164]	; (8005aac <HAL_DMA_Abort_IT+0x264>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d045      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <HAL_DMA_Abort_IT+0x268>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d040      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <HAL_DMA_Abort_IT+0x26c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d03b      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <HAL_DMA_Abort_IT+0x270>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d036      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a23      	ldr	r2, [pc, #140]	; (8005abc <HAL_DMA_Abort_IT+0x274>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d031      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <HAL_DMA_Abort_IT+0x278>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d02c      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <HAL_DMA_Abort_IT+0x27c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d027      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <HAL_DMA_Abort_IT+0x280>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d022      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <HAL_DMA_Abort_IT+0x284>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01d      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <HAL_DMA_Abort_IT+0x288>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d018      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <HAL_DMA_Abort_IT+0x28c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a19      	ldr	r2, [pc, #100]	; (8005ad8 <HAL_DMA_Abort_IT+0x290>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00e      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a17      	ldr	r2, [pc, #92]	; (8005adc <HAL_DMA_Abort_IT+0x294>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <HAL_DMA_Abort_IT+0x298>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x24e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a14      	ldr	r2, [pc, #80]	; (8005ae4 <HAL_DMA_Abort_IT+0x29c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d128      	bne.n	8005ae8 <HAL_DMA_Abort_IT+0x2a0>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e027      	b.n	8005af8 <HAL_DMA_Abort_IT+0x2b0>
 8005aa8:	40020010 	.word	0x40020010
 8005aac:	40020028 	.word	0x40020028
 8005ab0:	40020040 	.word	0x40020040
 8005ab4:	40020058 	.word	0x40020058
 8005ab8:	40020070 	.word	0x40020070
 8005abc:	40020088 	.word	0x40020088
 8005ac0:	400200a0 	.word	0x400200a0
 8005ac4:	400200b8 	.word	0x400200b8
 8005ac8:	40020410 	.word	0x40020410
 8005acc:	40020428 	.word	0x40020428
 8005ad0:	40020440 	.word	0x40020440
 8005ad4:	40020458 	.word	0x40020458
 8005ad8:	40020470 	.word	0x40020470
 8005adc:	40020488 	.word	0x40020488
 8005ae0:	400204a0 	.word	0x400204a0
 8005ae4:	400204b8 	.word	0x400204b8
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a5c      	ldr	r2, [pc, #368]	; (8005c70 <HAL_DMA_Abort_IT+0x428>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d072      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a5b      	ldr	r2, [pc, #364]	; (8005c74 <HAL_DMA_Abort_IT+0x42c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d06d      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a59      	ldr	r2, [pc, #356]	; (8005c78 <HAL_DMA_Abort_IT+0x430>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d068      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a58      	ldr	r2, [pc, #352]	; (8005c7c <HAL_DMA_Abort_IT+0x434>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d063      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a56      	ldr	r2, [pc, #344]	; (8005c80 <HAL_DMA_Abort_IT+0x438>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d05e      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a55      	ldr	r2, [pc, #340]	; (8005c84 <HAL_DMA_Abort_IT+0x43c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d059      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a53      	ldr	r2, [pc, #332]	; (8005c88 <HAL_DMA_Abort_IT+0x440>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d054      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a52      	ldr	r2, [pc, #328]	; (8005c8c <HAL_DMA_Abort_IT+0x444>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d04f      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a50      	ldr	r2, [pc, #320]	; (8005c90 <HAL_DMA_Abort_IT+0x448>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d04a      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a4f      	ldr	r2, [pc, #316]	; (8005c94 <HAL_DMA_Abort_IT+0x44c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d045      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a4d      	ldr	r2, [pc, #308]	; (8005c98 <HAL_DMA_Abort_IT+0x450>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d040      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a4c      	ldr	r2, [pc, #304]	; (8005c9c <HAL_DMA_Abort_IT+0x454>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d03b      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a4a      	ldr	r2, [pc, #296]	; (8005ca0 <HAL_DMA_Abort_IT+0x458>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d036      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a49      	ldr	r2, [pc, #292]	; (8005ca4 <HAL_DMA_Abort_IT+0x45c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d031      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a47      	ldr	r2, [pc, #284]	; (8005ca8 <HAL_DMA_Abort_IT+0x460>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d02c      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a46      	ldr	r2, [pc, #280]	; (8005cac <HAL_DMA_Abort_IT+0x464>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d027      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a44      	ldr	r2, [pc, #272]	; (8005cb0 <HAL_DMA_Abort_IT+0x468>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d022      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a43      	ldr	r2, [pc, #268]	; (8005cb4 <HAL_DMA_Abort_IT+0x46c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d01d      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a41      	ldr	r2, [pc, #260]	; (8005cb8 <HAL_DMA_Abort_IT+0x470>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d018      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a40      	ldr	r2, [pc, #256]	; (8005cbc <HAL_DMA_Abort_IT+0x474>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a3e      	ldr	r2, [pc, #248]	; (8005cc0 <HAL_DMA_Abort_IT+0x478>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00e      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a3d      	ldr	r2, [pc, #244]	; (8005cc4 <HAL_DMA_Abort_IT+0x47c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a3b      	ldr	r2, [pc, #236]	; (8005cc8 <HAL_DMA_Abort_IT+0x480>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x3a0>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a3a      	ldr	r2, [pc, #232]	; (8005ccc <HAL_DMA_Abort_IT+0x484>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <HAL_DMA_Abort_IT+0x3a4>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_DMA_Abort_IT+0x3a6>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d028      	beq.n	8005c44 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c00:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	2201      	movs	r2, #1
 8005c12:	409a      	lsls	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c20:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00c      	beq.n	8005c44 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c38:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c42:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40020010 	.word	0x40020010
 8005c74:	40020028 	.word	0x40020028
 8005c78:	40020040 	.word	0x40020040
 8005c7c:	40020058 	.word	0x40020058
 8005c80:	40020070 	.word	0x40020070
 8005c84:	40020088 	.word	0x40020088
 8005c88:	400200a0 	.word	0x400200a0
 8005c8c:	400200b8 	.word	0x400200b8
 8005c90:	40020410 	.word	0x40020410
 8005c94:	40020428 	.word	0x40020428
 8005c98:	40020440 	.word	0x40020440
 8005c9c:	40020458 	.word	0x40020458
 8005ca0:	40020470 	.word	0x40020470
 8005ca4:	40020488 	.word	0x40020488
 8005ca8:	400204a0 	.word	0x400204a0
 8005cac:	400204b8 	.word	0x400204b8
 8005cb0:	58025408 	.word	0x58025408
 8005cb4:	5802541c 	.word	0x5802541c
 8005cb8:	58025430 	.word	0x58025430
 8005cbc:	58025444 	.word	0x58025444
 8005cc0:	58025458 	.word	0x58025458
 8005cc4:	5802546c 	.word	0x5802546c
 8005cc8:	58025480 	.word	0x58025480
 8005ccc:	58025494 	.word	0x58025494

08005cd0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b098      	sub	sp, #96	; 0x60
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005cd8:	4a84      	ldr	r2, [pc, #528]	; (8005eec <HAL_FDCAN_Init+0x21c>)
 8005cda:	f107 030c 	add.w	r3, r7, #12
 8005cde:	4611      	mov	r1, r2
 8005ce0:	224c      	movs	r2, #76	; 0x4c
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f007 fe94 	bl	800da10 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e1ca      	b.n	8006088 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a7e      	ldr	r2, [pc, #504]	; (8005ef0 <HAL_FDCAN_Init+0x220>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d106      	bne.n	8005d0a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d04:	461a      	mov	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fc fea6 	bl	8002a70 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0210 	bic.w	r2, r2, #16
 8005d32:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d34:	f7fd fb46 	bl	80033c4 <HAL_GetTick>
 8005d38:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d3a:	e014      	b.n	8005d66 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d3c:	f7fd fb42 	bl	80033c4 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b0a      	cmp	r3, #10
 8005d48:	d90d      	bls.n	8005d66 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d50:	f043 0201 	orr.w	r2, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e190      	b.n	8006088 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d0e3      	beq.n	8005d3c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d84:	f7fd fb1e 	bl	80033c4 <HAL_GetTick>
 8005d88:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d8a:	e014      	b.n	8005db6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d8c:	f7fd fb1a 	bl	80033c4 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b0a      	cmp	r3, #10
 8005d98:	d90d      	bls.n	8005db6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da0:	f043 0201 	orr.w	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2203      	movs	r2, #3
 8005dae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e168      	b.n	8006088 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0e3      	beq.n	8005d8c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0202 	orr.w	r2, r2, #2
 8005dd2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	7c1b      	ldrb	r3, [r3, #16]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d108      	bne.n	8005dee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dea:	619a      	str	r2, [r3, #24]
 8005dec:	e007      	b.n	8005dfe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7c5b      	ldrb	r3, [r3, #17]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d108      	bne.n	8005e18 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e14:	619a      	str	r2, [r3, #24]
 8005e16:	e007      	b.n	8005e28 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e26:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7c9b      	ldrb	r3, [r3, #18]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d108      	bne.n	8005e42 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e3e:	619a      	str	r2, [r3, #24]
 8005e40:	e007      	b.n	8005e52 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e50:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005e76:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0210 	bic.w	r2, r2, #16
 8005e86:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d108      	bne.n	8005ea2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0204 	orr.w	r2, r2, #4
 8005e9e:	619a      	str	r2, [r3, #24]
 8005ea0:	e030      	b.n	8005f04 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d02c      	beq.n	8005f04 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d020      	beq.n	8005ef4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ec0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0210 	orr.w	r2, r2, #16
 8005ed0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d114      	bne.n	8005f04 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0220 	orr.w	r2, r2, #32
 8005ee8:	619a      	str	r2, [r3, #24]
 8005eea:	e00b      	b.n	8005f04 <HAL_FDCAN_Init+0x234>
 8005eec:	0800da70 	.word	0x0800da70
 8005ef0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0220 	orr.w	r2, r2, #32
 8005f02:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f14:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f1c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f2c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f2e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f38:	d115      	bne.n	8005f66 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	3b01      	subs	r3, #1
 8005f46:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f48:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005f52:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005f62:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f64:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8c:	4413      	add	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005f9a:	f023 0107 	bic.w	r1, r3, #7
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005fa8:	4413      	add	r3, r2
 8005faa:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d012      	beq.n	8005fe6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005fc8:	f023 0107 	bic.w	r1, r3, #7
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d013      	beq.n	8006016 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ff6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006004:	4413      	add	r3, r2
 8006006:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800600a:	011a      	lsls	r2, r3, #4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	2b00      	cmp	r3, #0
 800601c:	d013      	beq.n	8006046 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006026:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006034:	4413      	add	r3, r2
 8006036:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800603a:	021a      	lsls	r2, r3, #8
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a11      	ldr	r2, [pc, #68]	; (8006090 <HAL_FDCAN_Init+0x3c0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d107      	bne.n	8006060 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f022 0203 	bic.w	r2, r2, #3
 800605e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f80b 	bl	8006094 <FDCAN_CalcultateRamBlockAddresses>
 800607e:	4603      	mov	r3, r0
 8006080:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006084:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006088:	4618      	mov	r0, r3
 800608a:	3760      	adds	r7, #96	; 0x60
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	4000a000 	.word	0x4000a000

08006094 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80060aa:	4ba7      	ldr	r3, [pc, #668]	; (8006348 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	0091      	lsls	r1, r2, #2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6812      	ldr	r2, [r2, #0]
 80060b6:	430b      	orrs	r3, r1
 80060b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	041a      	lsls	r2, r3, #16
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	4413      	add	r3, r2
 80060e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060ea:	4b97      	ldr	r3, [pc, #604]	; (8006348 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	0091      	lsls	r1, r2, #2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	430b      	orrs	r3, r1
 80060f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	041a      	lsls	r2, r3, #16
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	4413      	add	r3, r2
 8006122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800612c:	4b86      	ldr	r3, [pc, #536]	; (8006348 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800612e:	4013      	ands	r3, r2
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	0091      	lsls	r1, r2, #2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	430b      	orrs	r3, r1
 800613a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006146:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	041a      	lsls	r2, r3, #16
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	4413      	add	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006174:	4b74      	ldr	r3, [pc, #464]	; (8006348 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006176:	4013      	ands	r3, r2
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	0091      	lsls	r1, r2, #2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	430b      	orrs	r3, r1
 8006182:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800618e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006196:	041a      	lsls	r2, r3, #16
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	4413      	add	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80061bc:	4b62      	ldr	r3, [pc, #392]	; (8006348 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061be:	4013      	ands	r3, r2
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	0091      	lsls	r1, r2, #2
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	430b      	orrs	r3, r1
 80061ca:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	4413      	add	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80061e8:	4b57      	ldr	r3, [pc, #348]	; (8006348 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	0091      	lsls	r1, r2, #2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	430b      	orrs	r3, r1
 80061f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006202:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	041a      	lsls	r2, r3, #16
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	4413      	add	r3, r2
 8006220:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800622a:	4b47      	ldr	r3, [pc, #284]	; (8006348 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800622c:	4013      	ands	r3, r2
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	0091      	lsls	r1, r2, #2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	430b      	orrs	r3, r1
 8006238:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006244:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624c:	041a      	lsls	r2, r3, #16
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006260:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006268:	061a      	lsls	r2, r3, #24
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006278:	4b34      	ldr	r3, [pc, #208]	; (800634c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800627a:	4413      	add	r3, r2
 800627c:	009a      	lsls	r2, r3, #2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	441a      	add	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80062ae:	fb01 f303 	mul.w	r3, r1, r3
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80062c6:	fb01 f303 	mul.w	r3, r1, r3
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80062de:	fb01 f303 	mul.w	r3, r1, r3
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633e:	4a04      	ldr	r2, [pc, #16]	; (8006350 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d915      	bls.n	8006370 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006344:	e006      	b.n	8006354 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006346:	bf00      	nop
 8006348:	ffff0003 	.word	0xffff0003
 800634c:	10002b00 	.word	0x10002b00
 8006350:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800635a:	f043 0220 	orr.w	r2, r3, #32
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2203      	movs	r2, #3
 8006368:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e010      	b.n	8006392 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e005      	b.n	8006384 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3304      	adds	r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	429a      	cmp	r2, r3
 800638e:	d3f3      	bcc.n	8006378 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop

080063a0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e031      	b.n	8006416 <HAL_FMAC_Init+0x76>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_FMAC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmac->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fc fbb8 	bl	8002b3c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0UL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f84c 	bl	8006470 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f820 	bl	800641e <FMAC_Reset>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d10c      	bne.n	80063fe <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_RESET;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2210      	movs	r2, #16
 80063e8:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	22a0      	movs	r2, #160	; 0xa0
 80063ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hfmac);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e00b      	b.n	8006416 <HAL_FMAC_Init+0x76>
  }

  /* Update FMAC error code and FMAC peripheral state */
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	635a      	str	r2, [r3, #52]	; 0x34
  hfmac->State = HAL_FMAC_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hfmac);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006426:	f7fc ffcd 	bl	80033c4 <HAL_GetTick>
 800642a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800643a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 800643c:	e009      	b.n	8006452 <FMAC_Reset+0x34>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800643e:	f7fc ffc1 	bl	80033c4 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800644c:	d901      	bls.n	8006452 <FMAC_Reset+0x34>
    {
      return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e00a      	b.n	8006468 <FMAC_Reset+0x4a>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ee      	bne.n	800643e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f807 	bl	800648c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f81b 	bl	80064ba <FMAC_ResetOutputStateAndDataPointers>
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b089      	sub	sp, #36	; 0x24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80064f6:	4b86      	ldr	r3, [pc, #536]	; (8006710 <HAL_GPIO_Init+0x228>)
 80064f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064fa:	e18c      	b.n	8006816 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	2101      	movs	r1, #1
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	fa01 f303 	lsl.w	r3, r1, r3
 8006508:	4013      	ands	r3, r2
 800650a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 817e 	beq.w	8006810 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d00b      	beq.n	8006534 <HAL_GPIO_Init+0x4c>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d007      	beq.n	8006534 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006528:	2b11      	cmp	r3, #17
 800652a:	d003      	beq.n	8006534 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b12      	cmp	r3, #18
 8006532:	d130      	bne.n	8006596 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	2203      	movs	r2, #3
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	43db      	mvns	r3, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4013      	ands	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4313      	orrs	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800656a:	2201      	movs	r2, #1
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43db      	mvns	r3, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4013      	ands	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	091b      	lsrs	r3, r3, #4
 8006580:	f003 0201 	and.w	r2, r3, #1
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4313      	orrs	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	2203      	movs	r2, #3
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43db      	mvns	r3, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	4013      	ands	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	4313      	orrs	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d003      	beq.n	80065d6 <HAL_GPIO_Init+0xee>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b12      	cmp	r3, #18
 80065d4:	d123      	bne.n	800661e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	08da      	lsrs	r2, r3, #3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3208      	adds	r2, #8
 80065de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	220f      	movs	r2, #15
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	43db      	mvns	r3, r3
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	4013      	ands	r3, r2
 80065f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	4313      	orrs	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	08da      	lsrs	r2, r3, #3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3208      	adds	r2, #8
 8006618:	69b9      	ldr	r1, [r7, #24]
 800661a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	2203      	movs	r2, #3
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	43db      	mvns	r3, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4013      	ands	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f003 0203 	and.w	r2, r3, #3
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	4313      	orrs	r3, r2
 800664a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 80d8 	beq.w	8006810 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006660:	4b2c      	ldr	r3, [pc, #176]	; (8006714 <HAL_GPIO_Init+0x22c>)
 8006662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006666:	4a2b      	ldr	r2, [pc, #172]	; (8006714 <HAL_GPIO_Init+0x22c>)
 8006668:	f043 0302 	orr.w	r3, r3, #2
 800666c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006670:	4b28      	ldr	r3, [pc, #160]	; (8006714 <HAL_GPIO_Init+0x22c>)
 8006672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800667e:	4a26      	ldr	r2, [pc, #152]	; (8006718 <HAL_GPIO_Init+0x230>)
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	089b      	lsrs	r3, r3, #2
 8006684:	3302      	adds	r3, #2
 8006686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800668a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	220f      	movs	r2, #15
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	43db      	mvns	r3, r3
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	4013      	ands	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1d      	ldr	r2, [pc, #116]	; (800671c <HAL_GPIO_Init+0x234>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d04a      	beq.n	8006740 <HAL_GPIO_Init+0x258>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a1c      	ldr	r2, [pc, #112]	; (8006720 <HAL_GPIO_Init+0x238>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d02b      	beq.n	800670a <HAL_GPIO_Init+0x222>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a1b      	ldr	r2, [pc, #108]	; (8006724 <HAL_GPIO_Init+0x23c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d025      	beq.n	8006706 <HAL_GPIO_Init+0x21e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1a      	ldr	r2, [pc, #104]	; (8006728 <HAL_GPIO_Init+0x240>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01f      	beq.n	8006702 <HAL_GPIO_Init+0x21a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a19      	ldr	r2, [pc, #100]	; (800672c <HAL_GPIO_Init+0x244>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d019      	beq.n	80066fe <HAL_GPIO_Init+0x216>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_GPIO_Init+0x248>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <HAL_GPIO_Init+0x212>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a17      	ldr	r2, [pc, #92]	; (8006734 <HAL_GPIO_Init+0x24c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00d      	beq.n	80066f6 <HAL_GPIO_Init+0x20e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a16      	ldr	r2, [pc, #88]	; (8006738 <HAL_GPIO_Init+0x250>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d007      	beq.n	80066f2 <HAL_GPIO_Init+0x20a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a15      	ldr	r2, [pc, #84]	; (800673c <HAL_GPIO_Init+0x254>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d101      	bne.n	80066ee <HAL_GPIO_Init+0x206>
 80066ea:	2309      	movs	r3, #9
 80066ec:	e029      	b.n	8006742 <HAL_GPIO_Init+0x25a>
 80066ee:	230a      	movs	r3, #10
 80066f0:	e027      	b.n	8006742 <HAL_GPIO_Init+0x25a>
 80066f2:	2307      	movs	r3, #7
 80066f4:	e025      	b.n	8006742 <HAL_GPIO_Init+0x25a>
 80066f6:	2306      	movs	r3, #6
 80066f8:	e023      	b.n	8006742 <HAL_GPIO_Init+0x25a>
 80066fa:	2305      	movs	r3, #5
 80066fc:	e021      	b.n	8006742 <HAL_GPIO_Init+0x25a>
 80066fe:	2304      	movs	r3, #4
 8006700:	e01f      	b.n	8006742 <HAL_GPIO_Init+0x25a>
 8006702:	2303      	movs	r3, #3
 8006704:	e01d      	b.n	8006742 <HAL_GPIO_Init+0x25a>
 8006706:	2302      	movs	r3, #2
 8006708:	e01b      	b.n	8006742 <HAL_GPIO_Init+0x25a>
 800670a:	2301      	movs	r3, #1
 800670c:	e019      	b.n	8006742 <HAL_GPIO_Init+0x25a>
 800670e:	bf00      	nop
 8006710:	58000080 	.word	0x58000080
 8006714:	58024400 	.word	0x58024400
 8006718:	58000400 	.word	0x58000400
 800671c:	58020000 	.word	0x58020000
 8006720:	58020400 	.word	0x58020400
 8006724:	58020800 	.word	0x58020800
 8006728:	58020c00 	.word	0x58020c00
 800672c:	58021000 	.word	0x58021000
 8006730:	58021400 	.word	0x58021400
 8006734:	58021800 	.word	0x58021800
 8006738:	58021c00 	.word	0x58021c00
 800673c:	58022400 	.word	0x58022400
 8006740:	2300      	movs	r3, #0
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	f002 0203 	and.w	r2, r2, #3
 8006748:	0092      	lsls	r2, r2, #2
 800674a:	4093      	lsls	r3, r2
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006752:	4938      	ldr	r1, [pc, #224]	; (8006834 <HAL_GPIO_Init+0x34c>)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	089b      	lsrs	r3, r3, #2
 8006758:	3302      	adds	r3, #2
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	43db      	mvns	r3, r3
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	4013      	ands	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	43db      	mvns	r3, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	4013      	ands	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	43db      	mvns	r3, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4013      	ands	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80067da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80067e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	4013      	ands	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	3301      	adds	r3, #1
 8006814:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	f47f ae6b 	bne.w	80064fc <HAL_GPIO_Init+0x14>
  }
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	3724      	adds	r7, #36	; 0x24
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	58000400 	.word	0x58000400

08006838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	807b      	strh	r3, [r7, #2]
 8006844:	4613      	mov	r3, r2
 8006846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006848:	787b      	ldrb	r3, [r7, #1]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800684e:	887a      	ldrh	r2, [r7, #2]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006854:	e003      	b.n	800685e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006856:	887b      	ldrh	r3, [r7, #2]
 8006858:	041a      	lsls	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	619a      	str	r2, [r3, #24]
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800687c:	887a      	ldrh	r2, [r7, #2]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4013      	ands	r3, r2
 8006882:	041a      	lsls	r2, r3, #16
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	43d9      	mvns	r1, r3
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	400b      	ands	r3, r1
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	619a      	str	r2, [r3, #24]
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e07f      	b.n	80069b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fc f95a 	bl	8002b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2224      	movs	r2, #36	; 0x24
 80068d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0201 	bic.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006900:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d107      	bne.n	800691a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006916:	609a      	str	r2, [r3, #8]
 8006918:	e006      	b.n	8006928 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006926:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	2b02      	cmp	r3, #2
 800692e:	d104      	bne.n	800693a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006938:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6859      	ldr	r1, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <HAL_I2C_Init+0x11c>)
 8006946:	430b      	orrs	r3, r1
 8006948:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006958:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	ea42 0103 	orr.w	r1, r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	021a      	lsls	r2, r3, #8
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69d9      	ldr	r1, [r3, #28]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1a      	ldr	r2, [r3, #32]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	02008000 	.word	0x02008000

080069c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d138      	bne.n	8006a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e032      	b.n	8006a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	; 0x24
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6819      	ldr	r1, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e000      	b.n	8006a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d139      	bne.n	8006ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e033      	b.n	8006ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2224      	movs	r2, #36	; 0x24
 8006a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006aa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e000      	b.n	8006ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006af8:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d00a      	beq.n	8006b1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b04:	4b16      	ldr	r3, [pc, #88]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d001      	beq.n	8006b16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e01f      	b.n	8006b56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e01d      	b.n	8006b56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b1a:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f023 0207 	bic.w	r2, r3, #7
 8006b22:	490f      	ldr	r1, [pc, #60]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b2a:	f7fc fc4b 	bl	80033c4 <HAL_GetTick>
 8006b2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b30:	e009      	b.n	8006b46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b32:	f7fc fc47 	bl	80033c4 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b40:	d901      	bls.n	8006b46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e007      	b.n	8006b56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b46:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b52:	d1ee      	bne.n	8006b32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	58024800 	.word	0x58024800

08006b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	; 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e37a      	b.n	800726c <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 8087 	beq.w	8006c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b84:	4ba0      	ldr	r3, [pc, #640]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b8e:	4b9e      	ldr	r3, [pc, #632]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	d007      	beq.n	8006baa <HAL_RCC_OscConfig+0x46>
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	2b18      	cmp	r3, #24
 8006b9e:	d110      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x5e>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006baa:	4b97      	ldr	r3, [pc, #604]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d06c      	beq.n	8006c90 <HAL_RCC_OscConfig+0x12c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d168      	bne.n	8006c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e354      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bca:	d106      	bne.n	8006bda <HAL_RCC_OscConfig+0x76>
 8006bcc:	4b8e      	ldr	r3, [pc, #568]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a8d      	ldr	r2, [pc, #564]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	e02e      	b.n	8006c38 <HAL_RCC_OscConfig+0xd4>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10c      	bne.n	8006bfc <HAL_RCC_OscConfig+0x98>
 8006be2:	4b89      	ldr	r3, [pc, #548]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a88      	ldr	r2, [pc, #544]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	4b86      	ldr	r3, [pc, #536]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a85      	ldr	r2, [pc, #532]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e01d      	b.n	8006c38 <HAL_RCC_OscConfig+0xd4>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c04:	d10c      	bne.n	8006c20 <HAL_RCC_OscConfig+0xbc>
 8006c06:	4b80      	ldr	r3, [pc, #512]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a7f      	ldr	r2, [pc, #508]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	4b7d      	ldr	r3, [pc, #500]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a7c      	ldr	r2, [pc, #496]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e00b      	b.n	8006c38 <HAL_RCC_OscConfig+0xd4>
 8006c20:	4b79      	ldr	r3, [pc, #484]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a78      	ldr	r2, [pc, #480]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	4b76      	ldr	r3, [pc, #472]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a75      	ldr	r2, [pc, #468]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d013      	beq.n	8006c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fc fbc0 	bl	80033c4 <HAL_GetTick>
 8006c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c48:	f7fc fbbc 	bl	80033c4 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b64      	cmp	r3, #100	; 0x64
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e308      	b.n	800726c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c5a:	4b6b      	ldr	r3, [pc, #428]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCC_OscConfig+0xe4>
 8006c66:	e014      	b.n	8006c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c68:	f7fc fbac 	bl	80033c4 <HAL_GetTick>
 8006c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c70:	f7fc fba8 	bl	80033c4 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b64      	cmp	r3, #100	; 0x64
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e2f4      	b.n	800726c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c82:	4b61      	ldr	r3, [pc, #388]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f0      	bne.n	8006c70 <HAL_RCC_OscConfig+0x10c>
 8006c8e:	e000      	b.n	8006c92 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d06d      	beq.n	8006d7a <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c9e:	4b5a      	ldr	r3, [pc, #360]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ca8:	4b57      	ldr	r3, [pc, #348]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d007      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x160>
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	2b18      	cmp	r3, #24
 8006cb8:	d11b      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x18e>
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d116      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cc4:	4b50      	ldr	r3, [pc, #320]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_RCC_OscConfig+0x178>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e2c7      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cdc:	4b4a      	ldr	r3, [pc, #296]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	061b      	lsls	r3, r3, #24
 8006cea:	4947      	ldr	r1, [pc, #284]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cf0:	e043      	b.n	8006d7a <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d026      	beq.n	8006d48 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006cfa:	4b43      	ldr	r3, [pc, #268]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f023 0219 	bic.w	r2, r3, #25
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	4940      	ldr	r1, [pc, #256]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0c:	f7fc fb5a 	bl	80033c4 <HAL_GetTick>
 8006d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d14:	f7fc fb56 	bl	80033c4 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e2a2      	b.n	800726c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d26:	4b38      	ldr	r3, [pc, #224]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d32:	4b35      	ldr	r3, [pc, #212]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	061b      	lsls	r3, r3, #24
 8006d40:	4931      	ldr	r1, [pc, #196]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	604b      	str	r3, [r1, #4]
 8006d46:	e018      	b.n	8006d7a <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d48:	4b2f      	ldr	r3, [pc, #188]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2e      	ldr	r2, [pc, #184]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d54:	f7fc fb36 	bl	80033c4 <HAL_GetTick>
 8006d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d5c:	f7fc fb32 	bl	80033c4 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e27e      	b.n	800726c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d6e:	4b26      	ldr	r3, [pc, #152]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1f0      	bne.n	8006d5c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d06c      	beq.n	8006e60 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d86:	4b20      	ldr	r3, [pc, #128]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d90:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d94:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d007      	beq.n	8006dac <HAL_RCC_OscConfig+0x248>
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2b18      	cmp	r3, #24
 8006da0:	d11b      	bne.n	8006dda <HAL_RCC_OscConfig+0x276>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d116      	bne.n	8006dda <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dac:	4b16      	ldr	r3, [pc, #88]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x260>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	2b80      	cmp	r3, #128	; 0x80
 8006dbe:	d001      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e253      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dc4:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	061b      	lsls	r3, r3, #24
 8006dd2:	490d      	ldr	r1, [pc, #52]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dd8:	e042      	b.n	8006e60 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d025      	beq.n	8006e2e <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006de2:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a08      	ldr	r2, [pc, #32]	; (8006e08 <HAL_RCC_OscConfig+0x2a4>)
 8006de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dee:	f7fc fae9 	bl	80033c4 <HAL_GetTick>
 8006df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006df4:	e00a      	b.n	8006e0c <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006df6:	f7fc fae5 	bl	80033c4 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d903      	bls.n	8006e0c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e231      	b.n	800726c <HAL_RCC_OscConfig+0x708>
 8006e08:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e0c:	4ba3      	ldr	r3, [pc, #652]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0ee      	beq.n	8006df6 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e18:	4ba0      	ldr	r3, [pc, #640]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	061b      	lsls	r3, r3, #24
 8006e26:	499d      	ldr	r1, [pc, #628]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60cb      	str	r3, [r1, #12]
 8006e2c:	e018      	b.n	8006e60 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e2e:	4b9b      	ldr	r3, [pc, #620]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a9a      	ldr	r2, [pc, #616]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3a:	f7fc fac3 	bl	80033c4 <HAL_GetTick>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e40:	e008      	b.n	8006e54 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e42:	f7fc fabf 	bl	80033c4 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e20b      	b.n	800726c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e54:	4b91      	ldr	r3, [pc, #580]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f0      	bne.n	8006e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d036      	beq.n	8006eda <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d019      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e74:	4b89      	ldr	r3, [pc, #548]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e78:	4a88      	ldr	r2, [pc, #544]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006e7a:	f043 0301 	orr.w	r3, r3, #1
 8006e7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e80:	f7fc faa0 	bl	80033c4 <HAL_GetTick>
 8006e84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e88:	f7fc fa9c 	bl	80033c4 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e1e8      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e9a:	4b80      	ldr	r3, [pc, #512]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0f0      	beq.n	8006e88 <HAL_RCC_OscConfig+0x324>
 8006ea6:	e018      	b.n	8006eda <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ea8:	4b7c      	ldr	r3, [pc, #496]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eac:	4a7b      	ldr	r2, [pc, #492]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006eae:	f023 0301 	bic.w	r3, r3, #1
 8006eb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb4:	f7fc fa86 	bl	80033c4 <HAL_GetTick>
 8006eb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ebc:	f7fc fa82 	bl	80033c4 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e1ce      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ece:	4b73      	ldr	r3, [pc, #460]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1f0      	bne.n	8006ebc <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d036      	beq.n	8006f54 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d019      	beq.n	8006f22 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006eee:	4b6b      	ldr	r3, [pc, #428]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a6a      	ldr	r2, [pc, #424]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006ef4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ef8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006efa:	f7fc fa63 	bl	80033c4 <HAL_GetTick>
 8006efe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f00:	e008      	b.n	8006f14 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f02:	f7fc fa5f 	bl	80033c4 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e1ab      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f14:	4b61      	ldr	r3, [pc, #388]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0f0      	beq.n	8006f02 <HAL_RCC_OscConfig+0x39e>
 8006f20:	e018      	b.n	8006f54 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f22:	4b5e      	ldr	r3, [pc, #376]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a5d      	ldr	r2, [pc, #372]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f2e:	f7fc fa49 	bl	80033c4 <HAL_GetTick>
 8006f32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f36:	f7fc fa45 	bl	80033c4 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e191      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f48:	4b54      	ldr	r3, [pc, #336]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f0      	bne.n	8006f36 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 8081 	beq.w	8007064 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f62:	4b4f      	ldr	r3, [pc, #316]	; (80070a0 <HAL_RCC_OscConfig+0x53c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a4e      	ldr	r2, [pc, #312]	; (80070a0 <HAL_RCC_OscConfig+0x53c>)
 8006f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f6e:	f7fc fa29 	bl	80033c4 <HAL_GetTick>
 8006f72:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f76:	f7fc fa25 	bl	80033c4 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b64      	cmp	r3, #100	; 0x64
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e171      	b.n	800726c <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f88:	4b45      	ldr	r3, [pc, #276]	; (80070a0 <HAL_RCC_OscConfig+0x53c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d106      	bne.n	8006faa <HAL_RCC_OscConfig+0x446>
 8006f9c:	4b3f      	ldr	r3, [pc, #252]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa0:	4a3e      	ldr	r2, [pc, #248]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fa8:	e02d      	b.n	8007006 <HAL_RCC_OscConfig+0x4a2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10c      	bne.n	8006fcc <HAL_RCC_OscConfig+0x468>
 8006fb2:	4b3a      	ldr	r3, [pc, #232]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb6:	4a39      	ldr	r2, [pc, #228]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006fb8:	f023 0301 	bic.w	r3, r3, #1
 8006fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006fbe:	4b37      	ldr	r3, [pc, #220]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	4a36      	ldr	r2, [pc, #216]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006fc4:	f023 0304 	bic.w	r3, r3, #4
 8006fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fca:	e01c      	b.n	8007006 <HAL_RCC_OscConfig+0x4a2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	2b05      	cmp	r3, #5
 8006fd2:	d10c      	bne.n	8006fee <HAL_RCC_OscConfig+0x48a>
 8006fd4:	4b31      	ldr	r3, [pc, #196]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd8:	4a30      	ldr	r2, [pc, #192]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006fda:	f043 0304 	orr.w	r3, r3, #4
 8006fde:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe0:	4b2e      	ldr	r3, [pc, #184]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe4:	4a2d      	ldr	r2, [pc, #180]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	6713      	str	r3, [r2, #112]	; 0x70
 8006fec:	e00b      	b.n	8007006 <HAL_RCC_OscConfig+0x4a2>
 8006fee:	4b2b      	ldr	r3, [pc, #172]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	4a2a      	ldr	r2, [pc, #168]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffa:	4b28      	ldr	r3, [pc, #160]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffe:	4a27      	ldr	r2, [pc, #156]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8007000:	f023 0304 	bic.w	r3, r3, #4
 8007004:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d015      	beq.n	800703a <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700e:	f7fc f9d9 	bl	80033c4 <HAL_GetTick>
 8007012:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007014:	e00a      	b.n	800702c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007016:	f7fc f9d5 	bl	80033c4 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	f241 3288 	movw	r2, #5000	; 0x1388
 8007024:	4293      	cmp	r3, r2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e11f      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800702c:	4b1b      	ldr	r3, [pc, #108]	; (800709c <HAL_RCC_OscConfig+0x538>)
 800702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0ee      	beq.n	8007016 <HAL_RCC_OscConfig+0x4b2>
 8007038:	e014      	b.n	8007064 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703a:	f7fc f9c3 	bl	80033c4 <HAL_GetTick>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007040:	e00a      	b.n	8007058 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007042:	f7fc f9bf 	bl	80033c4 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007050:	4293      	cmp	r3, r2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e109      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007058:	4b10      	ldr	r3, [pc, #64]	; (800709c <HAL_RCC_OscConfig+0x538>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1ee      	bne.n	8007042 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 80fe 	beq.w	800726a <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800706e:	4b0b      	ldr	r3, [pc, #44]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007076:	2b18      	cmp	r3, #24
 8007078:	f000 80b9 	beq.w	80071ee <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	2b02      	cmp	r3, #2
 8007082:	f040 809a 	bne.w	80071ba <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007086:	4b05      	ldr	r3, [pc, #20]	; (800709c <HAL_RCC_OscConfig+0x538>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a04      	ldr	r2, [pc, #16]	; (800709c <HAL_RCC_OscConfig+0x538>)
 800708c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007092:	f7fc f997 	bl	80033c4 <HAL_GetTick>
 8007096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007098:	e00d      	b.n	80070b6 <HAL_RCC_OscConfig+0x552>
 800709a:	bf00      	nop
 800709c:	58024400 	.word	0x58024400
 80070a0:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070a4:	f7fc f98e 	bl	80033c4 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e0da      	b.n	800726c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070b6:	4b6f      	ldr	r3, [pc, #444]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070c2:	4b6c      	ldr	r3, [pc, #432]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 80070c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070c6:	4b6c      	ldr	r3, [pc, #432]	; (8007278 <HAL_RCC_OscConfig+0x714>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070d2:	0112      	lsls	r2, r2, #4
 80070d4:	430a      	orrs	r2, r1
 80070d6:	4967      	ldr	r1, [pc, #412]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	628b      	str	r3, [r1, #40]	; 0x28
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	3b01      	subs	r3, #1
 80070e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ea:	3b01      	subs	r3, #1
 80070ec:	025b      	lsls	r3, r3, #9
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	3b01      	subs	r3, #1
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007104:	3b01      	subs	r3, #1
 8007106:	061b      	lsls	r3, r3, #24
 8007108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800710c:	4959      	ldr	r1, [pc, #356]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 800710e:	4313      	orrs	r3, r2
 8007110:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007112:	4b58      	ldr	r3, [pc, #352]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	4a57      	ldr	r2, [pc, #348]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800711e:	4b55      	ldr	r3, [pc, #340]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007122:	4b56      	ldr	r3, [pc, #344]	; (800727c <HAL_RCC_OscConfig+0x718>)
 8007124:	4013      	ands	r3, r2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800712a:	00d2      	lsls	r2, r2, #3
 800712c:	4951      	ldr	r1, [pc, #324]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 800712e:	4313      	orrs	r3, r2
 8007130:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007132:	4b50      	ldr	r3, [pc, #320]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	f023 020c 	bic.w	r2, r3, #12
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	494d      	ldr	r1, [pc, #308]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007140:	4313      	orrs	r3, r2
 8007142:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007144:	4b4b      	ldr	r3, [pc, #300]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	f023 0202 	bic.w	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007150:	4948      	ldr	r1, [pc, #288]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007152:	4313      	orrs	r3, r2
 8007154:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007156:	4b47      	ldr	r3, [pc, #284]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	4a46      	ldr	r2, [pc, #280]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 800715c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007162:	4b44      	ldr	r3, [pc, #272]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	4a43      	ldr	r2, [pc, #268]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800716c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800716e:	4b41      	ldr	r3, [pc, #260]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	4a40      	ldr	r2, [pc, #256]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800717a:	4b3e      	ldr	r3, [pc, #248]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	4a3d      	ldr	r2, [pc, #244]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007186:	4b3b      	ldr	r3, [pc, #236]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a3a      	ldr	r2, [pc, #232]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 800718c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007192:	f7fc f917 	bl	80033c4 <HAL_GetTick>
 8007196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007198:	e008      	b.n	80071ac <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800719a:	f7fc f913 	bl	80033c4 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e05f      	b.n	800726c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071ac:	4b31      	ldr	r3, [pc, #196]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <HAL_RCC_OscConfig+0x636>
 80071b8:	e057      	b.n	800726a <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ba:	4b2e      	ldr	r3, [pc, #184]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a2d      	ldr	r2, [pc, #180]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 80071c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c6:	f7fc f8fd 	bl	80033c4 <HAL_GetTick>
 80071ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071cc:	e008      	b.n	80071e0 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ce:	f7fc f8f9 	bl	80033c4 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e045      	b.n	800726c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071e0:	4b24      	ldr	r3, [pc, #144]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1f0      	bne.n	80071ce <HAL_RCC_OscConfig+0x66a>
 80071ec:	e03d      	b.n	800726a <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071ee:	4b21      	ldr	r3, [pc, #132]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071f4:	4b1f      	ldr	r3, [pc, #124]	; (8007274 <HAL_RCC_OscConfig+0x710>)
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d031      	beq.n	8007266 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f003 0203 	and.w	r2, r3, #3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800720c:	429a      	cmp	r2, r3
 800720e:	d12a      	bne.n	8007266 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	091b      	lsrs	r3, r3, #4
 8007214:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800721c:	429a      	cmp	r2, r3
 800721e:	d122      	bne.n	8007266 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800722c:	429a      	cmp	r2, r3
 800722e:	d11a      	bne.n	8007266 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	0a5b      	lsrs	r3, r3, #9
 8007234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800723e:	429a      	cmp	r2, r3
 8007240:	d111      	bne.n	8007266 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	0c1b      	lsrs	r3, r3, #16
 8007246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007250:	429a      	cmp	r2, r3
 8007252:	d108      	bne.n	8007266 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	0e1b      	lsrs	r3, r3, #24
 8007258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007260:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007262:	429a      	cmp	r2, r3
 8007264:	d001      	beq.n	800726a <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3730      	adds	r7, #48	; 0x30
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	58024400 	.word	0x58024400
 8007278:	fffffc0c 	.word	0xfffffc0c
 800727c:	ffff0007 	.word	0xffff0007

08007280 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e19c      	b.n	80075ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007294:	4b8a      	ldr	r3, [pc, #552]	; (80074c0 <HAL_RCC_ClockConfig+0x240>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d910      	bls.n	80072c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a2:	4b87      	ldr	r3, [pc, #540]	; (80074c0 <HAL_RCC_ClockConfig+0x240>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f023 020f 	bic.w	r2, r3, #15
 80072aa:	4985      	ldr	r1, [pc, #532]	; (80074c0 <HAL_RCC_ClockConfig+0x240>)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b2:	4b83      	ldr	r3, [pc, #524]	; (80074c0 <HAL_RCC_ClockConfig+0x240>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d001      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e184      	b.n	80075ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d010      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	4b7b      	ldr	r3, [pc, #492]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072dc:	429a      	cmp	r2, r3
 80072de:	d908      	bls.n	80072f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072e0:	4b78      	ldr	r3, [pc, #480]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	4975      	ldr	r1, [pc, #468]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d010      	beq.n	8007320 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	695a      	ldr	r2, [r3, #20]
 8007302:	4b70      	ldr	r3, [pc, #448]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800730a:	429a      	cmp	r2, r3
 800730c:	d908      	bls.n	8007320 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800730e:	4b6d      	ldr	r3, [pc, #436]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	496a      	ldr	r1, [pc, #424]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 800731c:	4313      	orrs	r3, r2
 800731e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	4b64      	ldr	r3, [pc, #400]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007338:	429a      	cmp	r2, r3
 800733a:	d908      	bls.n	800734e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800733c:	4b61      	ldr	r3, [pc, #388]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	495e      	ldr	r1, [pc, #376]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 800734a:	4313      	orrs	r3, r2
 800734c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d010      	beq.n	800737c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69da      	ldr	r2, [r3, #28]
 800735e:	4b59      	ldr	r3, [pc, #356]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007366:	429a      	cmp	r2, r3
 8007368:	d908      	bls.n	800737c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800736a:	4b56      	ldr	r3, [pc, #344]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	4953      	ldr	r1, [pc, #332]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007378:	4313      	orrs	r3, r2
 800737a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d010      	beq.n	80073aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	4b4d      	ldr	r3, [pc, #308]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	429a      	cmp	r2, r3
 8007396:	d908      	bls.n	80073aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007398:	4b4a      	ldr	r3, [pc, #296]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	f023 020f 	bic.w	r2, r3, #15
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	4947      	ldr	r1, [pc, #284]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d055      	beq.n	8007462 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80073b6:	4b43      	ldr	r3, [pc, #268]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	4940      	ldr	r1, [pc, #256]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d107      	bne.n	80073e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073d0:	4b3c      	ldr	r3, [pc, #240]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d121      	bne.n	8007420 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e0f6      	b.n	80075ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d107      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073e8:	4b36      	ldr	r3, [pc, #216]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d115      	bne.n	8007420 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0ea      	b.n	80075ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d107      	bne.n	8007410 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007400:	4b30      	ldr	r3, [pc, #192]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007408:	2b00      	cmp	r3, #0
 800740a:	d109      	bne.n	8007420 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e0de      	b.n	80075ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007410:	4b2c      	ldr	r3, [pc, #176]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e0d6      	b.n	80075ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007420:	4b28      	ldr	r3, [pc, #160]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f023 0207 	bic.w	r2, r3, #7
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4925      	ldr	r1, [pc, #148]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 800742e:	4313      	orrs	r3, r2
 8007430:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007432:	f7fb ffc7 	bl	80033c4 <HAL_GetTick>
 8007436:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007438:	e00a      	b.n	8007450 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800743a:	f7fb ffc3 	bl	80033c4 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	f241 3288 	movw	r2, #5000	; 0x1388
 8007448:	4293      	cmp	r3, r2
 800744a:	d901      	bls.n	8007450 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e0be      	b.n	80075ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007450:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	429a      	cmp	r2, r3
 8007460:	d1eb      	bne.n	800743a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d010      	beq.n	8007490 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	4b14      	ldr	r3, [pc, #80]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	429a      	cmp	r2, r3
 800747c:	d208      	bcs.n	8007490 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800747e:	4b11      	ldr	r3, [pc, #68]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f023 020f 	bic.w	r2, r3, #15
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	490e      	ldr	r1, [pc, #56]	; (80074c4 <HAL_RCC_ClockConfig+0x244>)
 800748c:	4313      	orrs	r3, r2
 800748e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <HAL_RCC_ClockConfig+0x240>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 030f 	and.w	r3, r3, #15
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d214      	bcs.n	80074c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800749e:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <HAL_RCC_ClockConfig+0x240>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f023 020f 	bic.w	r2, r3, #15
 80074a6:	4906      	ldr	r1, [pc, #24]	; (80074c0 <HAL_RCC_ClockConfig+0x240>)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ae:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <HAL_RCC_ClockConfig+0x240>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d005      	beq.n	80074c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e086      	b.n	80075ce <HAL_RCC_ClockConfig+0x34e>
 80074c0:	52002000 	.word	0x52002000
 80074c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d010      	beq.n	80074f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	4b3f      	ldr	r3, [pc, #252]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d208      	bcs.n	80074f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074e4:	4b3c      	ldr	r3, [pc, #240]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	4939      	ldr	r1, [pc, #228]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d010      	beq.n	8007524 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695a      	ldr	r2, [r3, #20]
 8007506:	4b34      	ldr	r3, [pc, #208]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800750e:	429a      	cmp	r2, r3
 8007510:	d208      	bcs.n	8007524 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007512:	4b31      	ldr	r3, [pc, #196]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	492e      	ldr	r1, [pc, #184]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 8007520:	4313      	orrs	r3, r2
 8007522:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b00      	cmp	r3, #0
 800752e:	d010      	beq.n	8007552 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	4b28      	ldr	r3, [pc, #160]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800753c:	429a      	cmp	r2, r3
 800753e:	d208      	bcs.n	8007552 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	4922      	ldr	r1, [pc, #136]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 800754e:	4313      	orrs	r3, r2
 8007550:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d010      	beq.n	8007580 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69da      	ldr	r2, [r3, #28]
 8007562:	4b1d      	ldr	r3, [pc, #116]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800756a:	429a      	cmp	r2, r3
 800756c:	d208      	bcs.n	8007580 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800756e:	4b1a      	ldr	r3, [pc, #104]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	4917      	ldr	r1, [pc, #92]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 800757c:	4313      	orrs	r3, r2
 800757e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007580:	f000 f834 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 8007584:	4602      	mov	r2, r0
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	4912      	ldr	r1, [pc, #72]	; (80075dc <HAL_RCC_ClockConfig+0x35c>)
 8007592:	5ccb      	ldrb	r3, [r1, r3]
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	fa22 f303 	lsr.w	r3, r2, r3
 800759c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <HAL_RCC_ClockConfig+0x358>)
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <HAL_RCC_ClockConfig+0x35c>)
 80075a8:	5cd3      	ldrb	r3, [r2, r3]
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	fa22 f303 	lsr.w	r3, r2, r3
 80075b4:	4a0a      	ldr	r2, [pc, #40]	; (80075e0 <HAL_RCC_ClockConfig+0x360>)
 80075b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075b8:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <HAL_RCC_ClockConfig+0x364>)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80075be:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <HAL_RCC_ClockConfig+0x368>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fb fd32 	bl	800302c <HAL_InitTick>
 80075c8:	4603      	mov	r3, r0
 80075ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	58024400 	.word	0x58024400
 80075dc:	0800dabc 	.word	0x0800dabc
 80075e0:	240005b4 	.word	0x240005b4
 80075e4:	240005b0 	.word	0x240005b0
 80075e8:	240005b8 	.word	0x240005b8

080075ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b089      	sub	sp, #36	; 0x24
 80075f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075f2:	4bb3      	ldr	r3, [pc, #716]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075fa:	2b18      	cmp	r3, #24
 80075fc:	f200 8155 	bhi.w	80078aa <HAL_RCC_GetSysClockFreq+0x2be>
 8007600:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	0800766d 	.word	0x0800766d
 800760c:	080078ab 	.word	0x080078ab
 8007610:	080078ab 	.word	0x080078ab
 8007614:	080078ab 	.word	0x080078ab
 8007618:	080078ab 	.word	0x080078ab
 800761c:	080078ab 	.word	0x080078ab
 8007620:	080078ab 	.word	0x080078ab
 8007624:	080078ab 	.word	0x080078ab
 8007628:	08007693 	.word	0x08007693
 800762c:	080078ab 	.word	0x080078ab
 8007630:	080078ab 	.word	0x080078ab
 8007634:	080078ab 	.word	0x080078ab
 8007638:	080078ab 	.word	0x080078ab
 800763c:	080078ab 	.word	0x080078ab
 8007640:	080078ab 	.word	0x080078ab
 8007644:	080078ab 	.word	0x080078ab
 8007648:	08007699 	.word	0x08007699
 800764c:	080078ab 	.word	0x080078ab
 8007650:	080078ab 	.word	0x080078ab
 8007654:	080078ab 	.word	0x080078ab
 8007658:	080078ab 	.word	0x080078ab
 800765c:	080078ab 	.word	0x080078ab
 8007660:	080078ab 	.word	0x080078ab
 8007664:	080078ab 	.word	0x080078ab
 8007668:	0800769f 	.word	0x0800769f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800766c:	4b94      	ldr	r3, [pc, #592]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0320 	and.w	r3, r3, #32
 8007674:	2b00      	cmp	r3, #0
 8007676:	d009      	beq.n	800768c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007678:	4b91      	ldr	r3, [pc, #580]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	08db      	lsrs	r3, r3, #3
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	4a90      	ldr	r2, [pc, #576]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007684:	fa22 f303 	lsr.w	r3, r2, r3
 8007688:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800768a:	e111      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800768c:	4b8d      	ldr	r3, [pc, #564]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800768e:	61bb      	str	r3, [r7, #24]
    break;
 8007690:	e10e      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007692:	4b8d      	ldr	r3, [pc, #564]	; (80078c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007694:	61bb      	str	r3, [r7, #24]
    break;
 8007696:	e10b      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007698:	4b8c      	ldr	r3, [pc, #560]	; (80078cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800769a:	61bb      	str	r3, [r7, #24]
    break;
 800769c:	e108      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800769e:	4b88      	ldr	r3, [pc, #544]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80076a8:	4b85      	ldr	r3, [pc, #532]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	091b      	lsrs	r3, r3, #4
 80076ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076b4:	4b82      	ldr	r3, [pc, #520]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076be:	4b80      	ldr	r3, [pc, #512]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c2:	08db      	lsrs	r3, r3, #3
 80076c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 80e1 	beq.w	80078a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	f000 8083 	beq.w	80077f0 <HAL_RCC_GetSysClockFreq+0x204>
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	f200 80a1 	bhi.w	8007834 <HAL_RCC_GetSysClockFreq+0x248>
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_RCC_GetSysClockFreq+0x114>
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d056      	beq.n	80077ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80076fe:	e099      	b.n	8007834 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007700:	4b6f      	ldr	r3, [pc, #444]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b00      	cmp	r3, #0
 800770a:	d02d      	beq.n	8007768 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800770c:	4b6c      	ldr	r3, [pc, #432]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	08db      	lsrs	r3, r3, #3
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	4a6b      	ldr	r2, [pc, #428]	; (80078c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007718:	fa22 f303 	lsr.w	r3, r2, r3
 800771c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007736:	4b62      	ldr	r3, [pc, #392]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	ed97 6a02 	vldr	s12, [r7, #8]
 800774a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80078d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800774e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800775a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007766:	e087      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eddf 6a58 	vldr	s13, [pc, #352]	; 80078d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777a:	4b51      	ldr	r3, [pc, #324]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	ed97 6a02 	vldr	s12, [r7, #8]
 800778e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80078d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077aa:	e065      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80078d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80077ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077be:	4b40      	ldr	r3, [pc, #256]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80077d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80078d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ee:	e043      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80078dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	4b2f      	ldr	r3, [pc, #188]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	ed97 6a02 	vldr	s12, [r7, #8]
 8007816:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80078d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007832:	e021      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80078d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a02 	vldr	s12, [r7, #8]
 800785a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80078d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007876:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007878:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	0a5b      	lsrs	r3, r3, #9
 800787e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007882:	3301      	adds	r3, #1
 8007884:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007890:	edd7 6a07 	vldr	s13, [r7, #28]
 8007894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800789c:	ee17 3a90 	vmov	r3, s15
 80078a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80078a2:	e005      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]
    break;
 80078a8:	e002      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80078aa:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078ac:	61bb      	str	r3, [r7, #24]
    break;
 80078ae:	bf00      	nop
  }

  return sysclockfreq;
 80078b0:	69bb      	ldr	r3, [r7, #24]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3724      	adds	r7, #36	; 0x24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	58024400 	.word	0x58024400
 80078c4:	03d09000 	.word	0x03d09000
 80078c8:	003d0900 	.word	0x003d0900
 80078cc:	017d7840 	.word	0x017d7840
 80078d0:	46000000 	.word	0x46000000
 80078d4:	4c742400 	.word	0x4c742400
 80078d8:	4a742400 	.word	0x4a742400
 80078dc:	4bbebc20 	.word	0x4bbebc20

080078e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078e6:	f7ff fe81 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 80078ea:	4602      	mov	r2, r0
 80078ec:	4b10      	ldr	r3, [pc, #64]	; (8007930 <HAL_RCC_GetHCLKFreq+0x50>)
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	0a1b      	lsrs	r3, r3, #8
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	490f      	ldr	r1, [pc, #60]	; (8007934 <HAL_RCC_GetHCLKFreq+0x54>)
 80078f8:	5ccb      	ldrb	r3, [r1, r3]
 80078fa:	f003 031f 	and.w	r3, r3, #31
 80078fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007902:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007904:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <HAL_RCC_GetHCLKFreq+0x50>)
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	4a09      	ldr	r2, [pc, #36]	; (8007934 <HAL_RCC_GetHCLKFreq+0x54>)
 800790e:	5cd3      	ldrb	r3, [r2, r3]
 8007910:	f003 031f 	and.w	r3, r3, #31
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	fa22 f303 	lsr.w	r3, r2, r3
 800791a:	4a07      	ldr	r2, [pc, #28]	; (8007938 <HAL_RCC_GetHCLKFreq+0x58>)
 800791c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800791e:	4a07      	ldr	r2, [pc, #28]	; (800793c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007924:	4b04      	ldr	r3, [pc, #16]	; (8007938 <HAL_RCC_GetHCLKFreq+0x58>)
 8007926:	681b      	ldr	r3, [r3, #0]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	58024400 	.word	0x58024400
 8007934:	0800dabc 	.word	0x0800dabc
 8007938:	240005b4 	.word	0x240005b4
 800793c:	240005b0 	.word	0x240005b0

08007940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007944:	f7ff ffcc 	bl	80078e0 <HAL_RCC_GetHCLKFreq>
 8007948:	4602      	mov	r2, r0
 800794a:	4b06      	ldr	r3, [pc, #24]	; (8007964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	091b      	lsrs	r3, r3, #4
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	4904      	ldr	r1, [pc, #16]	; (8007968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007956:	5ccb      	ldrb	r3, [r1, r3]
 8007958:	f003 031f 	and.w	r3, r3, #31
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007960:	4618      	mov	r0, r3
 8007962:	bd80      	pop	{r7, pc}
 8007964:	58024400 	.word	0x58024400
 8007968:	0800dabc 	.word	0x0800dabc

0800796c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007970:	f7ff ffb6 	bl	80078e0 <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b06      	ldr	r3, [pc, #24]	; (8007990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4904      	ldr	r1, [pc, #16]	; (8007994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	58024400 	.word	0x58024400
 8007994:	0800dabc 	.word	0x0800dabc

08007998 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	223f      	movs	r2, #63	; 0x3f
 80079a6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <HAL_RCC_GetClockConfig+0x7c>)
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f003 0207 	and.w	r2, r3, #7
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80079b4:	4b17      	ldr	r3, [pc, #92]	; (8007a14 <HAL_RCC_GetClockConfig+0x7c>)
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80079c0:	4b14      	ldr	r3, [pc, #80]	; (8007a14 <HAL_RCC_GetClockConfig+0x7c>)
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	f003 020f 	and.w	r2, r3, #15
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80079cc:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <HAL_RCC_GetClockConfig+0x7c>)
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80079d8:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <HAL_RCC_GetClockConfig+0x7c>)
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80079e4:	4b0b      	ldr	r3, [pc, #44]	; (8007a14 <HAL_RCC_GetClockConfig+0x7c>)
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80079f0:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <HAL_RCC_GetClockConfig+0x7c>)
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <HAL_RCC_GetClockConfig+0x80>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	601a      	str	r2, [r3, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	58024400 	.word	0x58024400
 8007a18:	52002000 	.word	0x52002000

08007a1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a24:	2300      	movs	r3, #0
 8007a26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a28:	2300      	movs	r3, #0
 8007a2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d03f      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a40:	d02a      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007a42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a46:	d824      	bhi.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a4c:	d018      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a52:	d81e      	bhi.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a5c:	d007      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a5e:	e018      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a60:	4bab      	ldr	r3, [pc, #684]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	4aaa      	ldr	r2, [pc, #680]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a6c:	e015      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3304      	adds	r3, #4
 8007a72:	2102      	movs	r1, #2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 feff 	bl	8009878 <RCCEx_PLL2_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a7e:	e00c      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3324      	adds	r3, #36	; 0x24
 8007a84:	2102      	movs	r1, #2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 ffa8 	bl	80099dc <RCCEx_PLL3_Config>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a90:	e003      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	75fb      	strb	r3, [r7, #23]
      break;
 8007a96:	e000      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007aa0:	4b9b      	ldr	r3, [pc, #620]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aac:	4998      	ldr	r1, [pc, #608]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	650b      	str	r3, [r1, #80]	; 0x50
 8007ab2:	e001      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d03d      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d826      	bhi.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007acc:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007ae9 	.word	0x08007ae9
 8007ad8:	08007af7 	.word	0x08007af7
 8007adc:	08007b09 	.word	0x08007b09
 8007ae0:	08007b21 	.word	0x08007b21
 8007ae4:	08007b21 	.word	0x08007b21
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae8:	4b89      	ldr	r3, [pc, #548]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	4a88      	ldr	r2, [pc, #544]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007af4:	e015      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3304      	adds	r3, #4
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f001 febb 	bl	8009878 <RCCEx_PLL2_Config>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b06:	e00c      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3324      	adds	r3, #36	; 0x24
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 ff64 	bl	80099dc <RCCEx_PLL3_Config>
 8007b14:	4603      	mov	r3, r0
 8007b16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b18:	e003      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1e:	e000      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b28:	4b79      	ldr	r3, [pc, #484]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2c:	f023 0207 	bic.w	r2, r3, #7
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b34:	4976      	ldr	r1, [pc, #472]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	650b      	str	r3, [r1, #80]	; 0x50
 8007b3a:	e001      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d051      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b52:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b56:	d036      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b58:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b5c:	d830      	bhi.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b62:	d032      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b68:	d82a      	bhi.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b6e:	d02e      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007b70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b74:	d824      	bhi.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b7a:	d018      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b80:	d81e      	bhi.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8007b86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b8a:	d007      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007b8c:	e018      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8e:	4b60      	ldr	r3, [pc, #384]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	4a5f      	ldr	r2, [pc, #380]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b9a:	e019      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 fe68 	bl	8009878 <RCCEx_PLL2_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007bac:	e010      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3324      	adds	r3, #36	; 0x24
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 ff11 	bl	80099dc <RCCEx_PLL3_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bbe:	e007      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc4:	e004      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e002      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007bca:	bf00      	nop
 8007bcc:	e000      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bd6:	4b4e      	ldr	r3, [pc, #312]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007be4:	494a      	ldr	r1, [pc, #296]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	658b      	str	r3, [r1, #88]	; 0x58
 8007bea:	e001      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d051      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007c06:	d036      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007c08:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007c0c:	d830      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c12:	d032      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c18:	d82a      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c1e:	d02e      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007c20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c24:	d824      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c2a:	d018      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c30:	d81e      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007c36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c3a:	d007      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007c3c:	e018      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c3e:	4b34      	ldr	r3, [pc, #208]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	4a33      	ldr	r2, [pc, #204]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c4a:	e019      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	2100      	movs	r1, #0
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 fe10 	bl	8009878 <RCCEx_PLL2_Config>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c5c:	e010      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3324      	adds	r3, #36	; 0x24
 8007c62:	2100      	movs	r1, #0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 feb9 	bl	80099dc <RCCEx_PLL3_Config>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c6e:	e007      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
      break;
 8007c74:	e004      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c86:	4b22      	ldr	r3, [pc, #136]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c94:	491e      	ldr	r1, [pc, #120]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	658b      	str	r3, [r1, #88]	; 0x58
 8007c9a:	e001      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d035      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb0:	2b30      	cmp	r3, #48	; 0x30
 8007cb2:	d01c      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cb4:	2b30      	cmp	r3, #48	; 0x30
 8007cb6:	d817      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d00c      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007cbc:	2b20      	cmp	r3, #32
 8007cbe:	d813      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d016      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007cc4:	2b10      	cmp	r3, #16
 8007cc6:	d10f      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc8:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	4a10      	ldr	r2, [pc, #64]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007cd4:	e00e      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	2102      	movs	r1, #2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 fdcb 	bl	8009878 <RCCEx_PLL2_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007ce6:	e005      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
      break;
 8007cec:	e002      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007cee:	bf00      	nop
 8007cf0:	e000      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10c      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d06:	4902      	ldr	r1, [pc, #8]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d0c:	e004      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007d0e:	bf00      	nop
 8007d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d047      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d2c:	d030      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d32:	d82a      	bhi.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d38:	d02c      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007d3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d3e:	d824      	bhi.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d44:	d018      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d4a:	d81e      	bhi.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d54:	d007      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d56:	e018      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d58:	4bac      	ldr	r3, [pc, #688]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	4aab      	ldr	r2, [pc, #684]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d64:	e017      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 fd83 	bl	8009878 <RCCEx_PLL2_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d76:	e00e      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3324      	adds	r3, #36	; 0x24
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 fe2c 	bl	80099dc <RCCEx_PLL3_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d88:	e005      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8e:	e002      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007d90:	bf00      	nop
 8007d92:	e000      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d109      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d9c:	4b9b      	ldr	r3, [pc, #620]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da8:	4998      	ldr	r1, [pc, #608]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	650b      	str	r3, [r1, #80]	; 0x50
 8007dae:	e001      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d049      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dc8:	d02e      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dce:	d828      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd4:	d02a      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dda:	d822      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007ddc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007de0:	d026      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007de2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007de6:	d81c      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dec:	d010      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df2:	d816      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01d      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dfc:	d111      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	2101      	movs	r1, #1
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 fd37 	bl	8009878 <RCCEx_PLL2_Config>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e0e:	e012      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3324      	adds	r3, #36	; 0x24
 8007e14:	2101      	movs	r1, #1
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fde0 	bl	80099dc <RCCEx_PLL3_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e20:	e009      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	75fb      	strb	r3, [r7, #23]
      break;
 8007e26:	e006      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e28:	bf00      	nop
 8007e2a:	e004      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e002      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e30:	bf00      	nop
 8007e32:	e000      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d109      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e3c:	4b73      	ldr	r3, [pc, #460]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e48:	4970      	ldr	r1, [pc, #448]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	650b      	str	r3, [r1, #80]	; 0x50
 8007e4e:	e001      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d04b      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e6a:	d02e      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e70:	d828      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e76:	d02a      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7c:	d822      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e82:	d026      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007e84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e88:	d81c      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8e:	d010      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e94:	d816      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01d      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e9e:	d111      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 fce6 	bl	8009878 <RCCEx_PLL2_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007eb0:	e012      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3324      	adds	r3, #36	; 0x24
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fd8f 	bl	80099dc <RCCEx_PLL3_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ec2:	e009      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec8:	e006      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007eca:	bf00      	nop
 8007ecc:	e004      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e002      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10a      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ede:	4b4b      	ldr	r3, [pc, #300]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007eec:	4947      	ldr	r1, [pc, #284]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ef2:	e001      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d02f      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f0c:	d00e      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f12:	d814      	bhi.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d015      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007f18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f1c:	d10f      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f1e:	4b3b      	ldr	r3, [pc, #236]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	4a3a      	ldr	r2, [pc, #232]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f2a:	e00c      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	2101      	movs	r1, #1
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fca0 	bl	8009878 <RCCEx_PLL2_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f3c:	e003      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	75fb      	strb	r3, [r7, #23]
      break;
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f4c:	4b2f      	ldr	r3, [pc, #188]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f58:	492c      	ldr	r1, [pc, #176]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	650b      	str	r3, [r1, #80]	; 0x50
 8007f5e:	e001      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d032      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d81b      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007f78:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007fb7 	.word	0x08007fb7
 8007f84:	08007f91 	.word	0x08007f91
 8007f88:	08007f9f 	.word	0x08007f9f
 8007f8c:	08007fb7 	.word	0x08007fb7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f90:	4b1e      	ldr	r3, [pc, #120]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	4a1d      	ldr	r2, [pc, #116]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f9c:	e00c      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	2102      	movs	r1, #2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 fc67 	bl	8009878 <RCCEx_PLL2_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fae:	e003      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb4:	e000      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc2:	f023 0203 	bic.w	r2, r3, #3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fca:	4910      	ldr	r1, [pc, #64]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fd0:	e001      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 808a 	beq.w	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a09      	ldr	r2, [pc, #36]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ff0:	f7fb f9e8 	bl	80033c4 <HAL_GetTick>
 8007ff4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ff6:	e00d      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff8:	f7fb f9e4 	bl	80033c4 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b64      	cmp	r3, #100	; 0x64
 8008004:	d906      	bls.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	75fb      	strb	r3, [r7, #23]
        break;
 800800a:	e009      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800800c:	58024400 	.word	0x58024400
 8008010:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008014:	4bb9      	ldr	r3, [pc, #740]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0eb      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d166      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008026:	4bb6      	ldr	r3, [pc, #728]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008028:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008030:	4053      	eors	r3, r2
 8008032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008036:	2b00      	cmp	r3, #0
 8008038:	d013      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800803a:	4bb1      	ldr	r3, [pc, #708]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008042:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008044:	4bae      	ldr	r3, [pc, #696]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008048:	4aad      	ldr	r2, [pc, #692]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800804a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800804e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008050:	4bab      	ldr	r3, [pc, #684]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008054:	4aaa      	ldr	r2, [pc, #680]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800805a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800805c:	4aa8      	ldr	r2, [pc, #672]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800806c:	d115      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806e:	f7fb f9a9 	bl	80033c4 <HAL_GetTick>
 8008072:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008074:	e00b      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008076:	f7fb f9a5 	bl	80033c4 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	f241 3288 	movw	r2, #5000	; 0x1388
 8008084:	4293      	cmp	r3, r2
 8008086:	d902      	bls.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	75fb      	strb	r3, [r7, #23]
            break;
 800808c:	e005      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800808e:	4b9c      	ldr	r3, [pc, #624]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0ed      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d126      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ae:	d10d      	bne.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80080b0:	4b93      	ldr	r3, [pc, #588]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080be:	0919      	lsrs	r1, r3, #4
 80080c0:	4b90      	ldr	r3, [pc, #576]	; (8008304 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80080c2:	400b      	ands	r3, r1
 80080c4:	498e      	ldr	r1, [pc, #568]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	610b      	str	r3, [r1, #16]
 80080ca:	e005      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80080cc:	4b8c      	ldr	r3, [pc, #560]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	4a8b      	ldr	r2, [pc, #556]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080d6:	6113      	str	r3, [r2, #16]
 80080d8:	4b89      	ldr	r3, [pc, #548]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080e6:	4986      	ldr	r1, [pc, #536]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	670b      	str	r3, [r1, #112]	; 0x70
 80080ec:	e004      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	75bb      	strb	r3, [r7, #22]
 80080f2:	e001      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d07e      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008108:	2b28      	cmp	r3, #40	; 0x28
 800810a:	d867      	bhi.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800810c:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	080081e3 	.word	0x080081e3
 8008118:	080081dd 	.word	0x080081dd
 800811c:	080081dd 	.word	0x080081dd
 8008120:	080081dd 	.word	0x080081dd
 8008124:	080081dd 	.word	0x080081dd
 8008128:	080081dd 	.word	0x080081dd
 800812c:	080081dd 	.word	0x080081dd
 8008130:	080081dd 	.word	0x080081dd
 8008134:	080081b9 	.word	0x080081b9
 8008138:	080081dd 	.word	0x080081dd
 800813c:	080081dd 	.word	0x080081dd
 8008140:	080081dd 	.word	0x080081dd
 8008144:	080081dd 	.word	0x080081dd
 8008148:	080081dd 	.word	0x080081dd
 800814c:	080081dd 	.word	0x080081dd
 8008150:	080081dd 	.word	0x080081dd
 8008154:	080081cb 	.word	0x080081cb
 8008158:	080081dd 	.word	0x080081dd
 800815c:	080081dd 	.word	0x080081dd
 8008160:	080081dd 	.word	0x080081dd
 8008164:	080081dd 	.word	0x080081dd
 8008168:	080081dd 	.word	0x080081dd
 800816c:	080081dd 	.word	0x080081dd
 8008170:	080081dd 	.word	0x080081dd
 8008174:	080081e3 	.word	0x080081e3
 8008178:	080081dd 	.word	0x080081dd
 800817c:	080081dd 	.word	0x080081dd
 8008180:	080081dd 	.word	0x080081dd
 8008184:	080081dd 	.word	0x080081dd
 8008188:	080081dd 	.word	0x080081dd
 800818c:	080081dd 	.word	0x080081dd
 8008190:	080081dd 	.word	0x080081dd
 8008194:	080081e3 	.word	0x080081e3
 8008198:	080081dd 	.word	0x080081dd
 800819c:	080081dd 	.word	0x080081dd
 80081a0:	080081dd 	.word	0x080081dd
 80081a4:	080081dd 	.word	0x080081dd
 80081a8:	080081dd 	.word	0x080081dd
 80081ac:	080081dd 	.word	0x080081dd
 80081b0:	080081dd 	.word	0x080081dd
 80081b4:	080081e3 	.word	0x080081e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3304      	adds	r3, #4
 80081bc:	2101      	movs	r1, #1
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 fb5a 	bl	8009878 <RCCEx_PLL2_Config>
 80081c4:	4603      	mov	r3, r0
 80081c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081c8:	e00c      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3324      	adds	r3, #36	; 0x24
 80081ce:	2101      	movs	r1, #1
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fc03 	bl	80099dc <RCCEx_PLL3_Config>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081da:	e003      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
      break;
 80081e0:	e000      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80081e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d109      	bne.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081ea:	4b45      	ldr	r3, [pc, #276]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f6:	4942      	ldr	r1, [pc, #264]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	654b      	str	r3, [r1, #84]	; 0x54
 80081fc:	e001      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d037      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008212:	2b05      	cmp	r3, #5
 8008214:	d820      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	0800825f 	.word	0x0800825f
 8008220:	08008235 	.word	0x08008235
 8008224:	08008247 	.word	0x08008247
 8008228:	0800825f 	.word	0x0800825f
 800822c:	0800825f 	.word	0x0800825f
 8008230:	0800825f 	.word	0x0800825f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3304      	adds	r3, #4
 8008238:	2101      	movs	r1, #1
 800823a:	4618      	mov	r0, r3
 800823c:	f001 fb1c 	bl	8009878 <RCCEx_PLL2_Config>
 8008240:	4603      	mov	r3, r0
 8008242:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008244:	e00c      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3324      	adds	r3, #36	; 0x24
 800824a:	2101      	movs	r1, #1
 800824c:	4618      	mov	r0, r3
 800824e:	f001 fbc5 	bl	80099dc <RCCEx_PLL3_Config>
 8008252:	4603      	mov	r3, r0
 8008254:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008256:	e003      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	75fb      	strb	r3, [r7, #23]
      break;
 800825c:	e000      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800825e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d109      	bne.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008266:	4b26      	ldr	r3, [pc, #152]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826a:	f023 0207 	bic.w	r2, r3, #7
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008272:	4923      	ldr	r1, [pc, #140]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008274:	4313      	orrs	r3, r2
 8008276:	654b      	str	r3, [r1, #84]	; 0x54
 8008278:	e001      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	d040      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008290:	2b05      	cmp	r3, #5
 8008292:	d821      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008294:	a201      	add	r2, pc, #4	; (adr r2, 800829c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829a:	bf00      	nop
 800829c:	080082df 	.word	0x080082df
 80082a0:	080082b5 	.word	0x080082b5
 80082a4:	080082c7 	.word	0x080082c7
 80082a8:	080082df 	.word	0x080082df
 80082ac:	080082df 	.word	0x080082df
 80082b0:	080082df 	.word	0x080082df
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	2101      	movs	r1, #1
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fadc 	bl	8009878 <RCCEx_PLL2_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082c4:	e00c      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3324      	adds	r3, #36	; 0x24
 80082ca:	2101      	movs	r1, #1
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 fb85 	bl	80099dc <RCCEx_PLL3_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082d6:	e003      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	75fb      	strb	r3, [r7, #23]
      break;
 80082dc:	e000      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80082de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d110      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80082e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ea:	f023 0207 	bic.w	r2, r3, #7
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f4:	4902      	ldr	r1, [pc, #8]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	658b      	str	r3, [r1, #88]	; 0x58
 80082fa:	e007      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80082fc:	58024800 	.word	0x58024800
 8008300:	58024400 	.word	0x58024400
 8008304:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d04b      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008322:	d02e      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008328:	d828      	bhi.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800832a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832e:	d02a      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008334:	d822      	bhi.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008336:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800833a:	d026      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800833c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008340:	d81c      	bhi.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008346:	d010      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800834c:	d816      	bhi.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01d      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008356:	d111      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3304      	adds	r3, #4
 800835c:	2100      	movs	r1, #0
 800835e:	4618      	mov	r0, r3
 8008360:	f001 fa8a 	bl	8009878 <RCCEx_PLL2_Config>
 8008364:	4603      	mov	r3, r0
 8008366:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008368:	e012      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3324      	adds	r3, #36	; 0x24
 800836e:	2102      	movs	r1, #2
 8008370:	4618      	mov	r0, r3
 8008372:	f001 fb33 	bl	80099dc <RCCEx_PLL3_Config>
 8008376:	4603      	mov	r3, r0
 8008378:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800837a:	e009      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	75fb      	strb	r3, [r7, #23]
      break;
 8008380:	e006      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008382:	bf00      	nop
 8008384:	e004      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008386:	bf00      	nop
 8008388:	e002      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800838a:	bf00      	nop
 800838c:	e000      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800838e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10a      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008396:	4bb2      	ldr	r3, [pc, #712]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a4:	49ae      	ldr	r1, [pc, #696]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	654b      	str	r3, [r1, #84]	; 0x54
 80083aa:	e001      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d04b      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083c6:	d02e      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80083c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083cc:	d828      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d2:	d02a      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80083d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d8:	d822      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083de:	d026      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80083e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e4:	d81c      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ea:	d010      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80083ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f0:	d816      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d01d      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80083f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083fa:	d111      	bne.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3304      	adds	r3, #4
 8008400:	2100      	movs	r1, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f001 fa38 	bl	8009878 <RCCEx_PLL2_Config>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800840c:	e012      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3324      	adds	r3, #36	; 0x24
 8008412:	2102      	movs	r1, #2
 8008414:	4618      	mov	r0, r3
 8008416:	f001 fae1 	bl	80099dc <RCCEx_PLL3_Config>
 800841a:	4603      	mov	r3, r0
 800841c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800841e:	e009      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	75fb      	strb	r3, [r7, #23]
      break;
 8008424:	e006      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008426:	bf00      	nop
 8008428:	e004      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800842a:	bf00      	nop
 800842c:	e002      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800842e:	bf00      	nop
 8008430:	e000      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800843a:	4b89      	ldr	r3, [pc, #548]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800843c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008448:	4985      	ldr	r1, [pc, #532]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800844a:	4313      	orrs	r3, r2
 800844c:	658b      	str	r3, [r1, #88]	; 0x58
 800844e:	e001      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845c:	2b00      	cmp	r3, #0
 800845e:	d04b      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008466:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800846a:	d02e      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800846c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008470:	d828      	bhi.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008476:	d02a      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800847c:	d822      	bhi.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800847e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008482:	d026      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008484:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008488:	d81c      	bhi.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800848a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800848e:	d010      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008494:	d816      	bhi.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d01d      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800849a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849e:	d111      	bne.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3304      	adds	r3, #4
 80084a4:	2100      	movs	r1, #0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 f9e6 	bl	8009878 <RCCEx_PLL2_Config>
 80084ac:	4603      	mov	r3, r0
 80084ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084b0:	e012      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	3324      	adds	r3, #36	; 0x24
 80084b6:	2102      	movs	r1, #2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 fa8f 	bl	80099dc <RCCEx_PLL3_Config>
 80084be:	4603      	mov	r3, r0
 80084c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084c2:	e009      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	75fb      	strb	r3, [r7, #23]
      break;
 80084c8:	e006      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80084ca:	bf00      	nop
 80084cc:	e004      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80084ce:	bf00      	nop
 80084d0:	e002      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80084d2:	bf00      	nop
 80084d4:	e000      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80084d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084de:	4b60      	ldr	r3, [pc, #384]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084ec:	495c      	ldr	r1, [pc, #368]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	658b      	str	r3, [r1, #88]	; 0x58
 80084f2:	e001      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0308 	and.w	r3, r3, #8
 8008500:	2b00      	cmp	r3, #0
 8008502:	d018      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800850c:	d10a      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3324      	adds	r3, #36	; 0x24
 8008512:	2102      	movs	r1, #2
 8008514:	4618      	mov	r0, r3
 8008516:	f001 fa61 	bl	80099dc <RCCEx_PLL3_Config>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008524:	4b4e      	ldr	r3, [pc, #312]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008528:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008530:	494b      	ldr	r1, [pc, #300]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008532:	4313      	orrs	r3, r2
 8008534:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0310 	and.w	r3, r3, #16
 800853e:	2b00      	cmp	r3, #0
 8008540:	d01a      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854c:	d10a      	bne.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3324      	adds	r3, #36	; 0x24
 8008552:	2102      	movs	r1, #2
 8008554:	4618      	mov	r0, r3
 8008556:	f001 fa41 	bl	80099dc <RCCEx_PLL3_Config>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008564:	4b3e      	ldr	r3, [pc, #248]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008572:	493b      	ldr	r1, [pc, #236]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008574:	4313      	orrs	r3, r2
 8008576:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d034      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800858a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800858e:	d01d      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008594:	d817      	bhi.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800859a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800859e:	d009      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80085a0:	e011      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3304      	adds	r3, #4
 80085a6:	2100      	movs	r1, #0
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 f965 	bl	8009878 <RCCEx_PLL2_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085b2:	e00c      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3324      	adds	r3, #36	; 0x24
 80085b8:	2102      	movs	r1, #2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fa0e 	bl	80099dc <RCCEx_PLL3_Config>
 80085c0:	4603      	mov	r3, r0
 80085c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085c4:	e003      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
      break;
 80085ca:	e000      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80085cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10a      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085d4:	4b22      	ldr	r3, [pc, #136]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085e2:	491f      	ldr	r1, [pc, #124]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	658b      	str	r3, [r1, #88]	; 0x58
 80085e8:	e001      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d036      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008604:	d01c      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008606:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800860a:	d816      	bhi.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800860c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008610:	d003      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008616:	d007      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008618:	e00f      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800861a:	4b11      	ldr	r3, [pc, #68]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	4a10      	ldr	r2, [pc, #64]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008626:	e00c      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3324      	adds	r3, #36	; 0x24
 800862c:	2101      	movs	r1, #1
 800862e:	4618      	mov	r0, r3
 8008630:	f001 f9d4 	bl	80099dc <RCCEx_PLL3_Config>
 8008634:	4603      	mov	r3, r0
 8008636:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008638:	e003      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
      break;
 800863e:	e000      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10d      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008648:	4b05      	ldr	r3, [pc, #20]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800864a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008656:	4902      	ldr	r1, [pc, #8]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008658:	4313      	orrs	r3, r2
 800865a:	654b      	str	r3, [r1, #84]	; 0x54
 800865c:	e004      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800865e:	bf00      	nop
 8008660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d029      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800867c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008680:	d007      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008682:	e00f      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008684:	4b61      	ldr	r3, [pc, #388]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008688:	4a60      	ldr	r2, [pc, #384]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800868a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800868e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008690:	e00b      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3304      	adds	r3, #4
 8008696:	2102      	movs	r1, #2
 8008698:	4618      	mov	r0, r3
 800869a:	f001 f8ed 	bl	8009878 <RCCEx_PLL2_Config>
 800869e:	4603      	mov	r3, r0
 80086a0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086a2:	e002      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
      break;
 80086a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d109      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086b0:	4b56      	ldr	r3, [pc, #344]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086bc:	4953      	ldr	r1, [pc, #332]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086c2:	e001      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00a      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3324      	adds	r3, #36	; 0x24
 80086d8:	2102      	movs	r1, #2
 80086da:	4618      	mov	r0, r3
 80086dc:	f001 f97e 	bl	80099dc <RCCEx_PLL3_Config>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d030      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086fe:	d017      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008704:	d811      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800870a:	d013      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800870c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008710:	d80b      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d010      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871a:	d106      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800871c:	4b3b      	ldr	r3, [pc, #236]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	4a3a      	ldr	r2, [pc, #232]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008728:	e007      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	75fb      	strb	r3, [r7, #23]
      break;
 800872e:	e004      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008730:	bf00      	nop
 8008732:	e002      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d109      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008740:	4b32      	ldr	r3, [pc, #200]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800874c:	492f      	ldr	r1, [pc, #188]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800874e:	4313      	orrs	r3, r2
 8008750:	654b      	str	r3, [r1, #84]	; 0x54
 8008752:	e001      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d008      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008764:	4b29      	ldr	r3, [pc, #164]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008770:	4926      	ldr	r1, [pc, #152]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008772:	4313      	orrs	r3, r2
 8008774:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d008      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008782:	4b22      	ldr	r3, [pc, #136]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008786:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878e:	491f      	ldr	r1, [pc, #124]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008790:	4313      	orrs	r3, r2
 8008792:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00d      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087a0:	4b1a      	ldr	r3, [pc, #104]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	4a19      	ldr	r2, [pc, #100]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087aa:	6113      	str	r3, [r2, #16]
 80087ac:	4b17      	ldr	r3, [pc, #92]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087ae:	691a      	ldr	r2, [r3, #16]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087b6:	4915      	ldr	r1, [pc, #84]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	da08      	bge.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80087c4:	4b11      	ldr	r3, [pc, #68]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	490e      	ldr	r1, [pc, #56]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80087e2:	4b0a      	ldr	r3, [pc, #40]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f0:	4906      	ldr	r1, [pc, #24]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80087f6:	7dbb      	ldrb	r3, [r7, #22]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e000      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	58024400 	.word	0x58024400

08008810 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b090      	sub	sp, #64	; 0x40
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800881e:	f040 8089 	bne.w	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008822:	4b95      	ldr	r3, [pc, #596]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	633b      	str	r3, [r7, #48]	; 0x30
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	2b04      	cmp	r3, #4
 8008830:	d87d      	bhi.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	0800884d 	.word	0x0800884d
 800883c:	08008871 	.word	0x08008871
 8008840:	08008895 	.word	0x08008895
 8008844:	08008929 	.word	0x08008929
 8008848:	080088b9 	.word	0x080088b9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800884c:	4b8a      	ldr	r3, [pc, #552]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008858:	d107      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800885a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800885e:	4618      	mov	r0, r3
 8008860:	f000 feb8 	bl	80095d4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008868:	e3ed      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800886e:	e3ea      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008870:	4b81      	ldr	r3, [pc, #516]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800887c:	d107      	bne.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800887e:	f107 0318 	add.w	r3, r7, #24
 8008882:	4618      	mov	r0, r3
 8008884:	f000 fbfe 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800888c:	e3db      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008892:	e3d8      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008894:	4b78      	ldr	r3, [pc, #480]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800889c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088a0:	d107      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088a2:	f107 030c 	add.w	r3, r7, #12
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 fd40 	bl	800932c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088b0:	e3c9      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088b6:	e3c6      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088b8:	4b6f      	ldr	r3, [pc, #444]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088c2:	4b6d      	ldr	r3, [pc, #436]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d10c      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80088ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d109      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088d4:	4b68      	ldr	r3, [pc, #416]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	08db      	lsrs	r3, r3, #3
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	4a67      	ldr	r2, [pc, #412]	; (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80088e0:	fa22 f303 	lsr.w	r3, r2, r3
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e6:	e01e      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088e8:	4b63      	ldr	r3, [pc, #396]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f4:	d106      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80088f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088fc:	d102      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80088fe:	4b60      	ldr	r3, [pc, #384]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008902:	e010      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008904:	4b5c      	ldr	r3, [pc, #368]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800890c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008910:	d106      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008918:	d102      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800891a:	4b5a      	ldr	r3, [pc, #360]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800891c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891e:	e002      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008924:	e38f      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008926:	e38e      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008928:	4b57      	ldr	r3, [pc, #348]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800892c:	e38b      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008932:	e388      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800893a:	f040 80a7 	bne.w	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800893e:	4b4e      	ldr	r3, [pc, #312]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008942:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008946:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800894e:	d054      	beq.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008956:	f200 808b 	bhi.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008960:	f000 8083 	beq.w	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800896a:	f200 8081 	bhi.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008974:	d02f      	beq.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800897c:	d878      	bhi.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	2b00      	cmp	r3, #0
 8008982:	d004      	beq.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800898a:	d012      	beq.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800898c:	e070      	b.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800898e:	4b3a      	ldr	r3, [pc, #232]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800899a:	d107      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800899c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fe17 	bl	80095d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089aa:	e34c      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089b0:	e349      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089b2:	4b31      	ldr	r3, [pc, #196]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089be:	d107      	bne.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089c0:	f107 0318 	add.w	r3, r7, #24
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 fb5d 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089ce:	e33a      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d4:	e337      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089d6:	4b28      	ldr	r3, [pc, #160]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089e2:	d107      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e4:	f107 030c 	add.w	r3, r7, #12
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fc9f 	bl	800932c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089f2:	e328      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089f8:	e325      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089fa:	4b1f      	ldr	r3, [pc, #124]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a04:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d10c      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d109      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a16:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	08db      	lsrs	r3, r3, #3
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	4a16      	ldr	r2, [pc, #88]	; (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008a22:	fa22 f303 	lsr.w	r3, r2, r3
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a28:	e01e      	b.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a2a:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a36:	d106      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a3e:	d102      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a40:	4b0f      	ldr	r3, [pc, #60]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a44:	e010      	b.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a46:	4b0c      	ldr	r3, [pc, #48]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a52:	d106      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a5a:	d102      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a5c:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a60:	e002      	b.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a66:	e2ee      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a68:	e2ed      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a6a:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a6e:	e2ea      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a74:	e2e7      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a76:	bf00      	nop
 8008a78:	58024400 	.word	0x58024400
 8008a7c:	03d09000 	.word	0x03d09000
 8008a80:	003d0900 	.word	0x003d0900
 8008a84:	017d7840 	.word	0x017d7840
 8008a88:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a92:	f040 809c 	bne.w	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008a96:	4b9e      	ldr	r3, [pc, #632]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008a9e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aa6:	d054      	beq.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aae:	f200 808b 	bhi.w	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ab8:	f000 8083 	beq.w	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ac2:	f200 8081 	bhi.w	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008acc:	d02f      	beq.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ad4:	d878      	bhi.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ae2:	d012      	beq.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008ae4:	e070      	b.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ae6:	4b8a      	ldr	r3, [pc, #552]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008af2:	d107      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fd6b 	bl	80095d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b02:	e2a0      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b08:	e29d      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b0a:	4b81      	ldr	r3, [pc, #516]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b16:	d107      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b18:	f107 0318 	add.w	r3, r7, #24
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 fab1 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008b26:	e28e      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b2c:	e28b      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b2e:	4b78      	ldr	r3, [pc, #480]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b3a:	d107      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b3c:	f107 030c 	add.w	r3, r7, #12
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 fbf3 	bl	800932c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b4a:	e27c      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b50:	e279      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b52:	4b6f      	ldr	r3, [pc, #444]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b5c:	4b6c      	ldr	r3, [pc, #432]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d10c      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b6e:	4b68      	ldr	r3, [pc, #416]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	08db      	lsrs	r3, r3, #3
 8008b74:	f003 0303 	and.w	r3, r3, #3
 8008b78:	4a66      	ldr	r2, [pc, #408]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b80:	e01e      	b.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b82:	4b63      	ldr	r3, [pc, #396]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8e:	d106      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b96:	d102      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b98:	4b5f      	ldr	r3, [pc, #380]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b9c:	e010      	b.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b9e:	4b5c      	ldr	r3, [pc, #368]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008baa:	d106      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb2:	d102      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008bb4:	4b59      	ldr	r3, [pc, #356]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb8:	e002      	b.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008bbe:	e242      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008bc0:	e241      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bc2:	4b57      	ldr	r3, [pc, #348]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bc6:	e23e      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bcc:	e23b      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd4:	f040 80a6 	bne.w	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008bd8:	4b4d      	ldr	r3, [pc, #308]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bdc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008be0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008be8:	d054      	beq.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bf0:	f200 808b 	bhi.w	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bfa:	f000 8083 	beq.w	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c04:	f200 8081 	bhi.w	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c0e:	d02f      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c16:	d878      	bhi.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d004      	beq.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c24:	d012      	beq.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8008c26:	e070      	b.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c28:	4b39      	ldr	r3, [pc, #228]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c34:	d107      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 fcca 	bl	80095d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c44:	e1ff      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c46:	2300      	movs	r3, #0
 8008c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c4a:	e1fc      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c4c:	4b30      	ldr	r3, [pc, #192]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c58:	d107      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c5a:	f107 0318 	add.w	r3, r7, #24
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fa10 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c68:	e1ed      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6e:	e1ea      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c70:	4b27      	ldr	r3, [pc, #156]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c7c:	d107      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7e:	f107 030c 	add.w	r3, r7, #12
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 fb52 	bl	800932c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c8c:	e1db      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c92:	e1d8      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c94:	4b1e      	ldr	r3, [pc, #120]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c9c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c9e:	4b1c      	ldr	r3, [pc, #112]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0304 	and.w	r3, r3, #4
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	d10c      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8008caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d109      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cb0:	4b17      	ldr	r3, [pc, #92]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	08db      	lsrs	r3, r3, #3
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	4a16      	ldr	r2, [pc, #88]	; (8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc2:	e01e      	b.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cc4:	4b12      	ldr	r3, [pc, #72]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cd0:	d106      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cd8:	d102      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008cda:	4b0f      	ldr	r3, [pc, #60]	; (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cde:	e010      	b.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cec:	d106      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cf4:	d102      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008cf6:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cfa:	e002      	b.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d00:	e1a1      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008d02:	e1a0      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d04:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d08:	e19d      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d0e:	e19a      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008d10:	58024400 	.word	0x58024400
 8008d14:	03d09000 	.word	0x03d09000
 8008d18:	003d0900 	.word	0x003d0900
 8008d1c:	017d7840 	.word	0x017d7840
 8008d20:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d2a:	d173      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008d2c:	4b9a      	ldr	r3, [pc, #616]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d34:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d3c:	d02f      	beq.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d44:	d863      	bhi.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d004      	beq.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d52:	d012      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008d54:	e05b      	b.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d56:	4b90      	ldr	r3, [pc, #576]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d62:	d107      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d64:	f107 0318 	add.w	r3, r7, #24
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 f98b 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d72:	e168      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d78:	e165      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d7a:	4b87      	ldr	r3, [pc, #540]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d86:	d107      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d88:	f107 030c 	add.w	r3, r7, #12
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 facd 	bl	800932c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d96:	e156      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d9c:	e153      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d9e:	4b7e      	ldr	r3, [pc, #504]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008da6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008da8:	4b7b      	ldr	r3, [pc, #492]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d10c      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dba:	4b77      	ldr	r3, [pc, #476]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	08db      	lsrs	r3, r3, #3
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	4a75      	ldr	r2, [pc, #468]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dcc:	e01e      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dce:	4b72      	ldr	r3, [pc, #456]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dda:	d106      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008de2:	d102      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008de4:	4b6e      	ldr	r3, [pc, #440]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de8:	e010      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dea:	4b6b      	ldr	r3, [pc, #428]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008df6:	d106      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dfe:	d102      	bne.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e00:	4b68      	ldr	r3, [pc, #416]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e04:	e002      	b.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e0a:	e11c      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008e0c:	e11b      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e12:	e118      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e1a:	d133      	bne.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008e1c:	4b5e      	ldr	r3, [pc, #376]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e24:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e32:	d012      	beq.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008e34:	e023      	b.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e36:	4b58      	ldr	r3, [pc, #352]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e42:	d107      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fbc3 	bl	80095d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e52:	e0f8      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e58:	e0f5      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e5a:	4b4f      	ldr	r3, [pc, #316]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e66:	d107      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e68:	f107 0318 	add.w	r3, r7, #24
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 f909 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e76:	e0e6      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7c:	e0e3      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e82:	e0e0      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e8a:	f040 808d 	bne.w	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008e8e:	4b42      	ldr	r3, [pc, #264]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e92:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008e96:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e9e:	d06b      	beq.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ea6:	d874      	bhi.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eae:	d056      	beq.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb6:	d86c      	bhi.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ebe:	d03b      	beq.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ec6:	d864      	bhi.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ece:	d021      	beq.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed6:	d85c      	bhi.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d004      	beq.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ee4:	d004      	beq.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008ee6:	e054      	b.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ee8:	f000 f8b6 	bl	8009058 <HAL_RCCEx_GetD3PCLK1Freq>
 8008eec:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008eee:	e0aa      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ef0:	4b29      	ldr	r3, [pc, #164]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008efc:	d107      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008efe:	f107 0318 	add.w	r3, r7, #24
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 f8be 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f0c:	e09b      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f12:	e098      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f14:	4b20      	ldr	r3, [pc, #128]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f20:	d107      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f22:	f107 030c 	add.w	r3, r7, #12
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fa00 	bl	800932c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f30:	e089      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f36:	e086      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f38:	4b17      	ldr	r3, [pc, #92]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d109      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f44:	4b14      	ldr	r3, [pc, #80]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	08db      	lsrs	r3, r3, #3
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	4a13      	ldr	r2, [pc, #76]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008f50:	fa22 f303 	lsr.w	r3, r2, r3
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f56:	e076      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f5c:	e073      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f5e:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6a:	d102      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f70:	e069      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f76:	e066      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f78:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f84:	d102      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008f86:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f8a:	e05c      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f90:	e059      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f96:	e056      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	03d09000 	.word	0x03d09000
 8008fa0:	003d0900 	.word	0x003d0900
 8008fa4:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fae:	d148      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008fb0:	4b27      	ldr	r3, [pc, #156]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fb8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc0:	d02a      	beq.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc8:	d838      	bhi.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd6:	d00d      	beq.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008fd8:	e030      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fda:	4b1d      	ldr	r3, [pc, #116]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fe6:	d102      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008fe8:	4b1a      	ldr	r3, [pc, #104]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008fea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fec:	e02b      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff2:	e028      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ff4:	4b16      	ldr	r3, [pc, #88]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009000:	d107      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fae4 	bl	80095d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009010:	e019      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009016:	e016      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009018:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009024:	d107      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009026:	f107 0318 	add.w	r3, r7, #24
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f82a 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009034:	e007      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800903a:	e004      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009040:	e001      	b.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009048:	4618      	mov	r0, r3
 800904a:	3740      	adds	r7, #64	; 0x40
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	58024400 	.word	0x58024400
 8009054:	017d7840 	.word	0x017d7840

08009058 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800905c:	f7fe fc40 	bl	80078e0 <HAL_RCC_GetHCLKFreq>
 8009060:	4602      	mov	r2, r0
 8009062:	4b06      	ldr	r3, [pc, #24]	; (800907c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	091b      	lsrs	r3, r3, #4
 8009068:	f003 0307 	and.w	r3, r3, #7
 800906c:	4904      	ldr	r1, [pc, #16]	; (8009080 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800906e:	5ccb      	ldrb	r3, [r1, r3]
 8009070:	f003 031f 	and.w	r3, r3, #31
 8009074:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009078:	4618      	mov	r0, r3
 800907a:	bd80      	pop	{r7, pc}
 800907c:	58024400 	.word	0x58024400
 8009080:	0800dabc 	.word	0x0800dabc

08009084 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009084:	b480      	push	{r7}
 8009086:	b089      	sub	sp, #36	; 0x24
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800908c:	4ba1      	ldr	r3, [pc, #644]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009090:	f003 0303 	and.w	r3, r3, #3
 8009094:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009096:	4b9f      	ldr	r3, [pc, #636]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909a:	0b1b      	lsrs	r3, r3, #12
 800909c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090a2:	4b9c      	ldr	r3, [pc, #624]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	091b      	lsrs	r3, r3, #4
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80090ae:	4b99      	ldr	r3, [pc, #612]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	08db      	lsrs	r3, r3, #3
 80090b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 8111 	beq.w	80092f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	f000 8083 	beq.w	80091e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	f200 80a1 	bhi.w	8009224 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d056      	beq.n	800919c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090ee:	e099      	b.n	8009224 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090f0:	4b88      	ldr	r3, [pc, #544]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d02d      	beq.n	8009158 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090fc:	4b85      	ldr	r3, [pc, #532]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	08db      	lsrs	r3, r3, #3
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	4a84      	ldr	r2, [pc, #528]	; (8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009108:	fa22 f303 	lsr.w	r3, r2, r3
 800910c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	ee07 3a90 	vmov	s15, r3
 8009114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009126:	4b7b      	ldr	r3, [pc, #492]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009136:	ed97 6a03 	vldr	s12, [r7, #12]
 800913a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800931c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800913e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800914a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800914e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009152:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009156:	e087      	b.n	8009268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916a:	4b6a      	ldr	r3, [pc, #424]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800916c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917a:	ed97 6a03 	vldr	s12, [r7, #12]
 800917e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800931c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800918e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800919a:	e065      	b.n	8009268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ae:	4b59      	ldr	r3, [pc, #356]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091be:	ed97 6a03 	vldr	s12, [r7, #12]
 80091c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800931c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091de:	e043      	b.n	8009268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f2:	4b48      	ldr	r3, [pc, #288]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009202:	ed97 6a03 	vldr	s12, [r7, #12]
 8009206:	eddf 5a45 	vldr	s11, [pc, #276]	; 800931c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800920a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009222:	e021      	b.n	8009268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009236:	4b37      	ldr	r3, [pc, #220]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009246:	ed97 6a03 	vldr	s12, [r7, #12]
 800924a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800931c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800924e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800925a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009266:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009268:	4b2a      	ldr	r3, [pc, #168]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	0a5b      	lsrs	r3, r3, #9
 800926e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800927e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009282:	edd7 6a07 	vldr	s13, [r7, #28]
 8009286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800928a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800928e:	ee17 2a90 	vmov	r2, s15
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009296:	4b1f      	ldr	r3, [pc, #124]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929a:	0c1b      	lsrs	r3, r3, #16
 800929c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092bc:	ee17 2a90 	vmov	r2, s15
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80092c4:	4b13      	ldr	r3, [pc, #76]	; (8009314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	0e1b      	lsrs	r3, r3, #24
 80092ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092de:	edd7 6a07 	vldr	s13, [r7, #28]
 80092e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ea:	ee17 2a90 	vmov	r2, s15
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092f2:	e008      	b.n	8009306 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	609a      	str	r2, [r3, #8]
}
 8009306:	bf00      	nop
 8009308:	3724      	adds	r7, #36	; 0x24
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	58024400 	.word	0x58024400
 8009318:	03d09000 	.word	0x03d09000
 800931c:	46000000 	.word	0x46000000
 8009320:	4c742400 	.word	0x4c742400
 8009324:	4a742400 	.word	0x4a742400
 8009328:	4bbebc20 	.word	0x4bbebc20

0800932c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800932c:	b480      	push	{r7}
 800932e:	b089      	sub	sp, #36	; 0x24
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009334:	4ba1      	ldr	r3, [pc, #644]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f003 0303 	and.w	r3, r3, #3
 800933c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800933e:	4b9f      	ldr	r3, [pc, #636]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009342:	0d1b      	lsrs	r3, r3, #20
 8009344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009348:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800934a:	4b9c      	ldr	r3, [pc, #624]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	0a1b      	lsrs	r3, r3, #8
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009356:	4b99      	ldr	r3, [pc, #612]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935a:	08db      	lsrs	r3, r3, #3
 800935c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	fb02 f303 	mul.w	r3, r2, r3
 8009366:	ee07 3a90 	vmov	s15, r3
 800936a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 8111 	beq.w	800959c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b02      	cmp	r3, #2
 800937e:	f000 8083 	beq.w	8009488 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b02      	cmp	r3, #2
 8009386:	f200 80a1 	bhi.w	80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d056      	beq.n	8009444 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009396:	e099      	b.n	80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009398:	4b88      	ldr	r3, [pc, #544]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0320 	and.w	r3, r3, #32
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d02d      	beq.n	8009400 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093a4:	4b85      	ldr	r3, [pc, #532]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	08db      	lsrs	r3, r3, #3
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	4a84      	ldr	r2, [pc, #528]	; (80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093b0:	fa22 f303 	lsr.w	r3, r2, r3
 80093b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	ee07 3a90 	vmov	s15, r3
 80093bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	ee07 3a90 	vmov	s15, r3
 80093c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ce:	4b7b      	ldr	r3, [pc, #492]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093de:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80093fe:	e087      	b.n	8009510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800940e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009412:	4b6a      	ldr	r3, [pc, #424]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009422:	ed97 6a03 	vldr	s12, [r7, #12]
 8009426:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800942a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009442:	e065      	b.n	8009510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009456:	4b59      	ldr	r3, [pc, #356]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009466:	ed97 6a03 	vldr	s12, [r7, #12]
 800946a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800946e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800947a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009486:	e043      	b.n	8009510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009492:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800949a:	4b48      	ldr	r3, [pc, #288]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094ca:	e021      	b.n	8009510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094de:	4b37      	ldr	r3, [pc, #220]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80094f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800950a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800950e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009510:	4b2a      	ldr	r3, [pc, #168]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009514:	0a5b      	lsrs	r3, r3, #9
 8009516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800952a:	edd7 6a07 	vldr	s13, [r7, #28]
 800952e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009536:	ee17 2a90 	vmov	r2, s15
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800953e:	4b1f      	ldr	r3, [pc, #124]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	0c1b      	lsrs	r3, r3, #16
 8009544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009548:	ee07 3a90 	vmov	s15, r3
 800954c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009554:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009558:	edd7 6a07 	vldr	s13, [r7, #28]
 800955c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009564:	ee17 2a90 	vmov	r2, s15
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800956c:	4b13      	ldr	r3, [pc, #76]	; (80095bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800956e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009570:	0e1b      	lsrs	r3, r3, #24
 8009572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009586:	edd7 6a07 	vldr	s13, [r7, #28]
 800958a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800958e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009592:	ee17 2a90 	vmov	r2, s15
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800959a:	e008      	b.n	80095ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	609a      	str	r2, [r3, #8]
}
 80095ae:	bf00      	nop
 80095b0:	3724      	adds	r7, #36	; 0x24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	58024400 	.word	0x58024400
 80095c0:	03d09000 	.word	0x03d09000
 80095c4:	46000000 	.word	0x46000000
 80095c8:	4c742400 	.word	0x4c742400
 80095cc:	4a742400 	.word	0x4a742400
 80095d0:	4bbebc20 	.word	0x4bbebc20

080095d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b089      	sub	sp, #36	; 0x24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095dc:	4ba0      	ldr	r3, [pc, #640]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e0:	f003 0303 	and.w	r3, r3, #3
 80095e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80095e6:	4b9e      	ldr	r3, [pc, #632]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	091b      	lsrs	r3, r3, #4
 80095ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80095f2:	4b9b      	ldr	r3, [pc, #620]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80095fc:	4b98      	ldr	r3, [pc, #608]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009600:	08db      	lsrs	r3, r3, #3
 8009602:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	fb02 f303 	mul.w	r3, r2, r3
 800960c:	ee07 3a90 	vmov	s15, r3
 8009610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009614:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 8111 	beq.w	8009842 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	2b02      	cmp	r3, #2
 8009624:	f000 8083 	beq.w	800972e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	2b02      	cmp	r3, #2
 800962c:	f200 80a1 	bhi.w	8009772 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d056      	beq.n	80096ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800963c:	e099      	b.n	8009772 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800963e:	4b88      	ldr	r3, [pc, #544]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b00      	cmp	r3, #0
 8009648:	d02d      	beq.n	80096a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800964a:	4b85      	ldr	r3, [pc, #532]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	08db      	lsrs	r3, r3, #3
 8009650:	f003 0303 	and.w	r3, r3, #3
 8009654:	4a83      	ldr	r2, [pc, #524]	; (8009864 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009656:	fa22 f303 	lsr.w	r3, r2, r3
 800965a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	ee07 3a90 	vmov	s15, r3
 8009662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	ee07 3a90 	vmov	s15, r3
 800966c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009674:	4b7a      	ldr	r3, [pc, #488]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967c:	ee07 3a90 	vmov	s15, r3
 8009680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009684:	ed97 6a03 	vldr	s12, [r7, #12]
 8009688:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800968c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096a4:	e087      	b.n	80097b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	ee07 3a90 	vmov	s15, r3
 80096ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800986c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b8:	4b69      	ldr	r3, [pc, #420]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c0:	ee07 3a90 	vmov	s15, r3
 80096c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096e8:	e065      	b.n	80097b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	ee07 3a90 	vmov	s15, r3
 80096f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009870 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80096f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fc:	4b58      	ldr	r3, [pc, #352]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009704:	ee07 3a90 	vmov	s15, r3
 8009708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009710:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009728:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800972c:	e043      	b.n	80097b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009738:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009874 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800973c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009740:	4b47      	ldr	r3, [pc, #284]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009748:	ee07 3a90 	vmov	s15, r3
 800974c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009750:	ed97 6a03 	vldr	s12, [r7, #12]
 8009754:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009770:	e021      	b.n	80097b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800986c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009784:	4b36      	ldr	r3, [pc, #216]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978c:	ee07 3a90 	vmov	s15, r3
 8009790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009794:	ed97 6a03 	vldr	s12, [r7, #12]
 8009798:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800979c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80097b6:	4b2a      	ldr	r3, [pc, #168]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ba:	0a5b      	lsrs	r3, r3, #9
 80097bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c0:	ee07 3a90 	vmov	s15, r3
 80097c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097dc:	ee17 2a90 	vmov	r2, s15
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80097e4:	4b1e      	ldr	r3, [pc, #120]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e8:	0c1b      	lsrs	r3, r3, #16
 80097ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ee:	ee07 3a90 	vmov	s15, r3
 80097f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800980a:	ee17 2a90 	vmov	r2, s15
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009812:	4b13      	ldr	r3, [pc, #76]	; (8009860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009816:	0e1b      	lsrs	r3, r3, #24
 8009818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981c:	ee07 3a90 	vmov	s15, r3
 8009820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800982c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009838:	ee17 2a90 	vmov	r2, s15
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009840:	e008      	b.n	8009854 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	609a      	str	r2, [r3, #8]
}
 8009854:	bf00      	nop
 8009856:	3724      	adds	r7, #36	; 0x24
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	58024400 	.word	0x58024400
 8009864:	03d09000 	.word	0x03d09000
 8009868:	46000000 	.word	0x46000000
 800986c:	4c742400 	.word	0x4c742400
 8009870:	4a742400 	.word	0x4a742400
 8009874:	4bbebc20 	.word	0x4bbebc20

08009878 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009886:	4b53      	ldr	r3, [pc, #332]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988a:	f003 0303 	and.w	r3, r3, #3
 800988e:	2b03      	cmp	r3, #3
 8009890:	d101      	bne.n	8009896 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e099      	b.n	80099ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009896:	4b4f      	ldr	r3, [pc, #316]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a4e      	ldr	r2, [pc, #312]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 800989c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098a2:	f7f9 fd8f 	bl	80033c4 <HAL_GetTick>
 80098a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098a8:	e008      	b.n	80098bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80098aa:	f7f9 fd8b 	bl	80033c4 <HAL_GetTick>
 80098ae:	4602      	mov	r2, r0
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d901      	bls.n	80098bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e086      	b.n	80099ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098bc:	4b45      	ldr	r3, [pc, #276]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1f0      	bne.n	80098aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098c8:	4b42      	ldr	r3, [pc, #264]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 80098ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	031b      	lsls	r3, r3, #12
 80098d6:	493f      	ldr	r1, [pc, #252]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	628b      	str	r3, [r1, #40]	; 0x28
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	025b      	lsls	r3, r3, #9
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	431a      	orrs	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	041b      	lsls	r3, r3, #16
 80098fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098fe:	431a      	orrs	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	3b01      	subs	r3, #1
 8009906:	061b      	lsls	r3, r3, #24
 8009908:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800990c:	4931      	ldr	r1, [pc, #196]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 800990e:	4313      	orrs	r3, r2
 8009910:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009912:	4b30      	ldr	r3, [pc, #192]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009916:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	492d      	ldr	r1, [pc, #180]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009920:	4313      	orrs	r3, r2
 8009922:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009924:	4b2b      	ldr	r3, [pc, #172]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	f023 0220 	bic.w	r2, r3, #32
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	4928      	ldr	r1, [pc, #160]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009932:	4313      	orrs	r3, r2
 8009934:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009936:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	4a26      	ldr	r2, [pc, #152]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 800993c:	f023 0310 	bic.w	r3, r3, #16
 8009940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009942:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009946:	4b24      	ldr	r3, [pc, #144]	; (80099d8 <RCCEx_PLL2_Config+0x160>)
 8009948:	4013      	ands	r3, r2
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	69d2      	ldr	r2, [r2, #28]
 800994e:	00d2      	lsls	r2, r2, #3
 8009950:	4920      	ldr	r1, [pc, #128]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009952:	4313      	orrs	r3, r2
 8009954:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009956:	4b1f      	ldr	r3, [pc, #124]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	4a1e      	ldr	r2, [pc, #120]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 800995c:	f043 0310 	orr.w	r3, r3, #16
 8009960:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d106      	bne.n	8009976 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009968:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	4a19      	ldr	r2, [pc, #100]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 800996e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009972:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009974:	e00f      	b.n	8009996 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d106      	bne.n	800998a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800997c:	4b15      	ldr	r3, [pc, #84]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 800997e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009980:	4a14      	ldr	r2, [pc, #80]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009986:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009988:	e005      	b.n	8009996 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800998a:	4b12      	ldr	r3, [pc, #72]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	4a11      	ldr	r2, [pc, #68]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009994:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009996:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a0e      	ldr	r2, [pc, #56]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 800999c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099a2:	f7f9 fd0f 	bl	80033c4 <HAL_GetTick>
 80099a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099a8:	e008      	b.n	80099bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80099aa:	f7f9 fd0b 	bl	80033c4 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d901      	bls.n	80099bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e006      	b.n	80099ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099bc:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <RCCEx_PLL2_Config+0x15c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0f0      	beq.n	80099aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	58024400 	.word	0x58024400
 80099d8:	ffff0007 	.word	0xffff0007

080099dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099ea:	4b53      	ldr	r3, [pc, #332]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	f003 0303 	and.w	r3, r3, #3
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d101      	bne.n	80099fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e099      	b.n	8009b2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099fa:	4b4f      	ldr	r3, [pc, #316]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a4e      	ldr	r2, [pc, #312]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a06:	f7f9 fcdd 	bl	80033c4 <HAL_GetTick>
 8009a0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a0c:	e008      	b.n	8009a20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a0e:	f7f9 fcd9 	bl	80033c4 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d901      	bls.n	8009a20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e086      	b.n	8009b2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a20:	4b45      	ldr	r3, [pc, #276]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f0      	bne.n	8009a0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a2c:	4b42      	ldr	r3, [pc, #264]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	051b      	lsls	r3, r3, #20
 8009a3a:	493f      	ldr	r1, [pc, #252]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	628b      	str	r3, [r1, #40]	; 0x28
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	025b      	lsls	r3, r3, #9
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	431a      	orrs	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	041b      	lsls	r3, r3, #16
 8009a5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a62:	431a      	orrs	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	061b      	lsls	r3, r3, #24
 8009a6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a70:	4931      	ldr	r1, [pc, #196]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a76:	4b30      	ldr	r3, [pc, #192]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	492d      	ldr	r1, [pc, #180]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a88:	4b2b      	ldr	r3, [pc, #172]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	4928      	ldr	r1, [pc, #160]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a9a:	4b27      	ldr	r3, [pc, #156]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9e:	4a26      	ldr	r2, [pc, #152]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009aa6:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aaa:	4b24      	ldr	r3, [pc, #144]	; (8009b3c <RCCEx_PLL3_Config+0x160>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	69d2      	ldr	r2, [r2, #28]
 8009ab2:	00d2      	lsls	r2, r2, #3
 8009ab4:	4920      	ldr	r1, [pc, #128]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009aba:	4b1f      	ldr	r3, [pc, #124]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	4a1e      	ldr	r2, [pc, #120]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d106      	bne.n	8009ada <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009acc:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad0:	4a19      	ldr	r2, [pc, #100]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009ad2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ad8:	e00f      	b.n	8009afa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d106      	bne.n	8009aee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ae0:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	4a14      	ldr	r2, [pc, #80]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009ae6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009aea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009aec:	e005      	b.n	8009afa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aee:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	4a11      	ldr	r2, [pc, #68]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009af8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009afa:	4b0f      	ldr	r3, [pc, #60]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a0e      	ldr	r2, [pc, #56]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b06:	f7f9 fc5d 	bl	80033c4 <HAL_GetTick>
 8009b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b0c:	e008      	b.n	8009b20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b0e:	f7f9 fc59 	bl	80033c4 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d901      	bls.n	8009b20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e006      	b.n	8009b2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b20:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <RCCEx_PLL3_Config+0x15c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0f0      	beq.n	8009b0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	58024400 	.word	0x58024400
 8009b3c:	ffff0007 	.word	0xffff0007

08009b40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e0eb      	b.n	8009d2e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a75      	ldr	r2, [pc, #468]	; (8009d38 <HAL_SPI_Init+0x1f8>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d00f      	beq.n	8009b86 <HAL_SPI_Init+0x46>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a74      	ldr	r2, [pc, #464]	; (8009d3c <HAL_SPI_Init+0x1fc>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d00a      	beq.n	8009b86 <HAL_SPI_Init+0x46>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a72      	ldr	r2, [pc, #456]	; (8009d40 <HAL_SPI_Init+0x200>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d005      	beq.n	8009b86 <HAL_SPI_Init+0x46>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	2b0f      	cmp	r3, #15
 8009b80:	d901      	bls.n	8009b86 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e0d3      	b.n	8009d2e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 f976 	bl	800ae78 <SPI_GetPacketSize>
 8009b8c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a69      	ldr	r2, [pc, #420]	; (8009d38 <HAL_SPI_Init+0x1f8>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d00c      	beq.n	8009bb2 <HAL_SPI_Init+0x72>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a67      	ldr	r2, [pc, #412]	; (8009d3c <HAL_SPI_Init+0x1fc>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d007      	beq.n	8009bb2 <HAL_SPI_Init+0x72>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a66      	ldr	r2, [pc, #408]	; (8009d40 <HAL_SPI_Init+0x200>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d002      	beq.n	8009bb2 <HAL_SPI_Init+0x72>
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d811      	bhi.n	8009bd6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009bb6:	4a60      	ldr	r2, [pc, #384]	; (8009d38 <HAL_SPI_Init+0x1f8>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d009      	beq.n	8009bd0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a5e      	ldr	r2, [pc, #376]	; (8009d3c <HAL_SPI_Init+0x1fc>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d004      	beq.n	8009bd0 <HAL_SPI_Init+0x90>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a5d      	ldr	r2, [pc, #372]	; (8009d40 <HAL_SPI_Init+0x200>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d104      	bne.n	8009bda <HAL_SPI_Init+0x9a>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d901      	bls.n	8009bda <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e0a9      	b.n	8009d2e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d106      	bne.n	8009bf4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7f9 f852 	bl	8002c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2202      	movs	r2, #2
 8009bf8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 0201 	bic.w	r2, r2, #1
 8009c0a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c14:	d119      	bne.n	8009c4a <HAL_SPI_Init+0x10a>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c1e:	d103      	bne.n	8009c28 <HAL_SPI_Init+0xe8>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d008      	beq.n	8009c3a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10c      	bne.n	8009c4a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c38:	d107      	bne.n	8009c4a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	69da      	ldr	r2, [r3, #28]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c52:	431a      	orrs	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c5c:	ea42 0103 	orr.w	r1, r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68da      	ldr	r2, [r3, #12]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	431a      	orrs	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	431a      	orrs	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	431a      	orrs	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	431a      	orrs	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009caa:	ea42 0103 	orr.w	r1, r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d113      	bne.n	8009cea <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cd4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ce8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 0201 	bic.w	r2, r2, #1
 8009cf8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	40013000 	.word	0x40013000
 8009d3c:	40003800 	.word	0x40003800
 8009d40:	40003c00 	.word	0x40003c00

08009d44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08e      	sub	sp, #56	; 0x38
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3320      	adds	r3, #32
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3330      	adds	r3, #48	; 0x30
 8009d66:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <HAL_SPI_TransmitReceive+0x32>
 8009d72:	2302      	movs	r3, #2
 8009d74:	e2ce      	b.n	800a314 <HAL_SPI_TransmitReceive+0x5d0>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d7e:	f7f9 fb21 	bl	80033c4 <HAL_GetTick>
 8009d82:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8009d84:	887b      	ldrh	r3, [r7, #2]
 8009d86:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8009d88:	887b      	ldrh	r3, [r7, #2]
 8009d8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d92:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d9a:	7efb      	ldrb	r3, [r7, #27]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d014      	beq.n	8009dca <HAL_SPI_TransmitReceive+0x86>
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009da6:	d106      	bne.n	8009db6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <HAL_SPI_TransmitReceive+0x72>
 8009db0:	7efb      	ldrb	r3, [r7, #27]
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d009      	beq.n	8009dca <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8009db6:	2302      	movs	r3, #2
 8009db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009dc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dc8:	e2a4      	b.n	800a314 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d005      	beq.n	8009ddc <HAL_SPI_TransmitReceive+0x98>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <HAL_SPI_TransmitReceive+0x98>
 8009dd6:	887b      	ldrh	r3, [r7, #2]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d109      	bne.n	8009df0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dee:	e291      	b.n	800a314 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b04      	cmp	r3, #4
 8009dfa:	d003      	beq.n	8009e04 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2205      	movs	r2, #5
 8009e00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	887a      	ldrh	r2, [r7, #2]
 8009e16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	887a      	ldrh	r2, [r7, #2]
 8009e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	887a      	ldrh	r2, [r7, #2]
 8009e2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	887a      	ldrh	r2, [r7, #2]
 8009e34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	4b9f      	ldr	r3, [pc, #636]	; (800a0c8 <HAL_SPI_TransmitReceive+0x384>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	8879      	ldrh	r1, [r7, #2]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	6812      	ldr	r2, [r2, #0]
 8009e54:	430b      	orrs	r3, r1
 8009e56:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e70:	d107      	bne.n	8009e82 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	2b0f      	cmp	r3, #15
 8009e88:	d970      	bls.n	8009f6c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009e8a:	e068      	b.n	8009f5e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d11a      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x18c>
 8009e9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d017      	beq.n	8009ed0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6812      	ldr	r2, [r2, #0]
 8009eaa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eb0:	1d1a      	adds	r2, r3, #4
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ece:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	695a      	ldr	r2, [r3, #20]
 8009ed6:	f248 0308 	movw	r3, #32776	; 0x8008
 8009eda:	4013      	ands	r3, r2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d01a      	beq.n	8009f16 <HAL_SPI_TransmitReceive+0x1d2>
 8009ee0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d017      	beq.n	8009f16 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009ef0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ef6:	1d1a      	adds	r2, r3, #4
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	3b01      	subs	r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009f14:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f16:	f7f9 fa55 	bl	80033c4 <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d803      	bhi.n	8009f2e <HAL_SPI_TransmitReceive+0x1ea>
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2c:	d102      	bne.n	8009f34 <HAL_SPI_TransmitReceive+0x1f0>
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d114      	bne.n	8009f5e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 fed1 	bl	800acdc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e1da      	b.n	800a314 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009f5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d193      	bne.n	8009e8c <HAL_SPI_TransmitReceive+0x148>
 8009f64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d190      	bne.n	8009e8c <HAL_SPI_TransmitReceive+0x148>
 8009f6a:	e1ac      	b.n	800a2c6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	2b07      	cmp	r3, #7
 8009f72:	f240 81a0 	bls.w	800a2b6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009f76:	e0a9      	b.n	800a0cc <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	f003 0302 	and.w	r3, r3, #2
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d139      	bne.n	8009ffa <HAL_SPI_TransmitReceive+0x2b6>
 8009f86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d036      	beq.n	8009ffa <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009f8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d91c      	bls.n	8009fcc <HAL_SPI_TransmitReceive+0x288>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d018      	beq.n	8009fcc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6812      	ldr	r2, [r2, #0]
 8009fa4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009faa:	1d1a      	adds	r2, r3, #4
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	3b02      	subs	r3, #2
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009fca:	e016      	b.n	8009ffa <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd0:	881a      	ldrh	r2, [r3, #0]
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fda:	1c9a      	adds	r2, r3, #2
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d03a      	beq.n	800a07e <HAL_SPI_TransmitReceive+0x33a>
 800a008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d037      	beq.n	800a07e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d018      	beq.n	800a04e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a024:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a026:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a02c:	1d1a      	adds	r2, r3, #4
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a038:	b29b      	uxth	r3, r3
 800a03a:	3b02      	subs	r3, #2
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a04a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a04c:	e017      	b.n	800a07e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a052:	6a3a      	ldr	r2, [r7, #32]
 800a054:	8812      	ldrh	r2, [r2, #0]
 800a056:	b292      	uxth	r2, r2
 800a058:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a05e:	1c9a      	adds	r2, r3, #2
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	3b01      	subs	r3, #1
 800a06e:	b29a      	uxth	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a07c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a07e:	f7f9 f9a1 	bl	80033c4 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d803      	bhi.n	800a096 <HAL_SPI_TransmitReceive+0x352>
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a094:	d102      	bne.n	800a09c <HAL_SPI_TransmitReceive+0x358>
 800a096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d117      	bne.n	800a0cc <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fe1d 	bl	800acdc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e126      	b.n	800a314 <HAL_SPI_TransmitReceive+0x5d0>
 800a0c6:	bf00      	nop
 800a0c8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a0cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f47f af52 	bne.w	8009f78 <HAL_SPI_TransmitReceive+0x234>
 800a0d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f47f af4e 	bne.w	8009f78 <HAL_SPI_TransmitReceive+0x234>
 800a0dc:	e0f3      	b.n	800a2c6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	f003 0302 	and.w	r3, r3, #2
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d15a      	bne.n	800a1a2 <HAL_SPI_TransmitReceive+0x45e>
 800a0ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d057      	beq.n	800a1a2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a0f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d91c      	bls.n	800a132 <HAL_SPI_TransmitReceive+0x3ee>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fc:	2b40      	cmp	r3, #64	; 0x40
 800a0fe:	d918      	bls.n	800a132 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6812      	ldr	r2, [r2, #0]
 800a10a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a110:	1d1a      	adds	r2, r3, #4
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	3b04      	subs	r3, #4
 800a120:	b29a      	uxth	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a12e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a130:	e037      	b.n	800a1a2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a134:	2b01      	cmp	r3, #1
 800a136:	d91b      	bls.n	800a170 <HAL_SPI_TransmitReceive+0x42c>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d017      	beq.n	800a170 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a144:	881a      	ldrh	r2, [r3, #0]
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a14e:	1c9a      	adds	r2, r3, #2
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	3b02      	subs	r3, #2
 800a15e:	b29a      	uxth	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a16c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a16e:	e018      	b.n	800a1a2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3320      	adds	r3, #32
 800a17a:	7812      	ldrb	r2, [r2, #0]
 800a17c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a182:	1c5a      	adds	r2, r3, #1
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a18e:	b29b      	uxth	r3, r3
 800a190:	3b01      	subs	r3, #1
 800a192:	b29a      	uxth	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d05e      	beq.n	800a26e <HAL_SPI_TransmitReceive+0x52a>
 800a1b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d05b      	beq.n	800a26e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d018      	beq.n	800a1f6 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a1ce:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1d4:	1d1a      	adds	r2, r3, #4
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	3b04      	subs	r3, #4
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a1f4:	e03b      	b.n	800a26e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a204:	d918      	bls.n	800a238 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a20a:	6a3a      	ldr	r2, [r7, #32]
 800a20c:	8812      	ldrh	r2, [r2, #0]
 800a20e:	b292      	uxth	r2, r2
 800a210:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a216:	1c9a      	adds	r2, r3, #2
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a222:	b29b      	uxth	r3, r3
 800a224:	3b02      	subs	r3, #2
 800a226:	b29a      	uxth	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a234:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a236:	e01a      	b.n	800a26e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a244:	7812      	ldrb	r2, [r2, #0]
 800a246:	b2d2      	uxtb	r2, r2
 800a248:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a24e:	1c5a      	adds	r2, r3, #1
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	3b01      	subs	r3, #1
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a26c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a26e:	f7f9 f8a9 	bl	80033c4 <HAL_GetTick>
 800a272:	4602      	mov	r2, r0
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d803      	bhi.n	800a286 <HAL_SPI_TransmitReceive+0x542>
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a284:	d102      	bne.n	800a28c <HAL_SPI_TransmitReceive+0x548>
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d114      	bne.n	800a2b6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 fd25 	bl	800acdc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e02e      	b.n	800a314 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a2b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f47f af10 	bne.w	800a0de <HAL_SPI_TransmitReceive+0x39a>
 800a2be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f47f af0c 	bne.w	800a0de <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2108      	movs	r1, #8
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f000 fda3 	bl	800ae1c <SPI_WaitOnFlagUntilTimeout>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d007      	beq.n	800a2ec <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2e2:	f043 0220 	orr.w	r2, r3, #32
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 fcf5 	bl	800acdc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e001      	b.n	800a314 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a314:	4618      	mov	r0, r3
 800a316:	3730      	adds	r7, #48	; 0x30
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData: pointer to reception data buffer
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b08b      	sub	sp, #44	; 0x2c
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef  tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	77fb      	strb	r3, [r7, #31]
  uint32_t max_fifo_length = 0UL;
 800a32e:	2300      	movs	r3, #0
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_TxXferCount;
  #if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3320      	adds	r3, #32
 800a338:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <HAL_SPI_TransmitReceive_IT+0x2c>
 800a344:	2302      	movs	r3, #2
 800a346:	e17f      	b.n	800a648 <HAL_SPI_TransmitReceive_IT+0x32c>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state  = hspi->State;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a356:	75fb      	strb	r3, [r7, #23]
  tmp_mode   = hspi->Init.Mode;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d012      	beq.n	800a38a <HAL_SPI_TransmitReceive_IT+0x6e>
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a36a:	d106      	bne.n	800a37a <HAL_SPI_TransmitReceive_IT+0x5e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <HAL_SPI_TransmitReceive_IT+0x5e>
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	2b04      	cmp	r3, #4
 800a378:	d007      	beq.n	800a38a <HAL_SPI_TransmitReceive_IT+0x6e>
  {
    errorcode = HAL_BUSY;
 800a37a:	2302      	movs	r3, #2
 800a37c:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a386:	7ffb      	ldrb	r3, [r7, #31]
 800a388:	e15e      	b.n	800a648 <HAL_SPI_TransmitReceive_IT+0x32c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <HAL_SPI_TransmitReceive_IT+0x80>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <HAL_SPI_TransmitReceive_IT+0x80>
 800a396:	887b      	ldrh	r3, [r7, #2]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d107      	bne.n	800a3ac <HAL_SPI_TransmitReceive_IT+0x90>
  {
    errorcode = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a3a8:	7ffb      	ldrb	r3, [r7, #31]
 800a3aa:	e14d      	b.n	800a648 <HAL_SPI_TransmitReceive_IT+0x32c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d003      	beq.n	800a3c0 <HAL_SPI_TransmitReceive_IT+0xa4>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2205      	movs	r2, #5
 800a3bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	887a      	ldrh	r2, [r7, #2]
 800a3d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	887a      	ldrh	r2, [r7, #2]
 800a3da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	887a      	ldrh	r2, [r7, #2]
 800a3e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	887a      	ldrh	r2, [r7, #2]
 800a3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  tmp_TxXferCount = hspi->TxXferCount;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	623b      	str	r3, [r7, #32]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	2b0f      	cmp	r3, #15
 800a404:	d906      	bls.n	800a414 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	4a92      	ldr	r2, [pc, #584]	; (800a654 <HAL_SPI_TransmitReceive_IT+0x338>)
 800a40a:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4a92      	ldr	r2, [pc, #584]	; (800a658 <HAL_SPI_TransmitReceive_IT+0x33c>)
 800a410:	671a      	str	r2, [r3, #112]	; 0x70
 800a412:	e010      	b.n	800a436 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	2b07      	cmp	r3, #7
 800a41a:	d906      	bls.n	800a42a <HAL_SPI_TransmitReceive_IT+0x10e>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4a8f      	ldr	r2, [pc, #572]	; (800a65c <HAL_SPI_TransmitReceive_IT+0x340>)
 800a420:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	4a8e      	ldr	r2, [pc, #568]	; (800a660 <HAL_SPI_TransmitReceive_IT+0x344>)
 800a426:	675a      	str	r2, [r3, #116]	; 0x74
 800a428:	e005      	b.n	800a436 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4a8d      	ldr	r2, [pc, #564]	; (800a664 <HAL_SPI_TransmitReceive_IT+0x348>)
 800a42e:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4a8d      	ldr	r2, [pc, #564]	; (800a668 <HAL_SPI_TransmitReceive_IT+0x34c>)
 800a434:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	4b8b      	ldr	r3, [pc, #556]	; (800a66c <HAL_SPI_TransmitReceive_IT+0x350>)
 800a43e:	4013      	ands	r3, r2
 800a440:	8879      	ldrh	r1, [r7, #2]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	6812      	ldr	r2, [r2, #0]
 800a446:	430b      	orrs	r3, r1
 800a448:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f042 0201 	orr.w	r2, r2, #1
 800a458:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800a45a:	e0cf      	b.n	800a5fc <HAL_SPI_TransmitReceive_IT+0x2e0>
  {
    if (max_fifo_length < MAX_FIFO_LENGTH)
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	2b0f      	cmp	r3, #15
 800a460:	f200 80c4 	bhi.w	800a5ec <HAL_SPI_TransmitReceive_IT+0x2d0>
    {
      /* Transmit data in 32 Bit mode */
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	2b0f      	cmp	r3, #15
 800a46a:	d919      	bls.n	800a4a0 <HAL_SPI_TransmitReceive_IT+0x184>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6812      	ldr	r2, [r2, #0]
 800a476:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a47c:	1d1a      	adds	r2, r3, #4
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a488:	b29b      	uxth	r3, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	623b      	str	r3, [r7, #32]
 800a49e:	e0a1      	b.n	800a5e4 <HAL_SPI_TransmitReceive_IT+0x2c8>
      }
      /* Transmit data in 16 Bit mode */
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	2b07      	cmp	r3, #7
 800a4a6:	d93c      	bls.n	800a522 <HAL_SPI_TransmitReceive_IT+0x206>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d91d      	bls.n	800a4f0 <HAL_SPI_TransmitReceive_IT+0x1d4>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d019      	beq.n	800a4f0 <HAL_SPI_TransmitReceive_IT+0x1d4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6812      	ldr	r2, [r2, #0]
 800a4c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4cc:	1d1a      	adds	r2, r3, #4
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	3b02      	subs	r3, #2
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	623b      	str	r3, [r7, #32]
 800a4ee:	e079      	b.n	800a5e4 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f4:	881a      	ldrh	r2, [r3, #0]
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fe:	1c9a      	adds	r2, r3, #2
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	3b01      	subs	r3, #1
 800a50e:	b29a      	uxth	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	623b      	str	r3, [r7, #32]
 800a520:	e060      	b.n	800a5e4 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
      }
      /* Transmit data in 8 Bit mode */
      else
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b03      	cmp	r3, #3
 800a52c:	d91d      	bls.n	800a56a <HAL_SPI_TransmitReceive_IT+0x24e>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a532:	2b40      	cmp	r3, #64	; 0x40
 800a534:	d919      	bls.n	800a56a <HAL_SPI_TransmitReceive_IT+0x24e>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6812      	ldr	r2, [r2, #0]
 800a540:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a546:	1d1a      	adds	r2, r3, #4
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a552:	b29b      	uxth	r3, r3
 800a554:	3b04      	subs	r3, #4
 800a556:	b29a      	uxth	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a564:	b29b      	uxth	r3, r3
 800a566:	623b      	str	r3, [r7, #32]
 800a568:	e03c      	b.n	800a5e4 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a570:	b29b      	uxth	r3, r3
 800a572:	2b01      	cmp	r3, #1
 800a574:	d91c      	bls.n	800a5b0 <HAL_SPI_TransmitReceive_IT+0x294>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d018      	beq.n	800a5b0 <HAL_SPI_TransmitReceive_IT+0x294>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a582:	881a      	ldrh	r2, [r3, #0]
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a58c:	1c9a      	adds	r2, r3, #2
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a598:	b29b      	uxth	r3, r3
 800a59a:	3b02      	subs	r3, #2
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	623b      	str	r3, [r7, #32]
 800a5ae:	e019      	b.n	800a5e4 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3320      	adds	r3, #32
 800a5ba:	7812      	ldrb	r2, [r2, #0]
 800a5bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	623b      	str	r3, [r7, #32]
        }
      }

      max_fifo_length++;
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ea:	e007      	b.n	800a5fc <HAL_SPI_TransmitReceive_IT+0x2e0>
    }
    else
    {
      errorcode = HAL_BUSY;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	77fb      	strb	r3, [r7, #31]
      __HAL_UNLOCK(hspi);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return errorcode;
 800a5f8:	7ffb      	ldrb	r3, [r7, #31]
 800a5fa:	e025      	b.n	800a648 <HAL_SPI_TransmitReceive_IT+0x32c>
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b02      	cmp	r3, #2
 800a608:	d103      	bne.n	800a612 <HAL_SPI_TransmitReceive_IT+0x2f6>
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f47f af25 	bne.w	800a45c <HAL_SPI_TransmitReceive_IT+0x140>
    }
  }

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6919      	ldr	r1, [r3, #16]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	f240 736c 	movw	r3, #1900	; 0x76c
 800a620:	430b      	orrs	r3, r1
 800a622:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a62c:	d107      	bne.n	800a63e <HAL_SPI_TransmitReceive_IT+0x322>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a63c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800a646:	7ffb      	ldrb	r3, [r7, #31]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	372c      	adds	r7, #44	; 0x2c
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	0800ac83 	.word	0x0800ac83
 800a658:	0800ab73 	.word	0x0800ab73
 800a65c:	0800ab13 	.word	0x0800ab13
 800a660:	0800ac25 	.word	0x0800ac25
 800a664:	0800aab5 	.word	0x0800aab5
 800a668:	0800abcb 	.word	0x0800abcb
 800a66c:	ffff0000 	.word	0xffff0000

0800a670 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08a      	sub	sp, #40	; 0x28
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a688:	6a3a      	ldr	r2, [r7, #32]
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	4013      	ands	r3, r2
 800a68e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a698:	2300      	movs	r3, #0
 800a69a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6a2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3330      	adds	r3, #48	; 0x30
 800a6aa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d113      	bne.n	800a6de <HAL_SPI_IRQHandler+0x6e>
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	f003 0320 	and.w	r3, r3, #32
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10e      	bne.n	800a6de <HAL_SPI_IRQHandler+0x6e>
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	f003 0304 	and.w	r3, r3, #4
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d009      	beq.n	800a6de <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	4798      	blx	r3
    handled = 1UL;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10f      	bne.n	800a708 <HAL_SPI_IRQHandler+0x98>
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00a      	beq.n	800a708 <HAL_SPI_IRQHandler+0x98>
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	f003 0304 	and.w	r3, r3, #4
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d105      	bne.n	800a708 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	4798      	blx	r3
    handled = 1UL;
 800a704:	2301      	movs	r3, #1
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	f003 0320 	and.w	r3, r3, #32
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10f      	bne.n	800a732 <HAL_SPI_IRQHandler+0xc2>
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	f003 0302 	and.w	r3, r3, #2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00a      	beq.n	800a732 <HAL_SPI_IRQHandler+0xc2>
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b00      	cmp	r3, #0
 800a724:	d105      	bne.n	800a732 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	4798      	blx	r3
    handled = 1UL;
 800a72e:	2301      	movs	r3, #1
 800a730:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a734:	2b00      	cmp	r3, #0
 800a736:	f040 816f 	bne.w	800aa18 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	f003 0308 	and.w	r3, r3, #8
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 80a0 	beq.w	800a886 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f042 0208 	orr.w	r2, r2, #8
 800a754:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	699a      	ldr	r2, [r3, #24]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f042 0210 	orr.w	r2, r2, #16
 800a764:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	699a      	ldr	r2, [r3, #24]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a774:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	691a      	ldr	r2, [r3, #16]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f022 0208 	bic.w	r2, r2, #8
 800a784:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00f      	beq.n	800a7b0 <HAL_SPI_IRQHandler+0x140>
 800a790:	7cfb      	ldrb	r3, [r7, #19]
 800a792:	2b04      	cmp	r3, #4
 800a794:	d004      	beq.n	800a7a0 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a79a:	69db      	ldr	r3, [r3, #28]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d007      	beq.n	800a7b0 <HAL_SPI_IRQHandler+0x140>
 800a7a0:	7cfb      	ldrb	r3, [r7, #19]
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d059      	beq.n	800a85a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d154      	bne.n	800a85a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d13d      	bne.n	800a83a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a7be:	e036      	b.n	800a82e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	2b0f      	cmp	r3, #15
 800a7c6:	d90b      	bls.n	800a7e0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a7d2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7d8:	1d1a      	adds	r2, r3, #4
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	665a      	str	r2, [r3, #100]	; 0x64
 800a7de:	e01d      	b.n	800a81c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	2b07      	cmp	r3, #7
 800a7e6:	d90b      	bls.n	800a800 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	8812      	ldrh	r2, [r2, #0]
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7f8:	1c9a      	adds	r2, r3, #2
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	665a      	str	r2, [r3, #100]	; 0x64
 800a7fe:	e00d      	b.n	800a81c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a80c:	7812      	ldrb	r2, [r2, #0]
 800a80e:	b2d2      	uxtb	r2, r2
 800a810:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a822:	b29b      	uxth	r3, r3
 800a824:	3b01      	subs	r3, #1
 800a826:	b29a      	uxth	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a834:	b29b      	uxth	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1c2      	bne.n	800a7c0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fa4e 	bl	800acdc <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d003      	beq.n	800a85a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f90a 	bl	800aa6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a858:	e0e3      	b.n	800aa22 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a85a:	7cfb      	ldrb	r3, [r7, #19]
 800a85c:	2b05      	cmp	r3, #5
 800a85e:	d103      	bne.n	800a868 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f8f9 	bl	800aa58 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800a866:	e0d9      	b.n	800aa1c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a868:	7cfb      	ldrb	r3, [r7, #19]
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d103      	bne.n	800a876 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f8e8 	bl	800aa44 <HAL_SPI_RxCpltCallback>
    return;
 800a874:	e0d2      	b.n	800aa1c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a876:	7cfb      	ldrb	r3, [r7, #19]
 800a878:	2b03      	cmp	r3, #3
 800a87a:	f040 80cf 	bne.w	800aa1c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f8d6 	bl	800aa30 <HAL_SPI_TxCpltCallback>
    return;
 800a884:	e0ca      	b.n	800aa1c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00d      	beq.n	800a8ac <HAL_SPI_IRQHandler+0x23c>
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	f003 0308 	and.w	r3, r3, #8
 800a896:	2b00      	cmp	r3, #0
 800a898:	d008      	beq.n	800a8ac <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	699a      	ldr	r2, [r3, #24]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8a8:	619a      	str	r2, [r3, #24]

    return;
 800a8aa:	e0ba      	b.n	800aa22 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 80b5 	beq.w	800aa22 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00f      	beq.n	800a8e2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8c8:	f043 0204 	orr.w	r2, r3, #4
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	699a      	ldr	r2, [r3, #24]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00f      	beq.n	800a90c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8f2:	f043 0201 	orr.w	r2, r3, #1
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699a      	ldr	r2, [r3, #24]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a90a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00f      	beq.n	800a936 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a91c:	f043 0208 	orr.w	r2, r3, #8
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	699a      	ldr	r2, [r3, #24]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a934:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	f003 0320 	and.w	r3, r3, #32
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00f      	beq.n	800a960 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a946:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699a      	ldr	r2, [r3, #24]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f042 0220 	orr.w	r2, r2, #32
 800a95e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a966:	2b00      	cmp	r3, #0
 800a968:	d05a      	beq.n	800aa20 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 0201 	bic.w	r2, r2, #1
 800a978:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6919      	ldr	r1, [r3, #16]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	4b28      	ldr	r3, [pc, #160]	; (800aa28 <HAL_SPI_IRQHandler+0x3b8>)
 800a986:	400b      	ands	r3, r1
 800a988:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a990:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a994:	d138      	bne.n	800aa08 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a9a4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d013      	beq.n	800a9d6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9b2:	4a1e      	ldr	r2, [pc, #120]	; (800aa2c <HAL_SPI_IRQHandler+0x3bc>)
 800a9b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fa ff44 	bl	8005848 <HAL_DMA_Abort_IT>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d007      	beq.n	800a9d6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d020      	beq.n	800aa20 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9e2:	4a12      	ldr	r2, [pc, #72]	; (800aa2c <HAL_SPI_IRQHandler+0x3bc>)
 800a9e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fa ff2c 	bl	8005848 <HAL_DMA_Abort_IT>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d014      	beq.n	800aa20 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aa06:	e00b      	b.n	800aa20 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f82b 	bl	800aa6c <HAL_SPI_ErrorCallback>
    return;
 800aa16:	e003      	b.n	800aa20 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800aa18:	bf00      	nop
 800aa1a:	e002      	b.n	800aa22 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800aa1c:	bf00      	nop
 800aa1e:	e000      	b.n	800aa22 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800aa20:	bf00      	nop
  }
}
 800aa22:	3728      	adds	r7, #40	; 0x28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	fffffc94 	.word	0xfffffc94
 800aa2c:	0800aa81 	.word	0x0800aa81

0800aa30 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7ff ffe0 	bl	800aa6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aaac:	bf00      	nop
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aac8:	7812      	ldrb	r2, [r2, #0]
 800aaca:	b2d2      	uxtb	r2, r2
 800aacc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aade:	b29b      	uxth	r3, r3
 800aae0:	3b01      	subs	r3, #1
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d107      	bne.n	800ab06 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	691a      	ldr	r2, [r3, #16]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 0201 	bic.w	r2, r2, #1
 800ab04:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b085      	sub	sp, #20
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3330      	adds	r3, #48	; 0x30
 800ab20:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	8812      	ldrh	r2, [r2, #0]
 800ab2a:	b292      	uxth	r2, r2
 800ab2c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab32:	1c9a      	adds	r2, r3, #2
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	3b01      	subs	r3, #1
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d107      	bne.n	800ab66 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	691a      	ldr	r2, [r3, #16]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f022 0201 	bic.w	r2, r2, #1
 800ab64:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800ab66:	bf00      	nop
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr

0800ab72 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b083      	sub	sp, #12
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab84:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab8a:	1d1a      	adds	r2, r3, #4
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d107      	bne.n	800abbe <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	691a      	ldr	r2, [r3, #16]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0201 	bic.w	r2, r2, #1
 800abbc:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3320      	adds	r3, #32
 800abdc:	7812      	ldrb	r2, [r2, #0]
 800abde:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	3b01      	subs	r3, #1
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d107      	bne.n	800ac18 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	691a      	ldr	r2, [r3, #16]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 0202 	bic.w	r2, r2, #2
 800ac16:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800ac18:	bf00      	nop
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3320      	adds	r3, #32
 800ac32:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac38:	881a      	ldrh	r2, [r3, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac42:	1c9a      	adds	r2, r3, #2
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	3b01      	subs	r3, #1
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d107      	bne.n	800ac76 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	691a      	ldr	r2, [r3, #16]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f022 0202 	bic.w	r2, r2, #2
 800ac74:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800ac76:	bf00      	nop
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6812      	ldr	r2, [r2, #0]
 800ac94:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9a:	1d1a      	adds	r2, r3, #4
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	3b01      	subs	r3, #1
 800acaa:	b29a      	uxth	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acb8:	b29b      	uxth	r3, r3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d107      	bne.n	800acce <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	691a      	ldr	r2, [r3, #16]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f022 0202 	bic.w	r2, r2, #2
 800accc:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800acce:	bf00      	nop
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
	...

0800acdc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	699a      	ldr	r2, [r3, #24]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f042 0208 	orr.w	r2, r2, #8
 800acfa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	699a      	ldr	r2, [r3, #24]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f042 0210 	orr.w	r2, r2, #16
 800ad0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f022 0201 	bic.w	r2, r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6919      	ldr	r1, [r3, #16]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	4b3c      	ldr	r3, [pc, #240]	; (800ae18 <SPI_CloseTransfer+0x13c>)
 800ad28:	400b      	ands	r3, r1
 800ad2a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	689a      	ldr	r2, [r3, #8]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ad3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	d014      	beq.n	800ad72 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f003 0320 	and.w	r3, r3, #32
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00f      	beq.n	800ad72 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	699a      	ldr	r2, [r3, #24]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f042 0220 	orr.w	r2, r2, #32
 800ad70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d014      	beq.n	800ada8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00f      	beq.n	800ada8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad8e:	f043 0204 	orr.w	r2, r3, #4
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	699a      	ldr	r2, [r3, #24]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ada6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00f      	beq.n	800add2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adb8:	f043 0201 	orr.w	r2, r3, #1
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	699a      	ldr	r2, [r3, #24]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800add0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00f      	beq.n	800adfc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ade2:	f043 0208 	orr.w	r2, r3, #8
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	699a      	ldr	r2, [r3, #24]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ae0c:	bf00      	nop
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	fffffc90 	.word	0xfffffc90

0800ae1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ae2c:	e010      	b.n	800ae50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae2e:	f7f8 fac9 	bl	80033c4 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d803      	bhi.n	800ae46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae44:	d102      	bne.n	800ae4c <SPI_WaitOnFlagUntilTimeout+0x30>
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e00f      	b.n	800ae70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	695a      	ldr	r2, [r3, #20]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	4013      	ands	r3, r2
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	bf0c      	ite	eq
 800ae60:	2301      	moveq	r3, #1
 800ae62:	2300      	movne	r3, #0
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	461a      	mov	r2, r3
 800ae68:	79fb      	ldrb	r3, [r7, #7]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d0df      	beq.n	800ae2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae84:	095b      	lsrs	r3, r3, #5
 800ae86:	3301      	adds	r3, #1
 800ae88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	3307      	adds	r3, #7
 800ae96:	08db      	lsrs	r3, r3, #3
 800ae98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	fb02 f303 	mul.w	r3, r2, r3
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e049      	b.n	800af54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d106      	bne.n	800aeda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7f7 ff75 	bl	8002dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2202      	movs	r2, #2
 800aede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	3304      	adds	r3, #4
 800aeea:	4619      	mov	r1, r3
 800aeec:	4610      	mov	r0, r2
 800aeee:	f000 fd7b 	bl	800b9e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d001      	beq.n	800af74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e05e      	b.n	800b032 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2202      	movs	r2, #2
 800af78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68da      	ldr	r2, [r3, #12]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f042 0201 	orr.w	r2, r2, #1
 800af8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a2b      	ldr	r2, [pc, #172]	; (800b040 <HAL_TIM_Base_Start_IT+0xe4>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d02c      	beq.n	800aff0 <HAL_TIM_Base_Start_IT+0x94>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af9e:	d027      	beq.n	800aff0 <HAL_TIM_Base_Start_IT+0x94>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a27      	ldr	r2, [pc, #156]	; (800b044 <HAL_TIM_Base_Start_IT+0xe8>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d022      	beq.n	800aff0 <HAL_TIM_Base_Start_IT+0x94>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a26      	ldr	r2, [pc, #152]	; (800b048 <HAL_TIM_Base_Start_IT+0xec>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d01d      	beq.n	800aff0 <HAL_TIM_Base_Start_IT+0x94>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a24      	ldr	r2, [pc, #144]	; (800b04c <HAL_TIM_Base_Start_IT+0xf0>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d018      	beq.n	800aff0 <HAL_TIM_Base_Start_IT+0x94>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a23      	ldr	r2, [pc, #140]	; (800b050 <HAL_TIM_Base_Start_IT+0xf4>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d013      	beq.n	800aff0 <HAL_TIM_Base_Start_IT+0x94>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a21      	ldr	r2, [pc, #132]	; (800b054 <HAL_TIM_Base_Start_IT+0xf8>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d00e      	beq.n	800aff0 <HAL_TIM_Base_Start_IT+0x94>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a20      	ldr	r2, [pc, #128]	; (800b058 <HAL_TIM_Base_Start_IT+0xfc>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d009      	beq.n	800aff0 <HAL_TIM_Base_Start_IT+0x94>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a1e      	ldr	r2, [pc, #120]	; (800b05c <HAL_TIM_Base_Start_IT+0x100>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d004      	beq.n	800aff0 <HAL_TIM_Base_Start_IT+0x94>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a1d      	ldr	r2, [pc, #116]	; (800b060 <HAL_TIM_Base_Start_IT+0x104>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d115      	bne.n	800b01c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	4b1b      	ldr	r3, [pc, #108]	; (800b064 <HAL_TIM_Base_Start_IT+0x108>)
 800aff8:	4013      	ands	r3, r2
 800affa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b06      	cmp	r3, #6
 800b000:	d015      	beq.n	800b02e <HAL_TIM_Base_Start_IT+0xd2>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b008:	d011      	beq.n	800b02e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f042 0201 	orr.w	r2, r2, #1
 800b018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b01a:	e008      	b.n	800b02e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f042 0201 	orr.w	r2, r2, #1
 800b02a:	601a      	str	r2, [r3, #0]
 800b02c:	e000      	b.n	800b030 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b02e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	40010000 	.word	0x40010000
 800b044:	40000400 	.word	0x40000400
 800b048:	40000800 	.word	0x40000800
 800b04c:	40000c00 	.word	0x40000c00
 800b050:	40010400 	.word	0x40010400
 800b054:	40001800 	.word	0x40001800
 800b058:	40014000 	.word	0x40014000
 800b05c:	4000e000 	.word	0x4000e000
 800b060:	4000e400 	.word	0x4000e400
 800b064:	00010007 	.word	0x00010007

0800b068 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e049      	b.n	800b10e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d106      	bne.n	800b094 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7f7 fe70 	bl	8002d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2202      	movs	r2, #2
 800b098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	f000 fc9e 	bl	800b9e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d109      	bne.n	800b13c <HAL_TIM_PWM_Start+0x24>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	2b01      	cmp	r3, #1
 800b132:	bf14      	ite	ne
 800b134:	2301      	movne	r3, #1
 800b136:	2300      	moveq	r3, #0
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	e03c      	b.n	800b1b6 <HAL_TIM_PWM_Start+0x9e>
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b04      	cmp	r3, #4
 800b140:	d109      	bne.n	800b156 <HAL_TIM_PWM_Start+0x3e>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	bf14      	ite	ne
 800b14e:	2301      	movne	r3, #1
 800b150:	2300      	moveq	r3, #0
 800b152:	b2db      	uxtb	r3, r3
 800b154:	e02f      	b.n	800b1b6 <HAL_TIM_PWM_Start+0x9e>
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d109      	bne.n	800b170 <HAL_TIM_PWM_Start+0x58>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b01      	cmp	r3, #1
 800b166:	bf14      	ite	ne
 800b168:	2301      	movne	r3, #1
 800b16a:	2300      	moveq	r3, #0
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	e022      	b.n	800b1b6 <HAL_TIM_PWM_Start+0x9e>
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	2b0c      	cmp	r3, #12
 800b174:	d109      	bne.n	800b18a <HAL_TIM_PWM_Start+0x72>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b01      	cmp	r3, #1
 800b180:	bf14      	ite	ne
 800b182:	2301      	movne	r3, #1
 800b184:	2300      	moveq	r3, #0
 800b186:	b2db      	uxtb	r3, r3
 800b188:	e015      	b.n	800b1b6 <HAL_TIM_PWM_Start+0x9e>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b10      	cmp	r3, #16
 800b18e:	d109      	bne.n	800b1a4 <HAL_TIM_PWM_Start+0x8c>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b01      	cmp	r3, #1
 800b19a:	bf14      	ite	ne
 800b19c:	2301      	movne	r3, #1
 800b19e:	2300      	moveq	r3, #0
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	e008      	b.n	800b1b6 <HAL_TIM_PWM_Start+0x9e>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	bf14      	ite	ne
 800b1b0:	2301      	movne	r3, #1
 800b1b2:	2300      	moveq	r3, #0
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e0ab      	b.n	800b316 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d104      	bne.n	800b1ce <HAL_TIM_PWM_Start+0xb6>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1cc:	e023      	b.n	800b216 <HAL_TIM_PWM_Start+0xfe>
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	2b04      	cmp	r3, #4
 800b1d2:	d104      	bne.n	800b1de <HAL_TIM_PWM_Start+0xc6>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1dc:	e01b      	b.n	800b216 <HAL_TIM_PWM_Start+0xfe>
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b08      	cmp	r3, #8
 800b1e2:	d104      	bne.n	800b1ee <HAL_TIM_PWM_Start+0xd6>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1ec:	e013      	b.n	800b216 <HAL_TIM_PWM_Start+0xfe>
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2b0c      	cmp	r3, #12
 800b1f2:	d104      	bne.n	800b1fe <HAL_TIM_PWM_Start+0xe6>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1fc:	e00b      	b.n	800b216 <HAL_TIM_PWM_Start+0xfe>
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b10      	cmp	r3, #16
 800b202:	d104      	bne.n	800b20e <HAL_TIM_PWM_Start+0xf6>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2202      	movs	r2, #2
 800b208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b20c:	e003      	b.n	800b216 <HAL_TIM_PWM_Start+0xfe>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2202      	movs	r2, #2
 800b212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2201      	movs	r2, #1
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fff4 	bl	800c20c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a3d      	ldr	r2, [pc, #244]	; (800b320 <HAL_TIM_PWM_Start+0x208>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d013      	beq.n	800b256 <HAL_TIM_PWM_Start+0x13e>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a3c      	ldr	r2, [pc, #240]	; (800b324 <HAL_TIM_PWM_Start+0x20c>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d00e      	beq.n	800b256 <HAL_TIM_PWM_Start+0x13e>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a3a      	ldr	r2, [pc, #232]	; (800b328 <HAL_TIM_PWM_Start+0x210>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d009      	beq.n	800b256 <HAL_TIM_PWM_Start+0x13e>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a39      	ldr	r2, [pc, #228]	; (800b32c <HAL_TIM_PWM_Start+0x214>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d004      	beq.n	800b256 <HAL_TIM_PWM_Start+0x13e>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a37      	ldr	r2, [pc, #220]	; (800b330 <HAL_TIM_PWM_Start+0x218>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d101      	bne.n	800b25a <HAL_TIM_PWM_Start+0x142>
 800b256:	2301      	movs	r3, #1
 800b258:	e000      	b.n	800b25c <HAL_TIM_PWM_Start+0x144>
 800b25a:	2300      	movs	r3, #0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d007      	beq.n	800b270 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b26e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a2a      	ldr	r2, [pc, #168]	; (800b320 <HAL_TIM_PWM_Start+0x208>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d02c      	beq.n	800b2d4 <HAL_TIM_PWM_Start+0x1bc>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b282:	d027      	beq.n	800b2d4 <HAL_TIM_PWM_Start+0x1bc>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a2a      	ldr	r2, [pc, #168]	; (800b334 <HAL_TIM_PWM_Start+0x21c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d022      	beq.n	800b2d4 <HAL_TIM_PWM_Start+0x1bc>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a29      	ldr	r2, [pc, #164]	; (800b338 <HAL_TIM_PWM_Start+0x220>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d01d      	beq.n	800b2d4 <HAL_TIM_PWM_Start+0x1bc>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a27      	ldr	r2, [pc, #156]	; (800b33c <HAL_TIM_PWM_Start+0x224>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d018      	beq.n	800b2d4 <HAL_TIM_PWM_Start+0x1bc>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a1f      	ldr	r2, [pc, #124]	; (800b324 <HAL_TIM_PWM_Start+0x20c>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d013      	beq.n	800b2d4 <HAL_TIM_PWM_Start+0x1bc>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a23      	ldr	r2, [pc, #140]	; (800b340 <HAL_TIM_PWM_Start+0x228>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d00e      	beq.n	800b2d4 <HAL_TIM_PWM_Start+0x1bc>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a1b      	ldr	r2, [pc, #108]	; (800b328 <HAL_TIM_PWM_Start+0x210>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d009      	beq.n	800b2d4 <HAL_TIM_PWM_Start+0x1bc>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a1f      	ldr	r2, [pc, #124]	; (800b344 <HAL_TIM_PWM_Start+0x22c>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d004      	beq.n	800b2d4 <HAL_TIM_PWM_Start+0x1bc>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a1e      	ldr	r2, [pc, #120]	; (800b348 <HAL_TIM_PWM_Start+0x230>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d115      	bne.n	800b300 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	689a      	ldr	r2, [r3, #8]
 800b2da:	4b1c      	ldr	r3, [pc, #112]	; (800b34c <HAL_TIM_PWM_Start+0x234>)
 800b2dc:	4013      	ands	r3, r2
 800b2de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b06      	cmp	r3, #6
 800b2e4:	d015      	beq.n	800b312 <HAL_TIM_PWM_Start+0x1fa>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ec:	d011      	beq.n	800b312 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f042 0201 	orr.w	r2, r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2fe:	e008      	b.n	800b312 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f042 0201 	orr.w	r2, r2, #1
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	e000      	b.n	800b314 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b312:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	40010000 	.word	0x40010000
 800b324:	40010400 	.word	0x40010400
 800b328:	40014000 	.word	0x40014000
 800b32c:	40014400 	.word	0x40014400
 800b330:	40014800 	.word	0x40014800
 800b334:	40000400 	.word	0x40000400
 800b338:	40000800 	.word	0x40000800
 800b33c:	40000c00 	.word	0x40000c00
 800b340:	40001800 	.word	0x40001800
 800b344:	4000e000 	.word	0x4000e000
 800b348:	4000e400 	.word	0x4000e400
 800b34c:	00010007 	.word	0x00010007

0800b350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	f003 0302 	and.w	r3, r3, #2
 800b362:	2b02      	cmp	r3, #2
 800b364:	d122      	bne.n	800b3ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	f003 0302 	and.w	r3, r3, #2
 800b370:	2b02      	cmp	r3, #2
 800b372:	d11b      	bne.n	800b3ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f06f 0202 	mvn.w	r2, #2
 800b37c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	f003 0303 	and.w	r3, r3, #3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fb0a 	bl	800b9ac <HAL_TIM_IC_CaptureCallback>
 800b398:	e005      	b.n	800b3a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fafc 	bl	800b998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fb0d 	bl	800b9c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	f003 0304 	and.w	r3, r3, #4
 800b3b6:	2b04      	cmp	r3, #4
 800b3b8:	d122      	bne.n	800b400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	f003 0304 	and.w	r3, r3, #4
 800b3c4:	2b04      	cmp	r3, #4
 800b3c6:	d11b      	bne.n	800b400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f06f 0204 	mvn.w	r2, #4
 800b3d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d003      	beq.n	800b3ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fae0 	bl	800b9ac <HAL_TIM_IC_CaptureCallback>
 800b3ec:	e005      	b.n	800b3fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fad2 	bl	800b998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fae3 	bl	800b9c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	f003 0308 	and.w	r3, r3, #8
 800b40a:	2b08      	cmp	r3, #8
 800b40c:	d122      	bne.n	800b454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f003 0308 	and.w	r3, r3, #8
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d11b      	bne.n	800b454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f06f 0208 	mvn.w	r2, #8
 800b424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2204      	movs	r2, #4
 800b42a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	69db      	ldr	r3, [r3, #28]
 800b432:	f003 0303 	and.w	r3, r3, #3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fab6 	bl	800b9ac <HAL_TIM_IC_CaptureCallback>
 800b440:	e005      	b.n	800b44e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 faa8 	bl	800b998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fab9 	bl	800b9c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	f003 0310 	and.w	r3, r3, #16
 800b45e:	2b10      	cmp	r3, #16
 800b460:	d122      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	f003 0310 	and.w	r3, r3, #16
 800b46c:	2b10      	cmp	r3, #16
 800b46e:	d11b      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f06f 0210 	mvn.w	r2, #16
 800b478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2208      	movs	r2, #8
 800b47e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fa8c 	bl	800b9ac <HAL_TIM_IC_CaptureCallback>
 800b494:	e005      	b.n	800b4a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fa7e 	bl	800b998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fa8f 	bl	800b9c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d10e      	bne.n	800b4d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d107      	bne.n	800b4d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f06f 0201 	mvn.w	r2, #1
 800b4cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7f7 f81a 	bl	8002508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4de:	2b80      	cmp	r3, #128	; 0x80
 800b4e0:	d10e      	bne.n	800b500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ec:	2b80      	cmp	r3, #128	; 0x80
 800b4ee:	d107      	bne.n	800b500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b4f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f001 f8a0 	bl	800c640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b50a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b50e:	d10e      	bne.n	800b52e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b51a:	2b80      	cmp	r3, #128	; 0x80
 800b51c:	d107      	bne.n	800b52e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f001 f893 	bl	800c654 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b538:	2b40      	cmp	r3, #64	; 0x40
 800b53a:	d10e      	bne.n	800b55a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b546:	2b40      	cmp	r3, #64	; 0x40
 800b548:	d107      	bne.n	800b55a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fa3d 	bl	800b9d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	f003 0320 	and.w	r3, r3, #32
 800b564:	2b20      	cmp	r3, #32
 800b566:	d10e      	bne.n	800b586 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	f003 0320 	and.w	r3, r3, #32
 800b572:	2b20      	cmp	r3, #32
 800b574:	d107      	bne.n	800b586 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f06f 0220 	mvn.w	r2, #32
 800b57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 f853 	bl	800c62c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d101      	bne.n	800b5aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e0fd      	b.n	800b7a6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b14      	cmp	r3, #20
 800b5b6:	f200 80f0 	bhi.w	800b79a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b5ba:	a201      	add	r2, pc, #4	; (adr r2, 800b5c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c0:	0800b615 	.word	0x0800b615
 800b5c4:	0800b79b 	.word	0x0800b79b
 800b5c8:	0800b79b 	.word	0x0800b79b
 800b5cc:	0800b79b 	.word	0x0800b79b
 800b5d0:	0800b655 	.word	0x0800b655
 800b5d4:	0800b79b 	.word	0x0800b79b
 800b5d8:	0800b79b 	.word	0x0800b79b
 800b5dc:	0800b79b 	.word	0x0800b79b
 800b5e0:	0800b697 	.word	0x0800b697
 800b5e4:	0800b79b 	.word	0x0800b79b
 800b5e8:	0800b79b 	.word	0x0800b79b
 800b5ec:	0800b79b 	.word	0x0800b79b
 800b5f0:	0800b6d7 	.word	0x0800b6d7
 800b5f4:	0800b79b 	.word	0x0800b79b
 800b5f8:	0800b79b 	.word	0x0800b79b
 800b5fc:	0800b79b 	.word	0x0800b79b
 800b600:	0800b719 	.word	0x0800b719
 800b604:	0800b79b 	.word	0x0800b79b
 800b608:	0800b79b 	.word	0x0800b79b
 800b60c:	0800b79b 	.word	0x0800b79b
 800b610:	0800b759 	.word	0x0800b759
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68b9      	ldr	r1, [r7, #8]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 fa8a 	bl	800bb34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	699a      	ldr	r2, [r3, #24]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f042 0208 	orr.w	r2, r2, #8
 800b62e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	699a      	ldr	r2, [r3, #24]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f022 0204 	bic.w	r2, r2, #4
 800b63e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6999      	ldr	r1, [r3, #24]
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	691a      	ldr	r2, [r3, #16]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	430a      	orrs	r2, r1
 800b650:	619a      	str	r2, [r3, #24]
      break;
 800b652:	e0a3      	b.n	800b79c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68b9      	ldr	r1, [r7, #8]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 fafa 	bl	800bc54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	699a      	ldr	r2, [r3, #24]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b66e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	699a      	ldr	r2, [r3, #24]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b67e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6999      	ldr	r1, [r3, #24]
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	021a      	lsls	r2, r3, #8
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	430a      	orrs	r2, r1
 800b692:	619a      	str	r2, [r3, #24]
      break;
 800b694:	e082      	b.n	800b79c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68b9      	ldr	r1, [r7, #8]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 fb63 	bl	800bd68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	69da      	ldr	r2, [r3, #28]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f042 0208 	orr.w	r2, r2, #8
 800b6b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	69da      	ldr	r2, [r3, #28]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f022 0204 	bic.w	r2, r2, #4
 800b6c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	69d9      	ldr	r1, [r3, #28]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	691a      	ldr	r2, [r3, #16]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	430a      	orrs	r2, r1
 800b6d2:	61da      	str	r2, [r3, #28]
      break;
 800b6d4:	e062      	b.n	800b79c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68b9      	ldr	r1, [r7, #8]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 fbc9 	bl	800be74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	69da      	ldr	r2, [r3, #28]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	69da      	ldr	r2, [r3, #28]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	69d9      	ldr	r1, [r3, #28]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	021a      	lsls	r2, r3, #8
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	61da      	str	r2, [r3, #28]
      break;
 800b716:	e041      	b.n	800b79c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68b9      	ldr	r1, [r7, #8]
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 fc10 	bl	800bf44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f042 0208 	orr.w	r2, r2, #8
 800b732:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0204 	bic.w	r2, r2, #4
 800b742:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	691a      	ldr	r2, [r3, #16]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	430a      	orrs	r2, r1
 800b754:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b756:	e021      	b.n	800b79c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	68b9      	ldr	r1, [r7, #8]
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 fc52 	bl	800c008 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b772:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b782:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	021a      	lsls	r2, r3, #8
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	430a      	orrs	r2, r1
 800b796:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b798:	e000      	b.n	800b79c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b79a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop

0800b7b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d101      	bne.n	800b7c8 <HAL_TIM_ConfigClockSource+0x18>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e0db      	b.n	800b980 <HAL_TIM_ConfigClockSource+0x1d0>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	4b69      	ldr	r3, [pc, #420]	; (800b988 <HAL_TIM_ConfigClockSource+0x1d8>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a63      	ldr	r2, [pc, #396]	; (800b98c <HAL_TIM_ConfigClockSource+0x1dc>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	f000 80a9 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1a6>
 800b804:	4a61      	ldr	r2, [pc, #388]	; (800b98c <HAL_TIM_ConfigClockSource+0x1dc>)
 800b806:	4293      	cmp	r3, r2
 800b808:	f200 80ae 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b80c:	4a60      	ldr	r2, [pc, #384]	; (800b990 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	f000 80a1 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1a6>
 800b814:	4a5e      	ldr	r2, [pc, #376]	; (800b990 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b816:	4293      	cmp	r3, r2
 800b818:	f200 80a6 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b81c:	4a5d      	ldr	r2, [pc, #372]	; (800b994 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	f000 8099 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1a6>
 800b824:	4a5b      	ldr	r2, [pc, #364]	; (800b994 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b826:	4293      	cmp	r3, r2
 800b828:	f200 809e 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b82c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b830:	f000 8091 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1a6>
 800b834:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b838:	f200 8096 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b83c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b840:	f000 8089 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1a6>
 800b844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b848:	f200 808e 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b84c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b850:	d03e      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x120>
 800b852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b856:	f200 8087 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b85e:	f000 8085 	beq.w	800b96c <HAL_TIM_ConfigClockSource+0x1bc>
 800b862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b866:	d87f      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b868:	2b70      	cmp	r3, #112	; 0x70
 800b86a:	d01a      	beq.n	800b8a2 <HAL_TIM_ConfigClockSource+0xf2>
 800b86c:	2b70      	cmp	r3, #112	; 0x70
 800b86e:	d87b      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b870:	2b60      	cmp	r3, #96	; 0x60
 800b872:	d050      	beq.n	800b916 <HAL_TIM_ConfigClockSource+0x166>
 800b874:	2b60      	cmp	r3, #96	; 0x60
 800b876:	d877      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b878:	2b50      	cmp	r3, #80	; 0x50
 800b87a:	d03c      	beq.n	800b8f6 <HAL_TIM_ConfigClockSource+0x146>
 800b87c:	2b50      	cmp	r3, #80	; 0x50
 800b87e:	d873      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b880:	2b40      	cmp	r3, #64	; 0x40
 800b882:	d058      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0x186>
 800b884:	2b40      	cmp	r3, #64	; 0x40
 800b886:	d86f      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b888:	2b30      	cmp	r3, #48	; 0x30
 800b88a:	d064      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0x1a6>
 800b88c:	2b30      	cmp	r3, #48	; 0x30
 800b88e:	d86b      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b890:	2b20      	cmp	r3, #32
 800b892:	d060      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0x1a6>
 800b894:	2b20      	cmp	r3, #32
 800b896:	d867      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d05c      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0x1a6>
 800b89c:	2b10      	cmp	r3, #16
 800b89e:	d05a      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b8a0:	e062      	b.n	800b968 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6818      	ldr	r0, [r3, #0]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	6899      	ldr	r1, [r3, #8]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	685a      	ldr	r2, [r3, #4]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	f000 fc8b 	bl	800c1cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b8c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	609a      	str	r2, [r3, #8]
      break;
 800b8ce:	e04e      	b.n	800b96e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	6899      	ldr	r1, [r3, #8]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	f000 fc74 	bl	800c1cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689a      	ldr	r2, [r3, #8]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8f2:	609a      	str	r2, [r3, #8]
      break;
 800b8f4:	e03b      	b.n	800b96e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6818      	ldr	r0, [r3, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	6859      	ldr	r1, [r3, #4]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	461a      	mov	r2, r3
 800b904:	f000 fbe4 	bl	800c0d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2150      	movs	r1, #80	; 0x50
 800b90e:	4618      	mov	r0, r3
 800b910:	f000 fc3e 	bl	800c190 <TIM_ITRx_SetConfig>
      break;
 800b914:	e02b      	b.n	800b96e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6818      	ldr	r0, [r3, #0]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	6859      	ldr	r1, [r3, #4]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	461a      	mov	r2, r3
 800b924:	f000 fc03 	bl	800c12e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2160      	movs	r1, #96	; 0x60
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 fc2e 	bl	800c190 <TIM_ITRx_SetConfig>
      break;
 800b934:	e01b      	b.n	800b96e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	6859      	ldr	r1, [r3, #4]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	461a      	mov	r2, r3
 800b944:	f000 fbc4 	bl	800c0d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2140      	movs	r1, #64	; 0x40
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fc1e 	bl	800c190 <TIM_ITRx_SetConfig>
      break;
 800b954:	e00b      	b.n	800b96e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4619      	mov	r1, r3
 800b960:	4610      	mov	r0, r2
 800b962:	f000 fc15 	bl	800c190 <TIM_ITRx_SetConfig>
        break;
 800b966:	e002      	b.n	800b96e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b968:	bf00      	nop
 800b96a:	e000      	b.n	800b96e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b96c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	ffceff88 	.word	0xffceff88
 800b98c:	00100040 	.word	0x00100040
 800b990:	00100030 	.word	0x00100030
 800b994:	00100020 	.word	0x00100020

0800b998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4a44      	ldr	r2, [pc, #272]	; (800bb0c <TIM_Base_SetConfig+0x124>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d013      	beq.n	800ba28 <TIM_Base_SetConfig+0x40>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba06:	d00f      	beq.n	800ba28 <TIM_Base_SetConfig+0x40>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a41      	ldr	r2, [pc, #260]	; (800bb10 <TIM_Base_SetConfig+0x128>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d00b      	beq.n	800ba28 <TIM_Base_SetConfig+0x40>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a40      	ldr	r2, [pc, #256]	; (800bb14 <TIM_Base_SetConfig+0x12c>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d007      	beq.n	800ba28 <TIM_Base_SetConfig+0x40>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a3f      	ldr	r2, [pc, #252]	; (800bb18 <TIM_Base_SetConfig+0x130>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d003      	beq.n	800ba28 <TIM_Base_SetConfig+0x40>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a3e      	ldr	r2, [pc, #248]	; (800bb1c <TIM_Base_SetConfig+0x134>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d108      	bne.n	800ba3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a33      	ldr	r2, [pc, #204]	; (800bb0c <TIM_Base_SetConfig+0x124>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d027      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba48:	d023      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a30      	ldr	r2, [pc, #192]	; (800bb10 <TIM_Base_SetConfig+0x128>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d01f      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a2f      	ldr	r2, [pc, #188]	; (800bb14 <TIM_Base_SetConfig+0x12c>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d01b      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a2e      	ldr	r2, [pc, #184]	; (800bb18 <TIM_Base_SetConfig+0x130>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d017      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a2d      	ldr	r2, [pc, #180]	; (800bb1c <TIM_Base_SetConfig+0x134>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d013      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a2c      	ldr	r2, [pc, #176]	; (800bb20 <TIM_Base_SetConfig+0x138>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d00f      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a2b      	ldr	r2, [pc, #172]	; (800bb24 <TIM_Base_SetConfig+0x13c>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d00b      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a2a      	ldr	r2, [pc, #168]	; (800bb28 <TIM_Base_SetConfig+0x140>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d007      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a29      	ldr	r2, [pc, #164]	; (800bb2c <TIM_Base_SetConfig+0x144>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d003      	beq.n	800ba92 <TIM_Base_SetConfig+0xaa>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a28      	ldr	r2, [pc, #160]	; (800bb30 <TIM_Base_SetConfig+0x148>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d108      	bne.n	800baa4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	4313      	orrs	r3, r2
 800bab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	689a      	ldr	r2, [r3, #8]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4a10      	ldr	r2, [pc, #64]	; (800bb0c <TIM_Base_SetConfig+0x124>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d00f      	beq.n	800baf0 <TIM_Base_SetConfig+0x108>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a12      	ldr	r2, [pc, #72]	; (800bb1c <TIM_Base_SetConfig+0x134>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d00b      	beq.n	800baf0 <TIM_Base_SetConfig+0x108>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a11      	ldr	r2, [pc, #68]	; (800bb20 <TIM_Base_SetConfig+0x138>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d007      	beq.n	800baf0 <TIM_Base_SetConfig+0x108>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a10      	ldr	r2, [pc, #64]	; (800bb24 <TIM_Base_SetConfig+0x13c>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d003      	beq.n	800baf0 <TIM_Base_SetConfig+0x108>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a0f      	ldr	r2, [pc, #60]	; (800bb28 <TIM_Base_SetConfig+0x140>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d103      	bne.n	800baf8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	691a      	ldr	r2, [r3, #16]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	615a      	str	r2, [r3, #20]
}
 800bafe:	bf00      	nop
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	40010000 	.word	0x40010000
 800bb10:	40000400 	.word	0x40000400
 800bb14:	40000800 	.word	0x40000800
 800bb18:	40000c00 	.word	0x40000c00
 800bb1c:	40010400 	.word	0x40010400
 800bb20:	40014000 	.word	0x40014000
 800bb24:	40014400 	.word	0x40014400
 800bb28:	40014800 	.word	0x40014800
 800bb2c:	4000e000 	.word	0x4000e000
 800bb30:	4000e400 	.word	0x4000e400

0800bb34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b087      	sub	sp, #28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	f023 0201 	bic.w	r2, r3, #1
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	4b37      	ldr	r3, [pc, #220]	; (800bc3c <TIM_OC1_SetConfig+0x108>)
 800bb60:	4013      	ands	r3, r2
 800bb62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f023 0303 	bic.w	r3, r3, #3
 800bb6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f023 0302 	bic.w	r3, r3, #2
 800bb7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a2d      	ldr	r2, [pc, #180]	; (800bc40 <TIM_OC1_SetConfig+0x10c>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d00f      	beq.n	800bbb0 <TIM_OC1_SetConfig+0x7c>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a2c      	ldr	r2, [pc, #176]	; (800bc44 <TIM_OC1_SetConfig+0x110>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d00b      	beq.n	800bbb0 <TIM_OC1_SetConfig+0x7c>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a2b      	ldr	r2, [pc, #172]	; (800bc48 <TIM_OC1_SetConfig+0x114>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d007      	beq.n	800bbb0 <TIM_OC1_SetConfig+0x7c>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4a2a      	ldr	r2, [pc, #168]	; (800bc4c <TIM_OC1_SetConfig+0x118>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d003      	beq.n	800bbb0 <TIM_OC1_SetConfig+0x7c>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4a29      	ldr	r2, [pc, #164]	; (800bc50 <TIM_OC1_SetConfig+0x11c>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d10c      	bne.n	800bbca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f023 0308 	bic.w	r3, r3, #8
 800bbb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f023 0304 	bic.w	r3, r3, #4
 800bbc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a1c      	ldr	r2, [pc, #112]	; (800bc40 <TIM_OC1_SetConfig+0x10c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d00f      	beq.n	800bbf2 <TIM_OC1_SetConfig+0xbe>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a1b      	ldr	r2, [pc, #108]	; (800bc44 <TIM_OC1_SetConfig+0x110>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d00b      	beq.n	800bbf2 <TIM_OC1_SetConfig+0xbe>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4a1a      	ldr	r2, [pc, #104]	; (800bc48 <TIM_OC1_SetConfig+0x114>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d007      	beq.n	800bbf2 <TIM_OC1_SetConfig+0xbe>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4a19      	ldr	r2, [pc, #100]	; (800bc4c <TIM_OC1_SetConfig+0x118>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d003      	beq.n	800bbf2 <TIM_OC1_SetConfig+0xbe>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a18      	ldr	r2, [pc, #96]	; (800bc50 <TIM_OC1_SetConfig+0x11c>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d111      	bne.n	800bc16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	621a      	str	r2, [r3, #32]
}
 800bc30:	bf00      	nop
 800bc32:	371c      	adds	r7, #28
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	fffeff8f 	.word	0xfffeff8f
 800bc40:	40010000 	.word	0x40010000
 800bc44:	40010400 	.word	0x40010400
 800bc48:	40014000 	.word	0x40014000
 800bc4c:	40014400 	.word	0x40014400
 800bc50:	40014800 	.word	0x40014800

0800bc54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b087      	sub	sp, #28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	f023 0210 	bic.w	r2, r3, #16
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	699b      	ldr	r3, [r3, #24]
 800bc7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	4b34      	ldr	r3, [pc, #208]	; (800bd50 <TIM_OC2_SetConfig+0xfc>)
 800bc80:	4013      	ands	r3, r2
 800bc82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	021b      	lsls	r3, r3, #8
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	f023 0320 	bic.w	r3, r3, #32
 800bc9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	011b      	lsls	r3, r3, #4
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a29      	ldr	r2, [pc, #164]	; (800bd54 <TIM_OC2_SetConfig+0x100>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d003      	beq.n	800bcbc <TIM_OC2_SetConfig+0x68>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a28      	ldr	r2, [pc, #160]	; (800bd58 <TIM_OC2_SetConfig+0x104>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d10d      	bne.n	800bcd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	011b      	lsls	r3, r3, #4
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a1e      	ldr	r2, [pc, #120]	; (800bd54 <TIM_OC2_SetConfig+0x100>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d00f      	beq.n	800bd00 <TIM_OC2_SetConfig+0xac>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a1d      	ldr	r2, [pc, #116]	; (800bd58 <TIM_OC2_SetConfig+0x104>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d00b      	beq.n	800bd00 <TIM_OC2_SetConfig+0xac>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a1c      	ldr	r2, [pc, #112]	; (800bd5c <TIM_OC2_SetConfig+0x108>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d007      	beq.n	800bd00 <TIM_OC2_SetConfig+0xac>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a1b      	ldr	r2, [pc, #108]	; (800bd60 <TIM_OC2_SetConfig+0x10c>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d003      	beq.n	800bd00 <TIM_OC2_SetConfig+0xac>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a1a      	ldr	r2, [pc, #104]	; (800bd64 <TIM_OC2_SetConfig+0x110>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d113      	bne.n	800bd28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	621a      	str	r2, [r3, #32]
}
 800bd42:	bf00      	nop
 800bd44:	371c      	adds	r7, #28
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	feff8fff 	.word	0xfeff8fff
 800bd54:	40010000 	.word	0x40010000
 800bd58:	40010400 	.word	0x40010400
 800bd5c:	40014000 	.word	0x40014000
 800bd60:	40014400 	.word	0x40014400
 800bd64:	40014800 	.word	0x40014800

0800bd68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a1b      	ldr	r3, [r3, #32]
 800bd76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f023 0303 	bic.w	r3, r3, #3
 800bd9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	021b      	lsls	r3, r3, #8
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a27      	ldr	r2, [pc, #156]	; (800be60 <TIM_OC3_SetConfig+0xf8>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d003      	beq.n	800bdce <TIM_OC3_SetConfig+0x66>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a26      	ldr	r2, [pc, #152]	; (800be64 <TIM_OC3_SetConfig+0xfc>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d10d      	bne.n	800bdea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bdd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	021b      	lsls	r3, r3, #8
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bde8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a1c      	ldr	r2, [pc, #112]	; (800be60 <TIM_OC3_SetConfig+0xf8>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d00f      	beq.n	800be12 <TIM_OC3_SetConfig+0xaa>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a1b      	ldr	r2, [pc, #108]	; (800be64 <TIM_OC3_SetConfig+0xfc>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d00b      	beq.n	800be12 <TIM_OC3_SetConfig+0xaa>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a1a      	ldr	r2, [pc, #104]	; (800be68 <TIM_OC3_SetConfig+0x100>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d007      	beq.n	800be12 <TIM_OC3_SetConfig+0xaa>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4a19      	ldr	r2, [pc, #100]	; (800be6c <TIM_OC3_SetConfig+0x104>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d003      	beq.n	800be12 <TIM_OC3_SetConfig+0xaa>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4a18      	ldr	r2, [pc, #96]	; (800be70 <TIM_OC3_SetConfig+0x108>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d113      	bne.n	800be3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	011b      	lsls	r3, r3, #4
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	4313      	orrs	r3, r2
 800be38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	685a      	ldr	r2, [r3, #4]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	621a      	str	r2, [r3, #32]
}
 800be54:	bf00      	nop
 800be56:	371c      	adds	r7, #28
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr
 800be60:	40010000 	.word	0x40010000
 800be64:	40010400 	.word	0x40010400
 800be68:	40014000 	.word	0x40014000
 800be6c:	40014400 	.word	0x40014400
 800be70:	40014800 	.word	0x40014800

0800be74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	021b      	lsls	r3, r3, #8
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	031b      	lsls	r3, r3, #12
 800bec6:	693a      	ldr	r2, [r7, #16]
 800bec8:	4313      	orrs	r3, r2
 800beca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a18      	ldr	r2, [pc, #96]	; (800bf30 <TIM_OC4_SetConfig+0xbc>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d00f      	beq.n	800bef4 <TIM_OC4_SetConfig+0x80>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4a17      	ldr	r2, [pc, #92]	; (800bf34 <TIM_OC4_SetConfig+0xc0>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d00b      	beq.n	800bef4 <TIM_OC4_SetConfig+0x80>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a16      	ldr	r2, [pc, #88]	; (800bf38 <TIM_OC4_SetConfig+0xc4>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d007      	beq.n	800bef4 <TIM_OC4_SetConfig+0x80>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a15      	ldr	r2, [pc, #84]	; (800bf3c <TIM_OC4_SetConfig+0xc8>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d003      	beq.n	800bef4 <TIM_OC4_SetConfig+0x80>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a14      	ldr	r2, [pc, #80]	; (800bf40 <TIM_OC4_SetConfig+0xcc>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d109      	bne.n	800bf08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800befa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	019b      	lsls	r3, r3, #6
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	693a      	ldr	r2, [r7, #16]
 800bf20:	621a      	str	r2, [r3, #32]
}
 800bf22:	bf00      	nop
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	40010000 	.word	0x40010000
 800bf34:	40010400 	.word	0x40010400
 800bf38:	40014000 	.word	0x40014000
 800bf3c:	40014400 	.word	0x40014400
 800bf40:	40014800 	.word	0x40014800

0800bf44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b087      	sub	sp, #28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bf84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	041b      	lsls	r3, r3, #16
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a17      	ldr	r2, [pc, #92]	; (800bff4 <TIM_OC5_SetConfig+0xb0>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d00f      	beq.n	800bfba <TIM_OC5_SetConfig+0x76>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a16      	ldr	r2, [pc, #88]	; (800bff8 <TIM_OC5_SetConfig+0xb4>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d00b      	beq.n	800bfba <TIM_OC5_SetConfig+0x76>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4a15      	ldr	r2, [pc, #84]	; (800bffc <TIM_OC5_SetConfig+0xb8>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d007      	beq.n	800bfba <TIM_OC5_SetConfig+0x76>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4a14      	ldr	r2, [pc, #80]	; (800c000 <TIM_OC5_SetConfig+0xbc>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d003      	beq.n	800bfba <TIM_OC5_SetConfig+0x76>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a13      	ldr	r2, [pc, #76]	; (800c004 <TIM_OC5_SetConfig+0xc0>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d109      	bne.n	800bfce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	021b      	lsls	r3, r3, #8
 800bfc8:	697a      	ldr	r2, [r7, #20]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	693a      	ldr	r2, [r7, #16]
 800bfe6:	621a      	str	r2, [r3, #32]
}
 800bfe8:	bf00      	nop
 800bfea:	371c      	adds	r7, #28
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	40010000 	.word	0x40010000
 800bff8:	40010400 	.word	0x40010400
 800bffc:	40014000 	.word	0x40014000
 800c000:	40014400 	.word	0x40014400
 800c004:	40014800 	.word	0x40014800

0800c008 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c008:	b480      	push	{r7}
 800c00a:	b087      	sub	sp, #28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	021b      	lsls	r3, r3, #8
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	4313      	orrs	r3, r2
 800c042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c04a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	051b      	lsls	r3, r3, #20
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	4313      	orrs	r3, r2
 800c056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a18      	ldr	r2, [pc, #96]	; (800c0bc <TIM_OC6_SetConfig+0xb4>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d00f      	beq.n	800c080 <TIM_OC6_SetConfig+0x78>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a17      	ldr	r2, [pc, #92]	; (800c0c0 <TIM_OC6_SetConfig+0xb8>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d00b      	beq.n	800c080 <TIM_OC6_SetConfig+0x78>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a16      	ldr	r2, [pc, #88]	; (800c0c4 <TIM_OC6_SetConfig+0xbc>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d007      	beq.n	800c080 <TIM_OC6_SetConfig+0x78>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a15      	ldr	r2, [pc, #84]	; (800c0c8 <TIM_OC6_SetConfig+0xc0>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d003      	beq.n	800c080 <TIM_OC6_SetConfig+0x78>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a14      	ldr	r2, [pc, #80]	; (800c0cc <TIM_OC6_SetConfig+0xc4>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d109      	bne.n	800c094 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c086:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	029b      	lsls	r3, r3, #10
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	4313      	orrs	r3, r2
 800c092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	685a      	ldr	r2, [r3, #4]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	621a      	str	r2, [r3, #32]
}
 800c0ae:	bf00      	nop
 800c0b0:	371c      	adds	r7, #28
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	40010000 	.word	0x40010000
 800c0c0:	40010400 	.word	0x40010400
 800c0c4:	40014000 	.word	0x40014000
 800c0c8:	40014400 	.word	0x40014400
 800c0cc:	40014800 	.word	0x40014800

0800c0d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b087      	sub	sp, #28
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	f023 0201 	bic.w	r2, r3, #1
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	699b      	ldr	r3, [r3, #24]
 800c0f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c0fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	011b      	lsls	r3, r3, #4
 800c100:	693a      	ldr	r2, [r7, #16]
 800c102:	4313      	orrs	r3, r2
 800c104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f023 030a 	bic.w	r3, r3, #10
 800c10c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	4313      	orrs	r3, r2
 800c114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	697a      	ldr	r2, [r7, #20]
 800c120:	621a      	str	r2, [r3, #32]
}
 800c122:	bf00      	nop
 800c124:	371c      	adds	r7, #28
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr

0800c12e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c12e:	b480      	push	{r7}
 800c130:	b087      	sub	sp, #28
 800c132:	af00      	add	r7, sp, #0
 800c134:	60f8      	str	r0, [r7, #12]
 800c136:	60b9      	str	r1, [r7, #8]
 800c138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	f023 0210 	bic.w	r2, r3, #16
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6a1b      	ldr	r3, [r3, #32]
 800c150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	031b      	lsls	r3, r3, #12
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	4313      	orrs	r3, r2
 800c162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c16a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	011b      	lsls	r3, r3, #4
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	4313      	orrs	r3, r2
 800c174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	697a      	ldr	r2, [r7, #20]
 800c17a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	621a      	str	r2, [r3, #32]
}
 800c182:	bf00      	nop
 800c184:	371c      	adds	r7, #28
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
	...

0800c190 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <TIM_ITRx_SetConfig+0x38>)
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	f043 0307 	orr.w	r3, r3, #7
 800c1b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	609a      	str	r2, [r3, #8]
}
 800c1ba:	bf00      	nop
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	ffcfff8f 	.word	0xffcfff8f

0800c1cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b087      	sub	sp, #28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c1e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	021a      	lsls	r2, r3, #8
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	431a      	orrs	r2, r3
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	697a      	ldr	r2, [r7, #20]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	697a      	ldr	r2, [r7, #20]
 800c1fe:	609a      	str	r2, [r3, #8]
}
 800c200:	bf00      	nop
 800c202:	371c      	adds	r7, #28
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	f003 031f 	and.w	r3, r3, #31
 800c21e:	2201      	movs	r2, #1
 800c220:	fa02 f303 	lsl.w	r3, r2, r3
 800c224:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6a1a      	ldr	r2, [r3, #32]
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	43db      	mvns	r3, r3
 800c22e:	401a      	ands	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6a1a      	ldr	r2, [r3, #32]
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	f003 031f 	and.w	r3, r3, #31
 800c23e:	6879      	ldr	r1, [r7, #4]
 800c240:	fa01 f303 	lsl.w	r3, r1, r3
 800c244:	431a      	orrs	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	621a      	str	r2, [r3, #32]
}
 800c24a:	bf00      	nop
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
	...

0800c258 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d109      	bne.n	800c27c <HAL_TIMEx_PWMN_Start+0x24>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b01      	cmp	r3, #1
 800c272:	bf14      	ite	ne
 800c274:	2301      	movne	r3, #1
 800c276:	2300      	moveq	r3, #0
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	e022      	b.n	800c2c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d109      	bne.n	800c296 <HAL_TIMEx_PWMN_Start+0x3e>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	bf14      	ite	ne
 800c28e:	2301      	movne	r3, #1
 800c290:	2300      	moveq	r3, #0
 800c292:	b2db      	uxtb	r3, r3
 800c294:	e015      	b.n	800c2c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b08      	cmp	r3, #8
 800c29a:	d109      	bne.n	800c2b0 <HAL_TIMEx_PWMN_Start+0x58>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	bf14      	ite	ne
 800c2a8:	2301      	movne	r3, #1
 800c2aa:	2300      	moveq	r3, #0
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	e008      	b.n	800c2c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	bf14      	ite	ne
 800c2bc:	2301      	movne	r3, #1
 800c2be:	2300      	moveq	r3, #0
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d001      	beq.n	800c2ca <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e07d      	b.n	800c3c6 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d104      	bne.n	800c2da <HAL_TIMEx_PWMN_Start+0x82>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2d8:	e013      	b.n	800c302 <HAL_TIMEx_PWMN_Start+0xaa>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b04      	cmp	r3, #4
 800c2de:	d104      	bne.n	800c2ea <HAL_TIMEx_PWMN_Start+0x92>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2e8:	e00b      	b.n	800c302 <HAL_TIMEx_PWMN_Start+0xaa>
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	2b08      	cmp	r3, #8
 800c2ee:	d104      	bne.n	800c2fa <HAL_TIMEx_PWMN_Start+0xa2>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2f8:	e003      	b.n	800c302 <HAL_TIMEx_PWMN_Start+0xaa>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2202      	movs	r2, #2
 800c2fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2204      	movs	r2, #4
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 f9ac 	bl	800c668 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c31e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a2a      	ldr	r2, [pc, #168]	; (800c3d0 <HAL_TIMEx_PWMN_Start+0x178>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d02c      	beq.n	800c384 <HAL_TIMEx_PWMN_Start+0x12c>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c332:	d027      	beq.n	800c384 <HAL_TIMEx_PWMN_Start+0x12c>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a26      	ldr	r2, [pc, #152]	; (800c3d4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d022      	beq.n	800c384 <HAL_TIMEx_PWMN_Start+0x12c>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a25      	ldr	r2, [pc, #148]	; (800c3d8 <HAL_TIMEx_PWMN_Start+0x180>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d01d      	beq.n	800c384 <HAL_TIMEx_PWMN_Start+0x12c>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a23      	ldr	r2, [pc, #140]	; (800c3dc <HAL_TIMEx_PWMN_Start+0x184>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d018      	beq.n	800c384 <HAL_TIMEx_PWMN_Start+0x12c>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a22      	ldr	r2, [pc, #136]	; (800c3e0 <HAL_TIMEx_PWMN_Start+0x188>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d013      	beq.n	800c384 <HAL_TIMEx_PWMN_Start+0x12c>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a20      	ldr	r2, [pc, #128]	; (800c3e4 <HAL_TIMEx_PWMN_Start+0x18c>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d00e      	beq.n	800c384 <HAL_TIMEx_PWMN_Start+0x12c>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a1f      	ldr	r2, [pc, #124]	; (800c3e8 <HAL_TIMEx_PWMN_Start+0x190>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d009      	beq.n	800c384 <HAL_TIMEx_PWMN_Start+0x12c>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a1d      	ldr	r2, [pc, #116]	; (800c3ec <HAL_TIMEx_PWMN_Start+0x194>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d004      	beq.n	800c384 <HAL_TIMEx_PWMN_Start+0x12c>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a1c      	ldr	r2, [pc, #112]	; (800c3f0 <HAL_TIMEx_PWMN_Start+0x198>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d115      	bne.n	800c3b0 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	689a      	ldr	r2, [r3, #8]
 800c38a:	4b1a      	ldr	r3, [pc, #104]	; (800c3f4 <HAL_TIMEx_PWMN_Start+0x19c>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2b06      	cmp	r3, #6
 800c394:	d015      	beq.n	800c3c2 <HAL_TIMEx_PWMN_Start+0x16a>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c39c:	d011      	beq.n	800c3c2 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f042 0201 	orr.w	r2, r2, #1
 800c3ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ae:	e008      	b.n	800c3c2 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f042 0201 	orr.w	r2, r2, #1
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	e000      	b.n	800c3c4 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	40010000 	.word	0x40010000
 800c3d4:	40000400 	.word	0x40000400
 800c3d8:	40000800 	.word	0x40000800
 800c3dc:	40000c00 	.word	0x40000c00
 800c3e0:	40010400 	.word	0x40010400
 800c3e4:	40001800 	.word	0x40001800
 800c3e8:	40014000 	.word	0x40014000
 800c3ec:	4000e000 	.word	0x4000e000
 800c3f0:	4000e400 	.word	0x4000e400
 800c3f4:	00010007 	.word	0x00010007

0800c3f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d101      	bne.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c40c:	2302      	movs	r3, #2
 800c40e:	e077      	b.n	800c500 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2202      	movs	r2, #2
 800c41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a35      	ldr	r2, [pc, #212]	; (800c50c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d004      	beq.n	800c444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a34      	ldr	r2, [pc, #208]	; (800c510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d108      	bne.n	800c456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c44a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c45c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	4313      	orrs	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a25      	ldr	r2, [pc, #148]	; (800c50c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d02c      	beq.n	800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c482:	d027      	beq.n	800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a22      	ldr	r2, [pc, #136]	; (800c514 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d022      	beq.n	800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a21      	ldr	r2, [pc, #132]	; (800c518 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d01d      	beq.n	800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a1f      	ldr	r2, [pc, #124]	; (800c51c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d018      	beq.n	800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a1a      	ldr	r2, [pc, #104]	; (800c510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d013      	beq.n	800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a1b      	ldr	r2, [pc, #108]	; (800c520 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d00e      	beq.n	800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a1a      	ldr	r2, [pc, #104]	; (800c524 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d009      	beq.n	800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a18      	ldr	r2, [pc, #96]	; (800c528 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d004      	beq.n	800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a17      	ldr	r2, [pc, #92]	; (800c52c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d10c      	bne.n	800c4ee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3714      	adds	r7, #20
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	40010000 	.word	0x40010000
 800c510:	40010400 	.word	0x40010400
 800c514:	40000400 	.word	0x40000400
 800c518:	40000800 	.word	0x40000800
 800c51c:	40000c00 	.word	0x40000c00
 800c520:	40001800 	.word	0x40001800
 800c524:	40014000 	.word	0x40014000
 800c528:	4000e000 	.word	0x4000e000
 800c52c:	4000e400 	.word	0x4000e400

0800c530 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c544:	2b01      	cmp	r3, #1
 800c546:	d101      	bne.n	800c54c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c548:	2302      	movs	r3, #2
 800c54a:	e065      	b.n	800c618 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	4313      	orrs	r3, r2
 800c560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4313      	orrs	r3, r2
 800c58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	4313      	orrs	r3, r2
 800c598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	041b      	lsls	r3, r3, #16
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a16      	ldr	r2, [pc, #88]	; (800c624 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d004      	beq.n	800c5da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a14      	ldr	r2, [pc, #80]	; (800c628 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d115      	bne.n	800c606 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e4:	051b      	lsls	r3, r3, #20
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	69db      	ldr	r3, [r3, #28]
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	4313      	orrs	r3, r2
 800c604:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	40010000 	.word	0x40010000
 800c628:	40010400 	.word	0x40010400

0800c62c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c634:	bf00      	nop
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c648:	bf00      	nop
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c65c:	bf00      	nop
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	f003 031f 	and.w	r3, r3, #31
 800c67a:	2204      	movs	r2, #4
 800c67c:	fa02 f303 	lsl.w	r3, r2, r3
 800c680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6a1a      	ldr	r2, [r3, #32]
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	43db      	mvns	r3, r3
 800c68a:	401a      	ands	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6a1a      	ldr	r2, [r3, #32]
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	f003 031f 	and.w	r3, r3, #31
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	fa01 f303 	lsl.w	r3, r1, r3
 800c6a0:	431a      	orrs	r2, r3
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	621a      	str	r2, [r3, #32]
}
 800c6a6:	bf00      	nop
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b082      	sub	sp, #8
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e042      	b.n	800c74a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d106      	bne.n	800c6dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7f6 fbf8 	bl	8002ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2224      	movs	r2, #36	; 0x24
 800c6e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f022 0201 	bic.w	r2, r2, #1
 800c6f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f82d 	bl	800c754 <UART_SetConfig>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d101      	bne.n	800c704 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c700:	2301      	movs	r3, #1
 800c702:	e022      	b.n	800c74a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fe7f 	bl	800d410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	685a      	ldr	r2, [r3, #4]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c720:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	689a      	ldr	r2, [r3, #8]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c730:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f042 0201 	orr.w	r2, r2, #1
 800c740:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 ff06 	bl	800d554 <UART_CheckIdleState>
 800c748:	4603      	mov	r3, r0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c754:	b5b0      	push	{r4, r5, r7, lr}
 800c756:	b08e      	sub	sp, #56	; 0x38
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c75c:	2300      	movs	r3, #0
 800c75e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	689a      	ldr	r2, [r3, #8]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	431a      	orrs	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	695b      	ldr	r3, [r3, #20]
 800c770:	431a      	orrs	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	4313      	orrs	r3, r2
 800c778:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	4bbf      	ldr	r3, [pc, #764]	; (800ca80 <UART_SetConfig+0x32c>)
 800c782:	4013      	ands	r3, r2
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	6812      	ldr	r2, [r2, #0]
 800c788:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c78a:	430b      	orrs	r3, r1
 800c78c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	430a      	orrs	r2, r1
 800c7a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	699b      	ldr	r3, [r3, #24]
 800c7a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4ab5      	ldr	r2, [pc, #724]	; (800ca84 <UART_SetConfig+0x330>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d004      	beq.n	800c7be <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a1b      	ldr	r3, [r3, #32]
 800c7b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	4bb0      	ldr	r3, [pc, #704]	; (800ca88 <UART_SetConfig+0x334>)
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	6812      	ldr	r2, [r2, #0]
 800c7cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c7ce:	430b      	orrs	r3, r1
 800c7d0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d8:	f023 010f 	bic.w	r1, r3, #15
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	430a      	orrs	r2, r1
 800c7e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4aa7      	ldr	r2, [pc, #668]	; (800ca8c <UART_SetConfig+0x338>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d176      	bne.n	800c8e0 <UART_SetConfig+0x18c>
 800c7f2:	4ba7      	ldr	r3, [pc, #668]	; (800ca90 <UART_SetConfig+0x33c>)
 800c7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7fa:	2b28      	cmp	r3, #40	; 0x28
 800c7fc:	d86c      	bhi.n	800c8d8 <UART_SetConfig+0x184>
 800c7fe:	a201      	add	r2, pc, #4	; (adr r2, 800c804 <UART_SetConfig+0xb0>)
 800c800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c804:	0800c8a9 	.word	0x0800c8a9
 800c808:	0800c8d9 	.word	0x0800c8d9
 800c80c:	0800c8d9 	.word	0x0800c8d9
 800c810:	0800c8d9 	.word	0x0800c8d9
 800c814:	0800c8d9 	.word	0x0800c8d9
 800c818:	0800c8d9 	.word	0x0800c8d9
 800c81c:	0800c8d9 	.word	0x0800c8d9
 800c820:	0800c8d9 	.word	0x0800c8d9
 800c824:	0800c8b1 	.word	0x0800c8b1
 800c828:	0800c8d9 	.word	0x0800c8d9
 800c82c:	0800c8d9 	.word	0x0800c8d9
 800c830:	0800c8d9 	.word	0x0800c8d9
 800c834:	0800c8d9 	.word	0x0800c8d9
 800c838:	0800c8d9 	.word	0x0800c8d9
 800c83c:	0800c8d9 	.word	0x0800c8d9
 800c840:	0800c8d9 	.word	0x0800c8d9
 800c844:	0800c8b9 	.word	0x0800c8b9
 800c848:	0800c8d9 	.word	0x0800c8d9
 800c84c:	0800c8d9 	.word	0x0800c8d9
 800c850:	0800c8d9 	.word	0x0800c8d9
 800c854:	0800c8d9 	.word	0x0800c8d9
 800c858:	0800c8d9 	.word	0x0800c8d9
 800c85c:	0800c8d9 	.word	0x0800c8d9
 800c860:	0800c8d9 	.word	0x0800c8d9
 800c864:	0800c8c1 	.word	0x0800c8c1
 800c868:	0800c8d9 	.word	0x0800c8d9
 800c86c:	0800c8d9 	.word	0x0800c8d9
 800c870:	0800c8d9 	.word	0x0800c8d9
 800c874:	0800c8d9 	.word	0x0800c8d9
 800c878:	0800c8d9 	.word	0x0800c8d9
 800c87c:	0800c8d9 	.word	0x0800c8d9
 800c880:	0800c8d9 	.word	0x0800c8d9
 800c884:	0800c8c9 	.word	0x0800c8c9
 800c888:	0800c8d9 	.word	0x0800c8d9
 800c88c:	0800c8d9 	.word	0x0800c8d9
 800c890:	0800c8d9 	.word	0x0800c8d9
 800c894:	0800c8d9 	.word	0x0800c8d9
 800c898:	0800c8d9 	.word	0x0800c8d9
 800c89c:	0800c8d9 	.word	0x0800c8d9
 800c8a0:	0800c8d9 	.word	0x0800c8d9
 800c8a4:	0800c8d1 	.word	0x0800c8d1
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ae:	e326      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c8b0:	2304      	movs	r3, #4
 800c8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8b6:	e322      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c8b8:	2308      	movs	r3, #8
 800c8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8be:	e31e      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c8c0:	2310      	movs	r3, #16
 800c8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8c6:	e31a      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c8c8:	2320      	movs	r3, #32
 800c8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ce:	e316      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c8d0:	2340      	movs	r3, #64	; 0x40
 800c8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d6:	e312      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c8d8:	2380      	movs	r3, #128	; 0x80
 800c8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8de:	e30e      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a6b      	ldr	r2, [pc, #428]	; (800ca94 <UART_SetConfig+0x340>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d130      	bne.n	800c94c <UART_SetConfig+0x1f8>
 800c8ea:	4b69      	ldr	r3, [pc, #420]	; (800ca90 <UART_SetConfig+0x33c>)
 800c8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ee:	f003 0307 	and.w	r3, r3, #7
 800c8f2:	2b05      	cmp	r3, #5
 800c8f4:	d826      	bhi.n	800c944 <UART_SetConfig+0x1f0>
 800c8f6:	a201      	add	r2, pc, #4	; (adr r2, 800c8fc <UART_SetConfig+0x1a8>)
 800c8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fc:	0800c915 	.word	0x0800c915
 800c900:	0800c91d 	.word	0x0800c91d
 800c904:	0800c925 	.word	0x0800c925
 800c908:	0800c92d 	.word	0x0800c92d
 800c90c:	0800c935 	.word	0x0800c935
 800c910:	0800c93d 	.word	0x0800c93d
 800c914:	2300      	movs	r3, #0
 800c916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c91a:	e2f0      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c91c:	2304      	movs	r3, #4
 800c91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c922:	e2ec      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c924:	2308      	movs	r3, #8
 800c926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92a:	e2e8      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c92c:	2310      	movs	r3, #16
 800c92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c932:	e2e4      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c934:	2320      	movs	r3, #32
 800c936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93a:	e2e0      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c93c:	2340      	movs	r3, #64	; 0x40
 800c93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c942:	e2dc      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c944:	2380      	movs	r3, #128	; 0x80
 800c946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c94a:	e2d8      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a51      	ldr	r2, [pc, #324]	; (800ca98 <UART_SetConfig+0x344>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d130      	bne.n	800c9b8 <UART_SetConfig+0x264>
 800c956:	4b4e      	ldr	r3, [pc, #312]	; (800ca90 <UART_SetConfig+0x33c>)
 800c958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c95a:	f003 0307 	and.w	r3, r3, #7
 800c95e:	2b05      	cmp	r3, #5
 800c960:	d826      	bhi.n	800c9b0 <UART_SetConfig+0x25c>
 800c962:	a201      	add	r2, pc, #4	; (adr r2, 800c968 <UART_SetConfig+0x214>)
 800c964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c968:	0800c981 	.word	0x0800c981
 800c96c:	0800c989 	.word	0x0800c989
 800c970:	0800c991 	.word	0x0800c991
 800c974:	0800c999 	.word	0x0800c999
 800c978:	0800c9a1 	.word	0x0800c9a1
 800c97c:	0800c9a9 	.word	0x0800c9a9
 800c980:	2300      	movs	r3, #0
 800c982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c986:	e2ba      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c988:	2304      	movs	r3, #4
 800c98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c98e:	e2b6      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c990:	2308      	movs	r3, #8
 800c992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c996:	e2b2      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c998:	2310      	movs	r3, #16
 800c99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99e:	e2ae      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c9a0:	2320      	movs	r3, #32
 800c9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a6:	e2aa      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c9a8:	2340      	movs	r3, #64	; 0x40
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ae:	e2a6      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c9b0:	2380      	movs	r3, #128	; 0x80
 800c9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b6:	e2a2      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a37      	ldr	r2, [pc, #220]	; (800ca9c <UART_SetConfig+0x348>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d130      	bne.n	800ca24 <UART_SetConfig+0x2d0>
 800c9c2:	4b33      	ldr	r3, [pc, #204]	; (800ca90 <UART_SetConfig+0x33c>)
 800c9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9c6:	f003 0307 	and.w	r3, r3, #7
 800c9ca:	2b05      	cmp	r3, #5
 800c9cc:	d826      	bhi.n	800ca1c <UART_SetConfig+0x2c8>
 800c9ce:	a201      	add	r2, pc, #4	; (adr r2, 800c9d4 <UART_SetConfig+0x280>)
 800c9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d4:	0800c9ed 	.word	0x0800c9ed
 800c9d8:	0800c9f5 	.word	0x0800c9f5
 800c9dc:	0800c9fd 	.word	0x0800c9fd
 800c9e0:	0800ca05 	.word	0x0800ca05
 800c9e4:	0800ca0d 	.word	0x0800ca0d
 800c9e8:	0800ca15 	.word	0x0800ca15
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9f2:	e284      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c9f4:	2304      	movs	r3, #4
 800c9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9fa:	e280      	b.n	800cefe <UART_SetConfig+0x7aa>
 800c9fc:	2308      	movs	r3, #8
 800c9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca02:	e27c      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca04:	2310      	movs	r3, #16
 800ca06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0a:	e278      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca0c:	2320      	movs	r3, #32
 800ca0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca12:	e274      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca14:	2340      	movs	r3, #64	; 0x40
 800ca16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1a:	e270      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca1c:	2380      	movs	r3, #128	; 0x80
 800ca1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca22:	e26c      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a1d      	ldr	r2, [pc, #116]	; (800caa0 <UART_SetConfig+0x34c>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d142      	bne.n	800cab4 <UART_SetConfig+0x360>
 800ca2e:	4b18      	ldr	r3, [pc, #96]	; (800ca90 <UART_SetConfig+0x33c>)
 800ca30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca32:	f003 0307 	and.w	r3, r3, #7
 800ca36:	2b05      	cmp	r3, #5
 800ca38:	d838      	bhi.n	800caac <UART_SetConfig+0x358>
 800ca3a:	a201      	add	r2, pc, #4	; (adr r2, 800ca40 <UART_SetConfig+0x2ec>)
 800ca3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca40:	0800ca59 	.word	0x0800ca59
 800ca44:	0800ca61 	.word	0x0800ca61
 800ca48:	0800ca69 	.word	0x0800ca69
 800ca4c:	0800ca71 	.word	0x0800ca71
 800ca50:	0800ca79 	.word	0x0800ca79
 800ca54:	0800caa5 	.word	0x0800caa5
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca5e:	e24e      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca60:	2304      	movs	r3, #4
 800ca62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca66:	e24a      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca68:	2308      	movs	r3, #8
 800ca6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca6e:	e246      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca70:	2310      	movs	r3, #16
 800ca72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca76:	e242      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca78:	2320      	movs	r3, #32
 800ca7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca7e:	e23e      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ca80:	cfff69f3 	.word	0xcfff69f3
 800ca84:	58000c00 	.word	0x58000c00
 800ca88:	11fff4ff 	.word	0x11fff4ff
 800ca8c:	40011000 	.word	0x40011000
 800ca90:	58024400 	.word	0x58024400
 800ca94:	40004400 	.word	0x40004400
 800ca98:	40004800 	.word	0x40004800
 800ca9c:	40004c00 	.word	0x40004c00
 800caa0:	40005000 	.word	0x40005000
 800caa4:	2340      	movs	r3, #64	; 0x40
 800caa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caaa:	e228      	b.n	800cefe <UART_SetConfig+0x7aa>
 800caac:	2380      	movs	r3, #128	; 0x80
 800caae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cab2:	e224      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4ab1      	ldr	r2, [pc, #708]	; (800cd80 <UART_SetConfig+0x62c>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d176      	bne.n	800cbac <UART_SetConfig+0x458>
 800cabe:	4bb1      	ldr	r3, [pc, #708]	; (800cd84 <UART_SetConfig+0x630>)
 800cac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cac6:	2b28      	cmp	r3, #40	; 0x28
 800cac8:	d86c      	bhi.n	800cba4 <UART_SetConfig+0x450>
 800caca:	a201      	add	r2, pc, #4	; (adr r2, 800cad0 <UART_SetConfig+0x37c>)
 800cacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad0:	0800cb75 	.word	0x0800cb75
 800cad4:	0800cba5 	.word	0x0800cba5
 800cad8:	0800cba5 	.word	0x0800cba5
 800cadc:	0800cba5 	.word	0x0800cba5
 800cae0:	0800cba5 	.word	0x0800cba5
 800cae4:	0800cba5 	.word	0x0800cba5
 800cae8:	0800cba5 	.word	0x0800cba5
 800caec:	0800cba5 	.word	0x0800cba5
 800caf0:	0800cb7d 	.word	0x0800cb7d
 800caf4:	0800cba5 	.word	0x0800cba5
 800caf8:	0800cba5 	.word	0x0800cba5
 800cafc:	0800cba5 	.word	0x0800cba5
 800cb00:	0800cba5 	.word	0x0800cba5
 800cb04:	0800cba5 	.word	0x0800cba5
 800cb08:	0800cba5 	.word	0x0800cba5
 800cb0c:	0800cba5 	.word	0x0800cba5
 800cb10:	0800cb85 	.word	0x0800cb85
 800cb14:	0800cba5 	.word	0x0800cba5
 800cb18:	0800cba5 	.word	0x0800cba5
 800cb1c:	0800cba5 	.word	0x0800cba5
 800cb20:	0800cba5 	.word	0x0800cba5
 800cb24:	0800cba5 	.word	0x0800cba5
 800cb28:	0800cba5 	.word	0x0800cba5
 800cb2c:	0800cba5 	.word	0x0800cba5
 800cb30:	0800cb8d 	.word	0x0800cb8d
 800cb34:	0800cba5 	.word	0x0800cba5
 800cb38:	0800cba5 	.word	0x0800cba5
 800cb3c:	0800cba5 	.word	0x0800cba5
 800cb40:	0800cba5 	.word	0x0800cba5
 800cb44:	0800cba5 	.word	0x0800cba5
 800cb48:	0800cba5 	.word	0x0800cba5
 800cb4c:	0800cba5 	.word	0x0800cba5
 800cb50:	0800cb95 	.word	0x0800cb95
 800cb54:	0800cba5 	.word	0x0800cba5
 800cb58:	0800cba5 	.word	0x0800cba5
 800cb5c:	0800cba5 	.word	0x0800cba5
 800cb60:	0800cba5 	.word	0x0800cba5
 800cb64:	0800cba5 	.word	0x0800cba5
 800cb68:	0800cba5 	.word	0x0800cba5
 800cb6c:	0800cba5 	.word	0x0800cba5
 800cb70:	0800cb9d 	.word	0x0800cb9d
 800cb74:	2301      	movs	r3, #1
 800cb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb7a:	e1c0      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cb7c:	2304      	movs	r3, #4
 800cb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb82:	e1bc      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cb84:	2308      	movs	r3, #8
 800cb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb8a:	e1b8      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cb8c:	2310      	movs	r3, #16
 800cb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb92:	e1b4      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cb94:	2320      	movs	r3, #32
 800cb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9a:	e1b0      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cb9c:	2340      	movs	r3, #64	; 0x40
 800cb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cba2:	e1ac      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cba4:	2380      	movs	r3, #128	; 0x80
 800cba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbaa:	e1a8      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a75      	ldr	r2, [pc, #468]	; (800cd88 <UART_SetConfig+0x634>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d130      	bne.n	800cc18 <UART_SetConfig+0x4c4>
 800cbb6:	4b73      	ldr	r3, [pc, #460]	; (800cd84 <UART_SetConfig+0x630>)
 800cbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbba:	f003 0307 	and.w	r3, r3, #7
 800cbbe:	2b05      	cmp	r3, #5
 800cbc0:	d826      	bhi.n	800cc10 <UART_SetConfig+0x4bc>
 800cbc2:	a201      	add	r2, pc, #4	; (adr r2, 800cbc8 <UART_SetConfig+0x474>)
 800cbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc8:	0800cbe1 	.word	0x0800cbe1
 800cbcc:	0800cbe9 	.word	0x0800cbe9
 800cbd0:	0800cbf1 	.word	0x0800cbf1
 800cbd4:	0800cbf9 	.word	0x0800cbf9
 800cbd8:	0800cc01 	.word	0x0800cc01
 800cbdc:	0800cc09 	.word	0x0800cc09
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe6:	e18a      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cbe8:	2304      	movs	r3, #4
 800cbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbee:	e186      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cbf0:	2308      	movs	r3, #8
 800cbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf6:	e182      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cbf8:	2310      	movs	r3, #16
 800cbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfe:	e17e      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc00:	2320      	movs	r3, #32
 800cc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc06:	e17a      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc08:	2340      	movs	r3, #64	; 0x40
 800cc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0e:	e176      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc10:	2380      	movs	r3, #128	; 0x80
 800cc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc16:	e172      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a5b      	ldr	r2, [pc, #364]	; (800cd8c <UART_SetConfig+0x638>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d130      	bne.n	800cc84 <UART_SetConfig+0x530>
 800cc22:	4b58      	ldr	r3, [pc, #352]	; (800cd84 <UART_SetConfig+0x630>)
 800cc24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc26:	f003 0307 	and.w	r3, r3, #7
 800cc2a:	2b05      	cmp	r3, #5
 800cc2c:	d826      	bhi.n	800cc7c <UART_SetConfig+0x528>
 800cc2e:	a201      	add	r2, pc, #4	; (adr r2, 800cc34 <UART_SetConfig+0x4e0>)
 800cc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc34:	0800cc4d 	.word	0x0800cc4d
 800cc38:	0800cc55 	.word	0x0800cc55
 800cc3c:	0800cc5d 	.word	0x0800cc5d
 800cc40:	0800cc65 	.word	0x0800cc65
 800cc44:	0800cc6d 	.word	0x0800cc6d
 800cc48:	0800cc75 	.word	0x0800cc75
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc52:	e154      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc54:	2304      	movs	r3, #4
 800cc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5a:	e150      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc5c:	2308      	movs	r3, #8
 800cc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc62:	e14c      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc64:	2310      	movs	r3, #16
 800cc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6a:	e148      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc6c:	2320      	movs	r3, #32
 800cc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc72:	e144      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc74:	2340      	movs	r3, #64	; 0x40
 800cc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7a:	e140      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc7c:	2380      	movs	r3, #128	; 0x80
 800cc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc82:	e13c      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a41      	ldr	r2, [pc, #260]	; (800cd90 <UART_SetConfig+0x63c>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	f040 8082 	bne.w	800cd94 <UART_SetConfig+0x640>
 800cc90:	4b3c      	ldr	r3, [pc, #240]	; (800cd84 <UART_SetConfig+0x630>)
 800cc92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc98:	2b28      	cmp	r3, #40	; 0x28
 800cc9a:	d86d      	bhi.n	800cd78 <UART_SetConfig+0x624>
 800cc9c:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <UART_SetConfig+0x550>)
 800cc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca2:	bf00      	nop
 800cca4:	0800cd49 	.word	0x0800cd49
 800cca8:	0800cd79 	.word	0x0800cd79
 800ccac:	0800cd79 	.word	0x0800cd79
 800ccb0:	0800cd79 	.word	0x0800cd79
 800ccb4:	0800cd79 	.word	0x0800cd79
 800ccb8:	0800cd79 	.word	0x0800cd79
 800ccbc:	0800cd79 	.word	0x0800cd79
 800ccc0:	0800cd79 	.word	0x0800cd79
 800ccc4:	0800cd51 	.word	0x0800cd51
 800ccc8:	0800cd79 	.word	0x0800cd79
 800cccc:	0800cd79 	.word	0x0800cd79
 800ccd0:	0800cd79 	.word	0x0800cd79
 800ccd4:	0800cd79 	.word	0x0800cd79
 800ccd8:	0800cd79 	.word	0x0800cd79
 800ccdc:	0800cd79 	.word	0x0800cd79
 800cce0:	0800cd79 	.word	0x0800cd79
 800cce4:	0800cd59 	.word	0x0800cd59
 800cce8:	0800cd79 	.word	0x0800cd79
 800ccec:	0800cd79 	.word	0x0800cd79
 800ccf0:	0800cd79 	.word	0x0800cd79
 800ccf4:	0800cd79 	.word	0x0800cd79
 800ccf8:	0800cd79 	.word	0x0800cd79
 800ccfc:	0800cd79 	.word	0x0800cd79
 800cd00:	0800cd79 	.word	0x0800cd79
 800cd04:	0800cd61 	.word	0x0800cd61
 800cd08:	0800cd79 	.word	0x0800cd79
 800cd0c:	0800cd79 	.word	0x0800cd79
 800cd10:	0800cd79 	.word	0x0800cd79
 800cd14:	0800cd79 	.word	0x0800cd79
 800cd18:	0800cd79 	.word	0x0800cd79
 800cd1c:	0800cd79 	.word	0x0800cd79
 800cd20:	0800cd79 	.word	0x0800cd79
 800cd24:	0800cd69 	.word	0x0800cd69
 800cd28:	0800cd79 	.word	0x0800cd79
 800cd2c:	0800cd79 	.word	0x0800cd79
 800cd30:	0800cd79 	.word	0x0800cd79
 800cd34:	0800cd79 	.word	0x0800cd79
 800cd38:	0800cd79 	.word	0x0800cd79
 800cd3c:	0800cd79 	.word	0x0800cd79
 800cd40:	0800cd79 	.word	0x0800cd79
 800cd44:	0800cd71 	.word	0x0800cd71
 800cd48:	2301      	movs	r3, #1
 800cd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd4e:	e0d6      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cd50:	2304      	movs	r3, #4
 800cd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd56:	e0d2      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cd58:	2308      	movs	r3, #8
 800cd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd5e:	e0ce      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cd60:	2310      	movs	r3, #16
 800cd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd66:	e0ca      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cd68:	2320      	movs	r3, #32
 800cd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6e:	e0c6      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cd70:	2340      	movs	r3, #64	; 0x40
 800cd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd76:	e0c2      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cd78:	2380      	movs	r3, #128	; 0x80
 800cd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7e:	e0be      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cd80:	40011400 	.word	0x40011400
 800cd84:	58024400 	.word	0x58024400
 800cd88:	40007800 	.word	0x40007800
 800cd8c:	40007c00 	.word	0x40007c00
 800cd90:	40011800 	.word	0x40011800
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4aad      	ldr	r2, [pc, #692]	; (800d050 <UART_SetConfig+0x8fc>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d176      	bne.n	800ce8c <UART_SetConfig+0x738>
 800cd9e:	4bad      	ldr	r3, [pc, #692]	; (800d054 <UART_SetConfig+0x900>)
 800cda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cda6:	2b28      	cmp	r3, #40	; 0x28
 800cda8:	d86c      	bhi.n	800ce84 <UART_SetConfig+0x730>
 800cdaa:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <UART_SetConfig+0x65c>)
 800cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb0:	0800ce55 	.word	0x0800ce55
 800cdb4:	0800ce85 	.word	0x0800ce85
 800cdb8:	0800ce85 	.word	0x0800ce85
 800cdbc:	0800ce85 	.word	0x0800ce85
 800cdc0:	0800ce85 	.word	0x0800ce85
 800cdc4:	0800ce85 	.word	0x0800ce85
 800cdc8:	0800ce85 	.word	0x0800ce85
 800cdcc:	0800ce85 	.word	0x0800ce85
 800cdd0:	0800ce5d 	.word	0x0800ce5d
 800cdd4:	0800ce85 	.word	0x0800ce85
 800cdd8:	0800ce85 	.word	0x0800ce85
 800cddc:	0800ce85 	.word	0x0800ce85
 800cde0:	0800ce85 	.word	0x0800ce85
 800cde4:	0800ce85 	.word	0x0800ce85
 800cde8:	0800ce85 	.word	0x0800ce85
 800cdec:	0800ce85 	.word	0x0800ce85
 800cdf0:	0800ce65 	.word	0x0800ce65
 800cdf4:	0800ce85 	.word	0x0800ce85
 800cdf8:	0800ce85 	.word	0x0800ce85
 800cdfc:	0800ce85 	.word	0x0800ce85
 800ce00:	0800ce85 	.word	0x0800ce85
 800ce04:	0800ce85 	.word	0x0800ce85
 800ce08:	0800ce85 	.word	0x0800ce85
 800ce0c:	0800ce85 	.word	0x0800ce85
 800ce10:	0800ce6d 	.word	0x0800ce6d
 800ce14:	0800ce85 	.word	0x0800ce85
 800ce18:	0800ce85 	.word	0x0800ce85
 800ce1c:	0800ce85 	.word	0x0800ce85
 800ce20:	0800ce85 	.word	0x0800ce85
 800ce24:	0800ce85 	.word	0x0800ce85
 800ce28:	0800ce85 	.word	0x0800ce85
 800ce2c:	0800ce85 	.word	0x0800ce85
 800ce30:	0800ce75 	.word	0x0800ce75
 800ce34:	0800ce85 	.word	0x0800ce85
 800ce38:	0800ce85 	.word	0x0800ce85
 800ce3c:	0800ce85 	.word	0x0800ce85
 800ce40:	0800ce85 	.word	0x0800ce85
 800ce44:	0800ce85 	.word	0x0800ce85
 800ce48:	0800ce85 	.word	0x0800ce85
 800ce4c:	0800ce85 	.word	0x0800ce85
 800ce50:	0800ce7d 	.word	0x0800ce7d
 800ce54:	2301      	movs	r3, #1
 800ce56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce5a:	e050      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ce5c:	2304      	movs	r3, #4
 800ce5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce62:	e04c      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ce64:	2308      	movs	r3, #8
 800ce66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce6a:	e048      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ce6c:	2310      	movs	r3, #16
 800ce6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce72:	e044      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ce74:	2320      	movs	r3, #32
 800ce76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce7a:	e040      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ce7c:	2340      	movs	r3, #64	; 0x40
 800ce7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce82:	e03c      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ce84:	2380      	movs	r3, #128	; 0x80
 800ce86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce8a:	e038      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a71      	ldr	r2, [pc, #452]	; (800d058 <UART_SetConfig+0x904>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d130      	bne.n	800cef8 <UART_SetConfig+0x7a4>
 800ce96:	4b6f      	ldr	r3, [pc, #444]	; (800d054 <UART_SetConfig+0x900>)
 800ce98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce9a:	f003 0307 	and.w	r3, r3, #7
 800ce9e:	2b05      	cmp	r3, #5
 800cea0:	d826      	bhi.n	800cef0 <UART_SetConfig+0x79c>
 800cea2:	a201      	add	r2, pc, #4	; (adr r2, 800cea8 <UART_SetConfig+0x754>)
 800cea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea8:	0800cec1 	.word	0x0800cec1
 800ceac:	0800cec9 	.word	0x0800cec9
 800ceb0:	0800ced1 	.word	0x0800ced1
 800ceb4:	0800ced9 	.word	0x0800ced9
 800ceb8:	0800cee1 	.word	0x0800cee1
 800cebc:	0800cee9 	.word	0x0800cee9
 800cec0:	2302      	movs	r3, #2
 800cec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cec6:	e01a      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cec8:	2304      	movs	r3, #4
 800ceca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cece:	e016      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ced0:	2308      	movs	r3, #8
 800ced2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ced6:	e012      	b.n	800cefe <UART_SetConfig+0x7aa>
 800ced8:	2310      	movs	r3, #16
 800ceda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cede:	e00e      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cee0:	2320      	movs	r3, #32
 800cee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cee6:	e00a      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cee8:	2340      	movs	r3, #64	; 0x40
 800ceea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceee:	e006      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cef0:	2380      	movs	r3, #128	; 0x80
 800cef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cef6:	e002      	b.n	800cefe <UART_SetConfig+0x7aa>
 800cef8:	2380      	movs	r3, #128	; 0x80
 800cefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a55      	ldr	r2, [pc, #340]	; (800d058 <UART_SetConfig+0x904>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	f040 80f0 	bne.w	800d0ea <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	dc46      	bgt.n	800cfa0 <UART_SetConfig+0x84c>
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	db75      	blt.n	800d002 <UART_SetConfig+0x8ae>
 800cf16:	3b02      	subs	r3, #2
 800cf18:	2b1e      	cmp	r3, #30
 800cf1a:	d872      	bhi.n	800d002 <UART_SetConfig+0x8ae>
 800cf1c:	a201      	add	r2, pc, #4	; (adr r2, 800cf24 <UART_SetConfig+0x7d0>)
 800cf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf22:	bf00      	nop
 800cf24:	0800cfa7 	.word	0x0800cfa7
 800cf28:	0800d003 	.word	0x0800d003
 800cf2c:	0800cfaf 	.word	0x0800cfaf
 800cf30:	0800d003 	.word	0x0800d003
 800cf34:	0800d003 	.word	0x0800d003
 800cf38:	0800d003 	.word	0x0800d003
 800cf3c:	0800cfbf 	.word	0x0800cfbf
 800cf40:	0800d003 	.word	0x0800d003
 800cf44:	0800d003 	.word	0x0800d003
 800cf48:	0800d003 	.word	0x0800d003
 800cf4c:	0800d003 	.word	0x0800d003
 800cf50:	0800d003 	.word	0x0800d003
 800cf54:	0800d003 	.word	0x0800d003
 800cf58:	0800d003 	.word	0x0800d003
 800cf5c:	0800cfcf 	.word	0x0800cfcf
 800cf60:	0800d003 	.word	0x0800d003
 800cf64:	0800d003 	.word	0x0800d003
 800cf68:	0800d003 	.word	0x0800d003
 800cf6c:	0800d003 	.word	0x0800d003
 800cf70:	0800d003 	.word	0x0800d003
 800cf74:	0800d003 	.word	0x0800d003
 800cf78:	0800d003 	.word	0x0800d003
 800cf7c:	0800d003 	.word	0x0800d003
 800cf80:	0800d003 	.word	0x0800d003
 800cf84:	0800d003 	.word	0x0800d003
 800cf88:	0800d003 	.word	0x0800d003
 800cf8c:	0800d003 	.word	0x0800d003
 800cf90:	0800d003 	.word	0x0800d003
 800cf94:	0800d003 	.word	0x0800d003
 800cf98:	0800d003 	.word	0x0800d003
 800cf9c:	0800cff5 	.word	0x0800cff5
 800cfa0:	2b40      	cmp	r3, #64	; 0x40
 800cfa2:	d02a      	beq.n	800cffa <UART_SetConfig+0x8a6>
 800cfa4:	e02d      	b.n	800d002 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cfa6:	f7fc f857 	bl	8009058 <HAL_RCCEx_GetD3PCLK1Freq>
 800cfaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cfac:	e02f      	b.n	800d00e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfae:	f107 0314 	add.w	r3, r7, #20
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fc f866 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfbc:	e027      	b.n	800d00e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfbe:	f107 0308 	add.w	r3, r7, #8
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fc f9b2 	bl	800932c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfcc:	e01f      	b.n	800d00e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfce:	4b21      	ldr	r3, [pc, #132]	; (800d054 <UART_SetConfig+0x900>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0320 	and.w	r3, r3, #32
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d009      	beq.n	800cfee <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfda:	4b1e      	ldr	r3, [pc, #120]	; (800d054 <UART_SetConfig+0x900>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	08db      	lsrs	r3, r3, #3
 800cfe0:	f003 0303 	and.w	r3, r3, #3
 800cfe4:	4a1d      	ldr	r2, [pc, #116]	; (800d05c <UART_SetConfig+0x908>)
 800cfe6:	fa22 f303 	lsr.w	r3, r2, r3
 800cfea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfec:	e00f      	b.n	800d00e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800cfee:	4b1b      	ldr	r3, [pc, #108]	; (800d05c <UART_SetConfig+0x908>)
 800cff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cff2:	e00c      	b.n	800d00e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cff4:	4b1a      	ldr	r3, [pc, #104]	; (800d060 <UART_SetConfig+0x90c>)
 800cff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cff8:	e009      	b.n	800d00e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d000:	e005      	b.n	800d00e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800d002:	2300      	movs	r3, #0
 800d004:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d00c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 81e6 	beq.w	800d3e2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01a:	4a12      	ldr	r2, [pc, #72]	; (800d064 <UART_SetConfig+0x910>)
 800d01c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d020:	461a      	mov	r2, r3
 800d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d024:	fbb3 f3f2 	udiv	r3, r3, r2
 800d028:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	4613      	mov	r3, r2
 800d030:	005b      	lsls	r3, r3, #1
 800d032:	4413      	add	r3, r2
 800d034:	6a3a      	ldr	r2, [r7, #32]
 800d036:	429a      	cmp	r2, r3
 800d038:	d305      	bcc.n	800d046 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d040:	6a3a      	ldr	r2, [r7, #32]
 800d042:	429a      	cmp	r2, r3
 800d044:	d910      	bls.n	800d068 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d04c:	e1c9      	b.n	800d3e2 <UART_SetConfig+0xc8e>
 800d04e:	bf00      	nop
 800d050:	40011c00 	.word	0x40011c00
 800d054:	58024400 	.word	0x58024400
 800d058:	58000c00 	.word	0x58000c00
 800d05c:	03d09000 	.word	0x03d09000
 800d060:	003d0900 	.word	0x003d0900
 800d064:	0800dacc 	.word	0x0800dacc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06a:	4618      	mov	r0, r3
 800d06c:	f04f 0100 	mov.w	r1, #0
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d074:	4ac1      	ldr	r2, [pc, #772]	; (800d37c <UART_SetConfig+0xc28>)
 800d076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	f04f 0300 	mov.w	r3, #0
 800d080:	f7f3 f946 	bl	8000310 <__aeabi_uldivmod>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	4610      	mov	r0, r2
 800d08a:	4619      	mov	r1, r3
 800d08c:	f04f 0200 	mov.w	r2, #0
 800d090:	f04f 0300 	mov.w	r3, #0
 800d094:	020b      	lsls	r3, r1, #8
 800d096:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d09a:	0202      	lsls	r2, r0, #8
 800d09c:	6879      	ldr	r1, [r7, #4]
 800d09e:	6849      	ldr	r1, [r1, #4]
 800d0a0:	0849      	lsrs	r1, r1, #1
 800d0a2:	4608      	mov	r0, r1
 800d0a4:	f04f 0100 	mov.w	r1, #0
 800d0a8:	1814      	adds	r4, r2, r0
 800d0aa:	eb43 0501 	adc.w	r5, r3, r1
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	f04f 0300 	mov.w	r3, #0
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	f7f3 f928 	bl	8000310 <__aeabi_uldivmod>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0ce:	d308      	bcc.n	800d0e2 <UART_SetConfig+0x98e>
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0d6:	d204      	bcs.n	800d0e2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0de:	60da      	str	r2, [r3, #12]
 800d0e0:	e17f      	b.n	800d3e2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d0e8:	e17b      	b.n	800d3e2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	69db      	ldr	r3, [r3, #28]
 800d0ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0f2:	f040 80be 	bne.w	800d272 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800d0f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0fa:	2b20      	cmp	r3, #32
 800d0fc:	dc48      	bgt.n	800d190 <UART_SetConfig+0xa3c>
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	db7b      	blt.n	800d1fa <UART_SetConfig+0xaa6>
 800d102:	2b20      	cmp	r3, #32
 800d104:	d879      	bhi.n	800d1fa <UART_SetConfig+0xaa6>
 800d106:	a201      	add	r2, pc, #4	; (adr r2, 800d10c <UART_SetConfig+0x9b8>)
 800d108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10c:	0800d197 	.word	0x0800d197
 800d110:	0800d19f 	.word	0x0800d19f
 800d114:	0800d1fb 	.word	0x0800d1fb
 800d118:	0800d1fb 	.word	0x0800d1fb
 800d11c:	0800d1a7 	.word	0x0800d1a7
 800d120:	0800d1fb 	.word	0x0800d1fb
 800d124:	0800d1fb 	.word	0x0800d1fb
 800d128:	0800d1fb 	.word	0x0800d1fb
 800d12c:	0800d1b7 	.word	0x0800d1b7
 800d130:	0800d1fb 	.word	0x0800d1fb
 800d134:	0800d1fb 	.word	0x0800d1fb
 800d138:	0800d1fb 	.word	0x0800d1fb
 800d13c:	0800d1fb 	.word	0x0800d1fb
 800d140:	0800d1fb 	.word	0x0800d1fb
 800d144:	0800d1fb 	.word	0x0800d1fb
 800d148:	0800d1fb 	.word	0x0800d1fb
 800d14c:	0800d1c7 	.word	0x0800d1c7
 800d150:	0800d1fb 	.word	0x0800d1fb
 800d154:	0800d1fb 	.word	0x0800d1fb
 800d158:	0800d1fb 	.word	0x0800d1fb
 800d15c:	0800d1fb 	.word	0x0800d1fb
 800d160:	0800d1fb 	.word	0x0800d1fb
 800d164:	0800d1fb 	.word	0x0800d1fb
 800d168:	0800d1fb 	.word	0x0800d1fb
 800d16c:	0800d1fb 	.word	0x0800d1fb
 800d170:	0800d1fb 	.word	0x0800d1fb
 800d174:	0800d1fb 	.word	0x0800d1fb
 800d178:	0800d1fb 	.word	0x0800d1fb
 800d17c:	0800d1fb 	.word	0x0800d1fb
 800d180:	0800d1fb 	.word	0x0800d1fb
 800d184:	0800d1fb 	.word	0x0800d1fb
 800d188:	0800d1fb 	.word	0x0800d1fb
 800d18c:	0800d1ed 	.word	0x0800d1ed
 800d190:	2b40      	cmp	r3, #64	; 0x40
 800d192:	d02e      	beq.n	800d1f2 <UART_SetConfig+0xa9e>
 800d194:	e031      	b.n	800d1fa <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d196:	f7fa fbd3 	bl	8007940 <HAL_RCC_GetPCLK1Freq>
 800d19a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d19c:	e033      	b.n	800d206 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d19e:	f7fa fbe5 	bl	800796c <HAL_RCC_GetPCLK2Freq>
 800d1a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d1a4:	e02f      	b.n	800d206 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1a6:	f107 0314 	add.w	r3, r7, #20
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fb ff6a 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1b4:	e027      	b.n	800d206 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1b6:	f107 0308 	add.w	r3, r7, #8
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fc f8b6 	bl	800932c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1c4:	e01f      	b.n	800d206 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1c6:	4b6e      	ldr	r3, [pc, #440]	; (800d380 <UART_SetConfig+0xc2c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f003 0320 	and.w	r3, r3, #32
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d009      	beq.n	800d1e6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1d2:	4b6b      	ldr	r3, [pc, #428]	; (800d380 <UART_SetConfig+0xc2c>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	08db      	lsrs	r3, r3, #3
 800d1d8:	f003 0303 	and.w	r3, r3, #3
 800d1dc:	4a69      	ldr	r2, [pc, #420]	; (800d384 <UART_SetConfig+0xc30>)
 800d1de:	fa22 f303 	lsr.w	r3, r2, r3
 800d1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1e4:	e00f      	b.n	800d206 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800d1e6:	4b67      	ldr	r3, [pc, #412]	; (800d384 <UART_SetConfig+0xc30>)
 800d1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1ea:	e00c      	b.n	800d206 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1ec:	4b66      	ldr	r3, [pc, #408]	; (800d388 <UART_SetConfig+0xc34>)
 800d1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1f0:	e009      	b.n	800d206 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1f8:	e005      	b.n	800d206 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d1fe:	2301      	movs	r3, #1
 800d200:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 80ea 	beq.w	800d3e2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d212:	4a5a      	ldr	r2, [pc, #360]	; (800d37c <UART_SetConfig+0xc28>)
 800d214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d218:	461a      	mov	r2, r3
 800d21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d220:	005a      	lsls	r2, r3, #1
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	085b      	lsrs	r3, r3, #1
 800d228:	441a      	add	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d232:	b29b      	uxth	r3, r3
 800d234:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d238:	2b0f      	cmp	r3, #15
 800d23a:	d916      	bls.n	800d26a <UART_SetConfig+0xb16>
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d242:	d212      	bcs.n	800d26a <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	b29b      	uxth	r3, r3
 800d248:	f023 030f 	bic.w	r3, r3, #15
 800d24c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d250:	085b      	lsrs	r3, r3, #1
 800d252:	b29b      	uxth	r3, r3
 800d254:	f003 0307 	and.w	r3, r3, #7
 800d258:	b29a      	uxth	r2, r3
 800d25a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d25c:	4313      	orrs	r3, r2
 800d25e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d266:	60da      	str	r2, [r3, #12]
 800d268:	e0bb      	b.n	800d3e2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d270:	e0b7      	b.n	800d3e2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d272:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d276:	2b20      	cmp	r3, #32
 800d278:	dc4a      	bgt.n	800d310 <UART_SetConfig+0xbbc>
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f2c0 8086 	blt.w	800d38c <UART_SetConfig+0xc38>
 800d280:	2b20      	cmp	r3, #32
 800d282:	f200 8083 	bhi.w	800d38c <UART_SetConfig+0xc38>
 800d286:	a201      	add	r2, pc, #4	; (adr r2, 800d28c <UART_SetConfig+0xb38>)
 800d288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28c:	0800d317 	.word	0x0800d317
 800d290:	0800d31f 	.word	0x0800d31f
 800d294:	0800d38d 	.word	0x0800d38d
 800d298:	0800d38d 	.word	0x0800d38d
 800d29c:	0800d327 	.word	0x0800d327
 800d2a0:	0800d38d 	.word	0x0800d38d
 800d2a4:	0800d38d 	.word	0x0800d38d
 800d2a8:	0800d38d 	.word	0x0800d38d
 800d2ac:	0800d337 	.word	0x0800d337
 800d2b0:	0800d38d 	.word	0x0800d38d
 800d2b4:	0800d38d 	.word	0x0800d38d
 800d2b8:	0800d38d 	.word	0x0800d38d
 800d2bc:	0800d38d 	.word	0x0800d38d
 800d2c0:	0800d38d 	.word	0x0800d38d
 800d2c4:	0800d38d 	.word	0x0800d38d
 800d2c8:	0800d38d 	.word	0x0800d38d
 800d2cc:	0800d347 	.word	0x0800d347
 800d2d0:	0800d38d 	.word	0x0800d38d
 800d2d4:	0800d38d 	.word	0x0800d38d
 800d2d8:	0800d38d 	.word	0x0800d38d
 800d2dc:	0800d38d 	.word	0x0800d38d
 800d2e0:	0800d38d 	.word	0x0800d38d
 800d2e4:	0800d38d 	.word	0x0800d38d
 800d2e8:	0800d38d 	.word	0x0800d38d
 800d2ec:	0800d38d 	.word	0x0800d38d
 800d2f0:	0800d38d 	.word	0x0800d38d
 800d2f4:	0800d38d 	.word	0x0800d38d
 800d2f8:	0800d38d 	.word	0x0800d38d
 800d2fc:	0800d38d 	.word	0x0800d38d
 800d300:	0800d38d 	.word	0x0800d38d
 800d304:	0800d38d 	.word	0x0800d38d
 800d308:	0800d38d 	.word	0x0800d38d
 800d30c:	0800d36d 	.word	0x0800d36d
 800d310:	2b40      	cmp	r3, #64	; 0x40
 800d312:	d02e      	beq.n	800d372 <UART_SetConfig+0xc1e>
 800d314:	e03a      	b.n	800d38c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d316:	f7fa fb13 	bl	8007940 <HAL_RCC_GetPCLK1Freq>
 800d31a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d31c:	e03c      	b.n	800d398 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d31e:	f7fa fb25 	bl	800796c <HAL_RCC_GetPCLK2Freq>
 800d322:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d324:	e038      	b.n	800d398 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d326:	f107 0314 	add.w	r3, r7, #20
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fb feaa 	bl	8009084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d334:	e030      	b.n	800d398 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d336:	f107 0308 	add.w	r3, r7, #8
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fb fff6 	bl	800932c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d344:	e028      	b.n	800d398 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d346:	4b0e      	ldr	r3, [pc, #56]	; (800d380 <UART_SetConfig+0xc2c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f003 0320 	and.w	r3, r3, #32
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d009      	beq.n	800d366 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d352:	4b0b      	ldr	r3, [pc, #44]	; (800d380 <UART_SetConfig+0xc2c>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	08db      	lsrs	r3, r3, #3
 800d358:	f003 0303 	and.w	r3, r3, #3
 800d35c:	4a09      	ldr	r2, [pc, #36]	; (800d384 <UART_SetConfig+0xc30>)
 800d35e:	fa22 f303 	lsr.w	r3, r2, r3
 800d362:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d364:	e018      	b.n	800d398 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800d366:	4b07      	ldr	r3, [pc, #28]	; (800d384 <UART_SetConfig+0xc30>)
 800d368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d36a:	e015      	b.n	800d398 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d36c:	4b06      	ldr	r3, [pc, #24]	; (800d388 <UART_SetConfig+0xc34>)
 800d36e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d370:	e012      	b.n	800d398 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d378:	e00e      	b.n	800d398 <UART_SetConfig+0xc44>
 800d37a:	bf00      	nop
 800d37c:	0800dacc 	.word	0x0800dacc
 800d380:	58024400 	.word	0x58024400
 800d384:	03d09000 	.word	0x03d09000
 800d388:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800d38c:	2300      	movs	r3, #0
 800d38e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d396:	bf00      	nop
    }

    if (pclk != 0U)
 800d398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d021      	beq.n	800d3e2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	4a1a      	ldr	r2, [pc, #104]	; (800d40c <UART_SetConfig+0xcb8>)
 800d3a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	085b      	lsrs	r3, r3, #1
 800d3b6:	441a      	add	r2, r3
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	2b0f      	cmp	r3, #15
 800d3c8:	d908      	bls.n	800d3dc <UART_SetConfig+0xc88>
 800d3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3d0:	d204      	bcs.n	800d3dc <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3d8:	60da      	str	r2, [r3, #12]
 800d3da:	e002      	b.n	800d3e2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d3fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d402:	4618      	mov	r0, r3
 800d404:	3738      	adds	r7, #56	; 0x38
 800d406:	46bd      	mov	sp, r7
 800d408:	bdb0      	pop	{r4, r5, r7, pc}
 800d40a:	bf00      	nop
 800d40c:	0800dacc 	.word	0x0800dacc

0800d410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00a      	beq.n	800d43a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	430a      	orrs	r2, r1
 800d438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d43e:	f003 0302 	and.w	r3, r3, #2
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	430a      	orrs	r2, r1
 800d45a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d460:	f003 0304 	and.w	r3, r3, #4
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00a      	beq.n	800d47e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	430a      	orrs	r2, r1
 800d47c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d482:	f003 0308 	and.w	r3, r3, #8
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00a      	beq.n	800d4a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	430a      	orrs	r2, r1
 800d49e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a4:	f003 0310 	and.w	r3, r3, #16
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00a      	beq.n	800d4c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	430a      	orrs	r2, r1
 800d4c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c6:	f003 0320 	and.w	r3, r3, #32
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00a      	beq.n	800d4e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	430a      	orrs	r2, r1
 800d4e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d01a      	beq.n	800d526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	430a      	orrs	r2, r1
 800d504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d50a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d50e:	d10a      	bne.n	800d526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00a      	beq.n	800d548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	430a      	orrs	r2, r1
 800d546:	605a      	str	r2, [r3, #4]
  }
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af02      	add	r7, sp, #8
 800d55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d564:	f7f5 ff2e 	bl	80033c4 <HAL_GetTick>
 800d568:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f003 0308 	and.w	r3, r3, #8
 800d574:	2b08      	cmp	r3, #8
 800d576:	d10e      	bne.n	800d596 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2200      	movs	r2, #0
 800d582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f82f 	bl	800d5ea <UART_WaitOnFlagUntilTimeout>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d001      	beq.n	800d596 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d592:	2303      	movs	r3, #3
 800d594:	e025      	b.n	800d5e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f003 0304 	and.w	r3, r3, #4
 800d5a0:	2b04      	cmp	r3, #4
 800d5a2:	d10e      	bne.n	800d5c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 f819 	bl	800d5ea <UART_WaitOnFlagUntilTimeout>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5be:	2303      	movs	r3, #3
 800d5c0:	e00f      	b.n	800d5e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2220      	movs	r2, #32
 800d5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2220      	movs	r2, #32
 800d5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	60f8      	str	r0, [r7, #12]
 800d5f2:	60b9      	str	r1, [r7, #8]
 800d5f4:	603b      	str	r3, [r7, #0]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5fa:	e062      	b.n	800d6c2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d602:	d05e      	beq.n	800d6c2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d604:	f7f5 fede 	bl	80033c4 <HAL_GetTick>
 800d608:	4602      	mov	r2, r0
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	1ad3      	subs	r3, r2, r3
 800d60e:	69ba      	ldr	r2, [r7, #24]
 800d610:	429a      	cmp	r2, r3
 800d612:	d302      	bcc.n	800d61a <UART_WaitOnFlagUntilTimeout+0x30>
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d11d      	bne.n	800d656 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d628:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	689a      	ldr	r2, [r3, #8]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f022 0201 	bic.w	r2, r2, #1
 800d638:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2220      	movs	r2, #32
 800d63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2220      	movs	r2, #32
 800d646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2200      	movs	r2, #0
 800d64e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d652:	2303      	movs	r3, #3
 800d654:	e045      	b.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f003 0304 	and.w	r3, r3, #4
 800d660:	2b00      	cmp	r3, #0
 800d662:	d02e      	beq.n	800d6c2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	69db      	ldr	r3, [r3, #28]
 800d66a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d66e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d672:	d126      	bne.n	800d6c2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d67c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d68c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	689a      	ldr	r2, [r3, #8]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f022 0201 	bic.w	r2, r2, #1
 800d69c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2220      	movs	r2, #32
 800d6a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2220      	movs	r2, #32
 800d6aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2220      	movs	r2, #32
 800d6b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d6be:	2303      	movs	r3, #3
 800d6c0:	e00f      	b.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	69da      	ldr	r2, [r3, #28]
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	bf0c      	ite	eq
 800d6d2:	2301      	moveq	r3, #1
 800d6d4:	2300      	movne	r3, #0
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	461a      	mov	r2, r3
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d08d      	beq.n	800d5fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
	...

0800d6ec <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b086      	sub	sp, #24
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	e056      	b.n	800d7b2 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d106      	bne.n	800d71c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f7f5 fbd8 	bl	8002ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2224      	movs	r2, #36	; 0x24
 800d720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f022 0201 	bic.w	r2, r2, #1
 800d732:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f7ff f80d 	bl	800c754 <UART_SetConfig>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d101      	bne.n	800d744 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	e036      	b.n	800d7b2 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d002      	beq.n	800d752 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f7ff fe5f 	bl	800d410 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	689a      	ldr	r2, [r3, #8]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d760:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	689b      	ldr	r3, [r3, #8]
 800d768:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	68ba      	ldr	r2, [r7, #8]
 800d772:	430a      	orrs	r2, r1
 800d774:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	055b      	lsls	r3, r3, #21
 800d77a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	041b      	lsls	r3, r3, #16
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	4313      	orrs	r3, r2
 800d784:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	4b0b      	ldr	r3, [pc, #44]	; (800d7bc <HAL_RS485Ex_Init+0xd0>)
 800d78e:	4013      	ands	r3, r2
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	6812      	ldr	r2, [r2, #0]
 800d794:	6979      	ldr	r1, [r7, #20]
 800d796:	430b      	orrs	r3, r1
 800d798:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f042 0201 	orr.w	r2, r2, #1
 800d7a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7ff fed2 	bl	800d554 <UART_CheckIdleState>
 800d7b0:	4603      	mov	r3, r0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3718      	adds	r7, #24
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	fc00ffff 	.word	0xfc00ffff

0800d7c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d101      	bne.n	800d7d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800d7d2:	2302      	movs	r3, #2
 800d7d4:	e027      	b.n	800d826 <HAL_UARTEx_DisableFifoMode+0x66>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2224      	movs	r2, #36	; 0x24
 800d7e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f022 0201 	bic.w	r2, r2, #1
 800d7fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d804:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2220      	movs	r2, #32
 800d818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b084      	sub	sp, #16
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
 800d83a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d842:	2b01      	cmp	r3, #1
 800d844:	d101      	bne.n	800d84a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d846:	2302      	movs	r3, #2
 800d848:	e02d      	b.n	800d8a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2224      	movs	r2, #36	; 0x24
 800d856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f022 0201 	bic.w	r2, r2, #1
 800d870:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	683a      	ldr	r2, [r7, #0]
 800d882:	430a      	orrs	r2, r1
 800d884:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f850 	bl	800d92c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2220      	movs	r2, #32
 800d898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b084      	sub	sp, #16
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
 800d8b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d101      	bne.n	800d8c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d8c2:	2302      	movs	r3, #2
 800d8c4:	e02d      	b.n	800d922 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2224      	movs	r2, #36	; 0x24
 800d8d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f022 0201 	bic.w	r2, r2, #1
 800d8ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	683a      	ldr	r2, [r7, #0]
 800d8fe:	430a      	orrs	r2, r1
 800d900:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f812 	bl	800d92c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2220      	movs	r2, #32
 800d914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
	...

0800d92c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d108      	bne.n	800d94e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d94c:	e031      	b.n	800d9b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d94e:	2310      	movs	r3, #16
 800d950:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d952:	2310      	movs	r3, #16
 800d954:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	0e5b      	lsrs	r3, r3, #25
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	f003 0307 	and.w	r3, r3, #7
 800d964:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	0f5b      	lsrs	r3, r3, #29
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	f003 0307 	and.w	r3, r3, #7
 800d974:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d976:	7bbb      	ldrb	r3, [r7, #14]
 800d978:	7b3a      	ldrb	r2, [r7, #12]
 800d97a:	4911      	ldr	r1, [pc, #68]	; (800d9c0 <UARTEx_SetNbDataToProcess+0x94>)
 800d97c:	5c8a      	ldrb	r2, [r1, r2]
 800d97e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d982:	7b3a      	ldrb	r2, [r7, #12]
 800d984:	490f      	ldr	r1, [pc, #60]	; (800d9c4 <UARTEx_SetNbDataToProcess+0x98>)
 800d986:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d988:	fb93 f3f2 	sdiv	r3, r3, r2
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d994:	7bfb      	ldrb	r3, [r7, #15]
 800d996:	7b7a      	ldrb	r2, [r7, #13]
 800d998:	4909      	ldr	r1, [pc, #36]	; (800d9c0 <UARTEx_SetNbDataToProcess+0x94>)
 800d99a:	5c8a      	ldrb	r2, [r1, r2]
 800d99c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d9a0:	7b7a      	ldrb	r2, [r7, #13]
 800d9a2:	4908      	ldr	r1, [pc, #32]	; (800d9c4 <UARTEx_SetNbDataToProcess+0x98>)
 800d9a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d9b2:	bf00      	nop
 800d9b4:	3714      	adds	r7, #20
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	0800dae4 	.word	0x0800dae4
 800d9c4:	0800daec 	.word	0x0800daec

0800d9c8 <__libc_init_array>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	4d0d      	ldr	r5, [pc, #52]	; (800da00 <__libc_init_array+0x38>)
 800d9cc:	4c0d      	ldr	r4, [pc, #52]	; (800da04 <__libc_init_array+0x3c>)
 800d9ce:	1b64      	subs	r4, r4, r5
 800d9d0:	10a4      	asrs	r4, r4, #2
 800d9d2:	2600      	movs	r6, #0
 800d9d4:	42a6      	cmp	r6, r4
 800d9d6:	d109      	bne.n	800d9ec <__libc_init_array+0x24>
 800d9d8:	4d0b      	ldr	r5, [pc, #44]	; (800da08 <__libc_init_array+0x40>)
 800d9da:	4c0c      	ldr	r4, [pc, #48]	; (800da0c <__libc_init_array+0x44>)
 800d9dc:	f000 f82e 	bl	800da3c <_init>
 800d9e0:	1b64      	subs	r4, r4, r5
 800d9e2:	10a4      	asrs	r4, r4, #2
 800d9e4:	2600      	movs	r6, #0
 800d9e6:	42a6      	cmp	r6, r4
 800d9e8:	d105      	bne.n	800d9f6 <__libc_init_array+0x2e>
 800d9ea:	bd70      	pop	{r4, r5, r6, pc}
 800d9ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9f0:	4798      	blx	r3
 800d9f2:	3601      	adds	r6, #1
 800d9f4:	e7ee      	b.n	800d9d4 <__libc_init_array+0xc>
 800d9f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9fa:	4798      	blx	r3
 800d9fc:	3601      	adds	r6, #1
 800d9fe:	e7f2      	b.n	800d9e6 <__libc_init_array+0x1e>
 800da00:	0800dafc 	.word	0x0800dafc
 800da04:	0800dafc 	.word	0x0800dafc
 800da08:	0800dafc 	.word	0x0800dafc
 800da0c:	0800db00 	.word	0x0800db00

0800da10 <memcpy>:
 800da10:	440a      	add	r2, r1
 800da12:	4291      	cmp	r1, r2
 800da14:	f100 33ff 	add.w	r3, r0, #4294967295
 800da18:	d100      	bne.n	800da1c <memcpy+0xc>
 800da1a:	4770      	bx	lr
 800da1c:	b510      	push	{r4, lr}
 800da1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da26:	4291      	cmp	r1, r2
 800da28:	d1f9      	bne.n	800da1e <memcpy+0xe>
 800da2a:	bd10      	pop	{r4, pc}

0800da2c <memset>:
 800da2c:	4402      	add	r2, r0
 800da2e:	4603      	mov	r3, r0
 800da30:	4293      	cmp	r3, r2
 800da32:	d100      	bne.n	800da36 <memset+0xa>
 800da34:	4770      	bx	lr
 800da36:	f803 1b01 	strb.w	r1, [r3], #1
 800da3a:	e7f9      	b.n	800da30 <memset+0x4>

0800da3c <_init>:
 800da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3e:	bf00      	nop
 800da40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da42:	bc08      	pop	{r3}
 800da44:	469e      	mov	lr, r3
 800da46:	4770      	bx	lr

0800da48 <_fini>:
 800da48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4a:	bf00      	nop
 800da4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da4e:	bc08      	pop	{r3}
 800da50:	469e      	mov	lr, r3
 800da52:	4770      	bx	lr
