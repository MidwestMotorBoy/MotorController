
Controller_Sensored_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2b4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800d584  0800d584  0001d584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d638  0800d638  000205c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d638  0800d638  0001d638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d640  0800d640  000205c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d640  0800d640  0001d640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d644  0800d644  0001d644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c0  24000000  0800d648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  240005c0  0800dc08  000205c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000d08  0800dc08  00020d08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000205c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fc6b  00000000  00000000  000205ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000537d  00000000  00000000  00060259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002268  00000000  00000000  000655d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020e0  00000000  00000000  00067840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007d3b  00000000  00000000  00069920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a416  00000000  00000000  0007165b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ddef  00000000  00000000  0009ba71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00219860  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000982c  00000000  00000000  002198b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240005c0 	.word	0x240005c0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d56c 	.word	0x0800d56c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240005c4 	.word	0x240005c4
 800030c:	0800d56c 	.word	0x0800d56c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <_Z16rawdata_to_anglelRlS_ll>:
 * rawdata: 12 bit value from encoder
 *
 * returns:angle in milli mechanical degrees
 */
void rawdata_to_angle(int32_t rawdata,int32_t &mech_angle,int32_t &electrical_angle,int32_t debug_offset,int32_t pole_pairs)
{
 8000608:	b480      	push	{r7}
 800060a:	b087      	sub	sp, #28
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	603b      	str	r3, [r7, #0]
	int32_t mech_angle_temp = (879 * rawdata)/1000;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f240 326f 	movw	r2, #879	; 0x36f
 800061c:	fb02 f303 	mul.w	r3, r2, r3
 8000620:	4a19      	ldr	r2, [pc, #100]	; (8000688 <_Z16rawdata_to_anglelRlS_ll+0x80>)
 8000622:	fb82 1203 	smull	r1, r2, r2, r3
 8000626:	1192      	asrs	r2, r2, #6
 8000628:	17db      	asrs	r3, r3, #31
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	617b      	str	r3, [r7, #20]
	electrical_angle = ((((mech_angle_temp)*pole_pairs+debug_offset*10)%3600)%3600)/10;
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	6a3a      	ldr	r2, [r7, #32]
 8000632:	fb02 f103 	mul.w	r1, r2, r3
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	18ca      	adds	r2, r1, r3
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <_Z16rawdata_to_anglelRlS_ll+0x84>)
 8000644:	fb83 1302 	smull	r1, r3, r3, r2
 8000648:	4413      	add	r3, r2
 800064a:	12d9      	asrs	r1, r3, #11
 800064c:	17d3      	asrs	r3, r2, #31
 800064e:	1acb      	subs	r3, r1, r3
 8000650:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000654:	fb01 f303 	mul.w	r3, r1, r3
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <_Z16rawdata_to_anglelRlS_ll+0x88>)
 800065c:	fb82 1203 	smull	r1, r2, r2, r3
 8000660:	1092      	asrs	r2, r2, #2
 8000662:	17db      	asrs	r3, r3, #31
 8000664:	1ad2      	subs	r2, r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
	mech_angle = mech_angle_temp/10;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <_Z16rawdata_to_anglelRlS_ll+0x88>)
 800066e:	fb82 1203 	smull	r1, r2, r2, r3
 8000672:	1092      	asrs	r2, r2, #2
 8000674:	17db      	asrs	r3, r3, #31
 8000676:	1ad2      	subs	r2, r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	601a      	str	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	371c      	adds	r7, #28
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	10624dd3 	.word	0x10624dd3
 800068c:	91a2b3c5 	.word	0x91a2b3c5
 8000690:	66666667 	.word	0x66666667

08000694 <_Z3dqzllllPlS_>:
 * Id: pointer to where the result of Id in mA should be stored
 *
 * returns:nothing
 */
void dqz(int32_t Ia,int32_t Ib,int32_t Ic,int32_t theta,int32_t *Iq,int32_t *Id )
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]
	int32_t alpha = (2*Ia-Ib-Ic)*sqrt1_6;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	005a      	lsls	r2, r3, #1
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1ad2      	subs	r2, r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	4a2c      	ldr	r2, [pc, #176]	; (8000760 <_Z3dqzllllPlS_+0xcc>)
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	fb02 f303 	mul.w	r3, r2, r3
 80006b6:	61fb      	str	r3, [r7, #28]
	int32_t beta = (Ib - Ic) * sqrt1_2;
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	4a29      	ldr	r2, [pc, #164]	; (8000764 <_Z3dqzllllPlS_+0xd0>)
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	fb02 f303 	mul.w	r3, r2, r3
 80006c6:	61bb      	str	r3, [r7, #24]
	int32_t si = sin_lut_table[theta%360];
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	4a27      	ldr	r2, [pc, #156]	; (8000768 <_Z3dqzllllPlS_+0xd4>)
 80006cc:	fb82 1203 	smull	r1, r2, r2, r3
 80006d0:	441a      	add	r2, r3
 80006d2:	1211      	asrs	r1, r2, #8
 80006d4:	17da      	asrs	r2, r3, #31
 80006d6:	1a8a      	subs	r2, r1, r2
 80006d8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80006dc:	fb01 f202 	mul.w	r2, r1, r2
 80006e0:	1a9a      	subs	r2, r3, r2
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <_Z3dqzllllPlS_+0xd8>)
 80006e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e8:	617b      	str	r3, [r7, #20]
	int32_t co = sin_lut_table[(theta+90)%360];
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	335a      	adds	r3, #90	; 0x5a
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <_Z3dqzllllPlS_+0xd4>)
 80006f0:	fb82 1203 	smull	r1, r2, r2, r3
 80006f4:	441a      	add	r2, r3
 80006f6:	1211      	asrs	r1, r2, #8
 80006f8:	17da      	asrs	r2, r3, #31
 80006fa:	1a8a      	subs	r2, r1, r2
 80006fc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000700:	fb01 f202 	mul.w	r2, r1, r2
 8000704:	1a9a      	subs	r2, r3, r2
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <_Z3dqzllllPlS_+0xd8>)
 8000708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800070c:	613b      	str	r3, [r7, #16]
	*Id = (co*alpha+si*beta)/100000;
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	69fa      	ldr	r2, [r7, #28]
 8000712:	fb02 f203 	mul.w	r2, r2, r3
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	69b9      	ldr	r1, [r7, #24]
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	4413      	add	r3, r2
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <_Z3dqzllllPlS_+0xdc>)
 8000722:	fb82 1203 	smull	r1, r2, r2, r3
 8000726:	1352      	asrs	r2, r2, #13
 8000728:	17db      	asrs	r3, r3, #31
 800072a:	1ad2      	subs	r2, r2, r3
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	601a      	str	r2, [r3, #0]
	*Iq = (co*beta-si*alpha)/100000;
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	fb02 f203 	mul.w	r2, r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	69f9      	ldr	r1, [r7, #28]
 800073c:	fb01 f303 	mul.w	r3, r1, r3
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <_Z3dqzllllPlS_+0xdc>)
 8000744:	fb82 1203 	smull	r1, r2, r2, r3
 8000748:	1352      	asrs	r2, r2, #13
 800074a:	17db      	asrs	r3, r3, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	240005a4 	.word	0x240005a4
 8000764:	240005a8 	.word	0x240005a8
 8000768:	b60b60b7 	.word	0xb60b60b7
 800076c:	24000000 	.word	0x24000000
 8000770:	14f8b589 	.word	0x14f8b589

08000774 <_Z7inv_dqzPlS_S_lll>:
 * Vd: voltage of Vd in mV
 *
 * returns:nothing
 */
void inv_dqz(int32_t *Va,int32_t *Vb,int32_t *Vc,int32_t theta,int32_t Vq,int32_t Vd )
{
 8000774:	b480      	push	{r7}
 8000776:	b08b      	sub	sp, #44	; 0x2c
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	603b      	str	r3, [r7, #0]
	int32_t si=sin_lut_table[theta];
 8000782:	4a31      	ldr	r2, [pc, #196]	; (8000848 <_Z7inv_dqzPlS_S_lll+0xd4>)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t co=sin_lut_table[(theta+90)%360];
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	335a      	adds	r3, #90	; 0x5a
 8000790:	4a2e      	ldr	r2, [pc, #184]	; (800084c <_Z7inv_dqzPlS_S_lll+0xd8>)
 8000792:	fb82 1203 	smull	r1, r2, r2, r3
 8000796:	441a      	add	r2, r3
 8000798:	1211      	asrs	r1, r2, #8
 800079a:	17da      	asrs	r2, r3, #31
 800079c:	1a8a      	subs	r2, r1, r2
 800079e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80007a2:	fb01 f202 	mul.w	r2, r1, r2
 80007a6:	1a9a      	subs	r2, r3, r2
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <_Z7inv_dqzPlS_S_lll+0xd4>)
 80007aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ae:	623b      	str	r3, [r7, #32]
	int32_t alpha = co*Vd- si *Vq;
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007b4:	fb02 f203 	mul.w	r2, r2, r3
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80007bc:	fb01 f303 	mul.w	r3, r1, r3
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	61fb      	str	r3, [r7, #28]
	int32_t beta = si*Vd+co*Vq;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007c8:	fb02 f203 	mul.w	r2, r2, r3
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80007d0:	fb01 f303 	mul.w	r3, r1, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]
	int32_t Vb_temp = -sqrt1_6*alpha;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <_Z7inv_dqzPlS_S_lll+0xdc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	425a      	negs	r2, r3
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	fb02 f303 	mul.w	r3, r2, r3
 80007e4:	617b      	str	r3, [r7, #20]
	*Va = (sqrt2_3*alpha)/100000;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <_Z7inv_dqzPlS_S_lll+0xe0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	fb02 f303 	mul.w	r3, r2, r3
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <_Z7inv_dqzPlS_S_lll+0xe4>)
 80007f2:	fb82 1203 	smull	r1, r2, r2, r3
 80007f6:	1352      	asrs	r2, r2, #13
 80007f8:	17db      	asrs	r3, r3, #31
 80007fa:	1ad2      	subs	r2, r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	601a      	str	r2, [r3, #0]
	*Vc = (Vb_temp-sqrt1_2*beta)/100000;
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <_Z7inv_dqzPlS_S_lll+0xe8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <_Z7inv_dqzPlS_S_lll+0xe4>)
 8000810:	fb82 1203 	smull	r1, r2, r2, r3
 8000814:	1352      	asrs	r2, r2, #13
 8000816:	17db      	asrs	r3, r3, #31
 8000818:	1ad2      	subs	r2, r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
	*Vb = (Vb_temp+sqrt1_2*beta)/100000;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <_Z7inv_dqzPlS_S_lll+0xe8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	fb02 f203 	mul.w	r2, r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	4413      	add	r3, r2
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <_Z7inv_dqzPlS_S_lll+0xe4>)
 800082e:	fb82 1203 	smull	r1, r2, r2, r3
 8000832:	1352      	asrs	r2, r2, #13
 8000834:	17db      	asrs	r3, r3, #31
 8000836:	1ad2      	subs	r2, r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	372c      	adds	r7, #44	; 0x2c
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	24000000 	.word	0x24000000
 800084c:	b60b60b7 	.word	0xb60b60b7
 8000850:	240005a4 	.word	0x240005a4
 8000854:	240005a0 	.word	0x240005a0
 8000858:	14f8b589 	.word	0x14f8b589
 800085c:	240005a8 	.word	0x240005a8

08000860 <_ZN13PI_controllerC1Ellll>:
	min_output = 0;
	max_output = 0;
	error_intergration=0;
	slew=999999;
}
PI_controller::PI_controller(int32_t _ki, int32_t _kp,int32_t _min_output,int32_t _max_output){
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	603b      	str	r3, [r7, #0]
	ki = _ki;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	601a      	str	r2, [r3, #0]
	kp = _kp;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	605a      	str	r2, [r3, #4]
	min_intergrator = _min_output/_ki;
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	60da      	str	r2, [r3, #12]
	max_intergrator = _max_output/_ki;
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	fb92 f2f3 	sdiv	r2, r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	611a      	str	r2, [r3, #16]
	min_output = _min_output;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	615a      	str	r2, [r3, #20]
	max_output = _max_output;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	619a      	str	r2, [r3, #24]
	error_intergration=0;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	slew=999999;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <_ZN13PI_controllerC1Ellll+0x58>)
 80008a8:	61da      	str	r2, [r3, #28]
}
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	000f423f 	.word	0x000f423f

080008bc <_ZN13PI_controller6updateElll>:
 * feedback: Measurement of current system state
 * ts: sample time (microseconds)
 *
 * returns:nothing
 */
int32_t PI_controller::update(int32_t input,int32_t feedback,int32_t ts){
 80008bc:	b480      	push	{r7}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	603b      	str	r3, [r7, #0]
		int32_t error=input-feedback;
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	613b      	str	r3, [r7, #16]
		error_intergration+=error*ts/1000;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	6839      	ldr	r1, [r7, #0]
 80008da:	fb01 f303 	mul.w	r3, r1, r3
 80008de:	492d      	ldr	r1, [pc, #180]	; (8000994 <_ZN13PI_controller6updateElll+0xd8>)
 80008e0:	fb81 0103 	smull	r0, r1, r1, r3
 80008e4:	1189      	asrs	r1, r1, #6
 80008e6:	17db      	asrs	r3, r3, #31
 80008e8:	1acb      	subs	r3, r1, r3
 80008ea:	441a      	add	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	609a      	str	r2, [r3, #8]
		if(min_intergrator > error_intergration/1000){
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	68da      	ldr	r2, [r3, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	4926      	ldr	r1, [pc, #152]	; (8000994 <_ZN13PI_controller6updateElll+0xd8>)
 80008fa:	fb81 0103 	smull	r0, r1, r1, r3
 80008fe:	1189      	asrs	r1, r1, #6
 8000900:	17db      	asrs	r3, r3, #31
 8000902:	1acb      	subs	r3, r1, r3
 8000904:	429a      	cmp	r2, r3
 8000906:	dd07      	ble.n	8000918 <_ZN13PI_controller6updateElll+0x5c>
			error_intergration=min_intergrator*1000;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000910:	fb02 f203 	mul.w	r2, r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	609a      	str	r2, [r3, #8]
		}
		if(max_intergrator < error_intergration/1000){
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	491c      	ldr	r1, [pc, #112]	; (8000994 <_ZN13PI_controller6updateElll+0xd8>)
 8000922:	fb81 0103 	smull	r0, r1, r1, r3
 8000926:	1189      	asrs	r1, r1, #6
 8000928:	17db      	asrs	r3, r3, #31
 800092a:	1acb      	subs	r3, r1, r3
 800092c:	429a      	cmp	r2, r3
 800092e:	da07      	bge.n	8000940 <_ZN13PI_controller6updateElll+0x84>
			error_intergration=max_intergrator*1000;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000938:	fb02 f203 	mul.w	r2, r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	609a      	str	r2, [r3, #8]
		}
		int32_t output = ki*error_intergration/1000+error*kp;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	6892      	ldr	r2, [r2, #8]
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	4a11      	ldr	r2, [pc, #68]	; (8000994 <_ZN13PI_controller6updateElll+0xd8>)
 800094e:	fb82 1203 	smull	r1, r2, r2, r3
 8000952:	1192      	asrs	r2, r2, #6
 8000954:	17db      	asrs	r3, r3, #31
 8000956:	1ad2      	subs	r2, r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	6939      	ldr	r1, [r7, #16]
 800095e:	fb01 f303 	mul.w	r3, r1, r3
 8000962:	4413      	add	r3, r2
 8000964:	617b      	str	r3, [r7, #20]
		if(min_output > output){
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	429a      	cmp	r2, r3
 800096e:	da02      	bge.n	8000976 <_ZN13PI_controller6updateElll+0xba>
			output = min_output;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	617b      	str	r3, [r7, #20]
		}
		if(max_output < output){
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	429a      	cmp	r2, r3
 800097e:	dd02      	ble.n	8000986 <_ZN13PI_controller6updateElll+0xca>
			output = max_output;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	617b      	str	r3, [r7, #20]
		}
		return(output);
 8000986:	697b      	ldr	r3, [r7, #20]
}
 8000988:	4618      	mov	r0, r3
 800098a:	371c      	adds	r7, #28
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	10624dd3 	.word	0x10624dd3

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b0c8      	sub	sp, #288	; 0x120
 800099c:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800099e:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <main+0x10c>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf14      	ite	ne
 80009aa:	2301      	movne	r3, #1
 80009ac:	2300      	moveq	r3, #0
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d11b      	bne.n	80009ec <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009b4:	f3bf 8f4f 	dsb	sy
}
 80009b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ba:	f3bf 8f6f 	isb	sy
}
 80009be:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009c0:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <main+0x10c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009c8:	f3bf 8f4f 	dsb	sy
}
 80009cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ce:	f3bf 8f6f 	isb	sy
}
 80009d2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <main+0x10c>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <main+0x10c>)
 80009da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009e0:	f3bf 8f4f 	dsb	sy
}
 80009e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e6:	f3bf 8f6f 	isb	sy
}
 80009ea:	e000      	b.n	80009ee <main+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009ec:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <main+0x10c>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf14      	ite	ne
 80009fa:	2301      	movne	r3, #1
 80009fc:	2300      	moveq	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d151      	bne.n	8000aa8 <main+0x110>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <main+0x10c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0c:	f3bf 8f4f 	dsb	sy
}
 8000a10:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <main+0x10c>)
 8000a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a20:	0b5b      	lsrs	r3, r3, #13
 8000a22:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000a3c:	015a      	lsls	r2, r3, #5
 8000a3e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a42:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a44:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000a48:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a4a:	4916      	ldr	r1, [pc, #88]	; (8000aa4 <main+0x10c>)
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d000      	beq.n	8000a6c <main+0xd4>
      do {
 8000a6a:	e7e5      	b.n	8000a38 <main+0xa0>
    } while(sets-- != 0U);
 8000a6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d000      	beq.n	8000a86 <main+0xee>
    do {
 8000a84:	e7d1      	b.n	8000a2a <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a86:	f3bf 8f4f 	dsb	sy
}
 8000a8a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <main+0x10c>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <main+0x10c>)
 8000a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a96:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a98:	f3bf 8f4f 	dsb	sy
}
 8000a9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9e:	f3bf 8f6f 	isb	sy
}
 8000aa2:	e002      	b.n	8000aaa <main+0x112>
 8000aa4:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000aa8:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aaa:	f002 f9d3 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aae:	f000 fb4f 	bl	8001150 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ab2:	f000 fbd7 	bl	8001264 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f001 fa3d 	bl	8001f34 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000aba:	f000 fc09 	bl	80012d0 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000abe:	f000 fc8f 	bl	80013e0 <_ZL12MX_ADC2_Initv>
  MX_ADC3_Init();
 8000ac2:	f000 fcfd 	bl	80014c0 <_ZL12MX_ADC3_Initv>
  MX_CORDIC_Init();
 8000ac6:	f000 fd7b 	bl	80015c0 <_ZL14MX_CORDIC_Initv>
  MX_DFSDM1_Init();
 8000aca:	f000 fd91 	bl	80015f0 <_ZL14MX_DFSDM1_Initv>
  MX_FDCAN1_Init();
 8000ace:	f000 feab 	bl	8001828 <_ZL14MX_FDCAN1_Initv>
  MX_FMAC_Init();
 8000ad2:	f000 ff13 	bl	80018fc <_ZL12MX_FMAC_Initv>
  MX_SPI2_Init();
 8000ad6:	f000 ff77 	bl	80019c8 <_ZL12MX_SPI2_Initv>
  MX_TIM1_Init();
 8000ada:	f000 ffd3 	bl	8001a84 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8000ade:	f001 f9c5 	bl	8001e6c <_ZL19MX_USART2_UART_Initv>
  MX_I2C3_Init();
 8000ae2:	f000 ff23 	bl	800192c <_ZL12MX_I2C3_Initv>
  MX_USART1_UART_Init();
 8000ae6:	f001 f961 	bl	8001dac <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 8000aea:	f001 f8a3 	bl	8001c34 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000aee:	f001 f8ff 	bl	8001cf0 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
//  	HAL_ADC_MspInit(&hadc3);
  	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000af2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000af6:	2100      	movs	r1, #0
 8000af8:	488d      	ldr	r0, [pc, #564]	; (8000d30 <main+0x398>)
 8000afa:	f003 ff1f 	bl	800493c <HAL_ADCEx_Calibration_Start>
	HAL_StatusTypeDef adcstart2_ret = HAL_ADC_Start(&hadc2);
 8000afe:	488d      	ldr	r0, [pc, #564]	; (8000d34 <main+0x39c>)
 8000b00:	f002 fee8 	bl	80038d4 <HAL_ADC_Start>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
	HAL_StatusTypeDef adcstart3_ret = HAL_ADC_Start(&hadc3);
 8000b0a:	4889      	ldr	r0, [pc, #548]	; (8000d30 <main+0x398>)
 8000b0c:	f002 fee2 	bl	80038d4 <HAL_ADC_Start>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
	HAL_TIM_Base_Start_IT(&htim3);
 8000b16:	4888      	ldr	r0, [pc, #544]	; (8000d38 <main+0x3a0>)
 8000b18:	f009 ffb8 	bl	800aa8c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000b1c:	4887      	ldr	r0, [pc, #540]	; (8000d3c <main+0x3a4>)
 8000b1e:	f009 ffb5 	bl	800aa8c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000b22:	4887      	ldr	r0, [pc, #540]	; (8000d40 <main+0x3a8>)
 8000b24:	f009 ffb2 	bl	800aa8c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4884      	ldr	r0, [pc, #528]	; (8000d3c <main+0x3a4>)
 8000b2c:	f00a f88c 	bl	800ac48 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000b30:	2100      	movs	r1, #0
 8000b32:	4882      	ldr	r0, [pc, #520]	; (8000d3c <main+0x3a4>)
 8000b34:	f00b f928 	bl	800bd88 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4880      	ldr	r0, [pc, #512]	; (8000d3c <main+0x3a4>)
 8000b3c:	f00a f884 	bl	800ac48 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000b40:	2104      	movs	r1, #4
 8000b42:	487e      	ldr	r0, [pc, #504]	; (8000d3c <main+0x3a4>)
 8000b44:	f00b f920 	bl	800bd88 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000b48:	2108      	movs	r1, #8
 8000b4a:	487c      	ldr	r0, [pc, #496]	; (8000d3c <main+0x3a4>)
 8000b4c:	f00a f87c 	bl	800ac48 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000b50:	2108      	movs	r1, #8
 8000b52:	487a      	ldr	r0, [pc, #488]	; (8000d3c <main+0x3a4>)
 8000b54:	f00b f918 	bl	800bd88 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000b58:	210c      	movs	r1, #12
 8000b5a:	4878      	ldr	r0, [pc, #480]	; (8000d3c <main+0x3a4>)
 8000b5c:	f00a f874 	bl	800ac48 <HAL_TIM_PWM_Start>
	TIM1->CCER = 0b0000010101010101;
 8000b60:	4b78      	ldr	r3, [pc, #480]	; (8000d44 <main+0x3ac>)
 8000b62:	f240 5255 	movw	r2, #1365	; 0x555
 8000b66:	621a      	str	r2, [r3, #32]
	TIM1->CCR1 = 0;
 8000b68:	4b76      	ldr	r3, [pc, #472]	; (8000d44 <main+0x3ac>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000b6e:	4b75      	ldr	r3, [pc, #468]	; (8000d44 <main+0x3ac>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000b74:	4b73      	ldr	r3, [pc, #460]	; (8000d44 <main+0x3ac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 4998;
 8000b7a:	4b72      	ldr	r3, [pc, #456]	; (8000d44 <main+0x3ac>)
 8000b7c:	f241 3286 	movw	r2, #4998	; 0x1386
 8000b80:	641a      	str	r2, [r3, #64]	; 0x40
	uint32_t channel1 = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t channel5 = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint32_t channel6 = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint8_t request_pos[2] = {0xff};
 8000b94:	23ff      	movs	r3, #255	; 0xff
 8000b96:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	float data2angle = 360.0 / 4096;
 8000b9a:	4b6b      	ldr	r3, [pc, #428]	; (8000d48 <main+0x3b0>)
 8000b9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	uint8_t position[2]={0};
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	int32_t mech_angle=0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter0) != HAL_OK){
 8000bac:	4867      	ldr	r0, [pc, #412]	; (8000d4c <main+0x3b4>)
 8000bae:	f004 fb07 	bl	80051c0 <HAL_DFSDM_FilterRegularStart>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf14      	ite	ne
 8000bb8:	2301      	movne	r3, #1
 8000bba:	2300      	moveq	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <main+0x22e>
		  Error_Handler();
 8000bc2:	f001 fa48 	bl	8002056 <Error_Handler>
	  }

	if(HAL_DFSDM_FilterRegularStart(&hdfsdm1_filter1) != HAL_OK){
 8000bc6:	4862      	ldr	r0, [pc, #392]	; (8000d50 <main+0x3b8>)
 8000bc8:	f004 fafa 	bl	80051c0 <HAL_DFSDM_FilterRegularStart>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf14      	ite	ne
 8000bd2:	2301      	movne	r3, #1
 8000bd4:	2300      	moveq	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <main+0x248>
		  Error_Handler();
 8000bdc:	f001 fa3b 	bl	8002056 <Error_Handler>
	  }
	uint32_t adc_buff1 = 0, adc_buff3 = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	int32_t current_A = 0,current_B = 0, current_C= 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	uint32_t dc_bus = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint32_t speed_loop_counter= 0,current_loop_counter= 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	int32_t speed_accumulator = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int32_t last_angle=0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int32_t Va=0,Vb=0,Vc=0,Vq=0,Vd=0,id,iq;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c28:	2300      	movs	r3, #0
 8000c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	int32_t pwm_A=0,pwm_B=0,pwm_C=0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	//get intial angle
	HAL_SPI_TransmitReceive(&hspi2, request_pos, position, 1, 100);
 8000c4a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000c4e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000c52:	2364      	movs	r3, #100	; 0x64
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2301      	movs	r3, #1
 8000c58:	483e      	ldr	r0, [pc, #248]	; (8000d54 <main+0x3bc>)
 8000c5a:	f008 fe0b 	bl	8009874 <HAL_SPI_TransmitReceive>
	int32_t position_raw = (((uint16_t)position[1])<<8)+position[0];
 8000c5e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8000c68:	4413      	add	r3, r2
 8000c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int32_t position_temp = position_raw >> 4;
 8000c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000c72:	111b      	asrs	r3, r3, #4
 8000c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int32_t speed=0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int32_t electrical_angle= 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	673b      	str	r3, [r7, #112]	; 0x70
	int32_t iq_accumulator = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	int32_t id_accumulator = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	struct pi_settings iq_settings = {.ki=IQ_KI,.kp=IQ_KP,.min_intergrator=-V_MAX*100000/IQ_KI,.max_intergrator=V_MAX*100000/IQ_KI,.min_output=-V_MAX*100000,.max_output=V_MAX*100000,500000};
 8000c8e:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <main+0x3c0>)
 8000c90:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000c94:	461d      	mov	r5, r3
 8000c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	struct pi_settings id_settings = {.ki=IQ_KI,.kp=IQ_KP,.min_intergrator=-V_MAX*100000/IQ_KI,.max_intergrator=V_MAX*100000/IQ_KI,.min_output=-V_MAX*100000,.max_output=V_MAX*100000,500000};
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <main+0x3c0>)
 8000ca4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000ca8:	461d      	mov	r5, r3
 8000caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	struct motor_parameters motor = {.ld=62000,.lq=110000,.lambda_m=2722,.polepairs=5,.rs=2700};
 8000cb6:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <main+0x3c4>)
 8000cb8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000cbc:	461d      	mov	r5, r3
 8000cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	6023      	str	r3, [r4, #0]
	last_angle = (879 * position_temp)/10000;
 8000cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000cca:	f240 326f 	movw	r2, #879	; 0x36f
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <main+0x3c8>)
 8000cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd8:	1312      	asrs	r2, r2, #12
 8000cda:	17db      	asrs	r3, r3, #31
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	PI_controller Iq_PI_loop(IQ_KI, IQ_KP,-V_MAX*100000,V_MAX*100000);
 8000ce2:	1d38      	adds	r0, r7, #4
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <main+0x3cc>)
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <main+0x3d0>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	2164      	movs	r1, #100	; 0x64
 8000cee:	f7ff fdb7 	bl	8000860 <_ZN13PI_controllerC1Ellll>
	HAL_Delay(4000);//wait 4s, helpful if test code is bad and need time to program before controller goes awal
 8000cf2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000cf6:	f002 f909 	bl	8002f0c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		int32_t debug_waittime = debug_time_started-debug_waitstart;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <main+0x3d4>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <main+0x3d8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		int32_t debug_time2run = debug_time_ended-debug_time_started;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <main+0x3dc>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <main+0x3d4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		TIM4->CNT=0;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <main+0x3e0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
		debug_waitstart=TIM4->CNT;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <main+0x3e0>)
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <main+0x3d8>)
 8000d24:	601a      	str	r2, [r3, #0]
		while(pwm_flag==0){
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <main+0x3e4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d128      	bne.n	8000d80 <main+0x3e8>
 8000d2e:	e7fa      	b.n	8000d26 <main+0x38e>
 8000d30:	240006bc 	.word	0x240006bc
 8000d34:	2400064c 	.word	0x2400064c
 8000d38:	24000a9c 	.word	0x24000a9c
 8000d3c:	24000a50 	.word	0x24000a50
 8000d40:	24000ae8 	.word	0x24000ae8
 8000d44:	40010000 	.word	0x40010000
 8000d48:	3db40000 	.word	0x3db40000
 8000d4c:	24000754 	.word	0x24000754
 8000d50:	240007a8 	.word	0x240007a8
 8000d54:	240009c8 	.word	0x240009c8
 8000d58:	0800d584 	.word	0x0800d584
 8000d5c:	0800d5a0 	.word	0x0800d5a0
 8000d60:	68db8bad 	.word	0x68db8bad
 8000d64:	000f4240 	.word	0x000f4240
 8000d68:	fff0bdc0 	.word	0xfff0bdc0
 8000d6c:	24000c70 	.word	0x24000c70
 8000d70:	24000c78 	.word	0x24000c78
 8000d74:	24000c74 	.word	0x24000c74
 8000d78:	40000800 	.word	0x40000800
 8000d7c:	24000c54 	.word	0x24000c54
		}
		debug_time_started = TIM4->CNT;
 8000d80:	4b9f      	ldr	r3, [pc, #636]	; (8001000 <main+0x668>)
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b9f      	ldr	r3, [pc, #636]	; (8001004 <main+0x66c>)
 8000d88:	601a      	str	r2, [r3, #0]
		//Loop Chores
		speed_loop_counter++;
 8000d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		current_loop_counter++;
 8000d94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d98:	3301      	adds	r3, #1
 8000d9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		pwm_flag=0;
 8000d9e:	4b9a      	ldr	r3, [pc, #616]	; (8001008 <main+0x670>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
		//Get angle
		int32_t position_raw = (((uint16_t)position[1])<<8)+position[0];
 8000da4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8000dae:	4413      	add	r3, r2
 8000db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		int32_t position_temp = position_raw >> 4;
 8000db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000db8:	111b      	asrs	r3, r3, #4
 8000dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		rawdata_to_angle(position_temp,mech_angle,electrical_angle,debug_offset,POLE_PAIRS);
 8000dbe:	4b93      	ldr	r3, [pc, #588]	; (800100c <main+0x674>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000dc6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000dca:	2005      	movs	r0, #5
 8000dcc:	9000      	str	r0, [sp, #0]
 8000dce:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000dd2:	f7ff fc19 	bl	8000608 <_Z16rawdata_to_anglelRlS_ll>
//		debug_fake_angle = (debug_fake_angle+1)%36000;
//		electrical_angle = debug_fake_angle/100;
		//Get Currents
		current_A = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter0, &channel5)*3125/2621;
 8000dd6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dda:	4619      	mov	r1, r3
 8000ddc:	488c      	ldr	r0, [pc, #560]	; (8001010 <main+0x678>)
 8000dde:	f004 fa0a 	bl	80051f6 <HAL_DFSDM_FilterGetRegularValue>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f640 4235 	movw	r2, #3125	; 0xc35
 8000de8:	fb02 f303 	mul.w	r3, r2, r3
 8000dec:	4a89      	ldr	r2, [pc, #548]	; (8001014 <main+0x67c>)
 8000dee:	fb82 1203 	smull	r1, r2, r2, r3
 8000df2:	1192      	asrs	r2, r2, #6
 8000df4:	17db      	asrs	r3, r3, #31
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		current_C = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter1, &channel6)*3125/2621;
 8000dfc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e00:	4619      	mov	r1, r3
 8000e02:	4885      	ldr	r0, [pc, #532]	; (8001018 <main+0x680>)
 8000e04:	f004 f9f7 	bl	80051f6 <HAL_DFSDM_FilterGetRegularValue>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f640 4235 	movw	r2, #3125	; 0xc35
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	4a80      	ldr	r2, [pc, #512]	; (8001014 <main+0x67c>)
 8000e14:	fb82 1203 	smull	r1, r2, r2, r3
 8000e18:	1192      	asrs	r2, r2, #6
 8000e1a:	17db      	asrs	r3, r3, #31
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		current_B=0-current_C-current_A;
 8000e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000e26:	425a      	negs	r2, r3
 8000e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dqz(current_A,current_B,current_C,electrical_angle,&iq,&id);
 8000e32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	4613      	mov	r3, r2
 8000e42:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000e46:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000e4a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000e4e:	f7ff fc21 	bl	8000694 <_Z3dqzllllPlS_>
		iq_accumulator+=iq;
 8000e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e54:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000e58:	4413      	add	r3, r2
 8000e5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		id_accumulator+=id;
 8000e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e60:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000e64:	4413      	add	r3, r2
 8000e66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		//Measure DC Bus
		adc_buff3 = HAL_ADC_GetValue(&hadc3);
 8000e6a:	486c      	ldr	r0, [pc, #432]	; (800101c <main+0x684>)
 8000e6c:	f002 fdfc 	bl	8003a68 <HAL_ADC_GetValue>
 8000e70:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		dc_bus = (374*adc_buff3)/10;
 8000e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e78:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8000e7c:	fb02 f303 	mul.w	r3, r2, r3
 8000e80:	4a67      	ldr	r2, [pc, #412]	; (8001020 <main+0x688>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		//Update speed accumulator
		int32_t diff_angle = mech_angle-last_angle;
 8000e8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		if(diff_angle<-180){
 8000e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e9e:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8000ea2:	da06      	bge.n	8000eb2 <main+0x51a>
			diff_angle=360+diff_angle;
 8000ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ea8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000eac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000eb0:	e009      	b.n	8000ec6 <main+0x52e>
		}else if(diff_angle>180){
 8000eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000eb6:	2bb4      	cmp	r3, #180	; 0xb4
 8000eb8:	dd05      	ble.n	8000ec6 <main+0x52e>
			diff_angle=diff_angle-360;
 8000eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ebe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000ec2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		}
		speed_accumulator+=diff_angle;
 8000ec6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ece:	4413      	add	r3, r2
 8000ed0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		last_angle=mech_angle;
 8000ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ed8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(speed_loop_counter>=SPEED_SAMPLES){
 8000edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ee4:	d313      	bcc.n	8000f0e <main+0x576>
			speed=(speed_accumulator*6666)/1000;
 8000ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000eea:	f641 220a 	movw	r2, #6666	; 0x1a0a
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	4a4c      	ldr	r2, [pc, #304]	; (8001024 <main+0x68c>)
 8000ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef8:	1192      	asrs	r2, r2, #6
 8000efa:	17db      	asrs	r3, r3, #31
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			speed_accumulator=0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			speed_loop_counter=0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		}
		if(current_loop_counter>=CURRENT_SAMPLES){
 8000f0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000f12:	2b27      	cmp	r3, #39	; 0x27
 8000f14:	d92d      	bls.n	8000f72 <main+0x5da>
			current_loop_counter=0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			Vq = Iq_PI_loop.update(debug_target_iq,iq,25*CURRENT_SAMPLES)/100;
 8000f1c:	4b42      	ldr	r3, [pc, #264]	; (8001028 <main+0x690>)
 8000f1e:	6819      	ldr	r1, [r3, #0]
 8000f20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f22:	1d38      	adds	r0, r7, #4
 8000f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f28:	f7ff fcc8 	bl	80008bc <_ZN13PI_controller6updateElll>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a3f      	ldr	r2, [pc, #252]	; (800102c <main+0x694>)
 8000f30:	fb82 1203 	smull	r1, r2, r2, r3
 8000f34:	1152      	asrs	r2, r2, #5
 8000f36:	17db      	asrs	r3, r3, #31
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			//TODO: REMOVE WHEN DONE WITH DEBUG (global vars for cube monitor)
			debug_IQ=iq_accumulator/CURRENT_SAMPLES;
 8000f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000f42:	4a3b      	ldr	r2, [pc, #236]	; (8001030 <main+0x698>)
 8000f44:	fb82 1203 	smull	r1, r2, r2, r3
 8000f48:	1112      	asrs	r2, r2, #4
 8000f4a:	17db      	asrs	r3, r3, #31
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	4a39      	ldr	r2, [pc, #228]	; (8001034 <main+0x69c>)
 8000f50:	6013      	str	r3, [r2, #0]
			iq_accumulator=0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			debug_ID=id_accumulator/CURRENT_SAMPLES;
 8000f58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000f5c:	4a34      	ldr	r2, [pc, #208]	; (8001030 <main+0x698>)
 8000f5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f62:	1112      	asrs	r2, r2, #4
 8000f64:	17db      	asrs	r3, r3, #31
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	4a33      	ldr	r2, [pc, #204]	; (8001038 <main+0x6a0>)
 8000f6a:	6013      	str	r3, [r2, #0]
			id_accumulator=0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		//TODO enforce Vs max by reducing vq or at least consider it... could the vs/field weakening control loop just handle this?
		//cal va,vb,vc

		//FOC Control

		inv_dqz(&Va,&Vb,&Vc,electrical_angle,Vq,Vd);
 8000f72:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8000f74:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000f78:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000f7c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000f80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	f7ff fbf1 	bl	8000774 <_Z7inv_dqzPlS_S_lll>
		//Space Vector (set lowest voltage to zero)
		if(Va<=Vb && Va<=Vc){
 8000f92:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dc14      	bgt.n	8000fc8 <main+0x630>
 8000f9e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dc0f      	bgt.n	8000fc8 <main+0x630>
			Vb-=Va;
 8000fa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			Vc-=Va;
 8000fb6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
			Va=0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000fc6:	e047      	b.n	8001058 <main+0x6c0>
		}else if(Vb<=Va && Vb<=Vc){
 8000fc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dc33      	bgt.n	800103c <main+0x6a4>
 8000fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dc2e      	bgt.n	800103c <main+0x6a4>
			Va-=Vb;
 8000fde:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			Vc-=Vb;
 8000fec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
			Vb=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ffc:	e02c      	b.n	8001058 <main+0x6c0>
 8000ffe:	bf00      	nop
 8001000:	40000800 	.word	0x40000800
 8001004:	24000c70 	.word	0x24000c70
 8001008:	24000c54 	.word	0x24000c54
 800100c:	240005ac 	.word	0x240005ac
 8001010:	24000754 	.word	0x24000754
 8001014:	064044c3 	.word	0x064044c3
 8001018:	240007a8 	.word	0x240007a8
 800101c:	240006bc 	.word	0x240006bc
 8001020:	cccccccd 	.word	0xcccccccd
 8001024:	10624dd3 	.word	0x10624dd3
 8001028:	24000c84 	.word	0x24000c84
 800102c:	51eb851f 	.word	0x51eb851f
 8001030:	66666667 	.word	0x66666667
 8001034:	24000c7c 	.word	0x24000c7c
 8001038:	24000c80 	.word	0x24000c80
		}else{
			Va-=Vc;
 800103c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			Vb-=Vc;
 8001048:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800104c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			Vc=0;
 8001054:	2300      	movs	r3, #0
 8001056:	67fb      	str	r3, [r7, #124]	; 0x7c
		}
		//convert voltage to PWM
		pwm_A = (TIMER_PERIOD*Va)/dc_bus;
 8001058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800105c:	f641 22dc 	movw	r2, #6876	; 0x1adc
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	461a      	mov	r2, r3
 8001066:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		pwm_B = (TIMER_PERIOD*Vb)/dc_bus;
 8001072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001076:	f641 22dc 	movw	r2, #6876	; 0x1adc
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	461a      	mov	r2, r3
 8001080:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001084:	fbb2 f3f3 	udiv	r3, r2, r3
 8001088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		pwm_C = (TIMER_PERIOD*Vc)/dc_bus;
 800108c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800108e:	f641 22dc 	movw	r2, #6876	; 0x1adc
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	461a      	mov	r2, r3
 8001098:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800109c:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		//Write PWM to timer shadow registers
		TIM1->CCR1 = pwm_A;
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <main+0x790>)
 80010a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010aa:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = pwm_B;
 80010ac:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <main+0x790>)
 80010ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010b2:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = pwm_C;
 80010b4:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <main+0x790>)
 80010b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80010ba:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_SPI_TransmitReceive_IT(&hspi2, request_pos, position, 1);
 80010bc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80010c0:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80010c4:	2301      	movs	r3, #1
 80010c6:	4819      	ldr	r0, [pc, #100]	; (800112c <main+0x794>)
 80010c8:	f008 fec0 	bl	8009e4c <HAL_SPI_TransmitReceive_IT>

		//TODO: REMOVE WHEN DONE WITH DEBUG (global vars for cube monitor)
		debug_time_ended = TIM4->CNT;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <main+0x798>)
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <main+0x79c>)
 80010d4:	601a      	str	r2, [r3, #0]
		debug_angle =mech_angle;
 80010d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <main+0x7a0>)
 80010dc:	6013      	str	r3, [r2, #0]
		debug_DC_Bus =dc_bus/1000.0;
 80010de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010ea:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001120 <main+0x788>
 80010ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010f2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010f6:	ee17 2a90 	vmov	r2, s15
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <main+0x7a4>)
 80010fc:	601a      	str	r2, [r3, #0]
		debug_Current_A = current_A;
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <main+0x7a8>)
 8001100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001104:	6013      	str	r3, [r2, #0]
		debug_Current_C =current_C;
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <main+0x7ac>)
 8001108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800110c:	6013      	str	r3, [r2, #0]
		debug_vq=Vq;
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <main+0x7b0>)
 8001110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001114:	6013      	str	r3, [r2, #0]
		debug_speed=speed;
 8001116:	4a0d      	ldr	r2, [pc, #52]	; (800114c <main+0x7b4>)
 8001118:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800111c:	6013      	str	r3, [r2, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 800111e:	e5ec      	b.n	8000cfa <main+0x362>
 8001120:	00000000 	.word	0x00000000
 8001124:	408f4000 	.word	0x408f4000
 8001128:	40010000 	.word	0x40010000
 800112c:	240009c8 	.word	0x240009c8
 8001130:	40000800 	.word	0x40000800
 8001134:	24000c74 	.word	0x24000c74
 8001138:	24000c58 	.word	0x24000c58
 800113c:	24000c5c 	.word	0x24000c5c
 8001140:	24000c60 	.word	0x24000c60
 8001144:	24000c64 	.word	0x24000c64
 8001148:	24000c68 	.word	0x24000c68
 800114c:	24000c6c 	.word	0x24000c6c

08001150 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b09c      	sub	sp, #112	; 0x70
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	224c      	movs	r2, #76	; 0x4c
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f00c f9fc 	bl	800d55c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2220      	movs	r2, #32
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f00c f9f6 	bl	800d55c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001170:	2002      	movs	r0, #2
 8001172:	f005 fa55 	bl	8006620 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b38      	ldr	r3, [pc, #224]	; (800125c <_Z18SystemClock_Configv+0x10c>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a37      	ldr	r2, [pc, #220]	; (800125c <_Z18SystemClock_Configv+0x10c>)
 8001180:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b35      	ldr	r3, [pc, #212]	; (800125c <_Z18SystemClock_Configv+0x10c>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001192:	4b32      	ldr	r3, [pc, #200]	; (800125c <_Z18SystemClock_Configv+0x10c>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d000      	beq.n	80011ac <_Z18SystemClock_Configv+0x5c>
 80011aa:	e7f2      	b.n	8001192 <_Z18SystemClock_Configv+0x42>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <_Z18SystemClock_Configv+0x110>)
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	f023 0303 	bic.w	r3, r3, #3
 80011b4:	4a2a      	ldr	r2, [pc, #168]	; (8001260 <_Z18SystemClock_Configv+0x110>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80011bc:	2303      	movs	r3, #3
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ca:	2340      	movs	r3, #64	; 0x40
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	2302      	movs	r3, #2
 80011d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80011da:	232c      	movs	r3, #44	; 0x2c
 80011dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011e2:	2303      	movs	r3, #3
 80011e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011ea:	230c      	movs	r3, #12
 80011ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 fa4a 	bl	8006694 <HAL_RCC_OscConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	bf14      	ite	ne
 8001206:	2301      	movne	r3, #1
 8001208:	2300      	moveq	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001210:	f000 ff21 	bl	8002056 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	233f      	movs	r3, #63	; 0x3f
 8001216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2303      	movs	r3, #3
 800121a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001220:	2308      	movs	r3, #8
 8001222:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001224:	2340      	movs	r3, #64	; 0x40
 8001226:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800122c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001230:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001232:	2340      	movs	r3, #64	; 0x40
 8001234:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2103      	movs	r1, #3
 800123a:	4618      	mov	r0, r3
 800123c:	f005 fdb8 	bl	8006db0 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf14      	ite	ne
 8001246:	2301      	movne	r3, #1
 8001248:	2300      	moveq	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001250:	f000 ff01 	bl	8002056 <Error_Handler>
  }
}
 8001254:	bf00      	nop
 8001256:	3770      	adds	r7, #112	; 0x70
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	58024800 	.word	0x58024800
 8001260:	58024400 	.word	0x58024400

08001264 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0ae      	sub	sp, #184	; 0xb8
 8001268:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	22b4      	movs	r2, #180	; 0xb4
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f00c f973 	bl	800d55c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <_Z24PeriphCommonClock_Configv+0x68>)
 8001278:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800127a:	2302      	movs	r3, #2
 800127c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 800127e:	230f      	movs	r3, #15
 8001280:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001282:	2302      	movs	r3, #2
 8001284:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001286:	2302      	movs	r3, #2
 8001288:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800128e:	23c0      	movs	r3, #192	; 0xc0
 8001290:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8001296:	f640 3386 	movw	r3, #2950	; 0xb86
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800129c:	2300      	movs	r3, #0
 800129e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4618      	mov	r0, r3
 80012aa:	f006 f94f 	bl	800754c <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <_Z24PeriphCommonClock_Configv+0x5e>
  {
    Error_Handler();
 80012be:	f000 feca 	bl	8002056 <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	37b8      	adds	r7, #184	; 0xb8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	80080000 	.word	0x80080000

080012d0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e2:	463b      	mov	r3, r7
 80012e4:	2224      	movs	r2, #36	; 0x24
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00c f937 	bl	800d55c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ee:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 80012f0:	4a38      	ldr	r2, [pc, #224]	; (80013d4 <_ZL12MX_ADC1_Initv+0x104>)
 80012f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 80012f6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80012fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001302:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 800130a:	2204      	movs	r2, #4
 800130c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001310:	2200      	movs	r2, #0
 8001312:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001316:	2200      	movs	r2, #0
 8001318:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 800131c:	2201      	movs	r2, #1
 800131e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 800132a:	2200      	movs	r2, #0
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001330:	2200      	movs	r2, #0
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001336:	2200      	movs	r2, #0
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001342:	2200      	movs	r2, #0
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001350:	f002 f8b8 	bl	80034c4 <HAL_ADC_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf14      	ite	ne
 800135a:	2301      	movne	r3, #1
 800135c:	2300      	moveq	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <_ZL12MX_ADC1_Initv+0x98>
  {
    Error_Handler();
 8001364:	f000 fe77 	bl	8002056 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	4817      	ldr	r0, [pc, #92]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 8001374:	f003 fb46 	bl	8004a04 <HAL_ADCEx_MultiModeConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	bf14      	ite	ne
 800137e:	2301      	movne	r3, #1
 8001380:	2300      	moveq	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <_ZL12MX_ADC1_Initv+0xbc>
  {
    Error_Handler();
 8001388:	f000 fe65 	bl	8002056 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <_ZL12MX_ADC1_Initv+0x108>)
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001390:	2306      	movs	r3, #6
 8001392:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_ZL12MX_ADC1_Initv+0x10c>)
 800139a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800139c:	2304      	movs	r3, #4
 800139e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <_ZL12MX_ADC1_Initv+0x100>)
 80013b0:	f002 fb68 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bf14      	ite	ne
 80013ba:	2301      	movne	r3, #1
 80013bc:	2300      	moveq	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 80013c4:	f000 fe47 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3730      	adds	r7, #48	; 0x30
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	240005dc 	.word	0x240005dc
 80013d4:	40022000 	.word	0x40022000
 80013d8:	0c900008 	.word	0x0c900008
 80013dc:	47ff0000 	.word	0x47ff0000

080013e0 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2224      	movs	r2, #36	; 0x24
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f00c f8b5 	bl	800d55c <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 80013f4:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <_ZL12MX_ADC2_Initv+0xd4>)
 80013f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 80013fa:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80013fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 800140e:	2204      	movs	r2, #4
 8001410:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001414:	2200      	movs	r2, #0
 8001416:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 800141a:	2200      	movs	r2, #0
 800141c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001420:	2201      	movs	r2, #1
 8001422:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001434:	2200      	movs	r2, #0
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 800143a:	2200      	movs	r2, #0
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001440:	2200      	movs	r2, #0
 8001442:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001446:	2200      	movs	r2, #0
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001452:	4817      	ldr	r0, [pc, #92]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001454:	f002 f836 	bl	80034c4 <HAL_ADC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <_ZL12MX_ADC2_Initv+0x8c>
  {
    Error_Handler();
 8001468:	f000 fdf5 	bl	8002056 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <_ZL12MX_ADC2_Initv+0xd8>)
 800146e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001470:	2306      	movs	r3, #6
 8001472:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <_ZL12MX_ADC2_Initv+0xdc>)
 800147a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800147c:	2304      	movs	r3, #4
 800147e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <_ZL12MX_ADC2_Initv+0xd0>)
 8001490:	f002 faf8 	bl	8003a84 <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf14      	ite	ne
 800149a:	2301      	movne	r3, #1
 800149c:	2300      	moveq	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 80014a4:	f000 fdd7 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2400064c 	.word	0x2400064c
 80014b4:	40022100 	.word	0x40022100
 80014b8:	10c00010 	.word	0x10c00010
 80014bc:	47ff0000 	.word	0x47ff0000

080014c0 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2224      	movs	r2, #36	; 0x24
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00c f845 	bl	800d55c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 80014d4:	4a38      	ldr	r2, [pc, #224]	; (80015b8 <_ZL12MX_ADC3_Initv+0xf8>)
 80014d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 80014da:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80014de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014e0:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 80014e2:	2208      	movs	r2, #8
 80014e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 8001500:	2201      	movs	r2, #1
 8001502:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 8001506:	2201      	movs	r2, #1
 8001508:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 800151a:	2200      	movs	r2, #0
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 8001528:	2200      	movs	r2, #0
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 800152e:	2200      	movs	r2, #0
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 8001534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001538:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 800154a:	f001 ffbb 	bl	80034c4 <HAL_ADC_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <_ZL12MX_ADC3_Initv+0xa2>
  {
    Error_Handler();
 800155e:	f000 fd7a 	bl	8002056 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <_ZL12MX_ADC3_Initv+0xfc>)
 8001564:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001566:	2306      	movs	r3, #6
 8001568:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800156a:	2302      	movs	r3, #2
 800156c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800156e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001572:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001574:	2304      	movs	r3, #4
 8001576:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4808      	ldr	r0, [pc, #32]	; (80015b4 <_ZL12MX_ADC3_Initv+0xf4>)
 8001592:	f002 fa77 	bl	8003a84 <HAL_ADC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_ZL12MX_ADC3_Initv+0xea>
  {
    Error_Handler();
 80015a6:	f000 fd56 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	240006bc 	.word	0x240006bc
 80015b8:	58026000 	.word	0x58026000
 80015bc:	04300002 	.word	0x04300002

080015c0 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_ZL14MX_CORDIC_Initv+0x28>)
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <_ZL14MX_CORDIC_Initv+0x2c>)
 80015c8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <_ZL14MX_CORDIC_Initv+0x28>)
 80015cc:	f003 fafc 	bl	8004bc8 <HAL_CORDIC_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 80015e0:	f000 fd39 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2400072c 	.word	0x2400072c
 80015ec:	48024400 	.word	0x48024400

080015f0 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80015f4:	4b80      	ldr	r3, [pc, #512]	; (80017f8 <_ZL14MX_DFSDM1_Initv+0x208>)
 80015f6:	4a81      	ldr	r2, [pc, #516]	; (80017fc <_ZL14MX_DFSDM1_Initv+0x20c>)
 80015f8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80015fa:	4b7f      	ldr	r3, [pc, #508]	; (80017f8 <_ZL14MX_DFSDM1_Initv+0x208>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8001600:	4b7d      	ldr	r3, [pc, #500]	; (80017f8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001602:	2200      	movs	r2, #0
 8001604:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8001606:	4b7c      	ldr	r3, [pc, #496]	; (80017f8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001608:	2200      	movs	r2, #0
 800160a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800160c:	4b7a      	ldr	r3, [pc, #488]	; (80017f8 <_ZL14MX_DFSDM1_Initv+0x208>)
 800160e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001612:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8001614:	4b78      	ldr	r3, [pc, #480]	; (80017f8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001616:	2240      	movs	r2, #64	; 0x40
 8001618:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800161a:	4b77      	ldr	r3, [pc, #476]	; (80017f8 <_ZL14MX_DFSDM1_Initv+0x208>)
 800161c:	2201      	movs	r2, #1
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001620:	4875      	ldr	r0, [pc, #468]	; (80017f8 <_ZL14MX_DFSDM1_Initv+0x208>)
 8001622:	f003 fcab 	bl	8004f7c <HAL_DFSDM_FilterInit>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <_ZL14MX_DFSDM1_Initv+0x4a>
  {
    Error_Handler();
 8001636:	f000 fd0e 	bl	8002056 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 800163a:	4b71      	ldr	r3, [pc, #452]	; (8001800 <_ZL14MX_DFSDM1_Initv+0x210>)
 800163c:	4a71      	ldr	r2, [pc, #452]	; (8001804 <_ZL14MX_DFSDM1_Initv+0x214>)
 800163e:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001640:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = DISABLE;
 8001646:	4b6e      	ldr	r3, [pc, #440]	; (8001800 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001648:	2200      	movs	r2, #0
 800164a:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 800164c:	4b6c      	ldr	r3, [pc, #432]	; (8001800 <_ZL14MX_DFSDM1_Initv+0x210>)
 800164e:	2200      	movs	r2, #0
 8001650:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001652:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001654:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001658:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 800165a:	4b69      	ldr	r3, [pc, #420]	; (8001800 <_ZL14MX_DFSDM1_Initv+0x210>)
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8001660:	4b67      	ldr	r3, [pc, #412]	; (8001800 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001662:	2201      	movs	r2, #1
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8001666:	4866      	ldr	r0, [pc, #408]	; (8001800 <_ZL14MX_DFSDM1_Initv+0x210>)
 8001668:	f003 fc88 	bl	8004f7c <HAL_DFSDM_FilterInit>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <_ZL14MX_DFSDM1_Initv+0x90>
  {
    Error_Handler();
 800167c:	f000 fceb 	bl	8002056 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001680:	4b61      	ldr	r3, [pc, #388]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001682:	4a62      	ldr	r2, [pc, #392]	; (800180c <_ZL14MX_DFSDM1_Initv+0x21c>)
 8001684:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = DISABLE;
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001688:	2200      	movs	r2, #0
 800168a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 8001694:	2202      	movs	r2, #2
 8001696:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001698:	4b5b      	ldr	r3, [pc, #364]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800169e:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80016aa:	4b57      	ldr	r3, [pc, #348]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016b6:	4b54      	ldr	r3, [pc, #336]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80016bc:	4b52      	ldr	r3, [pc, #328]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 80016be:	2201      	movs	r2, #1
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80016c2:	4b51      	ldr	r3, [pc, #324]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80016c8:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80016ce:	484e      	ldr	r0, [pc, #312]	; (8001808 <_ZL14MX_DFSDM1_Initv+0x218>)
 80016d0:	f003 fb8c 	bl	8004dec <HAL_DFSDM_ChannelInit>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf14      	ite	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	2300      	moveq	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <_ZL14MX_DFSDM1_Initv+0xf8>
  {
    Error_Handler();
 80016e4:	f000 fcb7 	bl	8002056 <Error_Handler>
  }
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 80016e8:	4b49      	ldr	r3, [pc, #292]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 80016ea:	4a4a      	ldr	r2, [pc, #296]	; (8001814 <_ZL14MX_DFSDM1_Initv+0x224>)
 80016ec:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = DISABLE;
 80016ee:	4b48      	ldr	r3, [pc, #288]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 2;
 80016fa:	4b45      	ldr	r3, [pc, #276]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 80016fc:	2202      	movs	r2, #2
 80016fe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001706:	4b42      	ldr	r3, [pc, #264]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800170c:	4b40      	ldr	r3, [pc, #256]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001712:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001718:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 8001724:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001726:	2201      	movs	r2, #1
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 800172a:	4b39      	ldr	r3, [pc, #228]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 800172c:	2200      	movs	r2, #0
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 8001730:	4b37      	ldr	r3, [pc, #220]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001732:	2200      	movs	r2, #0
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 8001736:	4836      	ldr	r0, [pc, #216]	; (8001810 <_ZL14MX_DFSDM1_Initv+0x220>)
 8001738:	f003 fb58 	bl	8004dec <HAL_DFSDM_ChannelInit>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf14      	ite	ne
 8001742:	2301      	movne	r3, #1
 8001744:	2300      	moveq	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <_ZL14MX_DFSDM1_Initv+0x160>
  {
    Error_Handler();
 800174c:	f000 fc83 	bl	8002056 <Error_Handler>
  }
  hdfsdm1_channel6.Instance = DFSDM1_Channel6;
 8001750:	4b31      	ldr	r3, [pc, #196]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001752:	4a32      	ldr	r2, [pc, #200]	; (800181c <_ZL14MX_DFSDM1_Initv+0x22c>)
 8001754:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel6.Init.OutputClock.Activation = DISABLE;
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001758:	2200      	movs	r2, #0
 800175a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel6.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel6.Init.OutputClock.Divider = 2;
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001764:	2202      	movs	r2, #2
 8001766:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel6.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel6.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel6.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel6.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel6.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel6.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel6.Init.Awd.Oversampling = 1;
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 800178e:	2201      	movs	r2, #1
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel6.Init.Offset = 0;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 8001794:	2200      	movs	r2, #0
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel6.Init.RightBitShift = 0x00;
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 800179a:	2200      	movs	r2, #0
 800179c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel6) != HAL_OK)
 800179e:	481e      	ldr	r0, [pc, #120]	; (8001818 <_ZL14MX_DFSDM1_Initv+0x228>)
 80017a0:	f003 fb24 	bl	8004dec <HAL_DFSDM_ChannelInit>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf14      	ite	ne
 80017aa:	2301      	movne	r3, #1
 80017ac:	2300      	moveq	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <_ZL14MX_DFSDM1_Initv+0x1c8>
  {
    Error_Handler();
 80017b4:	f000 fc4f 	bl	8002056 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80017b8:	2201      	movs	r2, #1
 80017ba:	4919      	ldr	r1, [pc, #100]	; (8001820 <_ZL14MX_DFSDM1_Initv+0x230>)
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <_ZL14MX_DFSDM1_Initv+0x208>)
 80017be:	f003 fcb9 	bl	8005134 <HAL_DFSDM_FilterConfigRegChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <_ZL14MX_DFSDM1_Initv+0x1e6>
  {
    Error_Handler();
 80017d2:	f000 fc40 	bl	8002056 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_6, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80017d6:	2201      	movs	r2, #1
 80017d8:	4912      	ldr	r1, [pc, #72]	; (8001824 <_ZL14MX_DFSDM1_Initv+0x234>)
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <_ZL14MX_DFSDM1_Initv+0x210>)
 80017dc:	f003 fcaa 	bl	8005134 <HAL_DFSDM_FilterConfigRegChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf14      	ite	ne
 80017e6:	2301      	movne	r3, #1
 80017e8:	2300      	moveq	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <_ZL14MX_DFSDM1_Initv+0x204>
  {
    Error_Handler();
 80017f0:	f000 fc31 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	24000754 	.word	0x24000754
 80017fc:	40017900 	.word	0x40017900
 8001800:	240007a8 	.word	0x240007a8
 8001804:	40017980 	.word	0x40017980
 8001808:	240007fc 	.word	0x240007fc
 800180c:	40017820 	.word	0x40017820
 8001810:	24000834 	.word	0x24000834
 8001814:	400178a0 	.word	0x400178a0
 8001818:	2400086c 	.word	0x2400086c
 800181c:	400178c0 	.word	0x400178c0
 8001820:	00050020 	.word	0x00050020
 8001824:	00060040 	.word	0x00060040

08001828 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800182e:	4a32      	ldr	r2, [pc, #200]	; (80018f8 <_ZL14MX_FDCAN1_Initv+0xd0>)
 8001830:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001838:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001840:	2200      	movs	r2, #0
 8001842:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001846:	2200      	movs	r2, #0
 8001848:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800184c:	2200      	movs	r2, #0
 800184e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001852:	2201      	movs	r2, #1
 8001854:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001858:	2201      	movs	r2, #1
 800185a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800185e:	2202      	movs	r2, #2
 8001860:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001864:	2202      	movs	r2, #2
 8001866:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800186a:	2201      	movs	r2, #1
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001870:	2201      	movs	r2, #1
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001876:	2201      	movs	r2, #1
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800187c:	2201      	movs	r2, #1
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001882:	2200      	movs	r2, #0
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001888:	2200      	movs	r2, #0
 800188a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800188e:	2200      	movs	r2, #0
 8001890:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 20;
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001894:	2214      	movs	r2, #20
 8001896:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800189a:	2204      	movs	r2, #4
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018a6:	2204      	movs	r2, #4
 80018a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018b2:	2204      	movs	r2, #4
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 20;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018be:	2214      	movs	r2, #20
 80018c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018d0:	2204      	movs	r2, #4
 80018d2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80018d4:	4807      	ldr	r0, [pc, #28]	; (80018f4 <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018d6:	f003 ff93 	bl	8005800 <HAL_FDCAN_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <_ZL14MX_FDCAN1_Initv+0xc6>
  {
    Error_Handler();
 80018ea:	f000 fbb4 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	240008a4 	.word	0x240008a4
 80018f8:	4000a000 	.word	0x4000a000

080018fc <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <_ZL12MX_FMAC_Initv+0x28>)
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <_ZL12MX_FMAC_Initv+0x2c>)
 8001904:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <_ZL12MX_FMAC_Initv+0x28>)
 8001908:	f004 fae2 	bl	8005ed0 <HAL_FMAC_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf14      	ite	ne
 8001912:	2301      	movne	r3, #1
 8001914:	2300      	moveq	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 800191c:	f000 fb9b 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	24000944 	.word	0x24000944
 8001928:	48024000 	.word	0x48024000

0800192c <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 8001932:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <_ZL12MX_I2C3_Initv+0x94>)
 8001934:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x60404E72;
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 8001938:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <_ZL12MX_I2C3_Initv+0x98>)
 800193a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 8001944:	2201      	movs	r2, #1
 8001946:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 8001962:	2200      	movs	r2, #0
 8001964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001966:	4815      	ldr	r0, [pc, #84]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 8001968:	f004 fd32 	bl	80063d0 <HAL_I2C_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 800197c:	f000 fb6b 	bl	8002056 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001980:	2100      	movs	r1, #0
 8001982:	480e      	ldr	r0, [pc, #56]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 8001984:	f004 fdb4 	bl	80064f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001998:	f000 fb5d 	bl	8002056 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800199c:	2100      	movs	r1, #0
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <_ZL12MX_I2C3_Initv+0x90>)
 80019a0:	f004 fdf1 	bl	8006586 <HAL_I2CEx_ConfigDigitalFilter>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf14      	ite	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	2300      	moveq	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 80019b4:	f000 fb4f 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2400097c 	.word	0x2400097c
 80019c0:	40005c00 	.word	0x40005c00
 80019c4:	60404e72 	.word	0x60404e72

080019c8 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 80019ce:	4a2c      	ldr	r2, [pc, #176]	; (8001a80 <_ZL12MX_SPI2_Initv+0xb8>)
 80019d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 80019d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80019e0:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 80019e2:	220f      	movs	r2, #15
 80019e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 80019e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019ee:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 80019f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 80019f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a04:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a24:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <_ZL12MX_SPI2_Initv+0xb4>)
 8001a5e:	f007 fe07 	bl	8009670 <HAL_SPI_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf14      	ite	ne
 8001a68:	2301      	movne	r3, #1
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <_ZL12MX_SPI2_Initv+0xae>
  {
    Error_Handler();
 8001a72:	f000 faf0 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	240009c8 	.word	0x240009c8
 8001a80:	40003800 	.word	0x40003800

08001a84 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b096      	sub	sp, #88	; 0x58
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	222c      	movs	r2, #44	; 0x2c
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00b fd53 	bl	800d55c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ab6:	4b5d      	ldr	r3, [pc, #372]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001ab8:	4a5d      	ldr	r2, [pc, #372]	; (8001c30 <_ZL12MX_TIM1_Initv+0x1ac>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001abc:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6875;
 8001ac8:	4b58      	ldr	r3, [pc, #352]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001aca:	f641 22db 	movw	r2, #6875	; 0x1adb
 8001ace:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b56      	ldr	r3, [pc, #344]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ae2:	4852      	ldr	r0, [pc, #328]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001ae4:	f009 f858 	bl	800ab98 <HAL_TIM_PWM_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf14      	ite	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	2300      	moveq	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8001af8:	f000 faad 	bl	8002056 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4847      	ldr	r0, [pc, #284]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001b10:	f00a fa0a 	bl	800bf28 <HAL_TIMEx_MasterConfigSynchronization>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf14      	ite	ne
 8001b1a:	2301      	movne	r3, #1
 8001b1c:	2300      	moveq	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 8001b24:	f000 fa97 	bl	8002056 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b28:	2360      	movs	r3, #96	; 0x60
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4837      	ldr	r0, [pc, #220]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001b4e:	f009 fab7 	bl	800b0c0 <HAL_TIM_PWM_ConfigChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 8001b62:	f000 fa78 	bl	8002056 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	482f      	ldr	r0, [pc, #188]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001b70:	f009 faa6 	bl	800b0c0 <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 8001b84:	f000 fa67 	bl	8002056 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4826      	ldr	r0, [pc, #152]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001b92:	f009 fa95 	bl	800b0c0 <HAL_TIM_PWM_ConfigChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <_ZL12MX_TIM1_Initv+0x126>
  {
    Error_Handler();
 8001ba6:	f000 fa56 	bl	8002056 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bae:	220c      	movs	r2, #12
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	481e      	ldr	r0, [pc, #120]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001bb4:	f009 fa84 	bl	800b0c0 <HAL_TIM_PWM_ConfigChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf14      	ite	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <_ZL12MX_TIM1_Initv+0x148>
  {
    Error_Handler();
 8001bc8:	f000 fa45 	bl	8002056 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001bd8:	230a      	movs	r3, #10
 8001bda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001bf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	480a      	ldr	r0, [pc, #40]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001c04:	f00a fa2c 	bl	800c060 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf14      	ite	ne
 8001c0e:	2301      	movne	r3, #1
 8001c10:	2300      	moveq	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <_ZL12MX_TIM1_Initv+0x198>
  {
    Error_Handler();
 8001c18:	f000 fa1d 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c1c:	4803      	ldr	r0, [pc, #12]	; (8001c2c <_ZL12MX_TIM1_Initv+0x1a8>)
 8001c1e:	f000 feb1 	bl	8002984 <HAL_TIM_MspPostInit>

}
 8001c22:	bf00      	nop
 8001c24:	3758      	adds	r7, #88	; 0x58
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	24000a50 	.word	0x24000a50
 8001c30:	40010000 	.word	0x40010000

08001c34 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001c54:	4a25      	ldr	r2, [pc, #148]	; (8001cec <_ZL12MX_TIM3_Initv+0xb8>)
 8001c56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27500;
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001c5a:	f646 326c 	movw	r2, #27500	; 0x6b6c
 8001c5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001c68:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c74:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c7a:	481b      	ldr	r0, [pc, #108]	; (8001ce8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001c7c:	f008 feaf 	bl	800a9de <HAL_TIM_Base_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf14      	ite	ne
 8001c86:	2301      	movne	r3, #1
 8001c88:	2300      	moveq	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8001c90:	f000 f9e1 	bl	8002056 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001ca2:	f009 fb1d 	bl	800b2e0 <HAL_TIM_ConfigClockSource>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001cb6:	f000 f9ce 	bl	8002056 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001cc8:	f00a f92e 	bl	800bf28 <HAL_TIMEx_MasterConfigSynchronization>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf14      	ite	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	2300      	moveq	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001cdc:	f000 f9bb 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	24000a9c 	.word	0x24000a9c
 8001cec:	40000400 	.word	0x40000400

08001cf0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d0e:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d10:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001d12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 275;
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d16:	f240 1213 	movw	r2, #275	; 0x113
 8001d1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d24:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d36:	481b      	ldr	r0, [pc, #108]	; (8001da4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d38:	f008 fe51 	bl	800a9de <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf14      	ite	ne
 8001d42:	2301      	movne	r3, #1
 8001d44:	2300      	moveq	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <_ZL12MX_TIM4_Initv+0x60>
  {
    Error_Handler();
 8001d4c:	f000 f983 	bl	8002056 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d5e:	f009 fabf 	bl	800b2e0 <HAL_TIM_ConfigClockSource>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001d72:	f000 f970 	bl	8002056 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4808      	ldr	r0, [pc, #32]	; (8001da4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001d84:	f00a f8d0 	bl	800bf28 <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf14      	ite	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	2300      	moveq	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001d98:	f000 f95d 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	24000ae8 	.word	0x24000ae8
 8001da8:	40000800 	.word	0x40000800

08001dac <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db6:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df4:	481b      	ldr	r0, [pc, #108]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001df6:	f00a f9f4 	bl	800c1e2 <HAL_UART_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8001e0a:	f000 f924 	bl	8002056 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4814      	ldr	r0, [pc, #80]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001e12:	f00b faa6 	bl	800d362 <HAL_UARTEx_SetTxFifoThreshold>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8001e26:	f000 f916 	bl	8002056 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001e2e:	f00b fad6 	bl	800d3de <HAL_UARTEx_SetRxFifoThreshold>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8001e42:	f000 f908 	bl	8002056 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e46:	4807      	ldr	r0, [pc, #28]	; (8001e64 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001e48:	f00b fa52 	bl	800d2f0 <HAL_UARTEx_DisableFifoMode>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf14      	ite	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	2300      	moveq	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001e5c:	f000 f8fb 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	24000b34 	.word	0x24000b34
 8001e68:	40011000 	.word	0x40011000

08001e6c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e70:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001e72:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <_ZL19MX_USART2_UART_Initv+0xc4>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eae:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	481c      	ldr	r0, [pc, #112]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001ebc:	f00b f9ae 	bl	800d21c <HAL_RS485Ex_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf14      	ite	ne
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	2300      	moveq	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <_ZL19MX_USART2_UART_Initv+0x68>
  {
    Error_Handler();
 8001ed0:	f000 f8c1 	bl	8002056 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4815      	ldr	r0, [pc, #84]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001ed8:	f00b fa43 	bl	800d362 <HAL_UARTEx_SetTxFifoThreshold>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <_ZL19MX_USART2_UART_Initv+0x84>
  {
    Error_Handler();
 8001eec:	f000 f8b3 	bl	8002056 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	480e      	ldr	r0, [pc, #56]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001ef4:	f00b fa73 	bl	800d3de <HAL_UARTEx_SetRxFifoThreshold>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bf14      	ite	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	2300      	moveq	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <_ZL19MX_USART2_UART_Initv+0xa0>
  {
    Error_Handler();
 8001f08:	f000 f8a5 	bl	8002056 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f0c:	4807      	ldr	r0, [pc, #28]	; (8001f2c <_ZL19MX_USART2_UART_Initv+0xc0>)
 8001f0e:	f00b f9ef 	bl	800d2f0 <HAL_UARTEx_DisableFifoMode>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <_ZL19MX_USART2_UART_Initv+0xba>
  {
    Error_Handler();
 8001f22:	f000 f898 	bl	8002056 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	24000bc4 	.word	0x24000bc4
 8001f30:	40004400 	.word	0x40004400

08001f34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	; 0x30
 8001f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	4a37      	ldr	r2, [pc, #220]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6e:	4a30      	ldr	r2, [pc, #192]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8c:	4a28      	ldr	r2, [pc, #160]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001faa:	4a21      	ldr	r2, [pc, #132]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <_ZL12MX_GPIO_Initv+0xfc>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002004:	480b      	ldr	r0, [pc, #44]	; (8002034 <_ZL12MX_GPIO_Initv+0x100>)
 8002006:	f004 f9af 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800200a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4804      	ldr	r0, [pc, #16]	; (8002034 <_ZL12MX_GPIO_Initv+0x100>)
 8002024:	f003 fff8 	bl	8006018 <HAL_GPIO_Init>

}
 8002028:	bf00      	nop
 800202a:	3730      	adds	r7, #48	; 0x30
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	58024400 	.word	0x58024400
 8002034:	58020800 	.word	0x58020800

08002038 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002048:	d101      	bne.n	800204e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800204a:	f000 ff3f 	bl	8002ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_MspInit+0x30>)
 800206c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002070:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_MspInit+0x30>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_MspInit+0x30>)
 800207c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	58024400 	.word	0x58024400

08002098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a5b      	ldr	r2, [pc, #364]	; (8002224 <HAL_ADC_MspInit+0x18c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d14e      	bne.n	8002158 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020ba:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <HAL_ADC_MspInit+0x190>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	4a59      	ldr	r2, [pc, #356]	; (8002228 <HAL_ADC_MspInit+0x190>)
 80020c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020c4:	4b58      	ldr	r3, [pc, #352]	; (8002228 <HAL_ADC_MspInit+0x190>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10e      	bne.n	80020ea <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020cc:	4b57      	ldr	r3, [pc, #348]	; (800222c <HAL_ADC_MspInit+0x194>)
 80020ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020d2:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_ADC_MspInit+0x194>)
 80020d4:	f043 0320 	orr.w	r3, r3, #32
 80020d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_ADC_MspInit+0x194>)
 80020de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_ADC_MspInit+0x194>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f0:	4a4e      	ldr	r2, [pc, #312]	; (800222c <HAL_ADC_MspInit+0x194>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020fa:	4b4c      	ldr	r3, [pc, #304]	; (800222c <HAL_ADC_MspInit+0x194>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <HAL_ADC_MspInit+0x194>)
 800210a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210e:	4a47      	ldr	r2, [pc, #284]	; (800222c <HAL_ADC_MspInit+0x194>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002118:	4b44      	ldr	r3, [pc, #272]	; (800222c <HAL_ADC_MspInit+0x194>)
 800211a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	69bb      	ldr	r3, [r7, #24]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INN3
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002126:	23c0      	movs	r3, #192	; 0xc0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212a:	2303      	movs	r3, #3
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	4619      	mov	r1, r3
 8002138:	483d      	ldr	r0, [pc, #244]	; (8002230 <HAL_ADC_MspInit+0x198>)
 800213a:	f003 ff6d 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800213e:	2303      	movs	r3, #3
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002142:	2303      	movs	r3, #3
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4838      	ldr	r0, [pc, #224]	; (8002234 <HAL_ADC_MspInit+0x19c>)
 8002152:	f003 ff61 	bl	8006018 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002156:	e061      	b.n	800221c <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a36      	ldr	r2, [pc, #216]	; (8002238 <HAL_ADC_MspInit+0x1a0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d133      	bne.n	80021ca <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_ADC_MspInit+0x190>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <HAL_ADC_MspInit+0x190>)
 800216a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_ADC_MspInit+0x190>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10e      	bne.n	8002192 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_ADC_MspInit+0x194>)
 8002176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <HAL_ADC_MspInit+0x194>)
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_ADC_MspInit+0x194>)
 8002186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <HAL_ADC_MspInit+0x194>)
 8002194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_ADC_MspInit+0x194>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_ADC_MspInit+0x194>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021b0:	2330      	movs	r3, #48	; 0x30
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b4:	2303      	movs	r3, #3
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	4619      	mov	r1, r3
 80021c2:	481e      	ldr	r0, [pc, #120]	; (800223c <HAL_ADC_MspInit+0x1a4>)
 80021c4:	f003 ff28 	bl	8006018 <HAL_GPIO_Init>
}
 80021c8:	e028      	b.n	800221c <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC3)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <HAL_ADC_MspInit+0x1a8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d123      	bne.n	800221c <HAL_ADC_MspInit+0x184>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_ADC_MspInit+0x194>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021da:	4a14      	ldr	r2, [pc, #80]	; (800222c <HAL_ADC_MspInit+0x194>)
 80021dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_ADC_MspInit+0x194>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_ADC_MspInit+0x194>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f8:	4a0c      	ldr	r2, [pc, #48]	; (800222c <HAL_ADC_MspInit+0x194>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_ADC_MspInit+0x194>)
 8002204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002210:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002214:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002218:	f000 fe9c 	bl	8002f54 <HAL_SYSCFG_AnalogSwitchConfig>
}
 800221c:	bf00      	nop
 800221e:	3738      	adds	r7, #56	; 0x38
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40022000 	.word	0x40022000
 8002228:	24000c88 	.word	0x24000c88
 800222c:	58024400 	.word	0x58024400
 8002230:	58020000 	.word	0x58020000
 8002234:	58020400 	.word	0x58020400
 8002238:	40022100 	.word	0x40022100
 800223c:	58020800 	.word	0x58020800
 8002240:	58026000 	.word	0x58026000

08002244 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_CORDIC_MspInit+0x3c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10e      	bne.n	8002274 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_CORDIC_MspInit+0x40>)
 8002258:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800225c:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_CORDIC_MspInit+0x40>)
 800225e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002262:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_CORDIC_MspInit+0x40>)
 8002268:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	48024400 	.word	0x48024400
 8002284:	58024400 	.word	0x58024400

08002288 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0b8      	sub	sp, #224	; 0xe0
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	22b4      	movs	r2, #180	; 0xb4
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00b f957 	bl	800d55c <memset>
  if(DFSDM1_Init == 0)
 80022ae:	4b54      	ldr	r3, [pc, #336]	; (8002400 <HAL_DFSDM_FilterMspInit+0x178>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 809f 	bne.w	80023f6 <HAL_DFSDM_FilterMspInit+0x16e>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80022b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 80022be:	2300      	movs	r3, #0
 80022c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c2:	f107 0318 	add.w	r3, r7, #24
 80022c6:	4618      	mov	r0, r3
 80022c8:	f005 f940 	bl	800754c <HAL_RCCEx_PeriphCLKConfig>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80022d2:	f7ff fec0 	bl	8002056 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80022d6:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_DFSDM_FilterMspInit+0x17c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a49      	ldr	r2, [pc, #292]	; (8002404 <HAL_DFSDM_FilterMspInit+0x17c>)
 80022de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80022e0:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_DFSDM_FilterMspInit+0x17c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d10e      	bne.n	8002306 <HAL_DFSDM_FilterMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80022e8:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_DFSDM_FilterMspInit+0x180>)
 80022ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ee:	4a46      	ldr	r2, [pc, #280]	; (8002408 <HAL_DFSDM_FilterMspInit+0x180>)
 80022f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022f8:	4b43      	ldr	r3, [pc, #268]	; (8002408 <HAL_DFSDM_FilterMspInit+0x180>)
 80022fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	4b40      	ldr	r3, [pc, #256]	; (8002408 <HAL_DFSDM_FilterMspInit+0x180>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230c:	4a3e      	ldr	r2, [pc, #248]	; (8002408 <HAL_DFSDM_FilterMspInit+0x180>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002316:	4b3c      	ldr	r3, [pc, #240]	; (8002408 <HAL_DFSDM_FilterMspInit+0x180>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_DFSDM_FilterMspInit+0x180>)
 8002326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232a:	4a37      	ldr	r2, [pc, #220]	; (8002408 <HAL_DFSDM_FilterMspInit+0x180>)
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002334:	4b34      	ldr	r3, [pc, #208]	; (8002408 <HAL_DFSDM_FilterMspInit+0x180>)
 8002336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> DFSDM1_CKIN6
    PD1     ------> DFSDM1_DATIN6
    PD6     ------> DFSDM1_DATIN1
    PD7     ------> DFSDM1_CKIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002342:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002346:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800235c:	2303      	movs	r3, #3
 800235e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002362:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002366:	4619      	mov	r1, r3
 8002368:	4828      	ldr	r0, [pc, #160]	; (800240c <HAL_DFSDM_FilterMspInit+0x184>)
 800236a:	f003 fe55 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800236e:	2303      	movs	r3, #3
 8002370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8002386:	2303      	movs	r3, #3
 8002388:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002390:	4619      	mov	r1, r3
 8002392:	481f      	ldr	r0, [pc, #124]	; (8002410 <HAL_DFSDM_FilterMspInit+0x188>)
 8002394:	f003 fe40 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002398:	2340      	movs	r3, #64	; 0x40
 800239a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 80023b0:	2304      	movs	r3, #4
 80023b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023ba:	4619      	mov	r1, r3
 80023bc:	4814      	ldr	r0, [pc, #80]	; (8002410 <HAL_DFSDM_FilterMspInit+0x188>)
 80023be:	f003 fe2b 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80023da:	2306      	movs	r3, #6
 80023dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023e4:	4619      	mov	r1, r3
 80023e6:	480a      	ldr	r0, [pc, #40]	; (8002410 <HAL_DFSDM_FilterMspInit+0x188>)
 80023e8:	f003 fe16 	bl	8006018 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <HAL_DFSDM_FilterMspInit+0x178>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_DFSDM_FilterMspInit+0x178>)
 80023f4:	6013      	str	r3, [r2, #0]
  }

}
 80023f6:	bf00      	nop
 80023f8:	37e0      	adds	r7, #224	; 0xe0
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	24000c90 	.word	0x24000c90
 8002404:	24000c8c 	.word	0x24000c8c
 8002408:	58024400 	.word	0x58024400
 800240c:	58020800 	.word	0x58020800
 8002410:	58020c00 	.word	0x58020c00

08002414 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0b8      	sub	sp, #224	; 0xe0
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242c:	f107 0318 	add.w	r3, r7, #24
 8002430:	22b4      	movs	r2, #180	; 0xb4
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f00b f891 	bl	800d55c <memset>
  if(DFSDM1_Init == 0)
 800243a:	4b54      	ldr	r3, [pc, #336]	; (800258c <HAL_DFSDM_ChannelMspInit+0x178>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 809f 	bne.w	8002582 <HAL_DFSDM_ChannelMspInit+0x16e>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002444:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002448:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800244a:	2300      	movs	r3, #0
 800244c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800244e:	f107 0318 	add.w	r3, r7, #24
 8002452:	4618      	mov	r0, r3
 8002454:	f005 f87a 	bl	800754c <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800245e:	f7ff fdfa 	bl	8002056 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002462:	4b4b      	ldr	r3, [pc, #300]	; (8002590 <HAL_DFSDM_ChannelMspInit+0x17c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a49      	ldr	r2, [pc, #292]	; (8002590 <HAL_DFSDM_ChannelMspInit+0x17c>)
 800246a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800246c:	4b48      	ldr	r3, [pc, #288]	; (8002590 <HAL_DFSDM_ChannelMspInit+0x17c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d10e      	bne.n	8002492 <HAL_DFSDM_ChannelMspInit+0x7e>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002474:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800247a:	4a46      	ldr	r2, [pc, #280]	; (8002594 <HAL_DFSDM_ChannelMspInit+0x180>)
 800247c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002480:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800248a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002492:	4b40      	ldr	r3, [pc, #256]	; (8002594 <HAL_DFSDM_ChannelMspInit+0x180>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002498:	4a3e      	ldr	r2, [pc, #248]	; (8002594 <HAL_DFSDM_ChannelMspInit+0x180>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a2:	4b3c      	ldr	r3, [pc, #240]	; (8002594 <HAL_DFSDM_ChannelMspInit+0x180>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b0:	4b38      	ldr	r3, [pc, #224]	; (8002594 <HAL_DFSDM_ChannelMspInit+0x180>)
 80024b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b6:	4a37      	ldr	r2, [pc, #220]	; (8002594 <HAL_DFSDM_ChannelMspInit+0x180>)
 80024b8:	f043 0308 	orr.w	r3, r3, #8
 80024bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c0:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_DFSDM_ChannelMspInit+0x180>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> DFSDM1_CKIN6
    PD1     ------> DFSDM1_DATIN6
    PD6     ------> DFSDM1_DATIN1
    PD7     ------> DFSDM1_CKIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80024e8:	2303      	movs	r3, #3
 80024ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024f2:	4619      	mov	r1, r3
 80024f4:	4828      	ldr	r0, [pc, #160]	; (8002598 <HAL_DFSDM_ChannelMspInit+0x184>)
 80024f6:	f003 fd8f 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024fa:	2303      	movs	r3, #3
 80024fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8002512:	2303      	movs	r3, #3
 8002514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002518:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800251c:	4619      	mov	r1, r3
 800251e:	481f      	ldr	r0, [pc, #124]	; (800259c <HAL_DFSDM_ChannelMspInit+0x188>)
 8002520:	f003 fd7a 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002524:	2340      	movs	r3, #64	; 0x40
 8002526:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 800253c:	2304      	movs	r3, #4
 800253e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002542:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002546:	4619      	mov	r1, r3
 8002548:	4814      	ldr	r0, [pc, #80]	; (800259c <HAL_DFSDM_ChannelMspInit+0x188>)
 800254a:	f003 fd65 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002566:	2306      	movs	r3, #6
 8002568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800256c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002570:	4619      	mov	r1, r3
 8002572:	480a      	ldr	r0, [pc, #40]	; (800259c <HAL_DFSDM_ChannelMspInit+0x188>)
 8002574:	f003 fd50 	bl	8006018 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <HAL_DFSDM_ChannelMspInit+0x178>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	4a03      	ldr	r2, [pc, #12]	; (800258c <HAL_DFSDM_ChannelMspInit+0x178>)
 8002580:	6013      	str	r3, [r2, #0]
  }

}
 8002582:	bf00      	nop
 8002584:	37e0      	adds	r7, #224	; 0xe0
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	24000c90 	.word	0x24000c90
 8002590:	24000c8c 	.word	0x24000c8c
 8002594:	58024400 	.word	0x58024400
 8002598:	58020800 	.word	0x58020800
 800259c:	58020c00 	.word	0x58020c00

080025a0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b0b6      	sub	sp, #216	; 0xd8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	22b4      	movs	r2, #180	; 0xb4
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f00a ffcb 	bl	800d55c <memset>
  if(hfdcan->Instance==FDCAN1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a25      	ldr	r2, [pc, #148]	; (8002660 <HAL_FDCAN_MspInit+0xc0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d142      	bne.n	8002656 <HAL_FDCAN_MspInit+0xb6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80025d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 ffb4 	bl	800754c <HAL_RCCEx_PeriphCLKConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 80025ea:	f7ff fd34 	bl	8002056 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_FDCAN_MspInit+0xc4>)
 80025f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80025f4:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_FDCAN_MspInit+0xc4>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_FDCAN_MspInit+0xc4>)
 8002600:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_FDCAN_MspInit+0xc4>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002612:	4a14      	ldr	r2, [pc, #80]	; (8002664 <HAL_FDCAN_MspInit+0xc4>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_FDCAN_MspInit+0xc4>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800262a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800262e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002644:	2309      	movs	r3, #9
 8002646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800264e:	4619      	mov	r1, r3
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <HAL_FDCAN_MspInit+0xc8>)
 8002652:	f003 fce1 	bl	8006018 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002656:	bf00      	nop
 8002658:	37d8      	adds	r7, #216	; 0xd8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	4000a000 	.word	0x4000a000
 8002664:	58024400 	.word	0x58024400
 8002668:	58020000 	.word	0x58020000

0800266c <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_FMAC_MspInit+0x3c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10e      	bne.n	800269c <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_FMAC_MspInit+0x40>)
 8002680:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002684:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_FMAC_MspInit+0x40>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_FMAC_MspInit+0x40>)
 8002690:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	48024000 	.word	0x48024000
 80026ac:	58024400 	.word	0x58024400

080026b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0b8      	sub	sp, #224	; 0xe0
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c8:	f107 0318 	add.w	r3, r7, #24
 80026cc:	22b4      	movs	r2, #180	; 0xb4
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f00a ff43 	bl	800d55c <memset>
  if(hi2c->Instance==I2C3)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a37      	ldr	r2, [pc, #220]	; (80027b8 <HAL_I2C_MspInit+0x108>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d167      	bne.n	80027b0 <HAL_I2C_MspInit+0x100>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80026e0:	2308      	movs	r3, #8
 80026e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ea:	f107 0318 	add.w	r3, r7, #24
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 ff2c 	bl	800754c <HAL_RCCEx_PeriphCLKConfig>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026fa:	f7ff fcac 	bl	8002056 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 8002700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 8002710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 800271e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800272c:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 800272e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800273a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800273e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002742:	2312      	movs	r3, #18
 8002744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002754:	2304      	movs	r3, #4
 8002756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800275e:	4619      	mov	r1, r3
 8002760:	4817      	ldr	r0, [pc, #92]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 8002762:	f003 fc59 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800276a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800276e:	2312      	movs	r3, #18
 8002770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002780:	2304      	movs	r3, #4
 8002782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800278a:	4619      	mov	r1, r3
 800278c:	480d      	ldr	r0, [pc, #52]	; (80027c4 <HAL_I2C_MspInit+0x114>)
 800278e:	f003 fc43 	bl	8006018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 8002794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002798:	4a08      	ldr	r2, [pc, #32]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 800279a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800279e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 80027a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80027b0:	bf00      	nop
 80027b2:	37e0      	adds	r7, #224	; 0xe0
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40005c00 	.word	0x40005c00
 80027bc:	58024400 	.word	0x58024400
 80027c0:	58020800 	.word	0x58020800
 80027c4:	58020000 	.word	0x58020000

080027c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0b6      	sub	sp, #216	; 0xd8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	22b4      	movs	r2, #180	; 0xb4
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f00a feb7 	bl	800d55c <memset>
  if(hspi->Instance==SPI2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a29      	ldr	r2, [pc, #164]	; (8002898 <HAL_SPI_MspInit+0xd0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d14b      	bne.n	8002890 <HAL_SPI_MspInit+0xc8>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80027f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80027fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002802:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	4618      	mov	r0, r3
 800280a:	f004 fe9f 	bl	800754c <HAL_RCCEx_PeriphCLKConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002814:	f7ff fc1f 	bl	8002056 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_SPI_MspInit+0xd4>)
 800281a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800281e:	4a1f      	ldr	r2, [pc, #124]	; (800289c <HAL_SPI_MspInit+0xd4>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002824:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002828:	4b1c      	ldr	r3, [pc, #112]	; (800289c <HAL_SPI_MspInit+0xd4>)
 800282a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_SPI_MspInit+0xd4>)
 8002838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283c:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_SPI_MspInit+0xd4>)
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_SPI_MspInit+0xd4>)
 8002848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002854:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800286e:	2305      	movs	r3, #5
 8002870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002878:	4619      	mov	r1, r3
 800287a:	4809      	ldr	r0, [pc, #36]	; (80028a0 <HAL_SPI_MspInit+0xd8>)
 800287c:	f003 fbcc 	bl	8006018 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2024      	movs	r0, #36	; 0x24
 8002886:	f002 fa89 	bl	8004d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800288a:	2024      	movs	r0, #36	; 0x24
 800288c:	f002 faa0 	bl	8004dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002890:	bf00      	nop
 8002892:	37d8      	adds	r7, #216	; 0xd8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40003800 	.word	0x40003800
 800289c:	58024400 	.word	0x58024400
 80028a0:	58020400 	.word	0x58020400

080028a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <HAL_TIM_PWM_MspInit+0x48>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d116      	bne.n	80028e4 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80028b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028bc:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80028c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	2019      	movs	r0, #25
 80028da:	f002 fa5f 	bl	8004d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80028de:	2019      	movs	r0, #25
 80028e0:	f002 fa76 	bl	8004dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40010000 	.word	0x40010000
 80028f0:	58024400 	.word	0x58024400

080028f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <HAL_TIM_Base_MspInit+0x84>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d117      	bne.n	8002936 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_TIM_Base_MspInit+0x88>)
 8002908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800290c:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_TIM_Base_MspInit+0x88>)
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_TIM_Base_MspInit+0x88>)
 8002918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	201d      	movs	r0, #29
 800292a:	f002 fa37 	bl	8004d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800292e:	201d      	movs	r0, #29
 8002930:	f002 fa4e 	bl	8004dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002934:	e01b      	b.n	800296e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a11      	ldr	r2, [pc, #68]	; (8002980 <HAL_TIM_Base_MspInit+0x8c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d116      	bne.n	800296e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_TIM_Base_MspInit+0x88>)
 8002942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002946:	4a0d      	ldr	r2, [pc, #52]	; (800297c <HAL_TIM_Base_MspInit+0x88>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_TIM_Base_MspInit+0x88>)
 8002952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	201e      	movs	r0, #30
 8002964:	f002 fa1a 	bl	8004d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002968:	201e      	movs	r0, #30
 800296a:	f002 fa31 	bl	8004dd0 <HAL_NVIC_EnableIRQ>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40000400 	.word	0x40000400
 800297c:	58024400 	.word	0x58024400
 8002980:	40000800 	.word	0x40000800

08002984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_TIM_MspPostInit+0x6c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d11f      	bne.n	80029e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <HAL_TIM_MspPostInit+0x70>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ac:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <HAL_TIM_MspPostInit+0x70>)
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_TIM_MspPostInit+0x70>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80029c4:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80029c8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	4619      	mov	r1, r3
 80029e0:	4805      	ldr	r0, [pc, #20]	; (80029f8 <HAL_TIM_MspPostInit+0x74>)
 80029e2:	f003 fb19 	bl	8006018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029e6:	bf00      	nop
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	58024400 	.word	0x58024400
 80029f8:	58021000 	.word	0x58021000

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0b8      	sub	sp, #224	; 0xe0
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	22b4      	movs	r2, #180	; 0xb4
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00a fd9d 	bl	800d55c <memset>
  if(huart->Instance==USART1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a49      	ldr	r2, [pc, #292]	; (8002b4c <HAL_UART_MspInit+0x150>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d143      	bne.n	8002ab4 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a36:	f107 0318 	add.w	r3, r7, #24
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fd86 	bl	800754c <HAL_RCCEx_PeriphCLKConfig>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a46:	f7ff fb06 	bl	8002056 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a50:	4a3f      	ldr	r2, [pc, #252]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6e:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4829      	ldr	r0, [pc, #164]	; (8002b54 <HAL_UART_MspInit+0x158>)
 8002aae:	f003 fab3 	bl	8006018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ab2:	e046      	b.n	8002b42 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <HAL_UART_MspInit+0x15c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d141      	bne.n	8002b42 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac8:	f107 0318 	add.w	r3, r7, #24
 8002acc:	4618      	mov	r0, r3
 8002ace:	f004 fd3d 	bl	800754c <HAL_RCCEx_PeriphCLKConfig>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002ad8:	f7ff fabd 	bl	8002056 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ae2:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002b18:	230e      	movs	r3, #14
 8002b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b30:	2307      	movs	r3, #7
 8002b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4805      	ldr	r0, [pc, #20]	; (8002b54 <HAL_UART_MspInit+0x158>)
 8002b3e:	f003 fa6b 	bl	8006018 <HAL_GPIO_Init>
}
 8002b42:	bf00      	nop
 8002b44:	37e0      	adds	r7, #224	; 0xe0
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40011000 	.word	0x40011000
 8002b50:	58024400 	.word	0x58024400
 8002b54:	58020000 	.word	0x58020000
 8002b58:	40004400 	.word	0x40004400

08002b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b090      	sub	sp, #64	; 0x40
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	d827      	bhi.n	8002bba <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	201c      	movs	r0, #28
 8002b70:	f002 f914 	bl	8004d9c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b74:	201c      	movs	r0, #28
 8002b76:	f002 f92b 	bl	8004dd0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002b7a:	4a29      	ldr	r2, [pc, #164]	; (8002c20 <HAL_InitTick+0xc4>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b80:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <HAL_InitTick+0xc8>)
 8002b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b86:	4a27      	ldr	r2, [pc, #156]	; (8002c24 <HAL_InitTick+0xc8>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_InitTick+0xc8>)
 8002b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b9e:	f107 0210 	add.w	r2, r7, #16
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 fc8d 	bl	80074c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <HAL_InitTick+0x6a>
 8002bb8:	e001      	b.n	8002bbe <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e02c      	b.n	8002c18 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bbe:	f004 fc57 	bl	8007470 <HAL_RCC_GetPCLK1Freq>
 8002bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002bc4:	e004      	b.n	8002bd0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bc6:	f004 fc53 	bl	8007470 <HAL_RCC_GetPCLK1Freq>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <HAL_InitTick+0xcc>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	0c9b      	lsrs	r3, r3, #18
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_InitTick+0xd0>)
 8002be0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002be4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_InitTick+0xd0>)
 8002be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bec:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_InitTick+0xd0>)
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_InitTick+0xd0>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_InitTick+0xd0>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002c00:	480a      	ldr	r0, [pc, #40]	; (8002c2c <HAL_InitTick+0xd0>)
 8002c02:	f007 feec 	bl	800a9de <HAL_TIM_Base_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002c0c:	4807      	ldr	r0, [pc, #28]	; (8002c2c <HAL_InitTick+0xd0>)
 8002c0e:	f007 ff3d 	bl	800aa8c <HAL_TIM_Base_Start_IT>
 8002c12:	4603      	mov	r3, r0
 8002c14:	e000      	b.n	8002c18 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3740      	adds	r7, #64	; 0x40
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	240005b8 	.word	0x240005b8
 8002c24:	58024400 	.word	0x58024400
 8002c28:	431bde83 	.word	0x431bde83
 8002c2c:	24000cb8 	.word	0x24000cb8

08002c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c42:	e7fe      	b.n	8002c42 <HardFault_Handler+0x4>

08002c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <MemManage_Handler+0x4>

08002c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c4e:	e7fe      	b.n	8002c4e <BusFault_Handler+0x4>

08002c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <UsageFault_Handler+0x4>

08002c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	pwm_flag=1;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <TIM1_UP_IRQHandler+0x14>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c9a:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <TIM1_UP_IRQHandler+0x18>)
 8002c9c:	f008 f8f0 	bl	800ae80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	24000c54 	.word	0x24000c54
 8002ca8:	24000a50 	.word	0x24000a50

08002cac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <TIM2_IRQHandler+0x10>)
 8002cb2:	f008 f8e5 	bl	800ae80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	24000cb8 	.word	0x24000cb8

08002cc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cc8:	4803      	ldr	r0, [pc, #12]	; (8002cd8 <TIM3_IRQHandler+0x18>)
 8002cca:	f003 fb66 	bl	800639a <HAL_GPIO_TogglePin>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cce:	4803      	ldr	r0, [pc, #12]	; (8002cdc <TIM3_IRQHandler+0x1c>)
 8002cd0:	f008 f8d6 	bl	800ae80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	58020800 	.word	0x58020800
 8002cdc:	24000a9c 	.word	0x24000a9c

08002ce0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <TIM4_IRQHandler+0x10>)
 8002ce6:	f008 f8cb 	bl	800ae80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	24000ae8 	.word	0x24000ae8

08002cf4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <SPI2_IRQHandler+0x10>)
 8002cfa:	f007 fa51 	bl	800a1a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	240009c8 	.word	0x240009c8

08002d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d0c:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <SystemInit+0xd8>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	4a33      	ldr	r2, [pc, #204]	; (8002de0 <SystemInit+0xd8>)
 8002d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d1c:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <SystemInit+0xdc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d807      	bhi.n	8002d38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d28:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <SystemInit+0xdc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 030f 	bic.w	r3, r3, #15
 8002d30:	4a2c      	ldr	r2, [pc, #176]	; (8002de4 <SystemInit+0xdc>)
 8002d32:	f043 0307 	orr.w	r3, r3, #7
 8002d36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <SystemInit+0xe0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2a      	ldr	r2, [pc, #168]	; (8002de8 <SystemInit+0xe0>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d44:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <SystemInit+0xe0>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d4a:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <SystemInit+0xe0>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4926      	ldr	r1, [pc, #152]	; (8002de8 <SystemInit+0xe0>)
 8002d50:	4b26      	ldr	r3, [pc, #152]	; (8002dec <SystemInit+0xe4>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <SystemInit+0xdc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <SystemInit+0xdc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 030f 	bic.w	r3, r3, #15
 8002d6a:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <SystemInit+0xdc>)
 8002d6c:	f043 0307 	orr.w	r3, r3, #7
 8002d70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <SystemInit+0xe0>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <SystemInit+0xe0>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <SystemInit+0xe0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <SystemInit+0xe0>)
 8002d86:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <SystemInit+0xe8>)
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <SystemInit+0xe0>)
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <SystemInit+0xec>)
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <SystemInit+0xe0>)
 8002d92:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <SystemInit+0xf0>)
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <SystemInit+0xe0>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <SystemInit+0xe0>)
 8002d9e:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <SystemInit+0xf0>)
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <SystemInit+0xe0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <SystemInit+0xe0>)
 8002daa:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <SystemInit+0xf0>)
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <SystemInit+0xe0>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <SystemInit+0xe0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <SystemInit+0xe0>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <SystemInit+0xe0>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <SystemInit+0xf4>)
 8002dc8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <SystemInit+0xd8>)
 8002dd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dd4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00
 8002de4:	52002000 	.word	0x52002000
 8002de8:	58024400 	.word	0x58024400
 8002dec:	eaf6ed7f 	.word	0xeaf6ed7f
 8002df0:	02020200 	.word	0x02020200
 8002df4:	01ff0000 	.word	0x01ff0000
 8002df8:	01010280 	.word	0x01010280
 8002dfc:	52004000 	.word	0x52004000

08002e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e38 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e04:	f7ff ff80 	bl	8002d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e0a:	e003      	b.n	8002e14 <LoopCopyDataInit>

08002e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e12:	3104      	adds	r1, #4

08002e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e14:	480a      	ldr	r0, [pc, #40]	; (8002e40 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e1c:	d3f6      	bcc.n	8002e0c <CopyDataInit>
  ldr  r2, =_sbss
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002e20:	e002      	b.n	8002e28 <LoopFillZerobss>

08002e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e24:	f842 3b04 	str.w	r3, [r2], #4

08002e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e2c:	d3f9      	bcc.n	8002e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f00a fb63 	bl	800d4f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e32:	f7fd fdb1 	bl	8000998 <main>
  bx  lr    
 8002e36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e38:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8002e3c:	0800d648 	.word	0x0800d648
  ldr  r0, =_sdata
 8002e40:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002e44:	240005c0 	.word	0x240005c0
  ldr  r2, =_sbss
 8002e48:	240005c0 	.word	0x240005c0
  ldr  r3, = _ebss
 8002e4c:	24000d08 	.word	0x24000d08

08002e50 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC3_IRQHandler>
	...

08002e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	f001 ff93 	bl	8004d86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e60:	f004 f95c 	bl	800711c <HAL_RCC_GetSysClockFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_Init+0x68>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	4913      	ldr	r1, [pc, #76]	; (8002ec0 <HAL_Init+0x6c>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_Init+0x68>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <HAL_Init+0x6c>)
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <HAL_Init+0x70>)
 8002e96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e98:	4a0b      	ldr	r2, [pc, #44]	; (8002ec8 <HAL_Init+0x74>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7ff fe5c 	bl	8002b5c <HAL_InitTick>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e002      	b.n	8002eb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002eae:	f7ff f8d9 	bl	8002064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	0800d600 	.word	0x0800d600
 8002ec4:	240005b4 	.word	0x240005b4
 8002ec8:	240005b0 	.word	0x240005b0

08002ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_IncTick+0x20>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_IncTick+0x24>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_IncTick+0x24>)
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	240005bc 	.word	0x240005bc
 8002ef0:	24000d04 	.word	0x24000d04

08002ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_GetTick+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	24000d04 	.word	0x24000d04

08002f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff ffee 	bl	8002ef4 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f24:	d005      	beq.n	8002f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_Delay+0x44>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4413      	add	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f32:	bf00      	nop
 8002f34:	f7ff ffde 	bl	8002ef4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d8f7      	bhi.n	8002f34 <HAL_Delay+0x28>
  {
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	240005bc 	.word	0x240005bc

08002f54 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	4904      	ldr	r1, [pc, #16]	; (8002f7c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	58000400 	.word	0x58000400

08002f80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3360      	adds	r3, #96	; 0x60
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a10      	ldr	r2, [pc, #64]	; (8003048 <LL_ADC_SetOffset+0x60>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10b      	bne.n	8003024 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4313      	orrs	r3, r2
 800301a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003022:	e00b      	b.n	800303c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	431a      	orrs	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	601a      	str	r2, [r3, #0]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	58026000 	.word	0x58026000

0800304c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3360      	adds	r3, #96	; 0x60
 800305a:	461a      	mov	r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	611a      	str	r2, [r3, #16]
}
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00e      	beq.n	80030de <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3360      	adds	r3, #96	; 0x60
 80030c4:	461a      	mov	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	431a      	orrs	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	601a      	str	r2, [r3, #0]
  }
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	58026000 	.word	0x58026000

080030f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4a0c      	ldr	r2, [pc, #48]	; (8003130 <LL_ADC_SetOffsetSaturation+0x40>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10e      	bne.n	8003122 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3360      	adds	r3, #96	; 0x60
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	431a      	orrs	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	58026000 	.word	0x58026000

08003134 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <LL_ADC_SetOffsetSign+0x40>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10e      	bne.n	8003166 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3360      	adds	r3, #96	; 0x60
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	58026000 	.word	0x58026000

08003178 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3360      	adds	r3, #96	; 0x60
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <LL_ADC_SetOffsetState+0x50>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80031aa:	e007      	b.n	80031bc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	601a      	str	r2, [r3, #0]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	58026000 	.word	0x58026000

080031cc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3330      	adds	r3, #48	; 0x30
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	4413      	add	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	211f      	movs	r1, #31
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	401a      	ands	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	f003 011f 	and.w	r1, r3, #31
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	431a      	orrs	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003218:	bf00      	nop
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3314      	adds	r3, #20
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	0e5b      	lsrs	r3, r3, #25
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	4413      	add	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	0d1b      	lsrs	r3, r3, #20
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	2107      	movs	r1, #7
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	401a      	ands	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	0d1b      	lsrs	r3, r3, #20
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	431a      	orrs	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d115      	bne.n	80032bc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800329c:	43db      	mvns	r3, r3
 800329e:	401a      	ands	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0318 	and.w	r3, r3, #24
 80032a6:	4914      	ldr	r1, [pc, #80]	; (80032f8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032a8:	40d9      	lsrs	r1, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	400b      	ands	r3, r1
 80032ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032b2:	431a      	orrs	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80032ba:	e014      	b.n	80032e6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c8:	43db      	mvns	r3, r3
 80032ca:	401a      	ands	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0318 	and.w	r3, r3, #24
 80032d2:	4909      	ldr	r1, [pc, #36]	; (80032f8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032d4:	40d9      	lsrs	r1, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	400b      	ands	r3, r1
 80032da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032de:	431a      	orrs	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	58026000 	.word	0x58026000
 80032f8:	000fffff 	.word	0x000fffff

080032fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 031f 	and.w	r3, r3, #31
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003326:	4013      	ands	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6093      	str	r3, [r2, #8]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	5fffffc0 	.word	0x5fffffc0

0800333c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800334c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003350:	d101      	bne.n	8003356 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <LL_ADC_EnableInternalRegulator+0x24>)
 8003372:	4013      	ands	r3, r2
 8003374:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	6fffffc0 	.word	0x6fffffc0

0800338c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033a0:	d101      	bne.n	80033a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <LL_ADC_Enable+0x24>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	7fffffc0 	.word	0x7fffffc0

080033dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <LL_ADC_Disable+0x24>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	f043 0202 	orr.w	r2, r3, #2
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	7fffffc0 	.word	0x7fffffc0

08003404 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <LL_ADC_IsEnabled+0x18>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <LL_ADC_IsEnabled+0x1a>
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d101      	bne.n	8003442 <LL_ADC_IsDisableOngoing+0x18>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <LL_ADC_IsDisableOngoing+0x1a>
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <LL_ADC_REG_StartConversion+0x24>)
 800345e:	4013      	ands	r3, r2
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	7fffffc0 	.word	0x7fffffc0

08003478 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b04      	cmp	r3, #4
 800348a:	d101      	bne.n	8003490 <LL_ADC_REG_IsConversionOngoing+0x18>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d101      	bne.n	80034b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1ee      	b.n	80038bc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fe fdd3 	bl	8002098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff19 	bl	800333c <LL_ADC_IsDeepPowerDownEnabled>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d004      	beq.n	800351a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff feff 	bl	8003318 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff34 	bl	800338c <LL_ADC_IsInternalRegulatorEnabled>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d114      	bne.n	8003554 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff18 	bl	8003364 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003534:	4b8e      	ldr	r3, [pc, #568]	; (8003770 <HAL_ADC_Init+0x2ac>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	4a8e      	ldr	r2, [pc, #568]	; (8003774 <HAL_ADC_Init+0x2b0>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	099b      	lsrs	r3, r3, #6
 8003542:	3301      	adds	r3, #1
 8003544:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003546:	e002      	b.n	800354e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	3b01      	subs	r3, #1
 800354c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f9      	bne.n	8003548 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff17 	bl	800338c <LL_ADC_IsInternalRegulatorEnabled>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10d      	bne.n	8003580 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003568:	f043 0210 	orr.w	r2, r3, #16
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003574:	f043 0201 	orr.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff77 	bl	8003478 <LL_ADC_REG_IsConversionOngoing>
 800358a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 8188 	bne.w	80038aa <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f040 8184 	bne.w	80038aa <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035aa:	f043 0202 	orr.w	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff24 	bl	8003404 <LL_ADC_IsEnabled>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d136      	bne.n	8003630 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6c      	ldr	r2, [pc, #432]	; (8003778 <HAL_ADC_Init+0x2b4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_ADC_Init+0x112>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6a      	ldr	r2, [pc, #424]	; (800377c <HAL_ADC_Init+0x2b8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10e      	bne.n	80035f4 <HAL_ADC_Init+0x130>
 80035d6:	4868      	ldr	r0, [pc, #416]	; (8003778 <HAL_ADC_Init+0x2b4>)
 80035d8:	f7ff ff14 	bl	8003404 <LL_ADC_IsEnabled>
 80035dc:	4604      	mov	r4, r0
 80035de:	4867      	ldr	r0, [pc, #412]	; (800377c <HAL_ADC_Init+0x2b8>)
 80035e0:	f7ff ff10 	bl	8003404 <LL_ADC_IsEnabled>
 80035e4:	4603      	mov	r3, r0
 80035e6:	4323      	orrs	r3, r4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e008      	b.n	8003606 <HAL_ADC_Init+0x142>
 80035f4:	4862      	ldr	r0, [pc, #392]	; (8003780 <HAL_ADC_Init+0x2bc>)
 80035f6:	f7ff ff05 	bl	8003404 <LL_ADC_IsEnabled>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5a      	ldr	r2, [pc, #360]	; (8003778 <HAL_ADC_Init+0x2b4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_ADC_Init+0x15a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a58      	ldr	r2, [pc, #352]	; (800377c <HAL_ADC_Init+0x2b8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_ADC_Init+0x15e>
 800361e:	4a59      	ldr	r2, [pc, #356]	; (8003784 <HAL_ADC_Init+0x2c0>)
 8003620:	e000      	b.n	8003624 <HAL_ADC_Init+0x160>
 8003622:	4a59      	ldr	r2, [pc, #356]	; (8003788 <HAL_ADC_Init+0x2c4>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f7ff fca8 	bl	8002f80 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a52      	ldr	r2, [pc, #328]	; (8003780 <HAL_ADC_Init+0x2bc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d129      	bne.n	800368e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7e5b      	ldrb	r3, [r3, #25]
 800363e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003644:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800364a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d013      	beq.n	800367c <HAL_ADC_Init+0x1b8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d00d      	beq.n	8003678 <HAL_ADC_Init+0x1b4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b1c      	cmp	r3, #28
 8003662:	d007      	beq.n	8003674 <HAL_ADC_Init+0x1b0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b18      	cmp	r3, #24
 800366a:	d101      	bne.n	8003670 <HAL_ADC_Init+0x1ac>
 800366c:	2318      	movs	r3, #24
 800366e:	e006      	b.n	800367e <HAL_ADC_Init+0x1ba>
 8003670:	2300      	movs	r3, #0
 8003672:	e004      	b.n	800367e <HAL_ADC_Init+0x1ba>
 8003674:	2310      	movs	r3, #16
 8003676:	e002      	b.n	800367e <HAL_ADC_Init+0x1ba>
 8003678:	2308      	movs	r3, #8
 800367a:	e000      	b.n	800367e <HAL_ADC_Init+0x1ba>
 800367c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800367e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003686:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e00e      	b.n	80036ac <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7e5b      	ldrb	r3, [r3, #25]
 8003692:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003698:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800369e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d106      	bne.n	80036c4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	3b01      	subs	r3, #1
 80036bc:	045b      	lsls	r3, r3, #17
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a26      	ldr	r2, [pc, #152]	; (8003780 <HAL_ADC_Init+0x2bc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d115      	bne.n	8003716 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	4b26      	ldr	r3, [pc, #152]	; (800378c <HAL_ADC_Init+0x2c8>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	611a      	str	r2, [r3, #16]
 8003714:	e009      	b.n	800372a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <HAL_ADC_Init+0x2cc>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	69b9      	ldr	r1, [r7, #24]
 8003726:	430b      	orrs	r3, r1
 8003728:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff fea2 	bl	8003478 <LL_ADC_REG_IsConversionOngoing>
 8003734:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff feaf 	bl	800349e <LL_ADC_INJ_IsConversionOngoing>
 8003740:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 808e 	bne.w	8003866 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f040 808a 	bne.w	8003866 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <HAL_ADC_Init+0x2bc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d11b      	bne.n	8003794 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7e1b      	ldrb	r3, [r3, #24]
 8003760:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003768:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	e018      	b.n	80037a2 <HAL_ADC_Init+0x2de>
 8003770:	240005b0 	.word	0x240005b0
 8003774:	053e2d63 	.word	0x053e2d63
 8003778:	40022000 	.word	0x40022000
 800377c:	40022100 	.word	0x40022100
 8003780:	58026000 	.word	0x58026000
 8003784:	40022300 	.word	0x40022300
 8003788:	58026300 	.word	0x58026300
 800378c:	fff04007 	.word	0xfff04007
 8003790:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7e1b      	ldrb	r3, [r3, #24]
 8003798:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	4b46      	ldr	r3, [pc, #280]	; (80038c4 <HAL_ADC_Init+0x400>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	69b9      	ldr	r1, [r7, #24]
 80037b2:	430b      	orrs	r3, r1
 80037b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d137      	bne.n	8003830 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a3f      	ldr	r2, [pc, #252]	; (80038c8 <HAL_ADC_Init+0x404>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d116      	bne.n	80037fe <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_ADC_Init+0x408>)
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037e2:	4311      	orrs	r1, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037e8:	4311      	orrs	r1, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80037ee:	430a      	orrs	r2, r1
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	611a      	str	r2, [r3, #16]
 80037fc:	e020      	b.n	8003840 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <HAL_ADC_Init+0x40c>)
 8003806:	4013      	ands	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800380c:	3a01      	subs	r2, #1
 800380e:	0411      	lsls	r1, r2, #16
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800381a:	4311      	orrs	r1, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003820:	430a      	orrs	r2, r1
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	611a      	str	r2, [r3, #16]
 800382e:	e007      	b.n	8003840 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1b      	ldr	r2, [pc, #108]	; (80038c8 <HAL_ADC_Init+0x404>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d002      	beq.n	8003866 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 ff25 	bl	80046b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d10c      	bne.n	8003888 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f023 010f 	bic.w	r1, r3, #15
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	1e5a      	subs	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
 8003886:	e007      	b.n	8003898 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 020f 	bic.w	r2, r2, #15
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	f023 0303 	bic.w	r3, r3, #3
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	661a      	str	r2, [r3, #96]	; 0x60
 80038a8:	e007      	b.n	80038ba <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3724      	adds	r7, #36	; 0x24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}
 80038c4:	ffffbffc 	.word	0xffffbffc
 80038c8:	58026000 	.word	0x58026000
 80038cc:	fc00f81f 	.word	0xfc00f81f
 80038d0:	fc00f81e 	.word	0xfc00f81e

080038d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a5c      	ldr	r2, [pc, #368]	; (8003a54 <HAL_ADC_Start+0x180>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_ADC_Start+0x1c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a5b      	ldr	r2, [pc, #364]	; (8003a58 <HAL_ADC_Start+0x184>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_ADC_Start+0x20>
 80038f0:	4b5a      	ldr	r3, [pc, #360]	; (8003a5c <HAL_ADC_Start+0x188>)
 80038f2:	e000      	b.n	80038f6 <HAL_ADC_Start+0x22>
 80038f4:	4b5a      	ldr	r3, [pc, #360]	; (8003a60 <HAL_ADC_Start+0x18c>)
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fd00 	bl	80032fc <LL_ADC_GetMultimode>
 80038fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fdb8 	bl	8003478 <LL_ADC_REG_IsConversionOngoing>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 809a 	bne.w	8003a44 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_ADC_Start+0x4a>
 800391a:	2302      	movs	r3, #2
 800391c:	e095      	b.n	8003a4a <HAL_ADC_Start+0x176>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fdd8 	bl	80044dc <ADC_Enable>
 800392c:	4603      	mov	r3, r0
 800392e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 8081 	bne.w	8003a3a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800393c:	4b49      	ldr	r3, [pc, #292]	; (8003a64 <HAL_ADC_Start+0x190>)
 800393e:	4013      	ands	r3, r2
 8003940:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a42      	ldr	r2, [pc, #264]	; (8003a58 <HAL_ADC_Start+0x184>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d002      	beq.n	8003958 <HAL_ADC_Start+0x84>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	e000      	b.n	800395a <HAL_ADC_Start+0x86>
 8003958:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <HAL_ADC_Start+0x180>)
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	4293      	cmp	r3, r2
 8003960:	d002      	beq.n	8003968 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d106      	bne.n	8003990 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003986:	f023 0206 	bic.w	r2, r3, #6
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	665a      	str	r2, [r3, #100]	; 0x64
 800398e:	e002      	b.n	8003996 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	221c      	movs	r2, #28
 800399c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <HAL_ADC_Start+0x184>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d002      	beq.n	80039b6 <HAL_ADC_Start+0xe2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	e000      	b.n	80039b8 <HAL_ADC_Start+0xe4>
 80039b6:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <HAL_ADC_Start+0x180>)
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	4293      	cmp	r3, r2
 80039be:	d008      	beq.n	80039d2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d002      	beq.n	80039d2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b09      	cmp	r3, #9
 80039d0:	d114      	bne.n	80039fc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fd2b 	bl	8003450 <LL_ADC_REG_StartConversion>
 80039fa:	e025      	b.n	8003a48 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <HAL_ADC_Start+0x184>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d002      	beq.n	8003a18 <HAL_ADC_Start+0x144>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	e000      	b.n	8003a1a <HAL_ADC_Start+0x146>
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <HAL_ADC_Start+0x180>)
 8003a1a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00f      	beq.n	8003a48 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	661a      	str	r2, [r3, #96]	; 0x60
 8003a38:	e006      	b.n	8003a48 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003a42:	e001      	b.n	8003a48 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
 8003a46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40022000 	.word	0x40022000
 8003a58:	40022100 	.word	0x40022100
 8003a5c:	40022300 	.word	0x40022300
 8003a60:	58026300 	.word	0x58026300
 8003a64:	fffff0fe 	.word	0xfffff0fe

08003a68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b0b9      	sub	sp, #228	; 0xe4
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a9e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4ab3      	ldr	r2, [pc, #716]	; (8003d74 <HAL_ADC_ConfigChannel+0x2f0>)
 8003aa6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d102      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x34>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	f000 bcfa 	b.w	80044ac <HAL_ADC_ConfigChannel+0xa28>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fcd7 	bl	8003478 <LL_ADC_REG_IsConversionOngoing>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 84de 	bne.w	800448e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4aa8      	ldr	r2, [pc, #672]	; (8003d78 <HAL_ADC_ConfigChannel+0x2f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d033      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d108      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x76>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	0e9b      	lsrs	r3, r3, #26
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	2201      	movs	r2, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	e01d      	b.n	8003b36 <HAL_ADC_ConfigChannel+0xb2>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b06:	fa93 f3a3 	rbit	r3, r3
 8003b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e004      	b.n	8003b2c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2201      	movs	r2, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	69d1      	ldr	r1, [r2, #28]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	f7ff fb3b 	bl	80031cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fc8c 	bl	8003478 <LL_ADC_REG_IsConversionOngoing>
 8003b60:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fc98 	bl	800349e <LL_ADC_INJ_IsConversionOngoing>
 8003b6e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 8270 	bne.w	800405c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 826b 	bne.w	800405c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6819      	ldr	r1, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	461a      	mov	r2, r3
 8003b94:	f7ff fb46 	bl	8003224 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a76      	ldr	r2, [pc, #472]	; (8003d78 <HAL_ADC_ConfigChannel+0x2f4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10d      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bbc:	e032      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bbe:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <HAL_ADC_ConfigChannel+0x2f8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bca:	d10b      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x160>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	e01d      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x19c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x186>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	089b      	lsrs	r3, r3, #2
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	e00a      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x19c>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d048      	beq.n	8003cbe <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6919      	ldr	r1, [r3, #16]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c3c:	f7ff f9d4 	bl	8002fe8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_ADC_ConfigChannel+0x2f4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d119      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6919      	ldr	r1, [r3, #16]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f7ff fa6c 	bl	8003134 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6919      	ldr	r1, [r3, #16]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d102      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x1f0>
 8003c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c72:	e000      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x1f2>
 8003c74:	2300      	movs	r3, #0
 8003c76:	461a      	mov	r2, r3
 8003c78:	f7ff fa3a 	bl	80030f0 <LL_ADC_SetOffsetSaturation>
 8003c7c:	e1ee      	b.n	800405c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6919      	ldr	r1, [r3, #16]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x212>
 8003c90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c94:	e000      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x214>
 8003c96:	2300      	movs	r3, #0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f7ff fa07 	bl	80030ac <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6919      	ldr	r1, [r3, #16]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	7e1b      	ldrb	r3, [r3, #24]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d102      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x230>
 8003cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cb2:	e000      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x232>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f7ff f9de 	bl	8003078 <LL_ADC_SetDataRightShift>
 8003cbc:	e1ce      	b.n	800405c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a2d      	ldr	r2, [pc, #180]	; (8003d78 <HAL_ADC_ConfigChannel+0x2f4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	f040 8181 	bne.w	8003fcc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff f9bb 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x272>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff f9b0 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	0e9b      	lsrs	r3, r3, #26
 8003cf0:	f003 021f 	and.w	r2, r3, #31
 8003cf4:	e01e      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x2b0>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff f9a5 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003d14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003d1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003d24:	2320      	movs	r3, #32
 8003d26:	e004      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x2c8>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	e01e      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x306>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d107      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003d70:	2320      	movs	r3, #32
 8003d72:	e00a      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x306>
 8003d74:	47ff0000 	.word	0x47ff0000
 8003d78:	58026000 	.word	0x58026000
 8003d7c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003d80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d106      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff f9ee 	bl	8003178 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff f952 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x344>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2101      	movs	r1, #1
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff f947 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	0e9b      	lsrs	r3, r3, #26
 8003dc2:	f003 021f 	and.w	r2, r3, #31
 8003dc6:	e01e      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x382>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff f93c 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003df6:	2320      	movs	r3, #32
 8003df8:	e004      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x39a>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	0e9b      	lsrs	r3, r3, #26
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	e018      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x3cc>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003e3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003e42:	2320      	movs	r3, #32
 8003e44:	e004      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d106      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff f98b 	bl	8003178 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff f8ef 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x40a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f8e4 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003e84:	4603      	mov	r3, r0
 8003e86:	0e9b      	lsrs	r3, r3, #26
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	e01e      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x448>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2102      	movs	r1, #2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff f8d9 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e004      	b.n	8003eca <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x460>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	e014      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x48a>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003f00:	2320      	movs	r3, #32
 8003f02:	e004      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003f04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d106      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2102      	movs	r1, #2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff f92c 	bl	8003178 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2103      	movs	r1, #3
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff f890 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x4c8>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2103      	movs	r1, #3
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff f885 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003f42:	4603      	mov	r3, r0
 8003f44:	0e9b      	lsrs	r3, r3, #26
 8003f46:	f003 021f 	and.w	r2, r3, #31
 8003f4a:	e017      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x4f8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2103      	movs	r1, #3
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff f87a 	bl	800304c <LL_ADC_GetOffsetChannel>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f66:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003f6e:	2320      	movs	r3, #32
 8003f70:	e003      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x510>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0e9b      	lsrs	r3, r3, #26
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	e011      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x534>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fa4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003fac:	2320      	movs	r3, #32
 8003fae:	e003      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d14f      	bne.n	800405c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2103      	movs	r1, #3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff f8d7 	bl	8003178 <LL_ADC_SetOffsetState>
 8003fca:	e047      	b.n	800405c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	069b      	lsls	r3, r3, #26
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d107      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fee:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	069b      	lsls	r3, r3, #26
 8004000:	429a      	cmp	r2, r3
 8004002:	d107      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004012:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800401a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	069b      	lsls	r3, r3, #26
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004036:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	069b      	lsls	r3, r3, #26
 8004048:	429a      	cmp	r2, r3
 800404a:	d107      	bne.n	800405c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800405a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff f9cf 	bl	8003404 <LL_ADC_IsEnabled>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	f040 8219 	bne.w	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	461a      	mov	r2, r3
 800407c:	f7ff f8fe 	bl	800327c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4aa1      	ldr	r2, [pc, #644]	; (800430c <HAL_ADC_ConfigChannel+0x888>)
 8004086:	4293      	cmp	r3, r2
 8004088:	f040 812e 	bne.w	80042e8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x630>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0e9b      	lsrs	r3, r3, #26
 80040a2:	3301      	adds	r3, #1
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2b09      	cmp	r3, #9
 80040aa:	bf94      	ite	ls
 80040ac:	2301      	movls	r3, #1
 80040ae:	2300      	movhi	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e019      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x664>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80040c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80040c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80040cc:	2320      	movs	r3, #32
 80040ce:	e003      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80040d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	3301      	adds	r3, #1
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2b09      	cmp	r3, #9
 80040e0:	bf94      	ite	ls
 80040e2:	2301      	movls	r3, #1
 80040e4:	2300      	movhi	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d079      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d107      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x684>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	0e9b      	lsrs	r3, r3, #26
 80040fe:	3301      	adds	r3, #1
 8004100:	069b      	lsls	r3, r3, #26
 8004102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004106:	e015      	b.n	8004134 <HAL_ADC_ConfigChannel+0x6b0>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004110:	fa93 f3a3 	rbit	r3, r3
 8004114:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004118:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800411a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004120:	2320      	movs	r3, #32
 8004122:	e003      	b.n	800412c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	3301      	adds	r3, #1
 800412e:	069b      	lsls	r3, r3, #26
 8004130:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x6d0>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	0e9b      	lsrs	r3, r3, #26
 8004146:	3301      	adds	r3, #1
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	e017      	b.n	8004184 <HAL_ADC_ConfigChannel+0x700>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415c:	fa93 f3a3 	rbit	r3, r3
 8004160:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800416c:	2320      	movs	r3, #32
 800416e:	e003      	b.n	8004178 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	3301      	adds	r3, #1
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f303 	lsl.w	r3, r1, r3
 8004184:	ea42 0103 	orr.w	r1, r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x726>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0e9b      	lsrs	r3, r3, #26
 800419a:	3301      	adds	r3, #1
 800419c:	f003 021f 	and.w	r2, r3, #31
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	051b      	lsls	r3, r3, #20
 80041a8:	e018      	b.n	80041dc <HAL_ADC_ConfigChannel+0x758>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80041bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80041c2:	2320      	movs	r3, #32
 80041c4:	e003      	b.n	80041ce <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	fab3 f383 	clz	r3, r3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	3301      	adds	r3, #1
 80041d0:	f003 021f 	and.w	r2, r3, #31
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041dc:	430b      	orrs	r3, r1
 80041de:	e07e      	b.n	80042de <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x778>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0e9b      	lsrs	r3, r3, #26
 80041f2:	3301      	adds	r3, #1
 80041f4:	069b      	lsls	r3, r3, #26
 80041f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041fa:	e015      	b.n	8004228 <HAL_ADC_ConfigChannel+0x7a4>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004214:	2320      	movs	r3, #32
 8004216:	e003      	b.n	8004220 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	3301      	adds	r3, #1
 8004222:	069b      	lsls	r3, r3, #26
 8004224:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x7c4>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	0e9b      	lsrs	r3, r3, #26
 800423a:	3301      	adds	r3, #1
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	e017      	b.n	8004278 <HAL_ADC_ConfigChannel+0x7f4>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	61bb      	str	r3, [r7, #24]
  return result;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e003      	b.n	800426c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	ea42 0103 	orr.w	r1, r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10d      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x820>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0e9b      	lsrs	r3, r3, #26
 800428e:	3301      	adds	r3, #1
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	4613      	mov	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4413      	add	r3, r2
 800429a:	3b1e      	subs	r3, #30
 800429c:	051b      	lsls	r3, r3, #20
 800429e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042a2:	e01b      	b.n	80042dc <HAL_ADC_ConfigChannel+0x858>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	fa93 f3a3 	rbit	r3, r3
 80042b0:	60fb      	str	r3, [r7, #12]
  return result;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80042bc:	2320      	movs	r3, #32
 80042be:	e003      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	3301      	adds	r3, #1
 80042ca:	f003 021f 	and.w	r2, r3, #31
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	3b1e      	subs	r3, #30
 80042d6:	051b      	lsls	r3, r3, #20
 80042d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042dc:	430b      	orrs	r3, r1
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	6892      	ldr	r2, [r2, #8]
 80042e2:	4619      	mov	r1, r3
 80042e4:	f7fe ff9e 	bl	8003224 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f280 80d7 	bge.w	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a06      	ldr	r2, [pc, #24]	; (8004310 <HAL_ADC_ConfigChannel+0x88c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_ADC_ConfigChannel+0x882>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a04      	ldr	r2, [pc, #16]	; (8004314 <HAL_ADC_ConfigChannel+0x890>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10a      	bne.n	800431c <HAL_ADC_ConfigChannel+0x898>
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <HAL_ADC_ConfigChannel+0x894>)
 8004308:	e009      	b.n	800431e <HAL_ADC_ConfigChannel+0x89a>
 800430a:	bf00      	nop
 800430c:	47ff0000 	.word	0x47ff0000
 8004310:	40022000 	.word	0x40022000
 8004314:	40022100 	.word	0x40022100
 8004318:	40022300 	.word	0x40022300
 800431c:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <HAL_ADC_ConfigChannel+0xa30>)
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fe54 	bl	8002fcc <LL_ADC_GetCommonPathInternalCh>
 8004324:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a62      	ldr	r2, [pc, #392]	; (80044b8 <HAL_ADC_ConfigChannel+0xa34>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_ADC_ConfigChannel+0x8b8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a61      	ldr	r2, [pc, #388]	; (80044bc <HAL_ADC_ConfigChannel+0xa38>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d10e      	bne.n	800435a <HAL_ADC_ConfigChannel+0x8d6>
 800433c:	485e      	ldr	r0, [pc, #376]	; (80044b8 <HAL_ADC_ConfigChannel+0xa34>)
 800433e:	f7ff f861 	bl	8003404 <LL_ADC_IsEnabled>
 8004342:	4604      	mov	r4, r0
 8004344:	485d      	ldr	r0, [pc, #372]	; (80044bc <HAL_ADC_ConfigChannel+0xa38>)
 8004346:	f7ff f85d 	bl	8003404 <LL_ADC_IsEnabled>
 800434a:	4603      	mov	r3, r0
 800434c:	4323      	orrs	r3, r4
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf0c      	ite	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	2300      	movne	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	e008      	b.n	800436c <HAL_ADC_ConfigChannel+0x8e8>
 800435a:	4859      	ldr	r0, [pc, #356]	; (80044c0 <HAL_ADC_ConfigChannel+0xa3c>)
 800435c:	f7ff f852 	bl	8003404 <LL_ADC_IsEnabled>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8084 	beq.w	800447a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a53      	ldr	r2, [pc, #332]	; (80044c4 <HAL_ADC_ConfigChannel+0xa40>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d132      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x95e>
 800437c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d12c      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a4c      	ldr	r2, [pc, #304]	; (80044c0 <HAL_ADC_ConfigChannel+0xa3c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	f040 8086 	bne.w	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a47      	ldr	r2, [pc, #284]	; (80044b8 <HAL_ADC_ConfigChannel+0xa34>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_ADC_ConfigChannel+0x924>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a46      	ldr	r2, [pc, #280]	; (80044bc <HAL_ADC_ConfigChannel+0xa38>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x928>
 80043a8:	4a47      	ldr	r2, [pc, #284]	; (80044c8 <HAL_ADC_ConfigChannel+0xa44>)
 80043aa:	e000      	b.n	80043ae <HAL_ADC_ConfigChannel+0x92a>
 80043ac:	4a41      	ldr	r2, [pc, #260]	; (80044b4 <HAL_ADC_ConfigChannel+0xa30>)
 80043ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7fe fdf4 	bl	8002fa6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043be:	4b43      	ldr	r3, [pc, #268]	; (80044cc <HAL_ADC_ConfigChannel+0xa48>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	4a42      	ldr	r2, [pc, #264]	; (80044d0 <HAL_ADC_ConfigChannel+0xa4c>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	3301      	adds	r3, #1
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043d2:	e002      	b.n	80043da <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f9      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043e0:	e05e      	b.n	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a3b      	ldr	r2, [pc, #236]	; (80044d4 <HAL_ADC_ConfigChannel+0xa50>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d120      	bne.n	800442e <HAL_ADC_ConfigChannel+0x9aa>
 80043ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11a      	bne.n	800442e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	; (80044c0 <HAL_ADC_ConfigChannel+0xa3c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d14e      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2c      	ldr	r2, [pc, #176]	; (80044b8 <HAL_ADC_ConfigChannel+0xa34>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_ADC_ConfigChannel+0x992>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <HAL_ADC_ConfigChannel+0xa38>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_ADC_ConfigChannel+0x996>
 8004416:	4a2c      	ldr	r2, [pc, #176]	; (80044c8 <HAL_ADC_ConfigChannel+0xa44>)
 8004418:	e000      	b.n	800441c <HAL_ADC_ConfigChannel+0x998>
 800441a:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <HAL_ADC_ConfigChannel+0xa30>)
 800441c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f7fe fdbd 	bl	8002fa6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800442c:	e038      	b.n	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a29      	ldr	r2, [pc, #164]	; (80044d8 <HAL_ADC_ConfigChannel+0xa54>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d133      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
 8004438:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800443c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d12d      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_ADC_ConfigChannel+0xa3c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d128      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <HAL_ADC_ConfigChannel+0xa34>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d004      	beq.n	8004462 <HAL_ADC_ConfigChannel+0x9de>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a17      	ldr	r2, [pc, #92]	; (80044bc <HAL_ADC_ConfigChannel+0xa38>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x9e2>
 8004462:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <HAL_ADC_ConfigChannel+0xa44>)
 8004464:	e000      	b.n	8004468 <HAL_ADC_ConfigChannel+0x9e4>
 8004466:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <HAL_ADC_ConfigChannel+0xa30>)
 8004468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800446c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f7fe fd97 	bl	8002fa6 <LL_ADC_SetCommonPathInternalCh>
 8004478:	e012      	b.n	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800448c:	e008      	b.n	80044a0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80044a8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	37e4      	adds	r7, #228	; 0xe4
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd90      	pop	{r4, r7, pc}
 80044b4:	58026300 	.word	0x58026300
 80044b8:	40022000 	.word	0x40022000
 80044bc:	40022100 	.word	0x40022100
 80044c0:	58026000 	.word	0x58026000
 80044c4:	c7520000 	.word	0xc7520000
 80044c8:	40022300 	.word	0x40022300
 80044cc:	240005b0 	.word	0x240005b0
 80044d0:	053e2d63 	.word	0x053e2d63
 80044d4:	c3210000 	.word	0xc3210000
 80044d8:	cb840000 	.word	0xcb840000

080044dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe ff8b 	bl	8003404 <LL_ADC_IsEnabled>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d16e      	bne.n	80045d2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	4b38      	ldr	r3, [pc, #224]	; (80045dc <ADC_Enable+0x100>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	f043 0210 	orr.w	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004512:	f043 0201 	orr.w	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e05a      	b.n	80045d4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe ff46 	bl	80033b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004528:	f7fe fce4 	bl	8002ef4 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2b      	ldr	r2, [pc, #172]	; (80045e0 <ADC_Enable+0x104>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <ADC_Enable+0x66>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a29      	ldr	r2, [pc, #164]	; (80045e4 <ADC_Enable+0x108>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <ADC_Enable+0x6a>
 8004542:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <ADC_Enable+0x10c>)
 8004544:	e000      	b.n	8004548 <ADC_Enable+0x6c>
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <ADC_Enable+0x110>)
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe fed7 	bl	80032fc <LL_ADC_GetMultimode>
 800454e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a23      	ldr	r2, [pc, #140]	; (80045e4 <ADC_Enable+0x108>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d002      	beq.n	8004560 <ADC_Enable+0x84>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	e000      	b.n	8004562 <ADC_Enable+0x86>
 8004560:	4b1f      	ldr	r3, [pc, #124]	; (80045e0 <ADC_Enable+0x104>)
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	4293      	cmp	r3, r2
 8004568:	d02c      	beq.n	80045c4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d130      	bne.n	80045d2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004570:	e028      	b.n	80045c4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe ff44 	bl	8003404 <LL_ADC_IsEnabled>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe ff14 	bl	80033b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800458c:	f7fe fcb2 	bl	8002ef4 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d914      	bls.n	80045c4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d00d      	beq.n	80045c4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	f043 0210 	orr.w	r2, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b8:	f043 0201 	orr.w	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e007      	b.n	80045d4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d1cf      	bne.n	8004572 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	8000003f 	.word	0x8000003f
 80045e0:	40022000 	.word	0x40022000
 80045e4:	40022100 	.word	0x40022100
 80045e8:	40022300 	.word	0x40022300
 80045ec:	58026300 	.word	0x58026300

080045f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe ff14 	bl	800342a <LL_ADC_IsDisableOngoing>
 8004602:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fefb 	bl	8003404 <LL_ADC_IsEnabled>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d047      	beq.n	80046a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d144      	bne.n	80046a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 030d 	and.w	r3, r3, #13
 8004624:	2b01      	cmp	r3, #1
 8004626:	d10c      	bne.n	8004642 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fed5 	bl	80033dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2203      	movs	r2, #3
 8004638:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800463a:	f7fe fc5b 	bl	8002ef4 <HAL_GetTick>
 800463e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004640:	e029      	b.n	8004696 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004646:	f043 0210 	orr.w	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004652:	f043 0201 	orr.w	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e023      	b.n	80046a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800465e:	f7fe fc49 	bl	8002ef4 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d914      	bls.n	8004696 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467e:	f043 0210 	orr.w	r2, r3, #16
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e007      	b.n	80046a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1dc      	bne.n	800465e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a6b      	ldr	r2, [pc, #428]	; (800486c <ADC_ConfigureBoostMode+0x1bc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <ADC_ConfigureBoostMode+0x1c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a6a      	ldr	r2, [pc, #424]	; (8004870 <ADC_ConfigureBoostMode+0x1c0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d109      	bne.n	80046e0 <ADC_ConfigureBoostMode+0x30>
 80046cc:	4b69      	ldr	r3, [pc, #420]	; (8004874 <ADC_ConfigureBoostMode+0x1c4>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	e008      	b.n	80046f2 <ADC_ConfigureBoostMode+0x42>
 80046e0:	4b65      	ldr	r3, [pc, #404]	; (8004878 <ADC_ConfigureBoostMode+0x1c8>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf14      	ite	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	2300      	moveq	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01c      	beq.n	8004730 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80046f6:	f002 fe8b 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 80046fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004704:	d010      	beq.n	8004728 <ADC_ConfigureBoostMode+0x78>
 8004706:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800470a:	d871      	bhi.n	80047f0 <ADC_ConfigureBoostMode+0x140>
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004710:	d002      	beq.n	8004718 <ADC_ConfigureBoostMode+0x68>
 8004712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004716:	d16b      	bne.n	80047f0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	0c1b      	lsrs	r3, r3, #16
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	60fb      	str	r3, [r7, #12]
        break;
 8004726:	e066      	b.n	80047f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	60fb      	str	r3, [r7, #12]
        break;
 800472e:	e062      	b.n	80047f6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004730:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004734:	f003 fe04 	bl	8008340 <HAL_RCCEx_GetPeriphCLKFreq>
 8004738:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004742:	d051      	beq.n	80047e8 <ADC_ConfigureBoostMode+0x138>
 8004744:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004748:	d854      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x144>
 800474a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800474e:	d047      	beq.n	80047e0 <ADC_ConfigureBoostMode+0x130>
 8004750:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004754:	d84e      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x144>
 8004756:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800475a:	d03d      	beq.n	80047d8 <ADC_ConfigureBoostMode+0x128>
 800475c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004760:	d848      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x144>
 8004762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004766:	d033      	beq.n	80047d0 <ADC_ConfigureBoostMode+0x120>
 8004768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800476c:	d842      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x144>
 800476e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004772:	d029      	beq.n	80047c8 <ADC_ConfigureBoostMode+0x118>
 8004774:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004778:	d83c      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x144>
 800477a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800477e:	d01a      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x106>
 8004780:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004784:	d836      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x144>
 8004786:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800478a:	d014      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x106>
 800478c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004790:	d830      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x144>
 8004792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004796:	d00e      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x106>
 8004798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479c:	d82a      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x144>
 800479e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047a2:	d008      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x106>
 80047a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047a8:	d824      	bhi.n	80047f4 <ADC_ConfigureBoostMode+0x144>
 80047aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047ae:	d002      	beq.n	80047b6 <ADC_ConfigureBoostMode+0x106>
 80047b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047b4:	d11e      	bne.n	80047f4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	0c9b      	lsrs	r3, r3, #18
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	60fb      	str	r3, [r7, #12]
        break;
 80047c6:	e016      	b.n	80047f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	60fb      	str	r3, [r7, #12]
        break;
 80047ce:	e012      	b.n	80047f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	60fb      	str	r3, [r7, #12]
        break;
 80047d6:	e00e      	b.n	80047f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	60fb      	str	r3, [r7, #12]
        break;
 80047de:	e00a      	b.n	80047f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	09db      	lsrs	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]
        break;
 80047e6:	e006      	b.n	80047f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	60fb      	str	r3, [r7, #12]
        break;
 80047ee:	e002      	b.n	80047f6 <ADC_ConfigureBoostMode+0x146>
        break;
 80047f0:	bf00      	nop
 80047f2:	e000      	b.n	80047f6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80047f4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a1f      	ldr	r2, [pc, #124]	; (800487c <ADC_ConfigureBoostMode+0x1cc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d808      	bhi.n	8004816 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004812:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004814:	e025      	b.n	8004862 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a19      	ldr	r2, [pc, #100]	; (8004880 <ADC_ConfigureBoostMode+0x1d0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d80a      	bhi.n	8004834 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004830:	609a      	str	r2, [r3, #8]
}
 8004832:	e016      	b.n	8004862 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a13      	ldr	r2, [pc, #76]	; (8004884 <ADC_ConfigureBoostMode+0x1d4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d80a      	bhi.n	8004852 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	e007      	b.n	8004862 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004860:	609a      	str	r2, [r3, #8]
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40022000 	.word	0x40022000
 8004870:	40022100 	.word	0x40022100
 8004874:	40022300 	.word	0x40022300
 8004878:	58026300 	.word	0x58026300
 800487c:	005f5e10 	.word	0x005f5e10
 8004880:	00bebc20 	.word	0x00bebc20
 8004884:	017d7840 	.word	0x017d7840

08004888 <LL_ADC_IsEnabled>:
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <LL_ADC_IsEnabled+0x18>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <LL_ADC_IsEnabled+0x1a>
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <LL_ADC_StartCalibration>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <LL_ADC_StartCalibration+0x38>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048d0:	430a      	orrs	r2, r1
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	3ffeffc0 	.word	0x3ffeffc0

080048ec <LL_ADC_IsCalibrationOnGoing>:
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004900:	d101      	bne.n	8004906 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_ADC_REG_IsConversionOngoing>:
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b04      	cmp	r3, #4
 8004926:	d101      	bne.n	800492c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_ADCEx_Calibration_Start+0x1e>
 8004956:	2302      	movs	r3, #2
 8004958:	e04c      	b.n	80049f4 <HAL_ADCEx_Calibration_Start+0xb8>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7ff fe44 	bl	80045f0 <ADC_Disable>
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d135      	bne.n	80049de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004976:	4b21      	ldr	r3, [pc, #132]	; (80049fc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004978:	4013      	ands	r3, r2
 800497a:	f043 0202 	orr.w	r2, r3, #2
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff ff90 	bl	80048b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004990:	e014      	b.n	80049bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3301      	adds	r3, #1
 8004996:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <HAL_ADCEx_Calibration_Start+0xc4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d30d      	bcc.n	80049bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a4:	f023 0312 	bic.w	r3, r3, #18
 80049a8:	f043 0210 	orr.w	r2, r3, #16
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e01b      	b.n	80049f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff93 	bl	80048ec <LL_ADC_IsCalibrationOnGoing>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e2      	bne.n	8004992 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d0:	f023 0303 	bic.w	r3, r3, #3
 80049d4:	f043 0201 	orr.w	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	661a      	str	r2, [r3, #96]	; 0x60
 80049dc:	e005      	b.n	80049ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e2:	f043 0210 	orr.w	r2, r3, #16
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	ffffeefd 	.word	0xffffeefd
 8004a00:	25c3f800 	.word	0x25c3f800

08004a04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b0a3      	sub	sp, #140	; 0x8c
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0c1      	b.n	8004ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a5e      	ldr	r2, [pc, #376]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d102      	bne.n	8004a42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a3c:	4b5d      	ldr	r3, [pc, #372]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e001      	b.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0a0      	b.n	8004ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff54 	bl	8004914 <LL_ADC_REG_IsConversionOngoing>
 8004a6c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff ff4d 	bl	8004914 <LL_ADC_REG_IsConversionOngoing>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 8081 	bne.w	8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d17c      	bne.n	8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a48      	ldr	r2, [pc, #288]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a46      	ldr	r2, [pc, #280]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d101      	bne.n	8004aa2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a9e:	4b46      	ldr	r3, [pc, #280]	; (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004aa0:	e000      	b.n	8004aa4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004aa2:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004aa4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d039      	beq.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004abe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a3a      	ldr	r2, [pc, #232]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a39      	ldr	r2, [pc, #228]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10e      	bne.n	8004af2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004ad4:	4836      	ldr	r0, [pc, #216]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ad6:	f7ff fed7 	bl	8004888 <LL_ADC_IsEnabled>
 8004ada:	4604      	mov	r4, r0
 8004adc:	4835      	ldr	r0, [pc, #212]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ade:	f7ff fed3 	bl	8004888 <LL_ADC_IsEnabled>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4323      	orrs	r3, r4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	e008      	b.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004af2:	4833      	ldr	r0, [pc, #204]	; (8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004af4:	f7ff fec8 	bl	8004888 <LL_ADC_IsEnabled>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf0c      	ite	eq
 8004afe:	2301      	moveq	r3, #1
 8004b00:	2300      	movne	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d047      	beq.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	6811      	ldr	r1, [r2, #0]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	6892      	ldr	r2, [r2, #8]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b1e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b20:	e03a      	b.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004b22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b2c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10e      	bne.n	8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004b42:	481b      	ldr	r0, [pc, #108]	; (8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b44:	f7ff fea0 	bl	8004888 <LL_ADC_IsEnabled>
 8004b48:	4604      	mov	r4, r0
 8004b4a:	481a      	ldr	r0, [pc, #104]	; (8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b4c:	f7ff fe9c 	bl	8004888 <LL_ADC_IsEnabled>
 8004b50:	4603      	mov	r3, r0
 8004b52:	4323      	orrs	r3, r4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e008      	b.n	8004b72 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004b60:	4817      	ldr	r0, [pc, #92]	; (8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004b62:	f7ff fe91 	bl	8004888 <LL_ADC_IsEnabled>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004b80:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b82:	e009      	b.n	8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004b96:	e000      	b.n	8004b9a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ba2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	378c      	adds	r7, #140	; 0x8c
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd90      	pop	{r4, r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40022000 	.word	0x40022000
 8004bb4:	40022100 	.word	0x40022100
 8004bb8:	40022300 	.word	0x40022300
 8004bbc:	58026300 	.word	0x58026300
 8004bc0:	58026000 	.word	0x58026000
 8004bc4:	fffff0e0 	.word	0xfffff0e0

08004bc8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e023      	b.n	8004c22 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fd fb28 	bl	8002244 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <__NVIC_SetPriorityGrouping>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <__NVIC_SetPriorityGrouping+0x40>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <__NVIC_SetPriorityGrouping+0x44>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c5a:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <__NVIC_SetPriorityGrouping+0x40>)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	60d3      	str	r3, [r2, #12]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	e000ed00 	.word	0xe000ed00
 8004c70:	05fa0000 	.word	0x05fa0000

08004c74 <__NVIC_GetPriorityGrouping>:
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <__NVIC_GetPriorityGrouping+0x18>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	f003 0307 	and.w	r3, r3, #7
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <__NVIC_EnableIRQ>:
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	db0b      	blt.n	8004cba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	f003 021f 	and.w	r2, r3, #31
 8004ca8:	4907      	ldr	r1, [pc, #28]	; (8004cc8 <__NVIC_EnableIRQ+0x38>)
 8004caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000e100 	.word	0xe000e100

08004ccc <__NVIC_SetPriority>:
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	db0a      	blt.n	8004cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	490c      	ldr	r1, [pc, #48]	; (8004d18 <__NVIC_SetPriority+0x4c>)
 8004ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cea:	0112      	lsls	r2, r2, #4
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cf4:	e00a      	b.n	8004d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	4908      	ldr	r1, [pc, #32]	; (8004d1c <__NVIC_SetPriority+0x50>)
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	3b04      	subs	r3, #4
 8004d04:	0112      	lsls	r2, r2, #4
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	440b      	add	r3, r1
 8004d0a:	761a      	strb	r2, [r3, #24]
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000e100 	.word	0xe000e100
 8004d1c:	e000ed00 	.word	0xe000ed00

08004d20 <NVIC_EncodePriority>:
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f1c3 0307 	rsb	r3, r3, #7
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	bf28      	it	cs
 8004d3e:	2304      	movcs	r3, #4
 8004d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	3304      	adds	r3, #4
 8004d46:	2b06      	cmp	r3, #6
 8004d48:	d902      	bls.n	8004d50 <NVIC_EncodePriority+0x30>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3b03      	subs	r3, #3
 8004d4e:	e000      	b.n	8004d52 <NVIC_EncodePriority+0x32>
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	401a      	ands	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d68:	f04f 31ff 	mov.w	r1, #4294967295
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	43d9      	mvns	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d78:	4313      	orrs	r3, r2
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ff4c 	bl	8004c2c <__NVIC_SetPriorityGrouping>
}
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004daa:	f7ff ff63 	bl	8004c74 <__NVIC_GetPriorityGrouping>
 8004dae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	6978      	ldr	r0, [r7, #20]
 8004db6:	f7ff ffb3 	bl	8004d20 <NVIC_EncodePriority>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff ff82 	bl	8004ccc <__NVIC_SetPriority>
}
 8004dc8:	bf00      	nop
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff ff56 	bl	8004c90 <__NVIC_EnableIRQ>
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0b4      	b.n	8004f68 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8004dfe:	4b5c      	ldr	r3, [pc, #368]	; (8004f70 <HAL_DFSDM_ChannelInit+0x184>)
 8004e00:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8004e02:	4b5c      	ldr	r3, [pc, #368]	; (8004f74 <HAL_DFSDM_ChannelInit+0x188>)
 8004e04:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8004e06:	4b5c      	ldr	r3, [pc, #368]	; (8004f78 <HAL_DFSDM_ChannelInit+0x18c>)
 8004e08:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fa10 	bl	8005234 <DFSDM_GetChannelFromInstance>
 8004e14:	4603      	mov	r3, r0
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e0a0      	b.n	8004f68 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fd faf4 	bl	8002414 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d125      	bne.n	8004e8a <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	791b      	ldrb	r3, [r3, #4]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d108      	bne.n	8004e7e <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004e98:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004ea8:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004eae:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 020f 	bic.w	r2, r2, #15
 8004ec6:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004eee:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6899      	ldr	r1, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f002 0207 	and.w	r2, r2, #7
 8004f1a:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f46:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f96d 	bl	8005234 <DFSDM_GetChannelFromInstance>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	24000c94 	.word	0x24000c94
 8004f74:	24000c98 	.word	0x24000c98
 8004f78:	40017800 	.word	0x40017800

08004f7c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0c8      	b.n	8005120 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 8004f8e:	4b66      	ldr	r3, [pc, #408]	; (8005128 <HAL_DFSDM_FilterInit+0x1ac>)
 8004f90:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d109      	bne.n	8004fb0 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d003      	beq.n	8004fac <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0b7      	b.n	8005120 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fd f95d 	bl	8002288 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004fdc:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	7a1b      	ldrb	r3, [r3, #8]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d108      	bne.n	8004ff8 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e007      	b.n	8005008 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005006:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	7a5b      	ldrb	r3, [r3, #9]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d108      	bne.n	8005022 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e007      	b.n	8005032 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005030:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6819      	ldr	r1, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4b3b      	ldr	r3, [pc, #236]	; (800512c <HAL_DFSDM_FilterInit+0x1b0>)
 800503e:	400b      	ands	r3, r1
 8005040:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d108      	bne.n	800505c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	7c1b      	ldrb	r3, [r3, #16]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d108      	bne.n	8005076 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0210 	orr.w	r2, r2, #16
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e007      	b.n	8005086 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0210 	bic.w	r2, r2, #16
 8005084:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	7c5b      	ldrb	r3, [r3, #17]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d108      	bne.n	80050a0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0220 	orr.w	r2, r2, #32
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e007      	b.n	80050b0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0220 	bic.w	r2, r2, #32
 80050ae:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6959      	ldr	r1, [r3, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <HAL_DFSDM_FilterInit+0x1b4>)
 80050bc:	400b      	ands	r3, r1
 80050be:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6959      	ldr	r1, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80050d2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80050da:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	7c1a      	ldrb	r2, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40017900 	.word	0x40017900
 800512c:	ffff80f7 	.word	0xffff80f7
 8005130:	1c00ff00 	.word	0x1c00ff00

08005134 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d02c      	beq.n	80051a8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8005154:	2bff      	cmp	r3, #255	; 0xff
 8005156:	d027      	beq.n	80051a8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6819      	ldr	r1, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4b16      	ldr	r3, [pc, #88]	; (80051bc <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8005164:	400b      	ands	r3, r1
 8005166:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d10d      	bne.n	800518a <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800517c:	431a      	orrs	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	e00a      	b.n	80051a0 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
 80051a6:	e001      	b.n	80051ac <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	f8fbffff 	.word	0xf8fbffff

080051c0 <HAL_DFSDM_FilterRegularStart>:
  *         in idle state or if injected conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d004      	beq.n	80051e0 <HAL_DFSDM_FilterRegularStart+0x20>
      (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d103      	bne.n	80051e8 <HAL_DFSDM_FilterRegularStart+0x28>
  {
    /* Start regular conversion */
    DFSDM_RegConvStart(hdfsdm_filter);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f873 	bl	80052cc <DFSDM_RegConvStart>
 80051e6:	e001      	b.n	80051ec <HAL_DFSDM_FilterRegularStart+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_DFSDM_FilterGetRegularValue>:
  * @param  Channel Corresponding channel of regular conversion.
  * @retval Regular conversion value
  */
int32_t HAL_DFSDM_FilterGetRegularValue(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t                   *Channel)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(Channel != (void *)0);

  /* Get value of data register for regular channel */
  reg = hdfsdm_filter->Instance->FLTRDATAR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Extract channel and regular conversion value */
  *Channel = (reg & DFSDM_FLTRDATAR_RDATACH);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0207 	and.w	r2, r3, #7
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	601a      	str	r2, [r3, #0]
  /* Regular conversion value is a signed value located on 24 MSB of register */
  /* So after applying a mask on these bits we have to perform a division by 256 (2 raised to the power of 8) */
  reg &= DFSDM_FLTRDATAR_RDATA;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005218:	60fb      	str	r3, [r7, #12]
  value = ((int32_t)reg) / 256;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	da00      	bge.n	8005222 <HAL_DFSDM_FilterGetRegularValue+0x2c>
 8005220:	33ff      	adds	r3, #255	; 0xff
 8005222:	121b      	asrs	r3, r3, #8
 8005224:	60bb      	str	r3, [r7, #8]

  /* return regular conversion value */
  return value;
 8005226:	68bb      	ldr	r3, [r7, #8]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <DFSDM_GetChannelFromInstance+0x7c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d102      	bne.n	800524a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e02b      	b.n	80052a2 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <DFSDM_GetChannelFromInstance+0x80>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d102      	bne.n	8005258 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005252:	2301      	movs	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e024      	b.n	80052a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <DFSDM_GetChannelFromInstance+0x84>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d102      	bne.n	8005266 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005260:	2302      	movs	r3, #2
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e01d      	b.n	80052a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a14      	ldr	r2, [pc, #80]	; (80052bc <DFSDM_GetChannelFromInstance+0x88>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d102      	bne.n	8005274 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800526e:	2303      	movs	r3, #3
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	e016      	b.n	80052a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a12      	ldr	r2, [pc, #72]	; (80052c0 <DFSDM_GetChannelFromInstance+0x8c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d102      	bne.n	8005282 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800527c:	2304      	movs	r3, #4
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e00f      	b.n	80052a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a0f      	ldr	r2, [pc, #60]	; (80052c4 <DFSDM_GetChannelFromInstance+0x90>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d102      	bne.n	8005290 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800528a:	2305      	movs	r3, #5
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e008      	b.n	80052a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a0d      	ldr	r2, [pc, #52]	; (80052c8 <DFSDM_GetChannelFromInstance+0x94>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d102      	bne.n	800529e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8005298:	2306      	movs	r3, #6
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e001      	b.n	80052a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800529e:	2307      	movs	r3, #7
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80052a2:	68fb      	ldr	r3, [r7, #12]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40017800 	.word	0x40017800
 80052b4:	40017820 	.word	0x40017820
 80052b8:	40017840 	.word	0x40017840
 80052bc:	40017860 	.word	0x40017860
 80052c0:	40017880 	.word	0x40017880
 80052c4:	400178a0 	.word	0x400178a0
 80052c8:	400178c0 	.word	0x400178c0

080052cc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d108      	bne.n	80052ee <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e033      	b.n	8005356 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800530c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005324:	2b03      	cmp	r3, #3
 8005326:	d116      	bne.n	8005356 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d107      	bne.n	8005340 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0202 	orr.w	r2, r2, #2
 800533e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8005346:	2b01      	cmp	r3, #1
 8005348:	d102      	bne.n	8005350 <DFSDM_RegConvStart+0x84>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	e000      	b.n	8005352 <DFSDM_RegConvStart+0x86>
 8005350:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <DFSDM_RegConvStart+0x98>
 8005360:	2202      	movs	r2, #2
 8005362:	e000      	b.n	8005366 <DFSDM_RegConvStart+0x9a>
 8005364:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e205      	b.n	8005796 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d004      	beq.n	80053a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2280      	movs	r2, #128	; 0x80
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e1fa      	b.n	8005796 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a8c      	ldr	r2, [pc, #560]	; (80055d8 <HAL_DMA_Abort_IT+0x260>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d04a      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a8b      	ldr	r2, [pc, #556]	; (80055dc <HAL_DMA_Abort_IT+0x264>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d045      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a89      	ldr	r2, [pc, #548]	; (80055e0 <HAL_DMA_Abort_IT+0x268>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d040      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a88      	ldr	r2, [pc, #544]	; (80055e4 <HAL_DMA_Abort_IT+0x26c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d03b      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a86      	ldr	r2, [pc, #536]	; (80055e8 <HAL_DMA_Abort_IT+0x270>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d036      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a85      	ldr	r2, [pc, #532]	; (80055ec <HAL_DMA_Abort_IT+0x274>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d031      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a83      	ldr	r2, [pc, #524]	; (80055f0 <HAL_DMA_Abort_IT+0x278>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02c      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a82      	ldr	r2, [pc, #520]	; (80055f4 <HAL_DMA_Abort_IT+0x27c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d027      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a80      	ldr	r2, [pc, #512]	; (80055f8 <HAL_DMA_Abort_IT+0x280>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d022      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a7f      	ldr	r2, [pc, #508]	; (80055fc <HAL_DMA_Abort_IT+0x284>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d01d      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a7d      	ldr	r2, [pc, #500]	; (8005600 <HAL_DMA_Abort_IT+0x288>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a7c      	ldr	r2, [pc, #496]	; (8005604 <HAL_DMA_Abort_IT+0x28c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a7a      	ldr	r2, [pc, #488]	; (8005608 <HAL_DMA_Abort_IT+0x290>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a79      	ldr	r2, [pc, #484]	; (800560c <HAL_DMA_Abort_IT+0x294>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a77      	ldr	r2, [pc, #476]	; (8005610 <HAL_DMA_Abort_IT+0x298>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_DMA_Abort_IT+0xc8>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a76      	ldr	r2, [pc, #472]	; (8005614 <HAL_DMA_Abort_IT+0x29c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d101      	bne.n	8005444 <HAL_DMA_Abort_IT+0xcc>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <HAL_DMA_Abort_IT+0xce>
 8005444:	2300      	movs	r3, #0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d065      	beq.n	8005516 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2204      	movs	r2, #4
 800544e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a60      	ldr	r2, [pc, #384]	; (80055d8 <HAL_DMA_Abort_IT+0x260>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04a      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a5e      	ldr	r2, [pc, #376]	; (80055dc <HAL_DMA_Abort_IT+0x264>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d045      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a5d      	ldr	r2, [pc, #372]	; (80055e0 <HAL_DMA_Abort_IT+0x268>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d040      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a5b      	ldr	r2, [pc, #364]	; (80055e4 <HAL_DMA_Abort_IT+0x26c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d03b      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5a      	ldr	r2, [pc, #360]	; (80055e8 <HAL_DMA_Abort_IT+0x270>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d036      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a58      	ldr	r2, [pc, #352]	; (80055ec <HAL_DMA_Abort_IT+0x274>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a57      	ldr	r2, [pc, #348]	; (80055f0 <HAL_DMA_Abort_IT+0x278>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d02c      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a55      	ldr	r2, [pc, #340]	; (80055f4 <HAL_DMA_Abort_IT+0x27c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d027      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a54      	ldr	r2, [pc, #336]	; (80055f8 <HAL_DMA_Abort_IT+0x280>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a52      	ldr	r2, [pc, #328]	; (80055fc <HAL_DMA_Abort_IT+0x284>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a51      	ldr	r2, [pc, #324]	; (8005600 <HAL_DMA_Abort_IT+0x288>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a4f      	ldr	r2, [pc, #316]	; (8005604 <HAL_DMA_Abort_IT+0x28c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a4e      	ldr	r2, [pc, #312]	; (8005608 <HAL_DMA_Abort_IT+0x290>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a4c      	ldr	r2, [pc, #304]	; (800560c <HAL_DMA_Abort_IT+0x294>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a4b      	ldr	r2, [pc, #300]	; (8005610 <HAL_DMA_Abort_IT+0x298>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x17a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a49      	ldr	r2, [pc, #292]	; (8005614 <HAL_DMA_Abort_IT+0x29c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d108      	bne.n	8005504 <HAL_DMA_Abort_IT+0x18c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e147      	b.n	8005794 <HAL_DMA_Abort_IT+0x41c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e13e      	b.n	8005794 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 020e 	bic.w	r2, r2, #14
 8005524:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2b      	ldr	r2, [pc, #172]	; (80055d8 <HAL_DMA_Abort_IT+0x260>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d04a      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a29      	ldr	r2, [pc, #164]	; (80055dc <HAL_DMA_Abort_IT+0x264>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d045      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <HAL_DMA_Abort_IT+0x268>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d040      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <HAL_DMA_Abort_IT+0x26c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d03b      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <HAL_DMA_Abort_IT+0x270>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d036      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a23      	ldr	r2, [pc, #140]	; (80055ec <HAL_DMA_Abort_IT+0x274>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d031      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <HAL_DMA_Abort_IT+0x278>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d02c      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a20      	ldr	r2, [pc, #128]	; (80055f4 <HAL_DMA_Abort_IT+0x27c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d027      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <HAL_DMA_Abort_IT+0x280>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d022      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <HAL_DMA_Abort_IT+0x284>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01d      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <HAL_DMA_Abort_IT+0x288>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <HAL_DMA_Abort_IT+0x28c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a19      	ldr	r2, [pc, #100]	; (8005608 <HAL_DMA_Abort_IT+0x290>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a17      	ldr	r2, [pc, #92]	; (800560c <HAL_DMA_Abort_IT+0x294>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a16      	ldr	r2, [pc, #88]	; (8005610 <HAL_DMA_Abort_IT+0x298>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x24e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a14      	ldr	r2, [pc, #80]	; (8005614 <HAL_DMA_Abort_IT+0x29c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d128      	bne.n	8005618 <HAL_DMA_Abort_IT+0x2a0>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e027      	b.n	8005628 <HAL_DMA_Abort_IT+0x2b0>
 80055d8:	40020010 	.word	0x40020010
 80055dc:	40020028 	.word	0x40020028
 80055e0:	40020040 	.word	0x40020040
 80055e4:	40020058 	.word	0x40020058
 80055e8:	40020070 	.word	0x40020070
 80055ec:	40020088 	.word	0x40020088
 80055f0:	400200a0 	.word	0x400200a0
 80055f4:	400200b8 	.word	0x400200b8
 80055f8:	40020410 	.word	0x40020410
 80055fc:	40020428 	.word	0x40020428
 8005600:	40020440 	.word	0x40020440
 8005604:	40020458 	.word	0x40020458
 8005608:	40020470 	.word	0x40020470
 800560c:	40020488 	.word	0x40020488
 8005610:	400204a0 	.word	0x400204a0
 8005614:	400204b8 	.word	0x400204b8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5c      	ldr	r2, [pc, #368]	; (80057a0 <HAL_DMA_Abort_IT+0x428>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d072      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a5b      	ldr	r2, [pc, #364]	; (80057a4 <HAL_DMA_Abort_IT+0x42c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d06d      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a59      	ldr	r2, [pc, #356]	; (80057a8 <HAL_DMA_Abort_IT+0x430>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d068      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a58      	ldr	r2, [pc, #352]	; (80057ac <HAL_DMA_Abort_IT+0x434>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d063      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a56      	ldr	r2, [pc, #344]	; (80057b0 <HAL_DMA_Abort_IT+0x438>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d05e      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a55      	ldr	r2, [pc, #340]	; (80057b4 <HAL_DMA_Abort_IT+0x43c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d059      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a53      	ldr	r2, [pc, #332]	; (80057b8 <HAL_DMA_Abort_IT+0x440>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d054      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a52      	ldr	r2, [pc, #328]	; (80057bc <HAL_DMA_Abort_IT+0x444>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d04f      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a50      	ldr	r2, [pc, #320]	; (80057c0 <HAL_DMA_Abort_IT+0x448>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d04a      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a4f      	ldr	r2, [pc, #316]	; (80057c4 <HAL_DMA_Abort_IT+0x44c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d045      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a4d      	ldr	r2, [pc, #308]	; (80057c8 <HAL_DMA_Abort_IT+0x450>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d040      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a4c      	ldr	r2, [pc, #304]	; (80057cc <HAL_DMA_Abort_IT+0x454>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d03b      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a4a      	ldr	r2, [pc, #296]	; (80057d0 <HAL_DMA_Abort_IT+0x458>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d036      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a49      	ldr	r2, [pc, #292]	; (80057d4 <HAL_DMA_Abort_IT+0x45c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d031      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a47      	ldr	r2, [pc, #284]	; (80057d8 <HAL_DMA_Abort_IT+0x460>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02c      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a46      	ldr	r2, [pc, #280]	; (80057dc <HAL_DMA_Abort_IT+0x464>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d027      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a44      	ldr	r2, [pc, #272]	; (80057e0 <HAL_DMA_Abort_IT+0x468>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d022      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a43      	ldr	r2, [pc, #268]	; (80057e4 <HAL_DMA_Abort_IT+0x46c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d01d      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a41      	ldr	r2, [pc, #260]	; (80057e8 <HAL_DMA_Abort_IT+0x470>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d018      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a40      	ldr	r2, [pc, #256]	; (80057ec <HAL_DMA_Abort_IT+0x474>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a3e      	ldr	r2, [pc, #248]	; (80057f0 <HAL_DMA_Abort_IT+0x478>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00e      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a3d      	ldr	r2, [pc, #244]	; (80057f4 <HAL_DMA_Abort_IT+0x47c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d009      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a3b      	ldr	r2, [pc, #236]	; (80057f8 <HAL_DMA_Abort_IT+0x480>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_DMA_Abort_IT+0x3a0>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a3a      	ldr	r2, [pc, #232]	; (80057fc <HAL_DMA_Abort_IT+0x484>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d101      	bne.n	800571c <HAL_DMA_Abort_IT+0x3a4>
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <HAL_DMA_Abort_IT+0x3a6>
 800571c:	2300      	movs	r3, #0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d028      	beq.n	8005774 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005730:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005736:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2201      	movs	r2, #1
 8005742:	409a      	lsls	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005750:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00c      	beq.n	8005774 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005768:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005772:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40020010 	.word	0x40020010
 80057a4:	40020028 	.word	0x40020028
 80057a8:	40020040 	.word	0x40020040
 80057ac:	40020058 	.word	0x40020058
 80057b0:	40020070 	.word	0x40020070
 80057b4:	40020088 	.word	0x40020088
 80057b8:	400200a0 	.word	0x400200a0
 80057bc:	400200b8 	.word	0x400200b8
 80057c0:	40020410 	.word	0x40020410
 80057c4:	40020428 	.word	0x40020428
 80057c8:	40020440 	.word	0x40020440
 80057cc:	40020458 	.word	0x40020458
 80057d0:	40020470 	.word	0x40020470
 80057d4:	40020488 	.word	0x40020488
 80057d8:	400204a0 	.word	0x400204a0
 80057dc:	400204b8 	.word	0x400204b8
 80057e0:	58025408 	.word	0x58025408
 80057e4:	5802541c 	.word	0x5802541c
 80057e8:	58025430 	.word	0x58025430
 80057ec:	58025444 	.word	0x58025444
 80057f0:	58025458 	.word	0x58025458
 80057f4:	5802546c 	.word	0x5802546c
 80057f8:	58025480 	.word	0x58025480
 80057fc:	58025494 	.word	0x58025494

08005800 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b098      	sub	sp, #96	; 0x60
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005808:	4a84      	ldr	r2, [pc, #528]	; (8005a1c <HAL_FDCAN_Init+0x21c>)
 800580a:	f107 030c 	add.w	r3, r7, #12
 800580e:	4611      	mov	r1, r2
 8005810:	224c      	movs	r2, #76	; 0x4c
 8005812:	4618      	mov	r0, r3
 8005814:	f007 fe94 	bl	800d540 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e1ca      	b.n	8005bb8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a7e      	ldr	r2, [pc, #504]	; (8005a20 <HAL_FDCAN_Init+0x220>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d106      	bne.n	800583a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fc fea6 	bl	80025a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0210 	bic.w	r2, r2, #16
 8005862:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005864:	f7fd fb46 	bl	8002ef4 <HAL_GetTick>
 8005868:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800586a:	e014      	b.n	8005896 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800586c:	f7fd fb42 	bl	8002ef4 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b0a      	cmp	r3, #10
 8005878:	d90d      	bls.n	8005896 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005880:	f043 0201 	orr.w	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2203      	movs	r2, #3
 800588e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e190      	b.n	8005bb8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d0e3      	beq.n	800586c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058b4:	f7fd fb1e 	bl	8002ef4 <HAL_GetTick>
 80058b8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058ba:	e014      	b.n	80058e6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058bc:	f7fd fb1a 	bl	8002ef4 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b0a      	cmp	r3, #10
 80058c8:	d90d      	bls.n	80058e6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058d0:	f043 0201 	orr.w	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2203      	movs	r2, #3
 80058de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e168      	b.n	8005bb8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0e3      	beq.n	80058bc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0202 	orr.w	r2, r2, #2
 8005902:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7c1b      	ldrb	r3, [r3, #16]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d108      	bne.n	800591e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591a:	619a      	str	r2, [r3, #24]
 800591c:	e007      	b.n	800592e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	7c5b      	ldrb	r3, [r3, #17]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d108      	bne.n	8005948 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005944:	619a      	str	r2, [r3, #24]
 8005946:	e007      	b.n	8005958 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005956:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	7c9b      	ldrb	r3, [r3, #18]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d108      	bne.n	8005972 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800596e:	619a      	str	r2, [r3, #24]
 8005970:	e007      	b.n	8005982 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005980:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80059a6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0210 	bic.w	r2, r2, #16
 80059b6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d108      	bne.n	80059d2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0204 	orr.w	r2, r2, #4
 80059ce:	619a      	str	r2, [r3, #24]
 80059d0:	e030      	b.n	8005a34 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d02c      	beq.n	8005a34 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d020      	beq.n	8005a24 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059f0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0210 	orr.w	r2, r2, #16
 8005a00:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d114      	bne.n	8005a34 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0220 	orr.w	r2, r2, #32
 8005a18:	619a      	str	r2, [r3, #24]
 8005a1a:	e00b      	b.n	8005a34 <HAL_FDCAN_Init+0x234>
 8005a1c:	0800d5b4 	.word	0x0800d5b4
 8005a20:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0220 	orr.w	r2, r2, #32
 8005a32:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a44:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a4c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a5c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a5e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a68:	d115      	bne.n	8005a96 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	3b01      	subs	r3, #1
 8005a76:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a78:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005a82:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005a92:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a94:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005abc:	4413      	add	r3, r2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d012      	beq.n	8005ae8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005aca:	f023 0107 	bic.w	r1, r3, #7
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005ad8:	4413      	add	r3, r2
 8005ada:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d012      	beq.n	8005b16 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005af8:	f023 0107 	bic.w	r1, r3, #7
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b06:	4413      	add	r3, r2
 8005b08:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d013      	beq.n	8005b46 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b26:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b34:	4413      	add	r3, r2
 8005b36:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b3a:	011a      	lsls	r2, r3, #4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d013      	beq.n	8005b76 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b56:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b64:	4413      	add	r3, r2
 8005b66:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b6a:	021a      	lsls	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a11      	ldr	r2, [pc, #68]	; (8005bc0 <HAL_FDCAN_Init+0x3c0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d107      	bne.n	8005b90 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f022 0203 	bic.w	r2, r2, #3
 8005b8e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f80b 	bl	8005bc4 <FDCAN_CalcultateRamBlockAddresses>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005bb4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3760      	adds	r7, #96	; 0x60
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	4000a000 	.word	0x4000a000

08005bc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005bda:	4ba7      	ldr	r3, [pc, #668]	; (8005e78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	0091      	lsls	r1, r2, #2
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	430b      	orrs	r3, r1
 8005be8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	041a      	lsls	r2, r3, #16
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	4413      	add	r3, r2
 8005c10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c1a:	4b97      	ldr	r3, [pc, #604]	; (8005e78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0091      	lsls	r1, r2, #2
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	430b      	orrs	r3, r1
 8005c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	041a      	lsls	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4413      	add	r3, r2
 8005c52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005c5c:	4b86      	ldr	r3, [pc, #536]	; (8005e78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	0091      	lsls	r1, r2, #2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	041a      	lsls	r2, r3, #16
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	4413      	add	r3, r2
 8005c9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005ca4:	4b74      	ldr	r3, [pc, #464]	; (8005e78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	0091      	lsls	r1, r2, #2
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cbe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc6:	041a      	lsls	r2, r3, #16
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005cec:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	0091      	lsls	r1, r2, #2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005d18:	4b57      	ldr	r3, [pc, #348]	; (8005e78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	0091      	lsls	r1, r2, #2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d32:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3a:	041a      	lsls	r2, r3, #16
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	4413      	add	r3, r2
 8005d50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005d5a:	4b47      	ldr	r3, [pc, #284]	; (8005e78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	0091      	lsls	r1, r2, #2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	430b      	orrs	r3, r1
 8005d68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d74:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	041a      	lsls	r2, r3, #16
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d90:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d98:	061a      	lsls	r2, r3, #24
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da8:	4b34      	ldr	r3, [pc, #208]	; (8005e7c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005daa:	4413      	add	r3, r2
 8005dac:	009a      	lsls	r2, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005dde:	fb01 f303 	mul.w	r3, r1, r3
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	441a      	add	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005df6:	fb01 f303 	mul.w	r3, r1, r3
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	441a      	add	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	441a      	add	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	441a      	add	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6e:	4a04      	ldr	r2, [pc, #16]	; (8005e80 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d915      	bls.n	8005ea0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005e74:	e006      	b.n	8005e84 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005e76:	bf00      	nop
 8005e78:	ffff0003 	.word	0xffff0003
 8005e7c:	10002b00 	.word	0x10002b00
 8005e80:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e8a:	f043 0220 	orr.w	r2, r3, #32
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2203      	movs	r2, #3
 8005e98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e010      	b.n	8005ec2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	e005      	b.n	8005eb4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d3f3      	bcc.n	8005ea8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop

08005ed0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e031      	b.n	8005f46 <HAL_FMAC_Init+0x76>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_FMAC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmac->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fc fbb8 	bl	800266c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0UL;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f84c 	bl	8005fa0 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_TIMEOUT)
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f820 	bl	8005f4e <FMAC_Reset>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d10c      	bne.n	8005f2e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_RESET;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2210      	movs	r2, #16
 8005f18:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	22a0      	movs	r2, #160	; 0xa0
 8005f1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Process Unlocked */
    __HAL_UNLOCK(hfmac);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e00b      	b.n	8005f46 <HAL_FMAC_Init+0x76>
  }

  /* Update FMAC error code and FMAC peripheral state */
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	635a      	str	r2, [r3, #52]	; 0x34
  hfmac->State = HAL_FMAC_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hfmac);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f56:	f7fc ffcd 	bl	8002ef4 <HAL_GetTick>
 8005f5a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005f6a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 8005f6c:	e009      	b.n	8005f82 <FMAC_Reset+0x34>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005f6e:	f7fc ffc1 	bl	8002ef4 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f7c:	d901      	bls.n	8005f82 <FMAC_Reset+0x34>
    {
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e00a      	b.n	8005f98 <FMAC_Reset+0x4a>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0UL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1ee      	bne.n	8005f6e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f807 	bl	8005fbc <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f81b 	bl	8005fea <FMAC_ResetOutputStateAndDataPointers>
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval FMAC status
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006018:	b480      	push	{r7}
 800601a:	b089      	sub	sp, #36	; 0x24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006026:	4b86      	ldr	r3, [pc, #536]	; (8006240 <HAL_GPIO_Init+0x228>)
 8006028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800602a:	e18c      	b.n	8006346 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	2101      	movs	r1, #1
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	4013      	ands	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 817e 	beq.w	8006340 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d00b      	beq.n	8006064 <HAL_GPIO_Init+0x4c>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d007      	beq.n	8006064 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006058:	2b11      	cmp	r3, #17
 800605a:	d003      	beq.n	8006064 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	2b12      	cmp	r3, #18
 8006062:	d130      	bne.n	80060c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	2203      	movs	r2, #3
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800609a:	2201      	movs	r2, #1
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	43db      	mvns	r3, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4013      	ands	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	091b      	lsrs	r3, r3, #4
 80060b0:	f003 0201 	and.w	r2, r3, #1
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	4313      	orrs	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	2203      	movs	r2, #3
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	43db      	mvns	r3, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4013      	ands	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d003      	beq.n	8006106 <HAL_GPIO_Init+0xee>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b12      	cmp	r3, #18
 8006104:	d123      	bne.n	800614e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	08da      	lsrs	r2, r3, #3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3208      	adds	r2, #8
 800610e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	220f      	movs	r2, #15
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	43db      	mvns	r3, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4013      	ands	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	691a      	ldr	r2, [r3, #16]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4313      	orrs	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	08da      	lsrs	r2, r3, #3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3208      	adds	r2, #8
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	2203      	movs	r2, #3
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43db      	mvns	r3, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4013      	ands	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f003 0203 	and.w	r2, r3, #3
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4313      	orrs	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80d8 	beq.w	8006340 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006190:	4b2c      	ldr	r3, [pc, #176]	; (8006244 <HAL_GPIO_Init+0x22c>)
 8006192:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006196:	4a2b      	ldr	r2, [pc, #172]	; (8006244 <HAL_GPIO_Init+0x22c>)
 8006198:	f043 0302 	orr.w	r3, r3, #2
 800619c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061a0:	4b28      	ldr	r3, [pc, #160]	; (8006244 <HAL_GPIO_Init+0x22c>)
 80061a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061ae:	4a26      	ldr	r2, [pc, #152]	; (8006248 <HAL_GPIO_Init+0x230>)
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	3302      	adds	r3, #2
 80061b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	220f      	movs	r2, #15
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	43db      	mvns	r3, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a1d      	ldr	r2, [pc, #116]	; (800624c <HAL_GPIO_Init+0x234>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d04a      	beq.n	8006270 <HAL_GPIO_Init+0x258>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <HAL_GPIO_Init+0x238>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02b      	beq.n	800623a <HAL_GPIO_Init+0x222>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1b      	ldr	r2, [pc, #108]	; (8006254 <HAL_GPIO_Init+0x23c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d025      	beq.n	8006236 <HAL_GPIO_Init+0x21e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <HAL_GPIO_Init+0x240>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01f      	beq.n	8006232 <HAL_GPIO_Init+0x21a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <HAL_GPIO_Init+0x244>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d019      	beq.n	800622e <HAL_GPIO_Init+0x216>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_GPIO_Init+0x248>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <HAL_GPIO_Init+0x212>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a17      	ldr	r2, [pc, #92]	; (8006264 <HAL_GPIO_Init+0x24c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00d      	beq.n	8006226 <HAL_GPIO_Init+0x20e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a16      	ldr	r2, [pc, #88]	; (8006268 <HAL_GPIO_Init+0x250>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <HAL_GPIO_Init+0x20a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a15      	ldr	r2, [pc, #84]	; (800626c <HAL_GPIO_Init+0x254>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d101      	bne.n	800621e <HAL_GPIO_Init+0x206>
 800621a:	2309      	movs	r3, #9
 800621c:	e029      	b.n	8006272 <HAL_GPIO_Init+0x25a>
 800621e:	230a      	movs	r3, #10
 8006220:	e027      	b.n	8006272 <HAL_GPIO_Init+0x25a>
 8006222:	2307      	movs	r3, #7
 8006224:	e025      	b.n	8006272 <HAL_GPIO_Init+0x25a>
 8006226:	2306      	movs	r3, #6
 8006228:	e023      	b.n	8006272 <HAL_GPIO_Init+0x25a>
 800622a:	2305      	movs	r3, #5
 800622c:	e021      	b.n	8006272 <HAL_GPIO_Init+0x25a>
 800622e:	2304      	movs	r3, #4
 8006230:	e01f      	b.n	8006272 <HAL_GPIO_Init+0x25a>
 8006232:	2303      	movs	r3, #3
 8006234:	e01d      	b.n	8006272 <HAL_GPIO_Init+0x25a>
 8006236:	2302      	movs	r3, #2
 8006238:	e01b      	b.n	8006272 <HAL_GPIO_Init+0x25a>
 800623a:	2301      	movs	r3, #1
 800623c:	e019      	b.n	8006272 <HAL_GPIO_Init+0x25a>
 800623e:	bf00      	nop
 8006240:	58000080 	.word	0x58000080
 8006244:	58024400 	.word	0x58024400
 8006248:	58000400 	.word	0x58000400
 800624c:	58020000 	.word	0x58020000
 8006250:	58020400 	.word	0x58020400
 8006254:	58020800 	.word	0x58020800
 8006258:	58020c00 	.word	0x58020c00
 800625c:	58021000 	.word	0x58021000
 8006260:	58021400 	.word	0x58021400
 8006264:	58021800 	.word	0x58021800
 8006268:	58021c00 	.word	0x58021c00
 800626c:	58022400 	.word	0x58022400
 8006270:	2300      	movs	r3, #0
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	f002 0203 	and.w	r2, r2, #3
 8006278:	0092      	lsls	r2, r2, #2
 800627a:	4093      	lsls	r3, r2
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	4313      	orrs	r3, r2
 8006280:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006282:	4938      	ldr	r1, [pc, #224]	; (8006364 <HAL_GPIO_Init+0x34c>)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	3302      	adds	r3, #2
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	43db      	mvns	r3, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4013      	ands	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	43db      	mvns	r3, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4013      	ands	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800630a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	43db      	mvns	r3, r3
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	4013      	ands	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	3301      	adds	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	f47f ae6b 	bne.w	800602c <HAL_GPIO_Init+0x14>
  }
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	3724      	adds	r7, #36	; 0x24
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	58000400 	.word	0x58000400

08006368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	807b      	strh	r3, [r7, #2]
 8006374:	4613      	mov	r3, r2
 8006376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006378:	787b      	ldrb	r3, [r7, #1]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800637e:	887a      	ldrh	r2, [r7, #2]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006384:	e003      	b.n	800638e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006386:	887b      	ldrh	r3, [r7, #2]
 8006388:	041a      	lsls	r2, r3, #16
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	619a      	str	r2, [r3, #24]
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063ac:	887a      	ldrh	r2, [r7, #2]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4013      	ands	r3, r2
 80063b2:	041a      	lsls	r2, r3, #16
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	43d9      	mvns	r1, r3
 80063b8:	887b      	ldrh	r3, [r7, #2]
 80063ba:	400b      	ands	r3, r1
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	619a      	str	r2, [r3, #24]
}
 80063c2:	bf00      	nop
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
	...

080063d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e07f      	b.n	80064e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fc f95a 	bl	80026b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2224      	movs	r2, #36	; 0x24
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006420:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006430:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d107      	bne.n	800644a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	e006      	b.n	8006458 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006456:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d104      	bne.n	800646a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006468:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6859      	ldr	r1, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b1d      	ldr	r3, [pc, #116]	; (80064ec <HAL_I2C_Init+0x11c>)
 8006476:	430b      	orrs	r3, r1
 8006478:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006488:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	ea42 0103 	orr.w	r1, r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69d9      	ldr	r1, [r3, #28]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1a      	ldr	r2, [r3, #32]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	02008000 	.word	0x02008000

080064f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b20      	cmp	r3, #32
 8006504:	d138      	bne.n	8006578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006510:	2302      	movs	r3, #2
 8006512:	e032      	b.n	800657a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2224      	movs	r2, #36	; 0x24
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6819      	ldr	r1, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	e000      	b.n	800657a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006578:	2302      	movs	r3, #2
  }
}
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b20      	cmp	r3, #32
 800659a:	d139      	bne.n	8006610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e033      	b.n	8006612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2224      	movs	r2, #36	; 0x24
 80065b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	e000      	b.n	8006612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006610:	2302      	movs	r3, #2
  }
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006628:	4b19      	ldr	r3, [pc, #100]	; (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d00a      	beq.n	800664a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006634:	4b16      	ldr	r3, [pc, #88]	; (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	429a      	cmp	r2, r3
 8006640:	d001      	beq.n	8006646 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e01f      	b.n	8006686 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e01d      	b.n	8006686 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800664a:	4b11      	ldr	r3, [pc, #68]	; (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f023 0207 	bic.w	r2, r3, #7
 8006652:	490f      	ldr	r1, [pc, #60]	; (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4313      	orrs	r3, r2
 8006658:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800665a:	f7fc fc4b 	bl	8002ef4 <HAL_GetTick>
 800665e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006660:	e009      	b.n	8006676 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006662:	f7fc fc47 	bl	8002ef4 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006670:	d901      	bls.n	8006676 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e007      	b.n	8006686 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006676:	4b06      	ldr	r3, [pc, #24]	; (8006690 <HAL_PWREx_ConfigSupply+0x70>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800667e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006682:	d1ee      	bne.n	8006662 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	58024800 	.word	0x58024800

08006694 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08c      	sub	sp, #48	; 0x30
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e37a      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8087 	beq.w	80067c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b4:	4ba0      	ldr	r3, [pc, #640]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066be:	4b9e      	ldr	r3, [pc, #632]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d007      	beq.n	80066da <HAL_RCC_OscConfig+0x46>
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	2b18      	cmp	r3, #24
 80066ce:	d110      	bne.n	80066f2 <HAL_RCC_OscConfig+0x5e>
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d10b      	bne.n	80066f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066da:	4b97      	ldr	r3, [pc, #604]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06c      	beq.n	80067c0 <HAL_RCC_OscConfig+0x12c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d168      	bne.n	80067c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e354      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fa:	d106      	bne.n	800670a <HAL_RCC_OscConfig+0x76>
 80066fc:	4b8e      	ldr	r3, [pc, #568]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a8d      	ldr	r2, [pc, #564]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e02e      	b.n	8006768 <HAL_RCC_OscConfig+0xd4>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x98>
 8006712:	4b89      	ldr	r3, [pc, #548]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a88      	ldr	r2, [pc, #544]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	4b86      	ldr	r3, [pc, #536]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a85      	ldr	r2, [pc, #532]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e01d      	b.n	8006768 <HAL_RCC_OscConfig+0xd4>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0xbc>
 8006736:	4b80      	ldr	r3, [pc, #512]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a7f      	ldr	r2, [pc, #508]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 800673c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	4b7d      	ldr	r3, [pc, #500]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a7c      	ldr	r2, [pc, #496]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0xd4>
 8006750:	4b79      	ldr	r3, [pc, #484]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a78      	ldr	r2, [pc, #480]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4b76      	ldr	r3, [pc, #472]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a75      	ldr	r2, [pc, #468]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fc fbc0 	bl	8002ef4 <HAL_GetTick>
 8006774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006778:	f7fc fbbc 	bl	8002ef4 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	; 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e308      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800678a:	4b6b      	ldr	r3, [pc, #428]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0xe4>
 8006796:	e014      	b.n	80067c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006798:	f7fc fbac 	bl	8002ef4 <HAL_GetTick>
 800679c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a0:	f7fc fba8 	bl	8002ef4 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b64      	cmp	r3, #100	; 0x64
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e2f4      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067b2:	4b61      	ldr	r3, [pc, #388]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0x10c>
 80067be:	e000      	b.n	80067c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d06d      	beq.n	80068aa <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ce:	4b5a      	ldr	r3, [pc, #360]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067d8:	4b57      	ldr	r3, [pc, #348]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <HAL_RCC_OscConfig+0x160>
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	2b18      	cmp	r3, #24
 80067e8:	d11b      	bne.n	8006822 <HAL_RCC_OscConfig+0x18e>
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d116      	bne.n	8006822 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067f4:	4b50      	ldr	r3, [pc, #320]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <HAL_RCC_OscConfig+0x178>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e2c7      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680c:	4b4a      	ldr	r3, [pc, #296]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	061b      	lsls	r3, r3, #24
 800681a:	4947      	ldr	r1, [pc, #284]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 800681c:	4313      	orrs	r3, r2
 800681e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006820:	e043      	b.n	80068aa <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d026      	beq.n	8006878 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800682a:	4b43      	ldr	r3, [pc, #268]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f023 0219 	bic.w	r2, r3, #25
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	4940      	ldr	r1, [pc, #256]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006838:	4313      	orrs	r3, r2
 800683a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fc fb5a 	bl	8002ef4 <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006844:	f7fc fb56 	bl	8002ef4 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e2a2      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006856:	4b38      	ldr	r3, [pc, #224]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0f0      	beq.n	8006844 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006862:	4b35      	ldr	r3, [pc, #212]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	061b      	lsls	r3, r3, #24
 8006870:	4931      	ldr	r1, [pc, #196]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006872:	4313      	orrs	r3, r2
 8006874:	604b      	str	r3, [r1, #4]
 8006876:	e018      	b.n	80068aa <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006878:	4b2f      	ldr	r3, [pc, #188]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a2e      	ldr	r2, [pc, #184]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 800687e:	f023 0301 	bic.w	r3, r3, #1
 8006882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fc fb36 	bl	8002ef4 <HAL_GetTick>
 8006888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800688c:	f7fc fb32 	bl	8002ef4 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e27e      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800689e:	4b26      	ldr	r3, [pc, #152]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f0      	bne.n	800688c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d06c      	beq.n	8006990 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b6:	4b20      	ldr	r3, [pc, #128]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068c0:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d007      	beq.n	80068dc <HAL_RCC_OscConfig+0x248>
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	2b18      	cmp	r3, #24
 80068d0:	d11b      	bne.n	800690a <HAL_RCC_OscConfig+0x276>
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f003 0303 	and.w	r3, r3, #3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d116      	bne.n	800690a <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068dc:	4b16      	ldr	r3, [pc, #88]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCC_OscConfig+0x260>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	2b80      	cmp	r3, #128	; 0x80
 80068ee:	d001      	beq.n	80068f4 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e253      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068f4:	4b10      	ldr	r3, [pc, #64]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	061b      	lsls	r3, r3, #24
 8006902:	490d      	ldr	r1, [pc, #52]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006904:	4313      	orrs	r3, r2
 8006906:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006908:	e042      	b.n	8006990 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d025      	beq.n	800695e <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a08      	ldr	r2, [pc, #32]	; (8006938 <HAL_RCC_OscConfig+0x2a4>)
 8006918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691e:	f7fc fae9 	bl	8002ef4 <HAL_GetTick>
 8006922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006924:	e00a      	b.n	800693c <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006926:	f7fc fae5 	bl	8002ef4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d903      	bls.n	800693c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e231      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
 8006938:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800693c:	4ba3      	ldr	r3, [pc, #652]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0ee      	beq.n	8006926 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006948:	4ba0      	ldr	r3, [pc, #640]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	061b      	lsls	r3, r3, #24
 8006956:	499d      	ldr	r1, [pc, #628]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006958:	4313      	orrs	r3, r2
 800695a:	60cb      	str	r3, [r1, #12]
 800695c:	e018      	b.n	8006990 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800695e:	4b9b      	ldr	r3, [pc, #620]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a9a      	ldr	r2, [pc, #616]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696a:	f7fc fac3 	bl	8002ef4 <HAL_GetTick>
 800696e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006972:	f7fc fabf 	bl	8002ef4 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e20b      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006984:	4b91      	ldr	r3, [pc, #580]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f0      	bne.n	8006972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d036      	beq.n	8006a0a <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d019      	beq.n	80069d8 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069a4:	4b89      	ldr	r3, [pc, #548]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 80069a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a8:	4a88      	ldr	r2, [pc, #544]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b0:	f7fc faa0 	bl	8002ef4 <HAL_GetTick>
 80069b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069b8:	f7fc fa9c 	bl	8002ef4 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e1e8      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069ca:	4b80      	ldr	r3, [pc, #512]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 80069cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0f0      	beq.n	80069b8 <HAL_RCC_OscConfig+0x324>
 80069d6:	e018      	b.n	8006a0a <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069d8:	4b7c      	ldr	r3, [pc, #496]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 80069da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069dc:	4a7b      	ldr	r2, [pc, #492]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7fc fa86 	bl	8002ef4 <HAL_GetTick>
 80069e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ec:	f7fc fa82 	bl	8002ef4 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e1ce      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069fe:	4b73      	ldr	r3, [pc, #460]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f0      	bne.n	80069ec <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d036      	beq.n	8006a84 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d019      	beq.n	8006a52 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a1e:	4b6b      	ldr	r3, [pc, #428]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a6a      	ldr	r2, [pc, #424]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a2a:	f7fc fa63 	bl	8002ef4 <HAL_GetTick>
 8006a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a32:	f7fc fa5f 	bl	8002ef4 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e1ab      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a44:	4b61      	ldr	r3, [pc, #388]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0f0      	beq.n	8006a32 <HAL_RCC_OscConfig+0x39e>
 8006a50:	e018      	b.n	8006a84 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a52:	4b5e      	ldr	r3, [pc, #376]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a5d      	ldr	r2, [pc, #372]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a5e:	f7fc fa49 	bl	8002ef4 <HAL_GetTick>
 8006a62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a66:	f7fc fa45 	bl	8002ef4 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e191      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a78:	4b54      	ldr	r3, [pc, #336]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f0      	bne.n	8006a66 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8081 	beq.w	8006b94 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a92:	4b4f      	ldr	r3, [pc, #316]	; (8006bd0 <HAL_RCC_OscConfig+0x53c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a4e      	ldr	r2, [pc, #312]	; (8006bd0 <HAL_RCC_OscConfig+0x53c>)
 8006a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a9e:	f7fc fa29 	bl	8002ef4 <HAL_GetTick>
 8006aa2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aa4:	e008      	b.n	8006ab8 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006aa6:	f7fc fa25 	bl	8002ef4 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2b64      	cmp	r3, #100	; 0x64
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e171      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ab8:	4b45      	ldr	r3, [pc, #276]	; (8006bd0 <HAL_RCC_OscConfig+0x53c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0f0      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d106      	bne.n	8006ada <HAL_RCC_OscConfig+0x446>
 8006acc:	4b3f      	ldr	r3, [pc, #252]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad0:	4a3e      	ldr	r2, [pc, #248]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006ad2:	f043 0301 	orr.w	r3, r3, #1
 8006ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad8:	e02d      	b.n	8006b36 <HAL_RCC_OscConfig+0x4a2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10c      	bne.n	8006afc <HAL_RCC_OscConfig+0x468>
 8006ae2:	4b3a      	ldr	r3, [pc, #232]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	4a39      	ldr	r2, [pc, #228]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	6713      	str	r3, [r2, #112]	; 0x70
 8006aee:	4b37      	ldr	r3, [pc, #220]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	4a36      	ldr	r2, [pc, #216]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006af4:	f023 0304 	bic.w	r3, r3, #4
 8006af8:	6713      	str	r3, [r2, #112]	; 0x70
 8006afa:	e01c      	b.n	8006b36 <HAL_RCC_OscConfig+0x4a2>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b05      	cmp	r3, #5
 8006b02:	d10c      	bne.n	8006b1e <HAL_RCC_OscConfig+0x48a>
 8006b04:	4b31      	ldr	r3, [pc, #196]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b08:	4a30      	ldr	r2, [pc, #192]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b0a:	f043 0304 	orr.w	r3, r3, #4
 8006b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b10:	4b2e      	ldr	r3, [pc, #184]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b14:	4a2d      	ldr	r2, [pc, #180]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b1c:	e00b      	b.n	8006b36 <HAL_RCC_OscConfig+0x4a2>
 8006b1e:	4b2b      	ldr	r3, [pc, #172]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b22:	4a2a      	ldr	r2, [pc, #168]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2a:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	4a27      	ldr	r2, [pc, #156]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b30:	f023 0304 	bic.w	r3, r3, #4
 8006b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d015      	beq.n	8006b6a <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3e:	f7fc f9d9 	bl	8002ef4 <HAL_GetTick>
 8006b42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b44:	e00a      	b.n	8006b5c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b46:	f7fc f9d5 	bl	8002ef4 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e11f      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b5c:	4b1b      	ldr	r3, [pc, #108]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0ee      	beq.n	8006b46 <HAL_RCC_OscConfig+0x4b2>
 8006b68:	e014      	b.n	8006b94 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6a:	f7fc f9c3 	bl	8002ef4 <HAL_GetTick>
 8006b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b70:	e00a      	b.n	8006b88 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b72:	f7fc f9bf 	bl	8002ef4 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e109      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b88:	4b10      	ldr	r3, [pc, #64]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1ee      	bne.n	8006b72 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 80fe 	beq.w	8006d9a <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba6:	2b18      	cmp	r3, #24
 8006ba8:	f000 80b9 	beq.w	8006d1e <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	f040 809a 	bne.w	8006cea <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a04      	ldr	r2, [pc, #16]	; (8006bcc <HAL_RCC_OscConfig+0x538>)
 8006bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc2:	f7fc f997 	bl	8002ef4 <HAL_GetTick>
 8006bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bc8:	e00d      	b.n	8006be6 <HAL_RCC_OscConfig+0x552>
 8006bca:	bf00      	nop
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bd4:	f7fc f98e 	bl	8002ef4 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e0da      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006be6:	4b6f      	ldr	r3, [pc, #444]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f0      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bf2:	4b6c      	ldr	r3, [pc, #432]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bf6:	4b6c      	ldr	r3, [pc, #432]	; (8006da8 <HAL_RCC_OscConfig+0x714>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c02:	0112      	lsls	r2, r2, #4
 8006c04:	430a      	orrs	r2, r1
 8006c06:	4967      	ldr	r1, [pc, #412]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	628b      	str	r3, [r1, #40]	; 0x28
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	3b01      	subs	r3, #1
 8006c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	025b      	lsls	r3, r3, #9
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	3b01      	subs	r3, #1
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c34:	3b01      	subs	r3, #1
 8006c36:	061b      	lsls	r3, r3, #24
 8006c38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c3c:	4959      	ldr	r1, [pc, #356]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006c42:	4b58      	ldr	r3, [pc, #352]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	4a57      	ldr	r2, [pc, #348]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c4e:	4b55      	ldr	r3, [pc, #340]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c52:	4b56      	ldr	r3, [pc, #344]	; (8006dac <HAL_RCC_OscConfig+0x718>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c5a:	00d2      	lsls	r2, r2, #3
 8006c5c:	4951      	ldr	r1, [pc, #324]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c62:	4b50      	ldr	r3, [pc, #320]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	f023 020c 	bic.w	r2, r3, #12
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	494d      	ldr	r1, [pc, #308]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c74:	4b4b      	ldr	r3, [pc, #300]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	f023 0202 	bic.w	r2, r3, #2
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c80:	4948      	ldr	r1, [pc, #288]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c86:	4b47      	ldr	r3, [pc, #284]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	4a46      	ldr	r2, [pc, #280]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c92:	4b44      	ldr	r3, [pc, #272]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	4a43      	ldr	r2, [pc, #268]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c9e:	4b41      	ldr	r3, [pc, #260]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	4a40      	ldr	r2, [pc, #256]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006caa:	4b3e      	ldr	r3, [pc, #248]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	4a3d      	ldr	r2, [pc, #244]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cb6:	4b3b      	ldr	r3, [pc, #236]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3a      	ldr	r2, [pc, #232]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc2:	f7fc f917 	bl	8002ef4 <HAL_GetTick>
 8006cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cca:	f7fc f913 	bl	8002ef4 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e05f      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cdc:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <HAL_RCC_OscConfig+0x636>
 8006ce8:	e057      	b.n	8006d9a <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cea:	4b2e      	ldr	r3, [pc, #184]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a2d      	ldr	r2, [pc, #180]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf6:	f7fc f8fd 	bl	8002ef4 <HAL_GetTick>
 8006cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cfe:	f7fc f8f9 	bl	8002ef4 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e045      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d10:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCC_OscConfig+0x66a>
 8006d1c:	e03d      	b.n	8006d9a <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d1e:	4b21      	ldr	r3, [pc, #132]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d24:	4b1f      	ldr	r3, [pc, #124]	; (8006da4 <HAL_RCC_OscConfig+0x710>)
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d031      	beq.n	8006d96 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f003 0203 	and.w	r2, r3, #3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d12a      	bne.n	8006d96 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	091b      	lsrs	r3, r3, #4
 8006d44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d122      	bne.n	8006d96 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d11a      	bne.n	8006d96 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	0a5b      	lsrs	r3, r3, #9
 8006d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d111      	bne.n	8006d96 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	0c1b      	lsrs	r3, r3, #16
 8006d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d108      	bne.n	8006d96 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	0e1b      	lsrs	r3, r3, #24
 8006d88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d001      	beq.n	8006d9a <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3730      	adds	r7, #48	; 0x30
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	58024400 	.word	0x58024400
 8006da8:	fffffc0c 	.word	0xfffffc0c
 8006dac:	ffff0007 	.word	0xffff0007

08006db0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e19c      	b.n	80070fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dc4:	4b8a      	ldr	r3, [pc, #552]	; (8006ff0 <HAL_RCC_ClockConfig+0x240>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d910      	bls.n	8006df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd2:	4b87      	ldr	r3, [pc, #540]	; (8006ff0 <HAL_RCC_ClockConfig+0x240>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f023 020f 	bic.w	r2, r3, #15
 8006dda:	4985      	ldr	r1, [pc, #532]	; (8006ff0 <HAL_RCC_ClockConfig+0x240>)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de2:	4b83      	ldr	r3, [pc, #524]	; (8006ff0 <HAL_RCC_ClockConfig+0x240>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d001      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e184      	b.n	80070fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d010      	beq.n	8006e22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	4b7b      	ldr	r3, [pc, #492]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d908      	bls.n	8006e22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e10:	4b78      	ldr	r3, [pc, #480]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	4975      	ldr	r1, [pc, #468]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d010      	beq.n	8006e50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	4b70      	ldr	r3, [pc, #448]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d908      	bls.n	8006e50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e3e:	4b6d      	ldr	r3, [pc, #436]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	496a      	ldr	r1, [pc, #424]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d010      	beq.n	8006e7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	4b64      	ldr	r3, [pc, #400]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d908      	bls.n	8006e7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e6c:	4b61      	ldr	r3, [pc, #388]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	495e      	ldr	r1, [pc, #376]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d010      	beq.n	8006eac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69da      	ldr	r2, [r3, #28]
 8006e8e:	4b59      	ldr	r3, [pc, #356]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d908      	bls.n	8006eac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e9a:	4b56      	ldr	r3, [pc, #344]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	4953      	ldr	r1, [pc, #332]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d010      	beq.n	8006eda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	4b4d      	ldr	r3, [pc, #308]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f003 030f 	and.w	r3, r3, #15
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d908      	bls.n	8006eda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ec8:	4b4a      	ldr	r3, [pc, #296]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f023 020f 	bic.w	r2, r3, #15
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	4947      	ldr	r1, [pc, #284]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d055      	beq.n	8006f92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ee6:	4b43      	ldr	r3, [pc, #268]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	4940      	ldr	r1, [pc, #256]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d107      	bne.n	8006f10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f00:	4b3c      	ldr	r3, [pc, #240]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d121      	bne.n	8006f50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e0f6      	b.n	80070fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d107      	bne.n	8006f28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f18:	4b36      	ldr	r3, [pc, #216]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d115      	bne.n	8006f50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0ea      	b.n	80070fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d107      	bne.n	8006f40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f30:	4b30      	ldr	r3, [pc, #192]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d109      	bne.n	8006f50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e0de      	b.n	80070fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f40:	4b2c      	ldr	r3, [pc, #176]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e0d6      	b.n	80070fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f50:	4b28      	ldr	r3, [pc, #160]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f023 0207 	bic.w	r2, r3, #7
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	4925      	ldr	r1, [pc, #148]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f62:	f7fb ffc7 	bl	8002ef4 <HAL_GetTick>
 8006f66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f68:	e00a      	b.n	8006f80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f6a:	f7fb ffc3 	bl	8002ef4 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d901      	bls.n	8006f80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e0be      	b.n	80070fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f80:	4b1c      	ldr	r3, [pc, #112]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d1eb      	bne.n	8006f6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d010      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	4b14      	ldr	r3, [pc, #80]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d208      	bcs.n	8006fc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fae:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	f023 020f 	bic.w	r2, r3, #15
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	490e      	ldr	r1, [pc, #56]	; (8006ff4 <HAL_RCC_ClockConfig+0x244>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <HAL_RCC_ClockConfig+0x240>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d214      	bcs.n	8006ff8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fce:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <HAL_RCC_ClockConfig+0x240>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f023 020f 	bic.w	r2, r3, #15
 8006fd6:	4906      	ldr	r1, [pc, #24]	; (8006ff0 <HAL_RCC_ClockConfig+0x240>)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fde:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <HAL_RCC_ClockConfig+0x240>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d005      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e086      	b.n	80070fe <HAL_RCC_ClockConfig+0x34e>
 8006ff0:	52002000 	.word	0x52002000
 8006ff4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d010      	beq.n	8007026 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	4b3f      	ldr	r3, [pc, #252]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007010:	429a      	cmp	r2, r3
 8007012:	d208      	bcs.n	8007026 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007014:	4b3c      	ldr	r3, [pc, #240]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	4939      	ldr	r1, [pc, #228]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 8007022:	4313      	orrs	r3, r2
 8007024:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b00      	cmp	r3, #0
 8007030:	d010      	beq.n	8007054 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	4b34      	ldr	r3, [pc, #208]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800703e:	429a      	cmp	r2, r3
 8007040:	d208      	bcs.n	8007054 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007042:	4b31      	ldr	r3, [pc, #196]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	492e      	ldr	r1, [pc, #184]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 8007050:	4313      	orrs	r3, r2
 8007052:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	d010      	beq.n	8007082 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	4b28      	ldr	r3, [pc, #160]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800706c:	429a      	cmp	r2, r3
 800706e:	d208      	bcs.n	8007082 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007070:	4b25      	ldr	r3, [pc, #148]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	4922      	ldr	r1, [pc, #136]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 800707e:	4313      	orrs	r3, r2
 8007080:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d010      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69da      	ldr	r2, [r3, #28]
 8007092:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800709a:	429a      	cmp	r2, r3
 800709c:	d208      	bcs.n	80070b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800709e:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	4917      	ldr	r1, [pc, #92]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070b0:	f000 f834 	bl	800711c <HAL_RCC_GetSysClockFreq>
 80070b4:	4602      	mov	r2, r0
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	0a1b      	lsrs	r3, r3, #8
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	4912      	ldr	r1, [pc, #72]	; (800710c <HAL_RCC_ClockConfig+0x35c>)
 80070c2:	5ccb      	ldrb	r3, [r1, r3]
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070ce:	4b0e      	ldr	r3, [pc, #56]	; (8007108 <HAL_RCC_ClockConfig+0x358>)
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	4a0d      	ldr	r2, [pc, #52]	; (800710c <HAL_RCC_ClockConfig+0x35c>)
 80070d8:	5cd3      	ldrb	r3, [r2, r3]
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
 80070e4:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <HAL_RCC_ClockConfig+0x360>)
 80070e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070e8:	4a0a      	ldr	r2, [pc, #40]	; (8007114 <HAL_RCC_ClockConfig+0x364>)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <HAL_RCC_ClockConfig+0x368>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fb fd32 	bl	8002b5c <HAL_InitTick>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	58024400 	.word	0x58024400
 800710c:	0800d600 	.word	0x0800d600
 8007110:	240005b4 	.word	0x240005b4
 8007114:	240005b0 	.word	0x240005b0
 8007118:	240005b8 	.word	0x240005b8

0800711c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800711c:	b480      	push	{r7}
 800711e:	b089      	sub	sp, #36	; 0x24
 8007120:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007122:	4bb3      	ldr	r3, [pc, #716]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800712a:	2b18      	cmp	r3, #24
 800712c:	f200 8155 	bhi.w	80073da <HAL_RCC_GetSysClockFreq+0x2be>
 8007130:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	0800719d 	.word	0x0800719d
 800713c:	080073db 	.word	0x080073db
 8007140:	080073db 	.word	0x080073db
 8007144:	080073db 	.word	0x080073db
 8007148:	080073db 	.word	0x080073db
 800714c:	080073db 	.word	0x080073db
 8007150:	080073db 	.word	0x080073db
 8007154:	080073db 	.word	0x080073db
 8007158:	080071c3 	.word	0x080071c3
 800715c:	080073db 	.word	0x080073db
 8007160:	080073db 	.word	0x080073db
 8007164:	080073db 	.word	0x080073db
 8007168:	080073db 	.word	0x080073db
 800716c:	080073db 	.word	0x080073db
 8007170:	080073db 	.word	0x080073db
 8007174:	080073db 	.word	0x080073db
 8007178:	080071c9 	.word	0x080071c9
 800717c:	080073db 	.word	0x080073db
 8007180:	080073db 	.word	0x080073db
 8007184:	080073db 	.word	0x080073db
 8007188:	080073db 	.word	0x080073db
 800718c:	080073db 	.word	0x080073db
 8007190:	080073db 	.word	0x080073db
 8007194:	080073db 	.word	0x080073db
 8007198:	080071cf 	.word	0x080071cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800719c:	4b94      	ldr	r3, [pc, #592]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d009      	beq.n	80071bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071a8:	4b91      	ldr	r3, [pc, #580]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	08db      	lsrs	r3, r3, #3
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	4a90      	ldr	r2, [pc, #576]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
 80071b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80071ba:	e111      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80071bc:	4b8d      	ldr	r3, [pc, #564]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071be:	61bb      	str	r3, [r7, #24]
    break;
 80071c0:	e10e      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80071c2:	4b8d      	ldr	r3, [pc, #564]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071c4:	61bb      	str	r3, [r7, #24]
    break;
 80071c6:	e10b      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80071c8:	4b8c      	ldr	r3, [pc, #560]	; (80073fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80071ca:	61bb      	str	r3, [r7, #24]
    break;
 80071cc:	e108      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071ce:	4b88      	ldr	r3, [pc, #544]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071d8:	4b85      	ldr	r3, [pc, #532]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	091b      	lsrs	r3, r3, #4
 80071de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071e4:	4b82      	ldr	r3, [pc, #520]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071ee:	4b80      	ldr	r3, [pc, #512]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f2:	08db      	lsrs	r3, r3, #3
 80071f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	fb02 f303 	mul.w	r3, r2, r3
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 80e1 	beq.w	80073d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b02      	cmp	r3, #2
 8007216:	f000 8083 	beq.w	8007320 <HAL_RCC_GetSysClockFreq+0x204>
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b02      	cmp	r3, #2
 800721e:	f200 80a1 	bhi.w	8007364 <HAL_RCC_GetSysClockFreq+0x248>
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_RCC_GetSysClockFreq+0x114>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d056      	beq.n	80072dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800722e:	e099      	b.n	8007364 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007230:	4b6f      	ldr	r3, [pc, #444]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02d      	beq.n	8007298 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800723c:	4b6c      	ldr	r3, [pc, #432]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	08db      	lsrs	r3, r3, #3
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	4a6b      	ldr	r2, [pc, #428]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007248:	fa22 f303 	lsr.w	r3, r2, r3
 800724c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	ee07 3a90 	vmov	s15, r3
 8007254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b62      	ldr	r3, [pc, #392]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a02 	vldr	s12, [r7, #8]
 800727a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007296:	e087      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007404 <HAL_RCC_GetSysClockFreq+0x2e8>
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072aa:	4b51      	ldr	r3, [pc, #324]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80072be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007400 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072da:	e065      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007408 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ee:	4b40      	ldr	r3, [pc, #256]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007302:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007400 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800731e:	e043      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800740c <HAL_RCC_GetSysClockFreq+0x2f0>
 800732e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007332:	4b2f      	ldr	r3, [pc, #188]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007342:	ed97 6a02 	vldr	s12, [r7, #8]
 8007346:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800734a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007362:	e021      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007408 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007376:	4b1e      	ldr	r3, [pc, #120]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007386:	ed97 6a02 	vldr	s12, [r7, #8]
 800738a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800738e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800739a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80073a8:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ac:	0a5b      	lsrs	r3, r3, #9
 80073ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b2:	3301      	adds	r3, #1
 80073b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	ee07 3a90 	vmov	s15, r3
 80073bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073cc:	ee17 3a90 	vmov	r3, s15
 80073d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80073d2:	e005      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	61bb      	str	r3, [r7, #24]
    break;
 80073d8:	e002      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80073da:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073dc:	61bb      	str	r3, [r7, #24]
    break;
 80073de:	bf00      	nop
  }

  return sysclockfreq;
 80073e0:	69bb      	ldr	r3, [r7, #24]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3724      	adds	r7, #36	; 0x24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	58024400 	.word	0x58024400
 80073f4:	03d09000 	.word	0x03d09000
 80073f8:	003d0900 	.word	0x003d0900
 80073fc:	017d7840 	.word	0x017d7840
 8007400:	46000000 	.word	0x46000000
 8007404:	4c742400 	.word	0x4c742400
 8007408:	4a742400 	.word	0x4a742400
 800740c:	4bbebc20 	.word	0x4bbebc20

08007410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007416:	f7ff fe81 	bl	800711c <HAL_RCC_GetSysClockFreq>
 800741a:	4602      	mov	r2, r0
 800741c:	4b10      	ldr	r3, [pc, #64]	; (8007460 <HAL_RCC_GetHCLKFreq+0x50>)
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	0a1b      	lsrs	r3, r3, #8
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	490f      	ldr	r1, [pc, #60]	; (8007464 <HAL_RCC_GetHCLKFreq+0x54>)
 8007428:	5ccb      	ldrb	r3, [r1, r3]
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	fa22 f303 	lsr.w	r3, r2, r3
 8007432:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007434:	4b0a      	ldr	r3, [pc, #40]	; (8007460 <HAL_RCC_GetHCLKFreq+0x50>)
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	4a09      	ldr	r2, [pc, #36]	; (8007464 <HAL_RCC_GetHCLKFreq+0x54>)
 800743e:	5cd3      	ldrb	r3, [r2, r3]
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	fa22 f303 	lsr.w	r3, r2, r3
 800744a:	4a07      	ldr	r2, [pc, #28]	; (8007468 <HAL_RCC_GetHCLKFreq+0x58>)
 800744c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800744e:	4a07      	ldr	r2, [pc, #28]	; (800746c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <HAL_RCC_GetHCLKFreq+0x58>)
 8007456:	681b      	ldr	r3, [r3, #0]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	58024400 	.word	0x58024400
 8007464:	0800d600 	.word	0x0800d600
 8007468:	240005b4 	.word	0x240005b4
 800746c:	240005b0 	.word	0x240005b0

08007470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007474:	f7ff ffcc 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007478:	4602      	mov	r2, r0
 800747a:	4b06      	ldr	r3, [pc, #24]	; (8007494 <HAL_RCC_GetPCLK1Freq+0x24>)
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	091b      	lsrs	r3, r3, #4
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	4904      	ldr	r1, [pc, #16]	; (8007498 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007486:	5ccb      	ldrb	r3, [r1, r3]
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007490:	4618      	mov	r0, r3
 8007492:	bd80      	pop	{r7, pc}
 8007494:	58024400 	.word	0x58024400
 8007498:	0800d600 	.word	0x0800d600

0800749c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80074a0:	f7ff ffb6 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 80074a4:	4602      	mov	r2, r0
 80074a6:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	0a1b      	lsrs	r3, r3, #8
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	4904      	ldr	r1, [pc, #16]	; (80074c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074b2:	5ccb      	ldrb	r3, [r1, r3]
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80074bc:	4618      	mov	r0, r3
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	58024400 	.word	0x58024400
 80074c4:	0800d600 	.word	0x0800d600

080074c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	223f      	movs	r2, #63	; 0x3f
 80074d6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074d8:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <HAL_RCC_GetClockConfig+0x7c>)
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f003 0207 	and.w	r2, r3, #7
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80074e4:	4b17      	ldr	r3, [pc, #92]	; (8007544 <HAL_RCC_GetClockConfig+0x7c>)
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80074f0:	4b14      	ldr	r3, [pc, #80]	; (8007544 <HAL_RCC_GetClockConfig+0x7c>)
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	f003 020f 	and.w	r2, r3, #15
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80074fc:	4b11      	ldr	r3, [pc, #68]	; (8007544 <HAL_RCC_GetClockConfig+0x7c>)
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007508:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <HAL_RCC_GetClockConfig+0x7c>)
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007514:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <HAL_RCC_GetClockConfig+0x7c>)
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007520:	4b08      	ldr	r3, [pc, #32]	; (8007544 <HAL_RCC_GetClockConfig+0x7c>)
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800752c:	4b06      	ldr	r3, [pc, #24]	; (8007548 <HAL_RCC_GetClockConfig+0x80>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 020f 	and.w	r2, r3, #15
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	601a      	str	r2, [r3, #0]
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	58024400 	.word	0x58024400
 8007548:	52002000 	.word	0x52002000

0800754c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007554:	2300      	movs	r3, #0
 8007556:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007558:	2300      	movs	r3, #0
 800755a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d03f      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007570:	d02a      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007572:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007576:	d824      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800757c:	d018      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800757e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007582:	d81e      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800758c:	d007      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800758e:	e018      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007590:	4bab      	ldr	r3, [pc, #684]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	4aaa      	ldr	r2, [pc, #680]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800759c:	e015      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3304      	adds	r3, #4
 80075a2:	2102      	movs	r1, #2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f001 feff 	bl	80093a8 <RCCEx_PLL2_Config>
 80075aa:	4603      	mov	r3, r0
 80075ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80075ae:	e00c      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3324      	adds	r3, #36	; 0x24
 80075b4:	2102      	movs	r1, #2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 ffa8 	bl	800950c <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80075c0:	e003      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]
      break;
 80075c6:	e000      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80075c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d109      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075d0:	4b9b      	ldr	r3, [pc, #620]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075dc:	4998      	ldr	r1, [pc, #608]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	650b      	str	r3, [r1, #80]	; 0x50
 80075e2:	e001      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d03d      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d826      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80075fc:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	08007619 	.word	0x08007619
 8007608:	08007627 	.word	0x08007627
 800760c:	08007639 	.word	0x08007639
 8007610:	08007651 	.word	0x08007651
 8007614:	08007651 	.word	0x08007651
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007618:	4b89      	ldr	r3, [pc, #548]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	4a88      	ldr	r2, [pc, #544]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800761e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007622:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007624:	e015      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3304      	adds	r3, #4
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f001 febb 	bl	80093a8 <RCCEx_PLL2_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007636:	e00c      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3324      	adds	r3, #36	; 0x24
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f001 ff64 	bl	800950c <RCCEx_PLL3_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007648:	e003      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
      break;
 800764e:	e000      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007652:	7dfb      	ldrb	r3, [r7, #23]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007658:	4b79      	ldr	r3, [pc, #484]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800765a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765c:	f023 0207 	bic.w	r2, r3, #7
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007664:	4976      	ldr	r1, [pc, #472]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007666:	4313      	orrs	r3, r2
 8007668:	650b      	str	r3, [r1, #80]	; 0x50
 800766a:	e001      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007678:	2b00      	cmp	r3, #0
 800767a:	d051      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007682:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007686:	d036      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007688:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800768c:	d830      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800768e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007692:	d032      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007694:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007698:	d82a      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800769a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800769e:	d02e      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80076a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076a4:	d824      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80076a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076aa:	d018      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x192>
 80076ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076b0:	d81e      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x172>
 80076b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076ba:	d007      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80076bc:	e018      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076be:	4b60      	ldr	r3, [pc, #384]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	4a5f      	ldr	r2, [pc, #380]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076ca:	e019      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 fe68 	bl	80093a8 <RCCEx_PLL2_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076dc:	e010      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3324      	adds	r3, #36	; 0x24
 80076e2:	2100      	movs	r1, #0
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 ff11 	bl	800950c <RCCEx_PLL3_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076ee:	e007      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
      break;
 80076f4:	e004      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80076f6:	bf00      	nop
 80076f8:	e002      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80076fa:	bf00      	nop
 80076fc:	e000      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80076fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007706:	4b4e      	ldr	r3, [pc, #312]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007714:	494a      	ldr	r1, [pc, #296]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007716:	4313      	orrs	r3, r2
 8007718:	658b      	str	r3, [r1, #88]	; 0x58
 800771a:	e001      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771c:	7dfb      	ldrb	r3, [r7, #23]
 800771e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007728:	2b00      	cmp	r3, #0
 800772a:	d051      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007732:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007736:	d036      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007738:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800773c:	d830      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800773e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007742:	d032      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007748:	d82a      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800774a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800774e:	d02e      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007750:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007754:	d824      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800775a:	d018      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800775c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007760:	d81e      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007766:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800776a:	d007      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800776c:	e018      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800776e:	4b34      	ldr	r3, [pc, #208]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	4a33      	ldr	r2, [pc, #204]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007778:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800777a:	e019      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3304      	adds	r3, #4
 8007780:	2100      	movs	r1, #0
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fe10 	bl	80093a8 <RCCEx_PLL2_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800778c:	e010      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3324      	adds	r3, #36	; 0x24
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f001 feb9 	bl	800950c <RCCEx_PLL3_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800779e:	e007      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	75fb      	strb	r3, [r7, #23]
      break;
 80077a4:	e004      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80077a6:	bf00      	nop
 80077a8:	e002      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80077aa:	bf00      	nop
 80077ac:	e000      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80077ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80077b6:	4b22      	ldr	r3, [pc, #136]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ba:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077c4:	491e      	ldr	r1, [pc, #120]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	658b      	str	r3, [r1, #88]	; 0x58
 80077ca:	e001      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d035      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e0:	2b30      	cmp	r3, #48	; 0x30
 80077e2:	d01c      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80077e4:	2b30      	cmp	r3, #48	; 0x30
 80077e6:	d817      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d00c      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d813      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d016      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d10f      	bne.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f8:	4b11      	ldr	r3, [pc, #68]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	4a10      	ldr	r2, [pc, #64]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007802:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007804:	e00e      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3304      	adds	r3, #4
 800780a:	2102      	movs	r1, #2
 800780c:	4618      	mov	r0, r3
 800780e:	f001 fdcb 	bl	80093a8 <RCCEx_PLL2_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007816:	e005      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
      break;
 800781c:	e002      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800781e:	bf00      	nop
 8007820:	e000      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10c      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800782a:	4b05      	ldr	r3, [pc, #20]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007836:	4902      	ldr	r1, [pc, #8]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007838:	4313      	orrs	r3, r2
 800783a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800783c:	e004      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800783e:	bf00      	nop
 8007840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d047      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800785c:	d030      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800785e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007862:	d82a      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007864:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007868:	d02c      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800786a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800786e:	d824      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007874:	d018      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800787a:	d81e      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007884:	d007      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007886:	e018      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007888:	4bac      	ldr	r3, [pc, #688]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	4aab      	ldr	r2, [pc, #684]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800788e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007892:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007894:	e017      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3304      	adds	r3, #4
 800789a:	2100      	movs	r1, #0
 800789c:	4618      	mov	r0, r3
 800789e:	f001 fd83 	bl	80093a8 <RCCEx_PLL2_Config>
 80078a2:	4603      	mov	r3, r0
 80078a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80078a6:	e00e      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3324      	adds	r3, #36	; 0x24
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 fe2c 	bl	800950c <RCCEx_PLL3_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80078b8:	e005      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	75fb      	strb	r3, [r7, #23]
      break;
 80078be:	e002      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80078c0:	bf00      	nop
 80078c2:	e000      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80078c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d109      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80078cc:	4b9b      	ldr	r3, [pc, #620]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d8:	4998      	ldr	r1, [pc, #608]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	650b      	str	r3, [r1, #80]	; 0x50
 80078de:	e001      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d049      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078f8:	d02e      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80078fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078fe:	d828      	bhi.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007900:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007904:	d02a      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800790a:	d822      	bhi.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800790c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007910:	d026      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007916:	d81c      	bhi.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800791c:	d010      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800791e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007922:	d816      	bhi.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01d      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800792c:	d111      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3304      	adds	r3, #4
 8007932:	2101      	movs	r1, #1
 8007934:	4618      	mov	r0, r3
 8007936:	f001 fd37 	bl	80093a8 <RCCEx_PLL2_Config>
 800793a:	4603      	mov	r3, r0
 800793c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800793e:	e012      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3324      	adds	r3, #36	; 0x24
 8007944:	2101      	movs	r1, #1
 8007946:	4618      	mov	r0, r3
 8007948:	f001 fde0 	bl	800950c <RCCEx_PLL3_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007950:	e009      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
      break;
 8007956:	e006      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007958:	bf00      	nop
 800795a:	e004      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800795c:	bf00      	nop
 800795e:	e002      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007960:	bf00      	nop
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800796c:	4b73      	ldr	r3, [pc, #460]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007978:	4970      	ldr	r1, [pc, #448]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800797a:	4313      	orrs	r3, r2
 800797c:	650b      	str	r3, [r1, #80]	; 0x50
 800797e:	e001      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d04b      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800799a:	d02e      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800799c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079a0:	d828      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80079a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a6:	d02a      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80079a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ac:	d822      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80079ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079b2:	d026      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80079b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079b8:	d81c      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80079ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079be:	d010      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80079c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c4:	d816      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01d      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80079ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ce:	d111      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3304      	adds	r3, #4
 80079d4:	2101      	movs	r1, #1
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 fce6 	bl	80093a8 <RCCEx_PLL2_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079e0:	e012      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3324      	adds	r3, #36	; 0x24
 80079e6:	2101      	movs	r1, #1
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fd8f 	bl	800950c <RCCEx_PLL3_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079f2:	e009      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	75fb      	strb	r3, [r7, #23]
      break;
 80079f8:	e006      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80079fa:	bf00      	nop
 80079fc:	e004      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80079fe:	bf00      	nop
 8007a00:	e002      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007a0e:	4b4b      	ldr	r3, [pc, #300]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a1c:	4947      	ldr	r1, [pc, #284]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	658b      	str	r3, [r1, #88]	; 0x58
 8007a22:	e001      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d02f      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a3c:	d00e      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a42:	d814      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d015      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a4c:	d10f      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a4e:	4b3b      	ldr	r3, [pc, #236]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	4a3a      	ldr	r2, [pc, #232]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a5a:	e00c      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	2101      	movs	r1, #1
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 fca0 	bl	80093a8 <RCCEx_PLL2_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a6c:	e003      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	75fb      	strb	r3, [r7, #23]
      break;
 8007a72:	e000      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d109      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a7c:	4b2f      	ldr	r3, [pc, #188]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a88:	492c      	ldr	r1, [pc, #176]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	650b      	str	r3, [r1, #80]	; 0x50
 8007a8e:	e001      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d032      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d81b      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ae7 	.word	0x08007ae7
 8007ab4:	08007ac1 	.word	0x08007ac1
 8007ab8:	08007acf 	.word	0x08007acf
 8007abc:	08007ae7 	.word	0x08007ae7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac0:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	4a1d      	ldr	r2, [pc, #116]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007acc:	e00c      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 fc67 	bl	80093a8 <RCCEx_PLL2_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ade:	e003      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae4:	e000      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007aee:	4b13      	ldr	r3, [pc, #76]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af2:	f023 0203 	bic.w	r2, r3, #3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	4910      	ldr	r1, [pc, #64]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b00:	e001      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 808a 	beq.w	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b14:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a09      	ldr	r2, [pc, #36]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b20:	f7fb f9e8 	bl	8002ef4 <HAL_GetTick>
 8007b24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b26:	e00d      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b28:	f7fb f9e4 	bl	8002ef4 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b64      	cmp	r3, #100	; 0x64
 8007b34:	d906      	bls.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	75fb      	strb	r3, [r7, #23]
        break;
 8007b3a:	e009      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007b3c:	58024400 	.word	0x58024400
 8007b40:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b44:	4bb9      	ldr	r3, [pc, #740]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0eb      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d166      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b56:	4bb6      	ldr	r3, [pc, #728]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b60:	4053      	eors	r3, r2
 8007b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d013      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b6a:	4bb1      	ldr	r3, [pc, #708]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b74:	4bae      	ldr	r3, [pc, #696]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b78:	4aad      	ldr	r2, [pc, #692]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b80:	4bab      	ldr	r3, [pc, #684]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b84:	4aaa      	ldr	r2, [pc, #680]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b8c:	4aa8      	ldr	r2, [pc, #672]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b9c:	d115      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9e:	f7fb f9a9 	bl	8002ef4 <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba4:	e00b      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba6:	f7fb f9a5 	bl	8002ef4 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d902      	bls.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	75fb      	strb	r3, [r7, #23]
            break;
 8007bbc:	e005      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bbe:	4b9c      	ldr	r3, [pc, #624]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0ed      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d126      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bde:	d10d      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007be0:	4b93      	ldr	r3, [pc, #588]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bee:	0919      	lsrs	r1, r3, #4
 8007bf0:	4b90      	ldr	r3, [pc, #576]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007bf2:	400b      	ands	r3, r1
 8007bf4:	498e      	ldr	r1, [pc, #568]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	610b      	str	r3, [r1, #16]
 8007bfa:	e005      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007bfc:	4b8c      	ldr	r3, [pc, #560]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	4a8b      	ldr	r2, [pc, #556]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007c02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c06:	6113      	str	r3, [r2, #16]
 8007c08:	4b89      	ldr	r3, [pc, #548]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007c0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c16:	4986      	ldr	r1, [pc, #536]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	670b      	str	r3, [r1, #112]	; 0x70
 8007c1c:	e004      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	75bb      	strb	r3, [r7, #22]
 8007c22:	e001      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d07e      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c38:	2b28      	cmp	r3, #40	; 0x28
 8007c3a:	d867      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007d13 	.word	0x08007d13
 8007c48:	08007d0d 	.word	0x08007d0d
 8007c4c:	08007d0d 	.word	0x08007d0d
 8007c50:	08007d0d 	.word	0x08007d0d
 8007c54:	08007d0d 	.word	0x08007d0d
 8007c58:	08007d0d 	.word	0x08007d0d
 8007c5c:	08007d0d 	.word	0x08007d0d
 8007c60:	08007d0d 	.word	0x08007d0d
 8007c64:	08007ce9 	.word	0x08007ce9
 8007c68:	08007d0d 	.word	0x08007d0d
 8007c6c:	08007d0d 	.word	0x08007d0d
 8007c70:	08007d0d 	.word	0x08007d0d
 8007c74:	08007d0d 	.word	0x08007d0d
 8007c78:	08007d0d 	.word	0x08007d0d
 8007c7c:	08007d0d 	.word	0x08007d0d
 8007c80:	08007d0d 	.word	0x08007d0d
 8007c84:	08007cfb 	.word	0x08007cfb
 8007c88:	08007d0d 	.word	0x08007d0d
 8007c8c:	08007d0d 	.word	0x08007d0d
 8007c90:	08007d0d 	.word	0x08007d0d
 8007c94:	08007d0d 	.word	0x08007d0d
 8007c98:	08007d0d 	.word	0x08007d0d
 8007c9c:	08007d0d 	.word	0x08007d0d
 8007ca0:	08007d0d 	.word	0x08007d0d
 8007ca4:	08007d13 	.word	0x08007d13
 8007ca8:	08007d0d 	.word	0x08007d0d
 8007cac:	08007d0d 	.word	0x08007d0d
 8007cb0:	08007d0d 	.word	0x08007d0d
 8007cb4:	08007d0d 	.word	0x08007d0d
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007d0d 	.word	0x08007d0d
 8007cc0:	08007d0d 	.word	0x08007d0d
 8007cc4:	08007d13 	.word	0x08007d13
 8007cc8:	08007d0d 	.word	0x08007d0d
 8007ccc:	08007d0d 	.word	0x08007d0d
 8007cd0:	08007d0d 	.word	0x08007d0d
 8007cd4:	08007d0d 	.word	0x08007d0d
 8007cd8:	08007d0d 	.word	0x08007d0d
 8007cdc:	08007d0d 	.word	0x08007d0d
 8007ce0:	08007d0d 	.word	0x08007d0d
 8007ce4:	08007d13 	.word	0x08007d13
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3304      	adds	r3, #4
 8007cec:	2101      	movs	r1, #1
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 fb5a 	bl	80093a8 <RCCEx_PLL2_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cf8:	e00c      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3324      	adds	r3, #36	; 0x24
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 fc03 	bl	800950c <RCCEx_PLL3_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007d0a:	e003      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d10:	e000      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d1a:	4b45      	ldr	r3, [pc, #276]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d26:	4942      	ldr	r1, [pc, #264]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	654b      	str	r3, [r1, #84]	; 0x54
 8007d2c:	e001      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d037      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	d820      	bhi.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d8f 	.word	0x08007d8f
 8007d50:	08007d65 	.word	0x08007d65
 8007d54:	08007d77 	.word	0x08007d77
 8007d58:	08007d8f 	.word	0x08007d8f
 8007d5c:	08007d8f 	.word	0x08007d8f
 8007d60:	08007d8f 	.word	0x08007d8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3304      	adds	r3, #4
 8007d68:	2101      	movs	r1, #1
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 fb1c 	bl	80093a8 <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d74:	e00c      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3324      	adds	r3, #36	; 0x24
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 fbc5 	bl	800950c <RCCEx_PLL3_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d86:	e003      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8c:	e000      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d109      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d96:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9a:	f023 0207 	bic.w	r2, r3, #7
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da2:	4923      	ldr	r1, [pc, #140]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	654b      	str	r3, [r1, #84]	; 0x54
 8007da8:	e001      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d040      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc0:	2b05      	cmp	r3, #5
 8007dc2:	d821      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007dc4:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	08007e0f 	.word	0x08007e0f
 8007dd0:	08007de5 	.word	0x08007de5
 8007dd4:	08007df7 	.word	0x08007df7
 8007dd8:	08007e0f 	.word	0x08007e0f
 8007ddc:	08007e0f 	.word	0x08007e0f
 8007de0:	08007e0f 	.word	0x08007e0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	2101      	movs	r1, #1
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 fadc 	bl	80093a8 <RCCEx_PLL2_Config>
 8007df0:	4603      	mov	r3, r0
 8007df2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007df4:	e00c      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3324      	adds	r3, #36	; 0x24
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f001 fb85 	bl	800950c <RCCEx_PLL3_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007e06:	e003      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0c:	e000      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8007e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d110      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e16:	4b06      	ldr	r3, [pc, #24]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1a:	f023 0207 	bic.w	r2, r3, #7
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e24:	4902      	ldr	r1, [pc, #8]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	658b      	str	r3, [r1, #88]	; 0x58
 8007e2a:	e007      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007e2c:	58024800 	.word	0x58024800
 8007e30:	58024400 	.word	0x58024400
 8007e34:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d04b      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e52:	d02e      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e58:	d828      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5e:	d02a      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e64:	d822      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e6a:	d026      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007e6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e70:	d81c      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e76:	d010      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7c:	d816      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01d      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e86:	d111      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 fa8a 	bl	80093a8 <RCCEx_PLL2_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e98:	e012      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3324      	adds	r3, #36	; 0x24
 8007e9e:	2102      	movs	r1, #2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 fb33 	bl	800950c <RCCEx_PLL3_Config>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007eaa:	e009      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb0:	e006      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007eb2:	bf00      	nop
 8007eb4:	e004      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007eb6:	bf00      	nop
 8007eb8:	e002      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007eba:	bf00      	nop
 8007ebc:	e000      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10a      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ec6:	4bb2      	ldr	r3, [pc, #712]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed4:	49ae      	ldr	r1, [pc, #696]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	654b      	str	r3, [r1, #84]	; 0x54
 8007eda:	e001      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d04b      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ef6:	d02e      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007ef8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007efc:	d828      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f02:	d02a      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f08:	d822      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007f0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f0e:	d026      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f14:	d81c      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f1a:	d010      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f20:	d816      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01d      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f2a:	d111      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	2100      	movs	r1, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fa38 	bl	80093a8 <RCCEx_PLL2_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f3c:	e012      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3324      	adds	r3, #36	; 0x24
 8007f42:	2102      	movs	r1, #2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 fae1 	bl	800950c <RCCEx_PLL3_Config>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f4e:	e009      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	75fb      	strb	r3, [r7, #23]
      break;
 8007f54:	e006      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007f56:	bf00      	nop
 8007f58:	e004      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007f5a:	bf00      	nop
 8007f5c:	e002      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007f5e:	bf00      	nop
 8007f60:	e000      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10a      	bne.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f6a:	4b89      	ldr	r3, [pc, #548]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f78:	4985      	ldr	r1, [pc, #532]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	658b      	str	r3, [r1, #88]	; 0x58
 8007f7e:	e001      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d04b      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f9a:	d02e      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007f9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007fa0:	d828      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa6:	d02a      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fac:	d822      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007fae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007fb2:	d026      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007fb4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007fb8:	d81c      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fbe:	d010      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc4:	d816      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01d      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fce:	d111      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 f9e6 	bl	80093a8 <RCCEx_PLL2_Config>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007fe0:	e012      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3324      	adds	r3, #36	; 0x24
 8007fe6:	2102      	movs	r1, #2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 fa8f 	bl	800950c <RCCEx_PLL3_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ff2:	e009      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff8:	e006      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007ffa:	bf00      	nop
 8007ffc:	e004      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007ffe:	bf00      	nop
 8008000:	e002      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008002:	bf00      	nop
 8008004:	e000      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800800e:	4b60      	ldr	r3, [pc, #384]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800801c:	495c      	ldr	r1, [pc, #368]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800801e:	4313      	orrs	r3, r2
 8008020:	658b      	str	r3, [r1, #88]	; 0x58
 8008022:	e001      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d018      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800803c:	d10a      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3324      	adds	r3, #36	; 0x24
 8008042:	2102      	movs	r1, #2
 8008044:	4618      	mov	r0, r3
 8008046:	f001 fa61 	bl	800950c <RCCEx_PLL3_Config>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008054:	4b4e      	ldr	r3, [pc, #312]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008058:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008060:	494b      	ldr	r1, [pc, #300]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008062:	4313      	orrs	r3, r2
 8008064:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0310 	and.w	r3, r3, #16
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01a      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800807c:	d10a      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3324      	adds	r3, #36	; 0x24
 8008082:	2102      	movs	r1, #2
 8008084:	4618      	mov	r0, r3
 8008086:	f001 fa41 	bl	800950c <RCCEx_PLL3_Config>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008094:	4b3e      	ldr	r3, [pc, #248]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a2:	493b      	ldr	r1, [pc, #236]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d034      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080be:	d01d      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80080c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c4:	d817      	bhi.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80080ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ce:	d009      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80080d0:	e011      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3304      	adds	r3, #4
 80080d6:	2100      	movs	r1, #0
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 f965 	bl	80093a8 <RCCEx_PLL2_Config>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080e2:	e00c      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3324      	adds	r3, #36	; 0x24
 80080e8:	2102      	movs	r1, #2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 fa0e 	bl	800950c <RCCEx_PLL3_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080f4:	e003      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	75fb      	strb	r3, [r7, #23]
      break;
 80080fa:	e000      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80080fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008104:	4b22      	ldr	r3, [pc, #136]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008112:	491f      	ldr	r1, [pc, #124]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008114:	4313      	orrs	r3, r2
 8008116:	658b      	str	r3, [r1, #88]	; 0x58
 8008118:	e001      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d036      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008130:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008134:	d01c      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008136:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800813a:	d816      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800813c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008140:	d003      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008146:	d007      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008148:	e00f      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800814a:	4b11      	ldr	r3, [pc, #68]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	4a10      	ldr	r2, [pc, #64]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008154:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008156:	e00c      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3324      	adds	r3, #36	; 0x24
 800815c:	2101      	movs	r1, #1
 800815e:	4618      	mov	r0, r3
 8008160:	f001 f9d4 	bl	800950c <RCCEx_PLL3_Config>
 8008164:	4603      	mov	r3, r0
 8008166:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008168:	e003      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]
      break;
 800816e:	e000      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10d      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008178:	4b05      	ldr	r3, [pc, #20]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800817a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008186:	4902      	ldr	r1, [pc, #8]	; (8008190 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008188:	4313      	orrs	r3, r2
 800818a:	654b      	str	r3, [r1, #84]	; 0x54
 800818c:	e004      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800818e:	bf00      	nop
 8008190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d029      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80081ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b0:	d007      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80081b2:	e00f      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081b4:	4b61      	ldr	r3, [pc, #388]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b8:	4a60      	ldr	r2, [pc, #384]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80081c0:	e00b      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3304      	adds	r3, #4
 80081c6:	2102      	movs	r1, #2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f001 f8ed 	bl	80093a8 <RCCEx_PLL2_Config>
 80081ce:	4603      	mov	r3, r0
 80081d0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80081d2:	e002      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	75fb      	strb	r3, [r7, #23]
      break;
 80081d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d109      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80081e0:	4b56      	ldr	r3, [pc, #344]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ec:	4953      	ldr	r1, [pc, #332]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081f2:	e001      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3324      	adds	r3, #36	; 0x24
 8008208:	2102      	movs	r1, #2
 800820a:	4618      	mov	r0, r3
 800820c:	f001 f97e 	bl	800950c <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d030      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800822a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800822e:	d017      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008234:	d811      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823a:	d013      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800823c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008240:	d80b      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d010      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800824a:	d106      	bne.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800824c:	4b3b      	ldr	r3, [pc, #236]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	4a3a      	ldr	r2, [pc, #232]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008258:	e007      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	75fb      	strb	r3, [r7, #23]
      break;
 800825e:	e004      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008260:	bf00      	nop
 8008262:	e002      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008264:	bf00      	nop
 8008266:	e000      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d109      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008270:	4b32      	ldr	r3, [pc, #200]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800827c:	492f      	ldr	r1, [pc, #188]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800827e:	4313      	orrs	r3, r2
 8008280:	654b      	str	r3, [r1, #84]	; 0x54
 8008282:	e001      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d008      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008294:	4b29      	ldr	r3, [pc, #164]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008298:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a0:	4926      	ldr	r1, [pc, #152]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d008      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082b2:	4b22      	ldr	r3, [pc, #136]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082be:	491f      	ldr	r1, [pc, #124]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00d      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082d0:	4b1a      	ldr	r3, [pc, #104]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	4a19      	ldr	r2, [pc, #100]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082da:	6113      	str	r3, [r2, #16]
 80082dc:	4b17      	ldr	r3, [pc, #92]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082de:	691a      	ldr	r2, [r3, #16]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082e6:	4915      	ldr	r1, [pc, #84]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da08      	bge.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082f4:	4b11      	ldr	r3, [pc, #68]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008300:	490e      	ldr	r1, [pc, #56]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008302:	4313      	orrs	r3, r2
 8008304:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008312:	4b0a      	ldr	r3, [pc, #40]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008320:	4906      	ldr	r1, [pc, #24]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008322:	4313      	orrs	r3, r2
 8008324:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008326:	7dbb      	ldrb	r3, [r7, #22]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	e000      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	58024400 	.word	0x58024400

08008340 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b090      	sub	sp, #64	; 0x40
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834e:	f040 8089 	bne.w	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008352:	4b95      	ldr	r3, [pc, #596]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	633b      	str	r3, [r7, #48]	; 0x30
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	2b04      	cmp	r3, #4
 8008360:	d87d      	bhi.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	0800837d 	.word	0x0800837d
 800836c:	080083a1 	.word	0x080083a1
 8008370:	080083c5 	.word	0x080083c5
 8008374:	08008459 	.word	0x08008459
 8008378:	080083e9 	.word	0x080083e9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800837c:	4b8a      	ldr	r3, [pc, #552]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008388:	d107      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800838a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800838e:	4618      	mov	r0, r3
 8008390:	f000 feb8 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008398:	e3ed      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800839e:	e3ea      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083a0:	4b81      	ldr	r3, [pc, #516]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083ac:	d107      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ae:	f107 0318 	add.w	r3, r7, #24
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fbfe 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083bc:	e3db      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c2:	e3d8      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083c4:	4b78      	ldr	r3, [pc, #480]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d0:	d107      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083d2:	f107 030c 	add.w	r3, r7, #12
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fd40 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083e0:	e3c9      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e6:	e3c6      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083e8:	4b6f      	ldr	r3, [pc, #444]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80083ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083f2:	4b6d      	ldr	r3, [pc, #436]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d10c      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008404:	4b68      	ldr	r3, [pc, #416]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	08db      	lsrs	r3, r3, #3
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	4a67      	ldr	r2, [pc, #412]	; (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008410:	fa22 f303 	lsr.w	r3, r2, r3
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008416:	e01e      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008418:	4b63      	ldr	r3, [pc, #396]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008424:	d106      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800842c:	d102      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800842e:	4b60      	ldr	r3, [pc, #384]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008432:	e010      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008434:	4b5c      	ldr	r3, [pc, #368]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800843c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008440:	d106      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008448:	d102      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800844a:	4b5a      	ldr	r3, [pc, #360]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800844e:	e002      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008454:	e38f      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008456:	e38e      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008458:	4b57      	ldr	r3, [pc, #348]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800845c:	e38b      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008462:	e388      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846a:	f040 80a7 	bne.w	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800846e:	4b4e      	ldr	r3, [pc, #312]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008472:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008476:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800847e:	d054      	beq.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008486:	f200 808b 	bhi.w	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008490:	f000 8083 	beq.w	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800849a:	f200 8081 	bhi.w	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084a4:	d02f      	beq.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084ac:	d878      	bhi.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d004      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084ba:	d012      	beq.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80084bc:	e070      	b.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084be:	4b3a      	ldr	r3, [pc, #232]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ca:	d107      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fe17 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084da:	e34c      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084e0:	e349      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084e2:	4b31      	ldr	r3, [pc, #196]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084ee:	d107      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084f0:	f107 0318 	add.w	r3, r7, #24
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fb5d 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084fe:	e33a      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008504:	e337      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008506:	4b28      	ldr	r3, [pc, #160]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800850e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008512:	d107      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008514:	f107 030c 	add.w	r3, r7, #12
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fc9f 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008522:	e328      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008528:	e325      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800852a:	4b1f      	ldr	r3, [pc, #124]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800852c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008532:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008534:	4b1c      	ldr	r3, [pc, #112]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b04      	cmp	r3, #4
 800853e:	d10c      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008542:	2b00      	cmp	r3, #0
 8008544:	d109      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008546:	4b18      	ldr	r3, [pc, #96]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	08db      	lsrs	r3, r3, #3
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	4a16      	ldr	r2, [pc, #88]	; (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008552:	fa22 f303 	lsr.w	r3, r2, r3
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008558:	e01e      	b.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800855a:	4b13      	ldr	r3, [pc, #76]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008566:	d106      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800856e:	d102      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008570:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008574:	e010      	b.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008576:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008582:	d106      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800858a:	d102      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800858e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008590:	e002      	b.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008596:	e2ee      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008598:	e2ed      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800859a:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800859c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800859e:	e2ea      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085a4:	e2e7      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80085a6:	bf00      	nop
 80085a8:	58024400 	.word	0x58024400
 80085ac:	03d09000 	.word	0x03d09000
 80085b0:	003d0900 	.word	0x003d0900
 80085b4:	017d7840 	.word	0x017d7840
 80085b8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c2:	f040 809c 	bne.w	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80085c6:	4b9e      	ldr	r3, [pc, #632]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80085c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ca:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80085ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085d6:	d054      	beq.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085de:	f200 808b 	bhi.w	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085e8:	f000 8083 	beq.w	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085f2:	f200 8081 	bhi.w	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085fc:	d02f      	beq.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008604:	d878      	bhi.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008612:	d012      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008614:	e070      	b.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008616:	4b8a      	ldr	r3, [pc, #552]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800861e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008622:	d107      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fd6b 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008632:	e2a0      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008638:	e29d      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800863a:	4b81      	ldr	r3, [pc, #516]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008646:	d107      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008648:	f107 0318 	add.w	r3, r7, #24
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fab1 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008656:	e28e      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800865c:	e28b      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800865e:	4b78      	ldr	r3, [pc, #480]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800866a:	d107      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800866c:	f107 030c 	add.w	r3, r7, #12
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fbf3 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800867a:	e27c      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008680:	e279      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008682:	4b6f      	ldr	r3, [pc, #444]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008686:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800868a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800868c:	4b6c      	ldr	r3, [pc, #432]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b04      	cmp	r3, #4
 8008696:	d10c      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800869e:	4b68      	ldr	r3, [pc, #416]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	08db      	lsrs	r3, r3, #3
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	4a66      	ldr	r2, [pc, #408]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80086aa:	fa22 f303 	lsr.w	r3, r2, r3
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b0:	e01e      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086b2:	4b63      	ldr	r3, [pc, #396]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086be:	d106      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80086c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086c6:	d102      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80086c8:	4b5f      	ldr	r3, [pc, #380]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086cc:	e010      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086ce:	4b5c      	ldr	r3, [pc, #368]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086da:	d106      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086e2:	d102      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80086e4:	4b59      	ldr	r3, [pc, #356]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80086e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e8:	e002      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80086ee:	e242      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80086f0:	e241      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80086f2:	4b57      	ldr	r3, [pc, #348]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086f6:	e23e      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086fc:	e23b      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008704:	f040 80a6 	bne.w	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008708:	4b4d      	ldr	r3, [pc, #308]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800870a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800870c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008710:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008718:	d054      	beq.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008720:	f200 808b 	bhi.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800872a:	f000 8083 	beq.w	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008734:	f200 8081 	bhi.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800873e:	d02f      	beq.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008746:	d878      	bhi.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008754:	d012      	beq.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8008756:	e070      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008758:	4b39      	ldr	r3, [pc, #228]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008764:	d107      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fcca 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008774:	e1ff      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800877a:	e1fc      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800877c:	4b30      	ldr	r3, [pc, #192]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008788:	d107      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878a:	f107 0318 	add.w	r3, r7, #24
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fa10 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008798:	e1ed      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800879e:	e1ea      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087a0:	4b27      	ldr	r3, [pc, #156]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ac:	d107      	bne.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ae:	f107 030c 	add.w	r3, r7, #12
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fb52 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087bc:	e1db      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087c2:	e1d8      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80087c4:	4b1e      	ldr	r3, [pc, #120]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087cc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087ce:	4b1c      	ldr	r3, [pc, #112]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d10c      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80087da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d109      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087e0:	4b17      	ldr	r3, [pc, #92]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	08db      	lsrs	r3, r3, #3
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	4a16      	ldr	r2, [pc, #88]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f2:	e01e      	b.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087f4:	4b12      	ldr	r3, [pc, #72]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008800:	d106      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008808:	d102      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800880c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800880e:	e010      	b.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800881c:	d106      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008824:	d102      	bne.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800882a:	e002      	b.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008830:	e1a1      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008832:	e1a0      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008834:	4b06      	ldr	r3, [pc, #24]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008838:	e19d      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800883e:	e19a      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008840:	58024400 	.word	0x58024400
 8008844:	03d09000 	.word	0x03d09000
 8008848:	003d0900 	.word	0x003d0900
 800884c:	017d7840 	.word	0x017d7840
 8008850:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800885a:	d173      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800885c:	4b9a      	ldr	r3, [pc, #616]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800885e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008864:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800886c:	d02f      	beq.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008874:	d863      	bhi.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008882:	d012      	beq.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008884:	e05b      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008886:	4b90      	ldr	r3, [pc, #576]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800888e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008892:	d107      	bne.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008894:	f107 0318 	add.w	r3, r7, #24
 8008898:	4618      	mov	r0, r3
 800889a:	f000 f98b 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088a2:	e168      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088a8:	e165      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088aa:	4b87      	ldr	r3, [pc, #540]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b6:	d107      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088b8:	f107 030c 	add.w	r3, r7, #12
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 facd 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088c6:	e156      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088cc:	e153      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088ce:	4b7e      	ldr	r3, [pc, #504]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80088d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088d8:	4b7b      	ldr	r3, [pc, #492]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d10c      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80088e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088ea:	4b77      	ldr	r3, [pc, #476]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	08db      	lsrs	r3, r3, #3
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	4a75      	ldr	r2, [pc, #468]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80088f6:	fa22 f303 	lsr.w	r3, r2, r3
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088fc:	e01e      	b.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088fe:	4b72      	ldr	r3, [pc, #456]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890a:	d106      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800890c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008912:	d102      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008914:	4b6e      	ldr	r3, [pc, #440]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008918:	e010      	b.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800891a:	4b6b      	ldr	r3, [pc, #428]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008926:	d106      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892e:	d102      	bne.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008930:	4b68      	ldr	r3, [pc, #416]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008934:	e002      	b.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800893a:	e11c      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800893c:	e11b      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008942:	e118      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800894a:	d133      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800894c:	4b5e      	ldr	r3, [pc, #376]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800894e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008954:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	2b00      	cmp	r3, #0
 800895a:	d004      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008962:	d012      	beq.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008964:	e023      	b.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008966:	4b58      	ldr	r3, [pc, #352]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800896e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008972:	d107      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fbc3 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008982:	e0f8      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008988:	e0f5      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800898a:	4b4f      	ldr	r3, [pc, #316]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008996:	d107      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008998:	f107 0318 	add.w	r3, r7, #24
 800899c:	4618      	mov	r0, r3
 800899e:	f000 f909 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089a6:	e0e6      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ac:	e0e3      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089b2:	e0e0      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089ba:	f040 808d 	bne.w	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80089be:	4b42      	ldr	r3, [pc, #264]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80089c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089ce:	d06b      	beq.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089d6:	d874      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089de:	d056      	beq.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80089e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e6:	d86c      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089ee:	d03b      	beq.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80089f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089f6:	d864      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089fe:	d021      	beq.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a06:	d85c      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d004      	beq.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a14:	d004      	beq.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008a16:	e054      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a18:	f000 f8b6 	bl	8008b88 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a1c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008a1e:	e0aa      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a20:	4b29      	ldr	r3, [pc, #164]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a2c:	d107      	bne.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a2e:	f107 0318 	add.w	r3, r7, #24
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 f8be 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a3c:	e09b      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a42:	e098      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a44:	4b20      	ldr	r3, [pc, #128]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a50:	d107      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a52:	f107 030c 	add.w	r3, r7, #12
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fa00 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a60:	e089      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a66:	e086      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a68:	4b17      	ldr	r3, [pc, #92]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d109      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a74:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	08db      	lsrs	r3, r3, #3
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	4a13      	ldr	r2, [pc, #76]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008a80:	fa22 f303 	lsr.w	r3, r2, r3
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a86:	e076      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a8c:	e073      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a8e:	4b0e      	ldr	r3, [pc, #56]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a9a:	d102      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008a9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008aa0:	e069      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa6:	e066      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008aa8:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ab4:	d102      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008ab6:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008aba:	e05c      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac0:	e059      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac6:	e056      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	03d09000 	.word	0x03d09000
 8008ad0:	003d0900 	.word	0x003d0900
 8008ad4:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ade:	d148      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008ae0:	4b27      	ldr	r3, [pc, #156]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ae8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af0:	d02a      	beq.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af8:	d838      	bhi.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d004      	beq.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b06:	d00d      	beq.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008b08:	e030      	b.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b0a:	4b1d      	ldr	r3, [pc, #116]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b16:	d102      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008b18:	4b1a      	ldr	r3, [pc, #104]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b1c:	e02b      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b22:	e028      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b24:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b30:	d107      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fae4 	bl	8009104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b40:	e019      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b46:	e016      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b48:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b54:	d107      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b56:	f107 0318 	add.w	r3, r7, #24
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f82a 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b64:	e007      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b6a:	e004      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b70:	e001      	b.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3740      	adds	r7, #64	; 0x40
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	58024400 	.word	0x58024400
 8008b84:	017d7840 	.word	0x017d7840

08008b88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008b8c:	f7fe fc40 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8008b90:	4602      	mov	r2, r0
 8008b92:	4b06      	ldr	r3, [pc, #24]	; (8008bac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	091b      	lsrs	r3, r3, #4
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	4904      	ldr	r1, [pc, #16]	; (8008bb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ba0:	f003 031f 	and.w	r3, r3, #31
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	58024400 	.word	0x58024400
 8008bb0:	0800d600 	.word	0x0800d600

08008bb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b089      	sub	sp, #36	; 0x24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bbc:	4ba1      	ldr	r3, [pc, #644]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	f003 0303 	and.w	r3, r3, #3
 8008bc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008bc6:	4b9f      	ldr	r3, [pc, #636]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	0b1b      	lsrs	r3, r3, #12
 8008bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008bd2:	4b9c      	ldr	r3, [pc, #624]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	091b      	lsrs	r3, r3, #4
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008bde:	4b99      	ldr	r3, [pc, #612]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be2:	08db      	lsrs	r3, r3, #3
 8008be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	fb02 f303 	mul.w	r3, r2, r3
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 8111 	beq.w	8008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	f000 8083 	beq.w	8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	f200 80a1 	bhi.w	8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d056      	beq.n	8008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c1e:	e099      	b.n	8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c20:	4b88      	ldr	r3, [pc, #544]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0320 	and.w	r3, r3, #32
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d02d      	beq.n	8008c88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c2c:	4b85      	ldr	r3, [pc, #532]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	08db      	lsrs	r3, r3, #3
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	4a84      	ldr	r2, [pc, #528]	; (8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c38:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	ee07 3a90 	vmov	s15, r3
 8008c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c56:	4b7b      	ldr	r3, [pc, #492]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c86:	e087      	b.n	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9a:	4b6a      	ldr	r3, [pc, #424]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cca:	e065      	b.n	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cde:	4b59      	ldr	r3, [pc, #356]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d0e:	e043      	b.n	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d22:	4b48      	ldr	r3, [pc, #288]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d52:	e021      	b.n	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d66:	4b37      	ldr	r3, [pc, #220]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008d98:	4b2a      	ldr	r3, [pc, #168]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9c:	0a5b      	lsrs	r3, r3, #9
 8008d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dbe:	ee17 2a90 	vmov	r2, s15
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008dc6:	4b1f      	ldr	r3, [pc, #124]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	0c1b      	lsrs	r3, r3, #16
 8008dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd0:	ee07 3a90 	vmov	s15, r3
 8008dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dec:	ee17 2a90 	vmov	r2, s15
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008df4:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	0e1b      	lsrs	r3, r3, #24
 8008dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1a:	ee17 2a90 	vmov	r2, s15
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e22:	e008      	b.n	8008e36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	609a      	str	r2, [r3, #8]
}
 8008e36:	bf00      	nop
 8008e38:	3724      	adds	r7, #36	; 0x24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	58024400 	.word	0x58024400
 8008e48:	03d09000 	.word	0x03d09000
 8008e4c:	46000000 	.word	0x46000000
 8008e50:	4c742400 	.word	0x4c742400
 8008e54:	4a742400 	.word	0x4a742400
 8008e58:	4bbebc20 	.word	0x4bbebc20

08008e5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b089      	sub	sp, #36	; 0x24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e64:	4ba1      	ldr	r3, [pc, #644]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008e6e:	4b9f      	ldr	r3, [pc, #636]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e72:	0d1b      	lsrs	r3, r3, #20
 8008e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e7a:	4b9c      	ldr	r3, [pc, #624]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7e:	0a1b      	lsrs	r3, r3, #8
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008e86:	4b99      	ldr	r3, [pc, #612]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8a:	08db      	lsrs	r3, r3, #3
 8008e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	fb02 f303 	mul.w	r3, r2, r3
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8111 	beq.w	80090cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	f000 8083 	beq.w	8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	f200 80a1 	bhi.w	8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d056      	beq.n	8008f74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ec6:	e099      	b.n	8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ec8:	4b88      	ldr	r3, [pc, #544]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d02d      	beq.n	8008f30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ed4:	4b85      	ldr	r3, [pc, #532]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	08db      	lsrs	r3, r3, #3
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	4a84      	ldr	r2, [pc, #528]	; (80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	ee07 3a90 	vmov	s15, r3
 8008eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008efe:	4b7b      	ldr	r3, [pc, #492]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f12:	eddf 5a78 	vldr	s11, [pc, #480]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008f2e:	e087      	b.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f42:	4b6a      	ldr	r3, [pc, #424]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f56:	eddf 5a67 	vldr	s11, [pc, #412]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f72:	e065      	b.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80090fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f86:	4b59      	ldr	r3, [pc, #356]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fb6:	e043      	b.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fca:	4b48      	ldr	r3, [pc, #288]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fde:	eddf 5a45 	vldr	s11, [pc, #276]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ffa:	e021      	b.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009006:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80090fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800900a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900e:	4b37      	ldr	r3, [pc, #220]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009022:	eddf 5a34 	vldr	s11, [pc, #208]	; 80090f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800903e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009040:	4b2a      	ldr	r3, [pc, #168]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	0a5b      	lsrs	r3, r3, #9
 8009046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800905a:	edd7 6a07 	vldr	s13, [r7, #28]
 800905e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009066:	ee17 2a90 	vmov	r2, s15
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800906e:	4b1f      	ldr	r3, [pc, #124]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	0c1b      	lsrs	r3, r3, #16
 8009074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009078:	ee07 3a90 	vmov	s15, r3
 800907c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009084:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009088:	edd7 6a07 	vldr	s13, [r7, #28]
 800908c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009094:	ee17 2a90 	vmov	r2, s15
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800909c:	4b13      	ldr	r3, [pc, #76]	; (80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800909e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a0:	0e1b      	lsrs	r3, r3, #24
 80090a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80090ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090c2:	ee17 2a90 	vmov	r2, s15
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80090ca:	e008      	b.n	80090de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	609a      	str	r2, [r3, #8]
}
 80090de:	bf00      	nop
 80090e0:	3724      	adds	r7, #36	; 0x24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	58024400 	.word	0x58024400
 80090f0:	03d09000 	.word	0x03d09000
 80090f4:	46000000 	.word	0x46000000
 80090f8:	4c742400 	.word	0x4c742400
 80090fc:	4a742400 	.word	0x4a742400
 8009100:	4bbebc20 	.word	0x4bbebc20

08009104 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009104:	b480      	push	{r7}
 8009106:	b089      	sub	sp, #36	; 0x24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800910c:	4ba0      	ldr	r3, [pc, #640]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800910e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009110:	f003 0303 	and.w	r3, r3, #3
 8009114:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009116:	4b9e      	ldr	r3, [pc, #632]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911a:	091b      	lsrs	r3, r3, #4
 800911c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009120:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009122:	4b9b      	ldr	r3, [pc, #620]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800912c:	4b98      	ldr	r3, [pc, #608]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800912e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009130:	08db      	lsrs	r3, r3, #3
 8009132:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	fb02 f303 	mul.w	r3, r2, r3
 800913c:	ee07 3a90 	vmov	s15, r3
 8009140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009144:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8111 	beq.w	8009372 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b02      	cmp	r3, #2
 8009154:	f000 8083 	beq.w	800925e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	2b02      	cmp	r3, #2
 800915c:	f200 80a1 	bhi.w	80092a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d056      	beq.n	800921a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800916c:	e099      	b.n	80092a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800916e:	4b88      	ldr	r3, [pc, #544]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d02d      	beq.n	80091d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800917a:	4b85      	ldr	r3, [pc, #532]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	08db      	lsrs	r3, r3, #3
 8009180:	f003 0303 	and.w	r3, r3, #3
 8009184:	4a83      	ldr	r2, [pc, #524]	; (8009394 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009186:	fa22 f303 	lsr.w	r3, r2, r3
 800918a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	ee07 3a90 	vmov	s15, r3
 800919c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a4:	4b7a      	ldr	r3, [pc, #488]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ac:	ee07 3a90 	vmov	s15, r3
 80091b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80091b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80091d4:	e087      	b.n	80092e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800939c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091e8:	4b69      	ldr	r3, [pc, #420]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f0:	ee07 3a90 	vmov	s15, r3
 80091f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800920c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009214:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009218:	e065      	b.n	80092e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009224:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80093a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922c:	4b58      	ldr	r3, [pc, #352]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800922e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009234:	ee07 3a90 	vmov	s15, r3
 8009238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009240:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009258:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800925c:	e043      	b.n	80092e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009268:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800926c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009270:	4b47      	ldr	r3, [pc, #284]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009280:	ed97 6a03 	vldr	s12, [r7, #12]
 8009284:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092a0:	e021      	b.n	80092e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800939c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b4:	4b36      	ldr	r3, [pc, #216]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80092e6:	4b2a      	ldr	r3, [pc, #168]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	0a5b      	lsrs	r3, r3, #9
 80092ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092f0:	ee07 3a90 	vmov	s15, r3
 80092f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009300:	edd7 6a07 	vldr	s13, [r7, #28]
 8009304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800930c:	ee17 2a90 	vmov	r2, s15
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009314:	4b1e      	ldr	r3, [pc, #120]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009318:	0c1b      	lsrs	r3, r3, #16
 800931a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800932a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800932e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800933a:	ee17 2a90 	vmov	r2, s15
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009342:	4b13      	ldr	r3, [pc, #76]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	0e1b      	lsrs	r3, r3, #24
 8009348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800935c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009368:	ee17 2a90 	vmov	r2, s15
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009370:	e008      	b.n	8009384 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
}
 8009384:	bf00      	nop
 8009386:	3724      	adds	r7, #36	; 0x24
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	58024400 	.word	0x58024400
 8009394:	03d09000 	.word	0x03d09000
 8009398:	46000000 	.word	0x46000000
 800939c:	4c742400 	.word	0x4c742400
 80093a0:	4a742400 	.word	0x4a742400
 80093a4:	4bbebc20 	.word	0x4bbebc20

080093a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093b6:	4b53      	ldr	r3, [pc, #332]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d101      	bne.n	80093c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e099      	b.n	80094fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80093c6:	4b4f      	ldr	r3, [pc, #316]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a4e      	ldr	r2, [pc, #312]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093d2:	f7f9 fd8f 	bl	8002ef4 <HAL_GetTick>
 80093d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093d8:	e008      	b.n	80093ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80093da:	f7f9 fd8b 	bl	8002ef4 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e086      	b.n	80094fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093ec:	4b45      	ldr	r3, [pc, #276]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f0      	bne.n	80093da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093f8:	4b42      	ldr	r3, [pc, #264]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80093fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	031b      	lsls	r3, r3, #12
 8009406:	493f      	ldr	r1, [pc, #252]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009408:	4313      	orrs	r3, r2
 800940a:	628b      	str	r3, [r1, #40]	; 0x28
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	3b01      	subs	r3, #1
 8009412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	3b01      	subs	r3, #1
 800941c:	025b      	lsls	r3, r3, #9
 800941e:	b29b      	uxth	r3, r3
 8009420:	431a      	orrs	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	3b01      	subs	r3, #1
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800942e:	431a      	orrs	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	3b01      	subs	r3, #1
 8009436:	061b      	lsls	r3, r3, #24
 8009438:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800943c:	4931      	ldr	r1, [pc, #196]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800943e:	4313      	orrs	r3, r2
 8009440:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009442:	4b30      	ldr	r3, [pc, #192]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	492d      	ldr	r1, [pc, #180]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009450:	4313      	orrs	r3, r2
 8009452:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009454:	4b2b      	ldr	r3, [pc, #172]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009458:	f023 0220 	bic.w	r2, r3, #32
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	4928      	ldr	r1, [pc, #160]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009462:	4313      	orrs	r3, r2
 8009464:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009466:	4b27      	ldr	r3, [pc, #156]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	4a26      	ldr	r2, [pc, #152]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800946c:	f023 0310 	bic.w	r3, r3, #16
 8009470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009472:	4b24      	ldr	r3, [pc, #144]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009476:	4b24      	ldr	r3, [pc, #144]	; (8009508 <RCCEx_PLL2_Config+0x160>)
 8009478:	4013      	ands	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	69d2      	ldr	r2, [r2, #28]
 800947e:	00d2      	lsls	r2, r2, #3
 8009480:	4920      	ldr	r1, [pc, #128]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009482:	4313      	orrs	r3, r2
 8009484:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009486:	4b1f      	ldr	r3, [pc, #124]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 8009488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948a:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800948c:	f043 0310 	orr.w	r3, r3, #16
 8009490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949c:	4a19      	ldr	r2, [pc, #100]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 800949e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094a4:	e00f      	b.n	80094c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d106      	bne.n	80094ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80094ac:	4b15      	ldr	r3, [pc, #84]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	4a14      	ldr	r2, [pc, #80]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094b8:	e005      	b.n	80094c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094ba:	4b12      	ldr	r3, [pc, #72]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094be:	4a11      	ldr	r2, [pc, #68]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094c6:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a0e      	ldr	r2, [pc, #56]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d2:	f7f9 fd0f 	bl	8002ef4 <HAL_GetTick>
 80094d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094d8:	e008      	b.n	80094ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80094da:	f7f9 fd0b 	bl	8002ef4 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d901      	bls.n	80094ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e006      	b.n	80094fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094ec:	4b05      	ldr	r3, [pc, #20]	; (8009504 <RCCEx_PLL2_Config+0x15c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0f0      	beq.n	80094da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	58024400 	.word	0x58024400
 8009508:	ffff0007 	.word	0xffff0007

0800950c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800951a:	4b53      	ldr	r3, [pc, #332]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	2b03      	cmp	r3, #3
 8009524:	d101      	bne.n	800952a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e099      	b.n	800965e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800952a:	4b4f      	ldr	r3, [pc, #316]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a4e      	ldr	r2, [pc, #312]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009536:	f7f9 fcdd 	bl	8002ef4 <HAL_GetTick>
 800953a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800953c:	e008      	b.n	8009550 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800953e:	f7f9 fcd9 	bl	8002ef4 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	2b02      	cmp	r3, #2
 800954a:	d901      	bls.n	8009550 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e086      	b.n	800965e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009550:	4b45      	ldr	r3, [pc, #276]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1f0      	bne.n	800953e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800955c:	4b42      	ldr	r3, [pc, #264]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800955e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009560:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	051b      	lsls	r3, r3, #20
 800956a:	493f      	ldr	r1, [pc, #252]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800956c:	4313      	orrs	r3, r2
 800956e:	628b      	str	r3, [r1, #40]	; 0x28
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	3b01      	subs	r3, #1
 8009576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	3b01      	subs	r3, #1
 8009580:	025b      	lsls	r3, r3, #9
 8009582:	b29b      	uxth	r3, r3
 8009584:	431a      	orrs	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	3b01      	subs	r3, #1
 800958c:	041b      	lsls	r3, r3, #16
 800958e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009592:	431a      	orrs	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	3b01      	subs	r3, #1
 800959a:	061b      	lsls	r3, r3, #24
 800959c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095a0:	4931      	ldr	r1, [pc, #196]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80095a6:	4b30      	ldr	r3, [pc, #192]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	492d      	ldr	r1, [pc, #180]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095b8:	4b2b      	ldr	r3, [pc, #172]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	4928      	ldr	r1, [pc, #160]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095ca:	4b27      	ldr	r3, [pc, #156]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ce:	4a26      	ldr	r2, [pc, #152]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095da:	4b24      	ldr	r3, [pc, #144]	; (800966c <RCCEx_PLL3_Config+0x160>)
 80095dc:	4013      	ands	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	69d2      	ldr	r2, [r2, #28]
 80095e2:	00d2      	lsls	r2, r2, #3
 80095e4:	4920      	ldr	r1, [pc, #128]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095ea:	4b1f      	ldr	r3, [pc, #124]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	4a1e      	ldr	r2, [pc, #120]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095fc:	4b1a      	ldr	r3, [pc, #104]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	4a19      	ldr	r2, [pc, #100]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009608:	e00f      	b.n	800962a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d106      	bne.n	800961e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009610:	4b15      	ldr	r3, [pc, #84]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	4a14      	ldr	r2, [pc, #80]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009616:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800961a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800961c:	e005      	b.n	800962a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	4a11      	ldr	r2, [pc, #68]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009624:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009628:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800962a:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a0e      	ldr	r2, [pc, #56]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009636:	f7f9 fc5d 	bl	8002ef4 <HAL_GetTick>
 800963a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800963c:	e008      	b.n	8009650 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800963e:	f7f9 fc59 	bl	8002ef4 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	2b02      	cmp	r3, #2
 800964a:	d901      	bls.n	8009650 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e006      	b.n	800965e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <RCCEx_PLL3_Config+0x15c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d0f0      	beq.n	800963e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	58024400 	.word	0x58024400
 800966c:	ffff0007 	.word	0xffff0007

08009670 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e0eb      	b.n	800985e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a75      	ldr	r2, [pc, #468]	; (8009868 <HAL_SPI_Init+0x1f8>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d00f      	beq.n	80096b6 <HAL_SPI_Init+0x46>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a74      	ldr	r2, [pc, #464]	; (800986c <HAL_SPI_Init+0x1fc>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00a      	beq.n	80096b6 <HAL_SPI_Init+0x46>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a72      	ldr	r2, [pc, #456]	; (8009870 <HAL_SPI_Init+0x200>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d005      	beq.n	80096b6 <HAL_SPI_Init+0x46>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	2b0f      	cmp	r3, #15
 80096b0:	d901      	bls.n	80096b6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e0d3      	b.n	800985e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 f976 	bl	800a9a8 <SPI_GetPacketSize>
 80096bc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a69      	ldr	r2, [pc, #420]	; (8009868 <HAL_SPI_Init+0x1f8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00c      	beq.n	80096e2 <HAL_SPI_Init+0x72>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a67      	ldr	r2, [pc, #412]	; (800986c <HAL_SPI_Init+0x1fc>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d007      	beq.n	80096e2 <HAL_SPI_Init+0x72>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a66      	ldr	r2, [pc, #408]	; (8009870 <HAL_SPI_Init+0x200>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d002      	beq.n	80096e2 <HAL_SPI_Init+0x72>
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b08      	cmp	r3, #8
 80096e0:	d811      	bhi.n	8009706 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096e6:	4a60      	ldr	r2, [pc, #384]	; (8009868 <HAL_SPI_Init+0x1f8>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d009      	beq.n	8009700 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a5e      	ldr	r2, [pc, #376]	; (800986c <HAL_SPI_Init+0x1fc>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d004      	beq.n	8009700 <HAL_SPI_Init+0x90>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a5d      	ldr	r2, [pc, #372]	; (8009870 <HAL_SPI_Init+0x200>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d104      	bne.n	800970a <HAL_SPI_Init+0x9a>
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2b10      	cmp	r3, #16
 8009704:	d901      	bls.n	800970a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e0a9      	b.n	800985e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d106      	bne.n	8009724 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7f9 f852 	bl	80027c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f022 0201 	bic.w	r2, r2, #1
 800973a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009744:	d119      	bne.n	800977a <HAL_SPI_Init+0x10a>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800974e:	d103      	bne.n	8009758 <HAL_SPI_Init+0xe8>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009754:	2b00      	cmp	r3, #0
 8009756:	d008      	beq.n	800976a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10c      	bne.n	800977a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009768:	d107      	bne.n	800977a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009778:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	69da      	ldr	r2, [r3, #28]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009782:	431a      	orrs	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978c:	ea42 0103 	orr.w	r1, r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68da      	ldr	r2, [r3, #12]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	431a      	orrs	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	431a      	orrs	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	431a      	orrs	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ce:	431a      	orrs	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	431a      	orrs	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097da:	ea42 0103 	orr.w	r1, r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d113      	bne.n	800981a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009804:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009818:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 0201 	bic.w	r2, r2, #1
 8009828:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	40013000 	.word	0x40013000
 800986c:	40003800 	.word	0x40003800
 8009870:	40003c00 	.word	0x40003c00

08009874 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08e      	sub	sp, #56	; 0x38
 8009878:	af02      	add	r7, sp, #8
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3320      	adds	r3, #32
 800988e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	3330      	adds	r3, #48	; 0x30
 8009896:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d101      	bne.n	80098a6 <HAL_SPI_TransmitReceive+0x32>
 80098a2:	2302      	movs	r3, #2
 80098a4:	e2ce      	b.n	8009e44 <HAL_SPI_TransmitReceive+0x5d0>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098ae:	f7f9 fb21 	bl	8002ef4 <HAL_GetTick>
 80098b2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80098b4:	887b      	ldrh	r3, [r7, #2]
 80098b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80098b8:	887b      	ldrh	r3, [r7, #2]
 80098ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80098c2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098ca:	7efb      	ldrb	r3, [r7, #27]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d014      	beq.n	80098fa <HAL_SPI_TransmitReceive+0x86>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098d6:	d106      	bne.n	80098e6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <HAL_SPI_TransmitReceive+0x72>
 80098e0:	7efb      	ldrb	r3, [r7, #27]
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d009      	beq.n	80098fa <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80098e6:	2302      	movs	r3, #2
 80098e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80098f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098f8:	e2a4      	b.n	8009e44 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <HAL_SPI_TransmitReceive+0x98>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <HAL_SPI_TransmitReceive+0x98>
 8009906:	887b      	ldrh	r3, [r7, #2]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d109      	bne.n	8009920 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800991a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800991e:	e291      	b.n	8009e44 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b04      	cmp	r3, #4
 800992a:	d003      	beq.n	8009934 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2205      	movs	r2, #5
 8009930:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	887a      	ldrh	r2, [r7, #2]
 8009946:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	887a      	ldrh	r2, [r7, #2]
 800994e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	887a      	ldrh	r2, [r7, #2]
 800995c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	887a      	ldrh	r2, [r7, #2]
 8009964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	4b9f      	ldr	r3, [pc, #636]	; (8009bf8 <HAL_SPI_TransmitReceive+0x384>)
 800997c:	4013      	ands	r3, r2
 800997e:	8879      	ldrh	r1, [r7, #2]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	6812      	ldr	r2, [r2, #0]
 8009984:	430b      	orrs	r3, r1
 8009986:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0201 	orr.w	r2, r2, #1
 8009996:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099a0:	d107      	bne.n	80099b2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	2b0f      	cmp	r3, #15
 80099b8:	d970      	bls.n	8009a9c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80099ba:	e068      	b.n	8009a8e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f003 0302 	and.w	r3, r3, #2
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d11a      	bne.n	8009a00 <HAL_SPI_TransmitReceive+0x18c>
 80099ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d017      	beq.n	8009a00 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099e0:	1d1a      	adds	r2, r3, #4
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	3b01      	subs	r3, #1
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	695a      	ldr	r2, [r3, #20]
 8009a06:	f248 0308 	movw	r3, #32776	; 0x8008
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d01a      	beq.n	8009a46 <HAL_SPI_TransmitReceive+0x1d2>
 8009a10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d017      	beq.n	8009a46 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009a20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a26:	1d1a      	adds	r2, r3, #4
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a44:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a46:	f7f9 fa55 	bl	8002ef4 <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d803      	bhi.n	8009a5e <HAL_SPI_TransmitReceive+0x1ea>
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5c:	d102      	bne.n	8009a64 <HAL_SPI_TransmitReceive+0x1f0>
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d114      	bne.n	8009a8e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 fed1 	bl	800a80c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e1da      	b.n	8009e44 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009a8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d193      	bne.n	80099bc <HAL_SPI_TransmitReceive+0x148>
 8009a94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d190      	bne.n	80099bc <HAL_SPI_TransmitReceive+0x148>
 8009a9a:	e1ac      	b.n	8009df6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	2b07      	cmp	r3, #7
 8009aa2:	f240 81a0 	bls.w	8009de6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009aa6:	e0a9      	b.n	8009bfc <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	f003 0302 	and.w	r3, r3, #2
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d139      	bne.n	8009b2a <HAL_SPI_TransmitReceive+0x2b6>
 8009ab6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d036      	beq.n	8009b2a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009abc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d91c      	bls.n	8009afc <HAL_SPI_TransmitReceive+0x288>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d018      	beq.n	8009afc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6812      	ldr	r2, [r2, #0]
 8009ad4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ada:	1d1a      	adds	r2, r3, #4
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b02      	subs	r3, #2
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009af8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009afa:	e016      	b.n	8009b2a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b00:	881a      	ldrh	r2, [r3, #0]
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b0a:	1c9a      	adds	r2, r3, #2
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b28:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d03a      	beq.n	8009bae <HAL_SPI_TransmitReceive+0x33a>
 8009b38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d037      	beq.n	8009bae <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d018      	beq.n	8009b7e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009b56:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b5c:	1d1a      	adds	r2, r3, #4
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	3b02      	subs	r3, #2
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009b7c:	e017      	b.n	8009bae <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b82:	6a3a      	ldr	r2, [r7, #32]
 8009b84:	8812      	ldrh	r2, [r2, #0]
 8009b86:	b292      	uxth	r2, r2
 8009b88:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b8e:	1c9a      	adds	r2, r3, #2
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bac:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bae:	f7f9 f9a1 	bl	8002ef4 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d803      	bhi.n	8009bc6 <HAL_SPI_TransmitReceive+0x352>
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc4:	d102      	bne.n	8009bcc <HAL_SPI_TransmitReceive+0x358>
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d117      	bne.n	8009bfc <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 fe1d 	bl	800a80c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e126      	b.n	8009e44 <HAL_SPI_TransmitReceive+0x5d0>
 8009bf6:	bf00      	nop
 8009bf8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009bfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f47f af52 	bne.w	8009aa8 <HAL_SPI_TransmitReceive+0x234>
 8009c04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f47f af4e 	bne.w	8009aa8 <HAL_SPI_TransmitReceive+0x234>
 8009c0c:	e0f3      	b.n	8009df6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d15a      	bne.n	8009cd2 <HAL_SPI_TransmitReceive+0x45e>
 8009c1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d057      	beq.n	8009cd2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009c22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d91c      	bls.n	8009c62 <HAL_SPI_TransmitReceive+0x3ee>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2c:	2b40      	cmp	r3, #64	; 0x40
 8009c2e:	d918      	bls.n	8009c62 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6812      	ldr	r2, [r2, #0]
 8009c3a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c40:	1d1a      	adds	r2, r3, #4
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b04      	subs	r3, #4
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009c60:	e037      	b.n	8009cd2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d91b      	bls.n	8009ca0 <HAL_SPI_TransmitReceive+0x42c>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d017      	beq.n	8009ca0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c74:	881a      	ldrh	r2, [r3, #0]
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c7e:	1c9a      	adds	r2, r3, #2
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	3b02      	subs	r3, #2
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009c9e:	e018      	b.n	8009cd2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3320      	adds	r3, #32
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d05e      	beq.n	8009d9e <HAL_SPI_TransmitReceive+0x52a>
 8009ce0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d05b      	beq.n	8009d9e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d018      	beq.n	8009d26 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009cfe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d04:	1d1a      	adds	r2, r3, #4
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	3b04      	subs	r3, #4
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009d24:	e03b      	b.n	8009d9e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d34:	d918      	bls.n	8009d68 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d3a:	6a3a      	ldr	r2, [r7, #32]
 8009d3c:	8812      	ldrh	r2, [r2, #0]
 8009d3e:	b292      	uxth	r2, r2
 8009d40:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d46:	1c9a      	adds	r2, r3, #2
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	3b02      	subs	r3, #2
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d64:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009d66:	e01a      	b.n	8009d9e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d74:	7812      	ldrb	r2, [r2, #0]
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d9e:	f7f9 f8a9 	bl	8002ef4 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d803      	bhi.n	8009db6 <HAL_SPI_TransmitReceive+0x542>
 8009dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d102      	bne.n	8009dbc <HAL_SPI_TransmitReceive+0x548>
 8009db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d114      	bne.n	8009de6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f000 fd25 	bl	800a80c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e02e      	b.n	8009e44 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009de6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f47f af10 	bne.w	8009c0e <HAL_SPI_TransmitReceive+0x39a>
 8009dee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f47f af0c 	bne.w	8009c0e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2108      	movs	r1, #8
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f000 fda3 	bl	800a94c <SPI_WaitOnFlagUntilTimeout>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d007      	beq.n	8009e1c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e12:	f043 0220 	orr.w	r2, r3, #32
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fcf5 	bl	800a80c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e001      	b.n	8009e44 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8009e40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3730      	adds	r7, #48	; 0x30
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData: pointer to reception data buffer
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b08b      	sub	sp, #44	; 0x2c
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef  tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	77fb      	strb	r3, [r7, #31]
  uint32_t max_fifo_length = 0UL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_TxXferCount;
  #if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3320      	adds	r3, #32
 8009e68:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d101      	bne.n	8009e78 <HAL_SPI_TransmitReceive_IT+0x2c>
 8009e74:	2302      	movs	r3, #2
 8009e76:	e17f      	b.n	800a178 <HAL_SPI_TransmitReceive_IT+0x32c>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state  = hspi->State;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e86:	75fb      	strb	r3, [r7, #23]
  tmp_mode   = hspi->Init.Mode;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d012      	beq.n	8009eba <HAL_SPI_TransmitReceive_IT+0x6e>
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e9a:	d106      	bne.n	8009eaa <HAL_SPI_TransmitReceive_IT+0x5e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d102      	bne.n	8009eaa <HAL_SPI_TransmitReceive_IT+0x5e>
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	d007      	beq.n	8009eba <HAL_SPI_TransmitReceive_IT+0x6e>
  {
    errorcode = HAL_BUSY;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009eb6:	7ffb      	ldrb	r3, [r7, #31]
 8009eb8:	e15e      	b.n	800a178 <HAL_SPI_TransmitReceive_IT+0x32c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d005      	beq.n	8009ecc <HAL_SPI_TransmitReceive_IT+0x80>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d002      	beq.n	8009ecc <HAL_SPI_TransmitReceive_IT+0x80>
 8009ec6:	887b      	ldrh	r3, [r7, #2]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d107      	bne.n	8009edc <HAL_SPI_TransmitReceive_IT+0x90>
  {
    errorcode = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009ed8:	7ffb      	ldrb	r3, [r7, #31]
 8009eda:	e14d      	b.n	800a178 <HAL_SPI_TransmitReceive_IT+0x32c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d003      	beq.n	8009ef0 <HAL_SPI_TransmitReceive_IT+0xa4>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2205      	movs	r2, #5
 8009eec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	887a      	ldrh	r2, [r7, #2]
 8009f02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	887a      	ldrh	r2, [r7, #2]
 8009f0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	887a      	ldrh	r2, [r7, #2]
 8009f18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	887a      	ldrh	r2, [r7, #2]
 8009f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  tmp_TxXferCount = hspi->TxXferCount;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	623b      	str	r3, [r7, #32]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	2b0f      	cmp	r3, #15
 8009f34:	d906      	bls.n	8009f44 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	4a92      	ldr	r2, [pc, #584]	; (800a184 <HAL_SPI_TransmitReceive_IT+0x338>)
 8009f3a:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4a92      	ldr	r2, [pc, #584]	; (800a188 <HAL_SPI_TransmitReceive_IT+0x33c>)
 8009f40:	671a      	str	r2, [r3, #112]	; 0x70
 8009f42:	e010      	b.n	8009f66 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2b07      	cmp	r3, #7
 8009f4a:	d906      	bls.n	8009f5a <HAL_SPI_TransmitReceive_IT+0x10e>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4a8f      	ldr	r2, [pc, #572]	; (800a18c <HAL_SPI_TransmitReceive_IT+0x340>)
 8009f50:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4a8e      	ldr	r2, [pc, #568]	; (800a190 <HAL_SPI_TransmitReceive_IT+0x344>)
 8009f56:	675a      	str	r2, [r3, #116]	; 0x74
 8009f58:	e005      	b.n	8009f66 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	4a8d      	ldr	r2, [pc, #564]	; (800a194 <HAL_SPI_TransmitReceive_IT+0x348>)
 8009f5e:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4a8d      	ldr	r2, [pc, #564]	; (800a198 <HAL_SPI_TransmitReceive_IT+0x34c>)
 8009f64:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	4b8b      	ldr	r3, [pc, #556]	; (800a19c <HAL_SPI_TransmitReceive_IT+0x350>)
 8009f6e:	4013      	ands	r3, r2
 8009f70:	8879      	ldrh	r1, [r7, #2]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	6812      	ldr	r2, [r2, #0]
 8009f76:	430b      	orrs	r3, r1
 8009f78:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f042 0201 	orr.w	r2, r2, #1
 8009f88:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8009f8a:	e0cf      	b.n	800a12c <HAL_SPI_TransmitReceive_IT+0x2e0>
  {
    if (max_fifo_length < MAX_FIFO_LENGTH)
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	2b0f      	cmp	r3, #15
 8009f90:	f200 80c4 	bhi.w	800a11c <HAL_SPI_TransmitReceive_IT+0x2d0>
    {
      /* Transmit data in 32 Bit mode */
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	2b0f      	cmp	r3, #15
 8009f9a:	d919      	bls.n	8009fd0 <HAL_SPI_TransmitReceive_IT+0x184>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6812      	ldr	r2, [r2, #0]
 8009fa6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fac:	1d1a      	adds	r2, r3, #4
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	623b      	str	r3, [r7, #32]
 8009fce:	e0a1      	b.n	800a114 <HAL_SPI_TransmitReceive_IT+0x2c8>
      }
      /* Transmit data in 16 Bit mode */
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	2b07      	cmp	r3, #7
 8009fd6:	d93c      	bls.n	800a052 <HAL_SPI_TransmitReceive_IT+0x206>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d91d      	bls.n	800a020 <HAL_SPI_TransmitReceive_IT+0x1d4>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d019      	beq.n	800a020 <HAL_SPI_TransmitReceive_IT+0x1d4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6812      	ldr	r2, [r2, #0]
 8009ff6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ffc:	1d1a      	adds	r2, r3, #4
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a008:	b29b      	uxth	r3, r3
 800a00a:	3b02      	subs	r3, #2
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	623b      	str	r3, [r7, #32]
 800a01e:	e079      	b.n	800a114 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a024:	881a      	ldrh	r2, [r3, #0]
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02e:	1c9a      	adds	r2, r3, #2
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	3b01      	subs	r3, #1
 800a03e:	b29a      	uxth	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	623b      	str	r3, [r7, #32]
 800a050:	e060      	b.n	800a114 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
      }
      /* Transmit data in 8 Bit mode */
      else
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a058:	b29b      	uxth	r3, r3
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d91d      	bls.n	800a09a <HAL_SPI_TransmitReceive_IT+0x24e>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a062:	2b40      	cmp	r3, #64	; 0x40
 800a064:	d919      	bls.n	800a09a <HAL_SPI_TransmitReceive_IT+0x24e>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6812      	ldr	r2, [r2, #0]
 800a070:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a076:	1d1a      	adds	r2, r3, #4
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a082:	b29b      	uxth	r3, r3
 800a084:	3b04      	subs	r3, #4
 800a086:	b29a      	uxth	r2, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a094:	b29b      	uxth	r3, r3
 800a096:	623b      	str	r3, [r7, #32]
 800a098:	e03c      	b.n	800a114 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d91c      	bls.n	800a0e0 <HAL_SPI_TransmitReceive_IT+0x294>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d018      	beq.n	800a0e0 <HAL_SPI_TransmitReceive_IT+0x294>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b2:	881a      	ldrh	r2, [r3, #0]
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0bc:	1c9a      	adds	r2, r3, #2
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	3b02      	subs	r3, #2
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	623b      	str	r3, [r7, #32]
 800a0de:	e019      	b.n	800a114 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3320      	adds	r3, #32
 800a0ea:	7812      	ldrb	r2, [r2, #0]
 800a0ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	3b01      	subs	r3, #1
 800a102:	b29a      	uxth	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a110:	b29b      	uxth	r3, r3
 800a112:	623b      	str	r3, [r7, #32]
        }
      }

      max_fifo_length++;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	3301      	adds	r3, #1
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
 800a11a:	e007      	b.n	800a12c <HAL_SPI_TransmitReceive_IT+0x2e0>
    }
    else
    {
      errorcode = HAL_BUSY;
 800a11c:	2302      	movs	r3, #2
 800a11e:	77fb      	strb	r3, [r7, #31]
      __HAL_UNLOCK(hspi);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return errorcode;
 800a128:	7ffb      	ldrb	r3, [r7, #31]
 800a12a:	e025      	b.n	800a178 <HAL_SPI_TransmitReceive_IT+0x32c>
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b02      	cmp	r3, #2
 800a138:	d103      	bne.n	800a142 <HAL_SPI_TransmitReceive_IT+0x2f6>
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f47f af25 	bne.w	8009f8c <HAL_SPI_TransmitReceive_IT+0x140>
    }
  }

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6919      	ldr	r1, [r3, #16]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	f240 736c 	movw	r3, #1900	; 0x76c
 800a150:	430b      	orrs	r3, r1
 800a152:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a15c:	d107      	bne.n	800a16e <HAL_SPI_TransmitReceive_IT+0x322>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a16c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800a176:	7ffb      	ldrb	r3, [r7, #31]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	372c      	adds	r7, #44	; 0x2c
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	0800a7b3 	.word	0x0800a7b3
 800a188:	0800a6a3 	.word	0x0800a6a3
 800a18c:	0800a643 	.word	0x0800a643
 800a190:	0800a755 	.word	0x0800a755
 800a194:	0800a5e5 	.word	0x0800a5e5
 800a198:	0800a6fb 	.word	0x0800a6fb
 800a19c:	ffff0000 	.word	0xffff0000

0800a1a0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08a      	sub	sp, #40	; 0x28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a1b8:	6a3a      	ldr	r2, [r7, #32]
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a1d2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3330      	adds	r3, #48	; 0x30
 800a1da:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d113      	bne.n	800a20e <HAL_SPI_IRQHandler+0x6e>
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10e      	bne.n	800a20e <HAL_SPI_IRQHandler+0x6e>
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f003 0304 	and.w	r3, r3, #4
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	4798      	blx	r3
    handled = 1UL;
 800a20a:	2301      	movs	r3, #1
 800a20c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10f      	bne.n	800a238 <HAL_SPI_IRQHandler+0x98>
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <HAL_SPI_IRQHandler+0x98>
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d105      	bne.n	800a238 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	4798      	blx	r3
    handled = 1UL;
 800a234:	2301      	movs	r3, #1
 800a236:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	f003 0320 	and.w	r3, r3, #32
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10f      	bne.n	800a262 <HAL_SPI_IRQHandler+0xc2>
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00a      	beq.n	800a262 <HAL_SPI_IRQHandler+0xc2>
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	2b00      	cmp	r3, #0
 800a254:	d105      	bne.n	800a262 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
    handled = 1UL;
 800a25e:	2301      	movs	r3, #1
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	2b00      	cmp	r3, #0
 800a266:	f040 816f 	bne.w	800a548 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	f003 0308 	and.w	r3, r3, #8
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 80a0 	beq.w	800a3b6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	699a      	ldr	r2, [r3, #24]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f042 0208 	orr.w	r2, r2, #8
 800a284:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	699a      	ldr	r2, [r3, #24]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f042 0210 	orr.w	r2, r2, #16
 800a294:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	699a      	ldr	r2, [r3, #24]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2a4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	691a      	ldr	r2, [r3, #16]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0208 	bic.w	r2, r2, #8
 800a2b4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00f      	beq.n	800a2e0 <HAL_SPI_IRQHandler+0x140>
 800a2c0:	7cfb      	ldrb	r3, [r7, #19]
 800a2c2:	2b04      	cmp	r3, #4
 800a2c4:	d004      	beq.n	800a2d0 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d007      	beq.n	800a2e0 <HAL_SPI_IRQHandler+0x140>
 800a2d0:	7cfb      	ldrb	r3, [r7, #19]
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d059      	beq.n	800a38a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2da:	69db      	ldr	r3, [r3, #28]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d154      	bne.n	800a38a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d13d      	bne.n	800a36a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a2ee:	e036      	b.n	800a35e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	2b0f      	cmp	r3, #15
 800a2f6:	d90b      	bls.n	800a310 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a300:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a302:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a308:	1d1a      	adds	r2, r3, #4
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	665a      	str	r2, [r3, #100]	; 0x64
 800a30e:	e01d      	b.n	800a34c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	2b07      	cmp	r3, #7
 800a316:	d90b      	bls.n	800a330 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	8812      	ldrh	r2, [r2, #0]
 800a320:	b292      	uxth	r2, r2
 800a322:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a328:	1c9a      	adds	r2, r3, #2
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	665a      	str	r2, [r3, #100]	; 0x64
 800a32e:	e00d      	b.n	800a34c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a33c:	7812      	ldrb	r2, [r2, #0]
 800a33e:	b2d2      	uxtb	r2, r2
 800a340:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a352:	b29b      	uxth	r3, r3
 800a354:	3b01      	subs	r3, #1
 800a356:	b29a      	uxth	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a364:	b29b      	uxth	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1c2      	bne.n	800a2f0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fa4e 	bl	800a80c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f90a 	bl	800a59c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a388:	e0e3      	b.n	800a552 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a38a:	7cfb      	ldrb	r3, [r7, #19]
 800a38c:	2b05      	cmp	r3, #5
 800a38e:	d103      	bne.n	800a398 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f8f9 	bl	800a588 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800a396:	e0d9      	b.n	800a54c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a398:	7cfb      	ldrb	r3, [r7, #19]
 800a39a:	2b04      	cmp	r3, #4
 800a39c:	d103      	bne.n	800a3a6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f8e8 	bl	800a574 <HAL_SPI_RxCpltCallback>
    return;
 800a3a4:	e0d2      	b.n	800a54c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a3a6:	7cfb      	ldrb	r3, [r7, #19]
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	f040 80cf 	bne.w	800a54c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f8d6 	bl	800a560 <HAL_SPI_TxCpltCallback>
    return;
 800a3b4:	e0ca      	b.n	800a54c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00d      	beq.n	800a3dc <HAL_SPI_IRQHandler+0x23c>
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	f003 0308 	and.w	r3, r3, #8
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d008      	beq.n	800a3dc <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	699a      	ldr	r2, [r3, #24]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3d8:	619a      	str	r2, [r3, #24]

    return;
 800a3da:	e0ba      	b.n	800a552 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 80b5 	beq.w	800a552 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00f      	beq.n	800a412 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3f8:	f043 0204 	orr.w	r2, r3, #4
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a410:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00f      	beq.n	800a43c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a422:	f043 0201 	orr.w	r2, r3, #1
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a43a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00f      	beq.n	800a466 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a44c:	f043 0208 	orr.w	r2, r3, #8
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	699a      	ldr	r2, [r3, #24]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a464:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	f003 0320 	and.w	r3, r3, #32
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00f      	beq.n	800a490 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a476:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	699a      	ldr	r2, [r3, #24]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f042 0220 	orr.w	r2, r2, #32
 800a48e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a496:	2b00      	cmp	r3, #0
 800a498:	d05a      	beq.n	800a550 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f022 0201 	bic.w	r2, r2, #1
 800a4a8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6919      	ldr	r1, [r3, #16]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	4b28      	ldr	r3, [pc, #160]	; (800a558 <HAL_SPI_IRQHandler+0x3b8>)
 800a4b6:	400b      	ands	r3, r1
 800a4b8:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a4c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a4c4:	d138      	bne.n	800a538 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689a      	ldr	r2, [r3, #8]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a4d4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d013      	beq.n	800a506 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e2:	4a1e      	ldr	r2, [pc, #120]	; (800a55c <HAL_SPI_IRQHandler+0x3bc>)
 800a4e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fa ff44 	bl	8005378 <HAL_DMA_Abort_IT>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d007      	beq.n	800a506 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d020      	beq.n	800a550 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a512:	4a12      	ldr	r2, [pc, #72]	; (800a55c <HAL_SPI_IRQHandler+0x3bc>)
 800a514:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fa ff2c 	bl	8005378 <HAL_DMA_Abort_IT>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d014      	beq.n	800a550 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a52c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a536:	e00b      	b.n	800a550 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f82b 	bl	800a59c <HAL_SPI_ErrorCallback>
    return;
 800a546:	e003      	b.n	800a550 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800a548:	bf00      	nop
 800a54a:	e002      	b.n	800a552 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a54c:	bf00      	nop
 800a54e:	e000      	b.n	800a552 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a550:	bf00      	nop
  }
}
 800a552:	3728      	adds	r7, #40	; 0x28
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	fffffc94 	.word	0xfffffc94
 800a55c:	0800a5b1 	.word	0x0800a5b1

0800a560 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff ffe0 	bl	800a59c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a5dc:	bf00      	nop
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5f8:	7812      	ldrb	r2, [r2, #0]
 800a5fa:	b2d2      	uxtb	r2, r2
 800a5fc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a60e:	b29b      	uxth	r3, r3
 800a610:	3b01      	subs	r3, #1
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a620:	b29b      	uxth	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d107      	bne.n	800a636 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	691a      	ldr	r2, [r3, #16]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 0201 	bic.w	r2, r2, #1
 800a634:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800a642:	b480      	push	{r7}
 800a644:	b085      	sub	sp, #20
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3330      	adds	r3, #48	; 0x30
 800a650:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	8812      	ldrh	r2, [r2, #0]
 800a65a:	b292      	uxth	r2, r2
 800a65c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a662:	1c9a      	adds	r2, r3, #2
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a66e:	b29b      	uxth	r3, r3
 800a670:	3b01      	subs	r3, #1
 800a672:	b29a      	uxth	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a680:	b29b      	uxth	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d107      	bne.n	800a696 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	691a      	ldr	r2, [r3, #16]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 0201 	bic.w	r2, r2, #1
 800a694:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800a696:	bf00      	nop
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a6b4:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ba:	1d1a      	adds	r2, r3, #4
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d107      	bne.n	800a6ee <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	691a      	ldr	r2, [r3, #16]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800a6ee:	bf00      	nop
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3320      	adds	r3, #32
 800a70c:	7812      	ldrb	r2, [r2, #0]
 800a70e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a720:	b29b      	uxth	r3, r3
 800a722:	3b01      	subs	r3, #1
 800a724:	b29a      	uxth	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a732:	b29b      	uxth	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d107      	bne.n	800a748 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	691a      	ldr	r2, [r3, #16]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 0202 	bic.w	r2, r2, #2
 800a746:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3320      	adds	r3, #32
 800a762:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a768:	881a      	ldrh	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a772:	1c9a      	adds	r2, r3, #2
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a77e:	b29b      	uxth	r3, r3
 800a780:	3b01      	subs	r3, #1
 800a782:	b29a      	uxth	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a790:	b29b      	uxth	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	d107      	bne.n	800a7a6 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	691a      	ldr	r2, [r3, #16]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f022 0202 	bic.w	r2, r2, #2
 800a7a4:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800a7a6:	bf00      	nop
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6812      	ldr	r2, [r2, #0]
 800a7c4:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ca:	1d1a      	adds	r2, r3, #4
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d107      	bne.n	800a7fe <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	691a      	ldr	r2, [r3, #16]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0202 	bic.w	r2, r2, #2
 800a7fc:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800a7fe:	bf00      	nop
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
	...

0800a80c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	699a      	ldr	r2, [r3, #24]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f042 0208 	orr.w	r2, r2, #8
 800a82a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	699a      	ldr	r2, [r3, #24]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f042 0210 	orr.w	r2, r2, #16
 800a83a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f022 0201 	bic.w	r2, r2, #1
 800a84a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6919      	ldr	r1, [r3, #16]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	4b3c      	ldr	r3, [pc, #240]	; (800a948 <SPI_CloseTransfer+0x13c>)
 800a858:	400b      	ands	r3, r1
 800a85a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689a      	ldr	r2, [r3, #8]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a86a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b04      	cmp	r3, #4
 800a876:	d014      	beq.n	800a8a2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f003 0320 	and.w	r3, r3, #32
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00f      	beq.n	800a8a2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a888:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	699a      	ldr	r2, [r3, #24]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f042 0220 	orr.w	r2, r2, #32
 800a8a0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d014      	beq.n	800a8d8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00f      	beq.n	800a8d8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8be:	f043 0204 	orr.w	r2, r3, #4
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	699a      	ldr	r2, [r3, #24]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8d6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00f      	beq.n	800a902 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8e8:	f043 0201 	orr.w	r2, r3, #1
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	699a      	ldr	r2, [r3, #24]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a900:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00f      	beq.n	800a92c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a912:	f043 0208 	orr.w	r2, r3, #8
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	699a      	ldr	r2, [r3, #24]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a92a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a93c:	bf00      	nop
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	fffffc90 	.word	0xfffffc90

0800a94c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	4613      	mov	r3, r2
 800a95a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a95c:	e010      	b.n	800a980 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a95e:	f7f8 fac9 	bl	8002ef4 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d803      	bhi.n	800a976 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a974:	d102      	bne.n	800a97c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a97c:	2303      	movs	r3, #3
 800a97e:	e00f      	b.n	800a9a0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	695a      	ldr	r2, [r3, #20]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	4013      	ands	r3, r2
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	bf0c      	ite	eq
 800a990:	2301      	moveq	r3, #1
 800a992:	2300      	movne	r3, #0
 800a994:	b2db      	uxtb	r3, r3
 800a996:	461a      	mov	r2, r3
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d0df      	beq.n	800a95e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b4:	095b      	lsrs	r3, r3, #5
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	3307      	adds	r3, #7
 800a9c6:	08db      	lsrs	r3, r3, #3
 800a9c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	fb02 f303 	mul.w	r3, r2, r3
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d101      	bne.n	800a9f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e049      	b.n	800aa84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d106      	bne.n	800aa0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7f7 ff75 	bl	80028f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	3304      	adds	r3, #4
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	f000 fd7b 	bl	800b518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d001      	beq.n	800aaa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e05e      	b.n	800ab62 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2202      	movs	r2, #2
 800aaa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68da      	ldr	r2, [r3, #12]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0201 	orr.w	r2, r2, #1
 800aaba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a2b      	ldr	r2, [pc, #172]	; (800ab70 <HAL_TIM_Base_Start_IT+0xe4>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d02c      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x94>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aace:	d027      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x94>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a27      	ldr	r2, [pc, #156]	; (800ab74 <HAL_TIM_Base_Start_IT+0xe8>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d022      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x94>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a26      	ldr	r2, [pc, #152]	; (800ab78 <HAL_TIM_Base_Start_IT+0xec>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d01d      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x94>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a24      	ldr	r2, [pc, #144]	; (800ab7c <HAL_TIM_Base_Start_IT+0xf0>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d018      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x94>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a23      	ldr	r2, [pc, #140]	; (800ab80 <HAL_TIM_Base_Start_IT+0xf4>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d013      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x94>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a21      	ldr	r2, [pc, #132]	; (800ab84 <HAL_TIM_Base_Start_IT+0xf8>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d00e      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x94>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a20      	ldr	r2, [pc, #128]	; (800ab88 <HAL_TIM_Base_Start_IT+0xfc>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d009      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x94>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a1e      	ldr	r2, [pc, #120]	; (800ab8c <HAL_TIM_Base_Start_IT+0x100>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d004      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x94>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a1d      	ldr	r2, [pc, #116]	; (800ab90 <HAL_TIM_Base_Start_IT+0x104>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d115      	bne.n	800ab4c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689a      	ldr	r2, [r3, #8]
 800ab26:	4b1b      	ldr	r3, [pc, #108]	; (800ab94 <HAL_TIM_Base_Start_IT+0x108>)
 800ab28:	4013      	ands	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b06      	cmp	r3, #6
 800ab30:	d015      	beq.n	800ab5e <HAL_TIM_Base_Start_IT+0xd2>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab38:	d011      	beq.n	800ab5e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f042 0201 	orr.w	r2, r2, #1
 800ab48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab4a:	e008      	b.n	800ab5e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f042 0201 	orr.w	r2, r2, #1
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	e000      	b.n	800ab60 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	40010000 	.word	0x40010000
 800ab74:	40000400 	.word	0x40000400
 800ab78:	40000800 	.word	0x40000800
 800ab7c:	40000c00 	.word	0x40000c00
 800ab80:	40010400 	.word	0x40010400
 800ab84:	40001800 	.word	0x40001800
 800ab88:	40014000 	.word	0x40014000
 800ab8c:	4000e000 	.word	0x4000e000
 800ab90:	4000e400 	.word	0x4000e400
 800ab94:	00010007 	.word	0x00010007

0800ab98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e049      	b.n	800ac3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d106      	bne.n	800abc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7f7 fe70 	bl	80028a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2202      	movs	r2, #2
 800abc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	3304      	adds	r3, #4
 800abd4:	4619      	mov	r1, r3
 800abd6:	4610      	mov	r0, r2
 800abd8:	f000 fc9e 	bl	800b518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
	...

0800ac48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d109      	bne.n	800ac6c <HAL_TIM_PWM_Start+0x24>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	bf14      	ite	ne
 800ac64:	2301      	movne	r3, #1
 800ac66:	2300      	moveq	r3, #0
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	e03c      	b.n	800ace6 <HAL_TIM_PWM_Start+0x9e>
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d109      	bne.n	800ac86 <HAL_TIM_PWM_Start+0x3e>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	bf14      	ite	ne
 800ac7e:	2301      	movne	r3, #1
 800ac80:	2300      	moveq	r3, #0
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	e02f      	b.n	800ace6 <HAL_TIM_PWM_Start+0x9e>
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d109      	bne.n	800aca0 <HAL_TIM_PWM_Start+0x58>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	bf14      	ite	ne
 800ac98:	2301      	movne	r3, #1
 800ac9a:	2300      	moveq	r3, #0
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	e022      	b.n	800ace6 <HAL_TIM_PWM_Start+0x9e>
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2b0c      	cmp	r3, #12
 800aca4:	d109      	bne.n	800acba <HAL_TIM_PWM_Start+0x72>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b01      	cmp	r3, #1
 800acb0:	bf14      	ite	ne
 800acb2:	2301      	movne	r3, #1
 800acb4:	2300      	moveq	r3, #0
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	e015      	b.n	800ace6 <HAL_TIM_PWM_Start+0x9e>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	2b10      	cmp	r3, #16
 800acbe:	d109      	bne.n	800acd4 <HAL_TIM_PWM_Start+0x8c>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b01      	cmp	r3, #1
 800acca:	bf14      	ite	ne
 800accc:	2301      	movne	r3, #1
 800acce:	2300      	moveq	r3, #0
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	e008      	b.n	800ace6 <HAL_TIM_PWM_Start+0x9e>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	2b01      	cmp	r3, #1
 800acde:	bf14      	ite	ne
 800ace0:	2301      	movne	r3, #1
 800ace2:	2300      	moveq	r3, #0
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e0ab      	b.n	800ae46 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d104      	bne.n	800acfe <HAL_TIM_PWM_Start+0xb6>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acfc:	e023      	b.n	800ad46 <HAL_TIM_PWM_Start+0xfe>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b04      	cmp	r3, #4
 800ad02:	d104      	bne.n	800ad0e <HAL_TIM_PWM_Start+0xc6>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad0c:	e01b      	b.n	800ad46 <HAL_TIM_PWM_Start+0xfe>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	d104      	bne.n	800ad1e <HAL_TIM_PWM_Start+0xd6>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2202      	movs	r2, #2
 800ad18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad1c:	e013      	b.n	800ad46 <HAL_TIM_PWM_Start+0xfe>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b0c      	cmp	r3, #12
 800ad22:	d104      	bne.n	800ad2e <HAL_TIM_PWM_Start+0xe6>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2202      	movs	r2, #2
 800ad28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad2c:	e00b      	b.n	800ad46 <HAL_TIM_PWM_Start+0xfe>
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b10      	cmp	r3, #16
 800ad32:	d104      	bne.n	800ad3e <HAL_TIM_PWM_Start+0xf6>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2202      	movs	r2, #2
 800ad38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad3c:	e003      	b.n	800ad46 <HAL_TIM_PWM_Start+0xfe>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2202      	movs	r2, #2
 800ad42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 fff4 	bl	800bd3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a3d      	ldr	r2, [pc, #244]	; (800ae50 <HAL_TIM_PWM_Start+0x208>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d013      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x13e>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a3c      	ldr	r2, [pc, #240]	; (800ae54 <HAL_TIM_PWM_Start+0x20c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d00e      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x13e>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a3a      	ldr	r2, [pc, #232]	; (800ae58 <HAL_TIM_PWM_Start+0x210>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d009      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x13e>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a39      	ldr	r2, [pc, #228]	; (800ae5c <HAL_TIM_PWM_Start+0x214>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d004      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x13e>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a37      	ldr	r2, [pc, #220]	; (800ae60 <HAL_TIM_PWM_Start+0x218>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d101      	bne.n	800ad8a <HAL_TIM_PWM_Start+0x142>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e000      	b.n	800ad8c <HAL_TIM_PWM_Start+0x144>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d007      	beq.n	800ada0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a2a      	ldr	r2, [pc, #168]	; (800ae50 <HAL_TIM_PWM_Start+0x208>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d02c      	beq.n	800ae04 <HAL_TIM_PWM_Start+0x1bc>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb2:	d027      	beq.n	800ae04 <HAL_TIM_PWM_Start+0x1bc>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a2a      	ldr	r2, [pc, #168]	; (800ae64 <HAL_TIM_PWM_Start+0x21c>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d022      	beq.n	800ae04 <HAL_TIM_PWM_Start+0x1bc>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a29      	ldr	r2, [pc, #164]	; (800ae68 <HAL_TIM_PWM_Start+0x220>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d01d      	beq.n	800ae04 <HAL_TIM_PWM_Start+0x1bc>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a27      	ldr	r2, [pc, #156]	; (800ae6c <HAL_TIM_PWM_Start+0x224>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d018      	beq.n	800ae04 <HAL_TIM_PWM_Start+0x1bc>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a1f      	ldr	r2, [pc, #124]	; (800ae54 <HAL_TIM_PWM_Start+0x20c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d013      	beq.n	800ae04 <HAL_TIM_PWM_Start+0x1bc>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a23      	ldr	r2, [pc, #140]	; (800ae70 <HAL_TIM_PWM_Start+0x228>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d00e      	beq.n	800ae04 <HAL_TIM_PWM_Start+0x1bc>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a1b      	ldr	r2, [pc, #108]	; (800ae58 <HAL_TIM_PWM_Start+0x210>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d009      	beq.n	800ae04 <HAL_TIM_PWM_Start+0x1bc>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a1f      	ldr	r2, [pc, #124]	; (800ae74 <HAL_TIM_PWM_Start+0x22c>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d004      	beq.n	800ae04 <HAL_TIM_PWM_Start+0x1bc>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a1e      	ldr	r2, [pc, #120]	; (800ae78 <HAL_TIM_PWM_Start+0x230>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d115      	bne.n	800ae30 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	4b1c      	ldr	r3, [pc, #112]	; (800ae7c <HAL_TIM_PWM_Start+0x234>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b06      	cmp	r3, #6
 800ae14:	d015      	beq.n	800ae42 <HAL_TIM_PWM_Start+0x1fa>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae1c:	d011      	beq.n	800ae42 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f042 0201 	orr.w	r2, r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae2e:	e008      	b.n	800ae42 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f042 0201 	orr.w	r2, r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	e000      	b.n	800ae44 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	40010000 	.word	0x40010000
 800ae54:	40010400 	.word	0x40010400
 800ae58:	40014000 	.word	0x40014000
 800ae5c:	40014400 	.word	0x40014400
 800ae60:	40014800 	.word	0x40014800
 800ae64:	40000400 	.word	0x40000400
 800ae68:	40000800 	.word	0x40000800
 800ae6c:	40000c00 	.word	0x40000c00
 800ae70:	40001800 	.word	0x40001800
 800ae74:	4000e000 	.word	0x4000e000
 800ae78:	4000e400 	.word	0x4000e400
 800ae7c:	00010007 	.word	0x00010007

0800ae80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d122      	bne.n	800aedc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f003 0302 	and.w	r3, r3, #2
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d11b      	bne.n	800aedc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f06f 0202 	mvn.w	r2, #2
 800aeac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	f003 0303 	and.w	r3, r3, #3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fb0a 	bl	800b4dc <HAL_TIM_IC_CaptureCallback>
 800aec8:	e005      	b.n	800aed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fafc 	bl	800b4c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fb0d 	bl	800b4f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	f003 0304 	and.w	r3, r3, #4
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d122      	bne.n	800af30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	d11b      	bne.n	800af30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f06f 0204 	mvn.w	r2, #4
 800af00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2202      	movs	r2, #2
 800af06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fae0 	bl	800b4dc <HAL_TIM_IC_CaptureCallback>
 800af1c:	e005      	b.n	800af2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fad2 	bl	800b4c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fae3 	bl	800b4f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	f003 0308 	and.w	r3, r3, #8
 800af3a:	2b08      	cmp	r3, #8
 800af3c:	d122      	bne.n	800af84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	f003 0308 	and.w	r3, r3, #8
 800af48:	2b08      	cmp	r3, #8
 800af4a:	d11b      	bne.n	800af84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f06f 0208 	mvn.w	r2, #8
 800af54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2204      	movs	r2, #4
 800af5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	f003 0303 	and.w	r3, r3, #3
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fab6 	bl	800b4dc <HAL_TIM_IC_CaptureCallback>
 800af70:	e005      	b.n	800af7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 faa8 	bl	800b4c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fab9 	bl	800b4f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	f003 0310 	and.w	r3, r3, #16
 800af8e:	2b10      	cmp	r3, #16
 800af90:	d122      	bne.n	800afd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f003 0310 	and.w	r3, r3, #16
 800af9c:	2b10      	cmp	r3, #16
 800af9e:	d11b      	bne.n	800afd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f06f 0210 	mvn.w	r2, #16
 800afa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2208      	movs	r2, #8
 800afae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d003      	beq.n	800afc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fa8c 	bl	800b4dc <HAL_TIM_IC_CaptureCallback>
 800afc4:	e005      	b.n	800afd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fa7e 	bl	800b4c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fa8f 	bl	800b4f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d10e      	bne.n	800b004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d107      	bne.n	800b004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f06f 0201 	mvn.w	r2, #1
 800affc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7f7 f81a 	bl	8002038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b00e:	2b80      	cmp	r3, #128	; 0x80
 800b010:	d10e      	bne.n	800b030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b01c:	2b80      	cmp	r3, #128	; 0x80
 800b01e:	d107      	bne.n	800b030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f001 f8a0 	bl	800c170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b03e:	d10e      	bne.n	800b05e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04a:	2b80      	cmp	r3, #128	; 0x80
 800b04c:	d107      	bne.n	800b05e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f001 f893 	bl	800c184 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b068:	2b40      	cmp	r3, #64	; 0x40
 800b06a:	d10e      	bne.n	800b08a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b076:	2b40      	cmp	r3, #64	; 0x40
 800b078:	d107      	bne.n	800b08a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fa3d 	bl	800b504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b20      	cmp	r3, #32
 800b096:	d10e      	bne.n	800b0b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	f003 0320 	and.w	r3, r3, #32
 800b0a2:	2b20      	cmp	r3, #32
 800b0a4:	d107      	bne.n	800b0b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f06f 0220 	mvn.w	r2, #32
 800b0ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f001 f853 	bl	800c15c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d101      	bne.n	800b0da <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	e0fd      	b.n	800b2d6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b14      	cmp	r3, #20
 800b0e6:	f200 80f0 	bhi.w	800b2ca <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b0ea:	a201      	add	r2, pc, #4	; (adr r2, 800b0f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f0:	0800b145 	.word	0x0800b145
 800b0f4:	0800b2cb 	.word	0x0800b2cb
 800b0f8:	0800b2cb 	.word	0x0800b2cb
 800b0fc:	0800b2cb 	.word	0x0800b2cb
 800b100:	0800b185 	.word	0x0800b185
 800b104:	0800b2cb 	.word	0x0800b2cb
 800b108:	0800b2cb 	.word	0x0800b2cb
 800b10c:	0800b2cb 	.word	0x0800b2cb
 800b110:	0800b1c7 	.word	0x0800b1c7
 800b114:	0800b2cb 	.word	0x0800b2cb
 800b118:	0800b2cb 	.word	0x0800b2cb
 800b11c:	0800b2cb 	.word	0x0800b2cb
 800b120:	0800b207 	.word	0x0800b207
 800b124:	0800b2cb 	.word	0x0800b2cb
 800b128:	0800b2cb 	.word	0x0800b2cb
 800b12c:	0800b2cb 	.word	0x0800b2cb
 800b130:	0800b249 	.word	0x0800b249
 800b134:	0800b2cb 	.word	0x0800b2cb
 800b138:	0800b2cb 	.word	0x0800b2cb
 800b13c:	0800b2cb 	.word	0x0800b2cb
 800b140:	0800b289 	.word	0x0800b289
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f000 fa8a 	bl	800b664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	699a      	ldr	r2, [r3, #24]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f042 0208 	orr.w	r2, r2, #8
 800b15e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	699a      	ldr	r2, [r3, #24]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f022 0204 	bic.w	r2, r2, #4
 800b16e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6999      	ldr	r1, [r3, #24]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	691a      	ldr	r2, [r3, #16]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	619a      	str	r2, [r3, #24]
      break;
 800b182:	e0a3      	b.n	800b2cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68b9      	ldr	r1, [r7, #8]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 fafa 	bl	800b784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	699a      	ldr	r2, [r3, #24]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b19e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	699a      	ldr	r2, [r3, #24]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	6999      	ldr	r1, [r3, #24]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	021a      	lsls	r2, r3, #8
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	430a      	orrs	r2, r1
 800b1c2:	619a      	str	r2, [r3, #24]
      break;
 800b1c4:	e082      	b.n	800b2cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68b9      	ldr	r1, [r7, #8]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fb63 	bl	800b898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	69da      	ldr	r2, [r3, #28]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f042 0208 	orr.w	r2, r2, #8
 800b1e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	69da      	ldr	r2, [r3, #28]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f022 0204 	bic.w	r2, r2, #4
 800b1f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69d9      	ldr	r1, [r3, #28]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	430a      	orrs	r2, r1
 800b202:	61da      	str	r2, [r3, #28]
      break;
 800b204:	e062      	b.n	800b2cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fbc9 	bl	800b9a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69da      	ldr	r2, [r3, #28]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	69da      	ldr	r2, [r3, #28]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	69d9      	ldr	r1, [r3, #28]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	021a      	lsls	r2, r3, #8
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	61da      	str	r2, [r3, #28]
      break;
 800b246:	e041      	b.n	800b2cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68b9      	ldr	r1, [r7, #8]
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 fc10 	bl	800ba74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0208 	orr.w	r2, r2, #8
 800b262:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0204 	bic.w	r2, r2, #4
 800b272:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	691a      	ldr	r2, [r3, #16]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	430a      	orrs	r2, r1
 800b284:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b286:	e021      	b.n	800b2cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68b9      	ldr	r1, [r7, #8]
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 fc52 	bl	800bb38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	021a      	lsls	r2, r3, #8
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	430a      	orrs	r2, r1
 800b2c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b2c8:	e000      	b.n	800b2cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b2ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop

0800b2e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d101      	bne.n	800b2f8 <HAL_TIM_ConfigClockSource+0x18>
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	e0db      	b.n	800b4b0 <HAL_TIM_ConfigClockSource+0x1d0>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2202      	movs	r2, #2
 800b304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	4b69      	ldr	r3, [pc, #420]	; (800b4b8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800b314:	4013      	ands	r3, r2
 800b316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b31e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a63      	ldr	r2, [pc, #396]	; (800b4bc <HAL_TIM_ConfigClockSource+0x1dc>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	f000 80a9 	beq.w	800b486 <HAL_TIM_ConfigClockSource+0x1a6>
 800b334:	4a61      	ldr	r2, [pc, #388]	; (800b4bc <HAL_TIM_ConfigClockSource+0x1dc>)
 800b336:	4293      	cmp	r3, r2
 800b338:	f200 80ae 	bhi.w	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b33c:	4a60      	ldr	r2, [pc, #384]	; (800b4c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	f000 80a1 	beq.w	800b486 <HAL_TIM_ConfigClockSource+0x1a6>
 800b344:	4a5e      	ldr	r2, [pc, #376]	; (800b4c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b346:	4293      	cmp	r3, r2
 800b348:	f200 80a6 	bhi.w	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b34c:	4a5d      	ldr	r2, [pc, #372]	; (800b4c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	f000 8099 	beq.w	800b486 <HAL_TIM_ConfigClockSource+0x1a6>
 800b354:	4a5b      	ldr	r2, [pc, #364]	; (800b4c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b356:	4293      	cmp	r3, r2
 800b358:	f200 809e 	bhi.w	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b35c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b360:	f000 8091 	beq.w	800b486 <HAL_TIM_ConfigClockSource+0x1a6>
 800b364:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b368:	f200 8096 	bhi.w	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b36c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b370:	f000 8089 	beq.w	800b486 <HAL_TIM_ConfigClockSource+0x1a6>
 800b374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b378:	f200 808e 	bhi.w	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b37c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b380:	d03e      	beq.n	800b400 <HAL_TIM_ConfigClockSource+0x120>
 800b382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b386:	f200 8087 	bhi.w	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b38e:	f000 8085 	beq.w	800b49c <HAL_TIM_ConfigClockSource+0x1bc>
 800b392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b396:	d87f      	bhi.n	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b398:	2b70      	cmp	r3, #112	; 0x70
 800b39a:	d01a      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0xf2>
 800b39c:	2b70      	cmp	r3, #112	; 0x70
 800b39e:	d87b      	bhi.n	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b3a0:	2b60      	cmp	r3, #96	; 0x60
 800b3a2:	d050      	beq.n	800b446 <HAL_TIM_ConfigClockSource+0x166>
 800b3a4:	2b60      	cmp	r3, #96	; 0x60
 800b3a6:	d877      	bhi.n	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b3a8:	2b50      	cmp	r3, #80	; 0x50
 800b3aa:	d03c      	beq.n	800b426 <HAL_TIM_ConfigClockSource+0x146>
 800b3ac:	2b50      	cmp	r3, #80	; 0x50
 800b3ae:	d873      	bhi.n	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b3b0:	2b40      	cmp	r3, #64	; 0x40
 800b3b2:	d058      	beq.n	800b466 <HAL_TIM_ConfigClockSource+0x186>
 800b3b4:	2b40      	cmp	r3, #64	; 0x40
 800b3b6:	d86f      	bhi.n	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b3b8:	2b30      	cmp	r3, #48	; 0x30
 800b3ba:	d064      	beq.n	800b486 <HAL_TIM_ConfigClockSource+0x1a6>
 800b3bc:	2b30      	cmp	r3, #48	; 0x30
 800b3be:	d86b      	bhi.n	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b3c0:	2b20      	cmp	r3, #32
 800b3c2:	d060      	beq.n	800b486 <HAL_TIM_ConfigClockSource+0x1a6>
 800b3c4:	2b20      	cmp	r3, #32
 800b3c6:	d867      	bhi.n	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d05c      	beq.n	800b486 <HAL_TIM_ConfigClockSource+0x1a6>
 800b3cc:	2b10      	cmp	r3, #16
 800b3ce:	d05a      	beq.n	800b486 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b3d0:	e062      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6818      	ldr	r0, [r3, #0]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	6899      	ldr	r1, [r3, #8]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f000 fc8b 	bl	800bcfc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b3f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	609a      	str	r2, [r3, #8]
      break;
 800b3fe:	e04e      	b.n	800b49e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6818      	ldr	r0, [r3, #0]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	6899      	ldr	r1, [r3, #8]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	f000 fc74 	bl	800bcfc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	689a      	ldr	r2, [r3, #8]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b422:	609a      	str	r2, [r3, #8]
      break;
 800b424:	e03b      	b.n	800b49e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	6859      	ldr	r1, [r3, #4]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	461a      	mov	r2, r3
 800b434:	f000 fbe4 	bl	800bc00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2150      	movs	r1, #80	; 0x50
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 fc3e 	bl	800bcc0 <TIM_ITRx_SetConfig>
      break;
 800b444:	e02b      	b.n	800b49e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	6859      	ldr	r1, [r3, #4]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	461a      	mov	r2, r3
 800b454:	f000 fc03 	bl	800bc5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2160      	movs	r1, #96	; 0x60
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 fc2e 	bl	800bcc0 <TIM_ITRx_SetConfig>
      break;
 800b464:	e01b      	b.n	800b49e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6818      	ldr	r0, [r3, #0]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	6859      	ldr	r1, [r3, #4]
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	461a      	mov	r2, r3
 800b474:	f000 fbc4 	bl	800bc00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2140      	movs	r1, #64	; 0x40
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 fc1e 	bl	800bcc0 <TIM_ITRx_SetConfig>
      break;
 800b484:	e00b      	b.n	800b49e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4619      	mov	r1, r3
 800b490:	4610      	mov	r0, r2
 800b492:	f000 fc15 	bl	800bcc0 <TIM_ITRx_SetConfig>
        break;
 800b496:	e002      	b.n	800b49e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b498:	bf00      	nop
 800b49a:	e000      	b.n	800b49e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800b49c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	ffceff88 	.word	0xffceff88
 800b4bc:	00100040 	.word	0x00100040
 800b4c0:	00100030 	.word	0x00100030
 800b4c4:	00100020 	.word	0x00100020

0800b4c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a44      	ldr	r2, [pc, #272]	; (800b63c <TIM_Base_SetConfig+0x124>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d013      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b536:	d00f      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a41      	ldr	r2, [pc, #260]	; (800b640 <TIM_Base_SetConfig+0x128>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00b      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a40      	ldr	r2, [pc, #256]	; (800b644 <TIM_Base_SetConfig+0x12c>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d007      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a3f      	ldr	r2, [pc, #252]	; (800b648 <TIM_Base_SetConfig+0x130>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d003      	beq.n	800b558 <TIM_Base_SetConfig+0x40>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a3e      	ldr	r2, [pc, #248]	; (800b64c <TIM_Base_SetConfig+0x134>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d108      	bne.n	800b56a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b55e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	4313      	orrs	r3, r2
 800b568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a33      	ldr	r2, [pc, #204]	; (800b63c <TIM_Base_SetConfig+0x124>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d027      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b578:	d023      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a30      	ldr	r2, [pc, #192]	; (800b640 <TIM_Base_SetConfig+0x128>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d01f      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a2f      	ldr	r2, [pc, #188]	; (800b644 <TIM_Base_SetConfig+0x12c>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d01b      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a2e      	ldr	r2, [pc, #184]	; (800b648 <TIM_Base_SetConfig+0x130>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d017      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a2d      	ldr	r2, [pc, #180]	; (800b64c <TIM_Base_SetConfig+0x134>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d013      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a2c      	ldr	r2, [pc, #176]	; (800b650 <TIM_Base_SetConfig+0x138>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d00f      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a2b      	ldr	r2, [pc, #172]	; (800b654 <TIM_Base_SetConfig+0x13c>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d00b      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a2a      	ldr	r2, [pc, #168]	; (800b658 <TIM_Base_SetConfig+0x140>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d007      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a29      	ldr	r2, [pc, #164]	; (800b65c <TIM_Base_SetConfig+0x144>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d003      	beq.n	800b5c2 <TIM_Base_SetConfig+0xaa>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a28      	ldr	r2, [pc, #160]	; (800b660 <TIM_Base_SetConfig+0x148>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d108      	bne.n	800b5d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	689a      	ldr	r2, [r3, #8]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a10      	ldr	r2, [pc, #64]	; (800b63c <TIM_Base_SetConfig+0x124>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00f      	beq.n	800b620 <TIM_Base_SetConfig+0x108>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a12      	ldr	r2, [pc, #72]	; (800b64c <TIM_Base_SetConfig+0x134>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d00b      	beq.n	800b620 <TIM_Base_SetConfig+0x108>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a11      	ldr	r2, [pc, #68]	; (800b650 <TIM_Base_SetConfig+0x138>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d007      	beq.n	800b620 <TIM_Base_SetConfig+0x108>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a10      	ldr	r2, [pc, #64]	; (800b654 <TIM_Base_SetConfig+0x13c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d003      	beq.n	800b620 <TIM_Base_SetConfig+0x108>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a0f      	ldr	r2, [pc, #60]	; (800b658 <TIM_Base_SetConfig+0x140>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d103      	bne.n	800b628 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	691a      	ldr	r2, [r3, #16]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	615a      	str	r2, [r3, #20]
}
 800b62e:	bf00      	nop
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	40010000 	.word	0x40010000
 800b640:	40000400 	.word	0x40000400
 800b644:	40000800 	.word	0x40000800
 800b648:	40000c00 	.word	0x40000c00
 800b64c:	40010400 	.word	0x40010400
 800b650:	40014000 	.word	0x40014000
 800b654:	40014400 	.word	0x40014400
 800b658:	40014800 	.word	0x40014800
 800b65c:	4000e000 	.word	0x4000e000
 800b660:	4000e400 	.word	0x4000e400

0800b664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b664:	b480      	push	{r7}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	f023 0201 	bic.w	r2, r3, #1
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	4b37      	ldr	r3, [pc, #220]	; (800b76c <TIM_OC1_SetConfig+0x108>)
 800b690:	4013      	ands	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 0303 	bic.w	r3, r3, #3
 800b69a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f023 0302 	bic.w	r3, r3, #2
 800b6ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a2d      	ldr	r2, [pc, #180]	; (800b770 <TIM_OC1_SetConfig+0x10c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d00f      	beq.n	800b6e0 <TIM_OC1_SetConfig+0x7c>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a2c      	ldr	r2, [pc, #176]	; (800b774 <TIM_OC1_SetConfig+0x110>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d00b      	beq.n	800b6e0 <TIM_OC1_SetConfig+0x7c>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a2b      	ldr	r2, [pc, #172]	; (800b778 <TIM_OC1_SetConfig+0x114>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d007      	beq.n	800b6e0 <TIM_OC1_SetConfig+0x7c>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a2a      	ldr	r2, [pc, #168]	; (800b77c <TIM_OC1_SetConfig+0x118>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d003      	beq.n	800b6e0 <TIM_OC1_SetConfig+0x7c>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a29      	ldr	r2, [pc, #164]	; (800b780 <TIM_OC1_SetConfig+0x11c>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d10c      	bne.n	800b6fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f023 0308 	bic.w	r3, r3, #8
 800b6e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f023 0304 	bic.w	r3, r3, #4
 800b6f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a1c      	ldr	r2, [pc, #112]	; (800b770 <TIM_OC1_SetConfig+0x10c>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d00f      	beq.n	800b722 <TIM_OC1_SetConfig+0xbe>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a1b      	ldr	r2, [pc, #108]	; (800b774 <TIM_OC1_SetConfig+0x110>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d00b      	beq.n	800b722 <TIM_OC1_SetConfig+0xbe>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a1a      	ldr	r2, [pc, #104]	; (800b778 <TIM_OC1_SetConfig+0x114>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d007      	beq.n	800b722 <TIM_OC1_SetConfig+0xbe>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a19      	ldr	r2, [pc, #100]	; (800b77c <TIM_OC1_SetConfig+0x118>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d003      	beq.n	800b722 <TIM_OC1_SetConfig+0xbe>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a18      	ldr	r2, [pc, #96]	; (800b780 <TIM_OC1_SetConfig+0x11c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d111      	bne.n	800b746 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	4313      	orrs	r3, r2
 800b73a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	4313      	orrs	r3, r2
 800b744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	697a      	ldr	r2, [r7, #20]
 800b75e:	621a      	str	r2, [r3, #32]
}
 800b760:	bf00      	nop
 800b762:	371c      	adds	r7, #28
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr
 800b76c:	fffeff8f 	.word	0xfffeff8f
 800b770:	40010000 	.word	0x40010000
 800b774:	40010400 	.word	0x40010400
 800b778:	40014000 	.word	0x40014000
 800b77c:	40014400 	.word	0x40014400
 800b780:	40014800 	.word	0x40014800

0800b784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b784:	b480      	push	{r7}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	f023 0210 	bic.w	r2, r3, #16
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a1b      	ldr	r3, [r3, #32]
 800b79e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	4b34      	ldr	r3, [pc, #208]	; (800b880 <TIM_OC2_SetConfig+0xfc>)
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	021b      	lsls	r3, r3, #8
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f023 0320 	bic.w	r3, r3, #32
 800b7ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	011b      	lsls	r3, r3, #4
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a29      	ldr	r2, [pc, #164]	; (800b884 <TIM_OC2_SetConfig+0x100>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d003      	beq.n	800b7ec <TIM_OC2_SetConfig+0x68>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a28      	ldr	r2, [pc, #160]	; (800b888 <TIM_OC2_SetConfig+0x104>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d10d      	bne.n	800b808 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	011b      	lsls	r3, r3, #4
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a1e      	ldr	r2, [pc, #120]	; (800b884 <TIM_OC2_SetConfig+0x100>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d00f      	beq.n	800b830 <TIM_OC2_SetConfig+0xac>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a1d      	ldr	r2, [pc, #116]	; (800b888 <TIM_OC2_SetConfig+0x104>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d00b      	beq.n	800b830 <TIM_OC2_SetConfig+0xac>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a1c      	ldr	r2, [pc, #112]	; (800b88c <TIM_OC2_SetConfig+0x108>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d007      	beq.n	800b830 <TIM_OC2_SetConfig+0xac>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a1b      	ldr	r2, [pc, #108]	; (800b890 <TIM_OC2_SetConfig+0x10c>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d003      	beq.n	800b830 <TIM_OC2_SetConfig+0xac>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a1a      	ldr	r2, [pc, #104]	; (800b894 <TIM_OC2_SetConfig+0x110>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d113      	bne.n	800b858 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b83e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	4313      	orrs	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	4313      	orrs	r3, r2
 800b856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	621a      	str	r2, [r3, #32]
}
 800b872:	bf00      	nop
 800b874:	371c      	adds	r7, #28
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	feff8fff 	.word	0xfeff8fff
 800b884:	40010000 	.word	0x40010000
 800b888:	40010400 	.word	0x40010400
 800b88c:	40014000 	.word	0x40014000
 800b890:	40014400 	.word	0x40014400
 800b894:	40014800 	.word	0x40014800

0800b898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f023 0303 	bic.w	r3, r3, #3
 800b8ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	021b      	lsls	r3, r3, #8
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a27      	ldr	r2, [pc, #156]	; (800b990 <TIM_OC3_SetConfig+0xf8>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d003      	beq.n	800b8fe <TIM_OC3_SetConfig+0x66>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a26      	ldr	r2, [pc, #152]	; (800b994 <TIM_OC3_SetConfig+0xfc>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d10d      	bne.n	800b91a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	021b      	lsls	r3, r3, #8
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	4313      	orrs	r3, r2
 800b910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a1c      	ldr	r2, [pc, #112]	; (800b990 <TIM_OC3_SetConfig+0xf8>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d00f      	beq.n	800b942 <TIM_OC3_SetConfig+0xaa>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a1b      	ldr	r2, [pc, #108]	; (800b994 <TIM_OC3_SetConfig+0xfc>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d00b      	beq.n	800b942 <TIM_OC3_SetConfig+0xaa>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a1a      	ldr	r2, [pc, #104]	; (800b998 <TIM_OC3_SetConfig+0x100>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d007      	beq.n	800b942 <TIM_OC3_SetConfig+0xaa>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a19      	ldr	r2, [pc, #100]	; (800b99c <TIM_OC3_SetConfig+0x104>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d003      	beq.n	800b942 <TIM_OC3_SetConfig+0xaa>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a18      	ldr	r2, [pc, #96]	; (800b9a0 <TIM_OC3_SetConfig+0x108>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d113      	bne.n	800b96a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	011b      	lsls	r3, r3, #4
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	4313      	orrs	r3, r2
 800b968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	685a      	ldr	r2, [r3, #4]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	621a      	str	r2, [r3, #32]
}
 800b984:	bf00      	nop
 800b986:	371c      	adds	r7, #28
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	40010000 	.word	0x40010000
 800b994:	40010400 	.word	0x40010400
 800b998:	40014000 	.word	0x40014000
 800b99c:	40014400 	.word	0x40014400
 800b9a0:	40014800 	.word	0x40014800

0800b9a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	021b      	lsls	r3, r3, #8
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	031b      	lsls	r3, r3, #12
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a18      	ldr	r2, [pc, #96]	; (800ba60 <TIM_OC4_SetConfig+0xbc>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d00f      	beq.n	800ba24 <TIM_OC4_SetConfig+0x80>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a17      	ldr	r2, [pc, #92]	; (800ba64 <TIM_OC4_SetConfig+0xc0>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d00b      	beq.n	800ba24 <TIM_OC4_SetConfig+0x80>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a16      	ldr	r2, [pc, #88]	; (800ba68 <TIM_OC4_SetConfig+0xc4>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d007      	beq.n	800ba24 <TIM_OC4_SetConfig+0x80>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a15      	ldr	r2, [pc, #84]	; (800ba6c <TIM_OC4_SetConfig+0xc8>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d003      	beq.n	800ba24 <TIM_OC4_SetConfig+0x80>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a14      	ldr	r2, [pc, #80]	; (800ba70 <TIM_OC4_SetConfig+0xcc>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d109      	bne.n	800ba38 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	695b      	ldr	r3, [r3, #20]
 800ba30:	019b      	lsls	r3, r3, #6
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	685a      	ldr	r2, [r3, #4]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	621a      	str	r2, [r3, #32]
}
 800ba52:	bf00      	nop
 800ba54:	371c      	adds	r7, #28
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	40010000 	.word	0x40010000
 800ba64:	40010400 	.word	0x40010400
 800ba68:	40014000 	.word	0x40014000
 800ba6c:	40014400 	.word	0x40014400
 800ba70:	40014800 	.word	0x40014800

0800ba74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b087      	sub	sp, #28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a1b      	ldr	r3, [r3, #32]
 800ba82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	4313      	orrs	r3, r2
 800baac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bab4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	041b      	lsls	r3, r3, #16
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	4313      	orrs	r3, r2
 800bac0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a17      	ldr	r2, [pc, #92]	; (800bb24 <TIM_OC5_SetConfig+0xb0>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d00f      	beq.n	800baea <TIM_OC5_SetConfig+0x76>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a16      	ldr	r2, [pc, #88]	; (800bb28 <TIM_OC5_SetConfig+0xb4>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d00b      	beq.n	800baea <TIM_OC5_SetConfig+0x76>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a15      	ldr	r2, [pc, #84]	; (800bb2c <TIM_OC5_SetConfig+0xb8>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d007      	beq.n	800baea <TIM_OC5_SetConfig+0x76>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a14      	ldr	r2, [pc, #80]	; (800bb30 <TIM_OC5_SetConfig+0xbc>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d003      	beq.n	800baea <TIM_OC5_SetConfig+0x76>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a13      	ldr	r2, [pc, #76]	; (800bb34 <TIM_OC5_SetConfig+0xc0>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d109      	bne.n	800bafe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800baf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	021b      	lsls	r3, r3, #8
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	697a      	ldr	r2, [r7, #20]
 800bb02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	685a      	ldr	r2, [r3, #4]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	693a      	ldr	r2, [r7, #16]
 800bb16:	621a      	str	r2, [r3, #32]
}
 800bb18:	bf00      	nop
 800bb1a:	371c      	adds	r7, #28
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	40010000 	.word	0x40010000
 800bb28:	40010400 	.word	0x40010400
 800bb2c:	40014000 	.word	0x40014000
 800bb30:	40014400 	.word	0x40014400
 800bb34:	40014800 	.word	0x40014800

0800bb38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a1b      	ldr	r3, [r3, #32]
 800bb52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	021b      	lsls	r3, r3, #8
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	051b      	lsls	r3, r3, #20
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a18      	ldr	r2, [pc, #96]	; (800bbec <TIM_OC6_SetConfig+0xb4>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d00f      	beq.n	800bbb0 <TIM_OC6_SetConfig+0x78>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a17      	ldr	r2, [pc, #92]	; (800bbf0 <TIM_OC6_SetConfig+0xb8>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d00b      	beq.n	800bbb0 <TIM_OC6_SetConfig+0x78>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a16      	ldr	r2, [pc, #88]	; (800bbf4 <TIM_OC6_SetConfig+0xbc>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d007      	beq.n	800bbb0 <TIM_OC6_SetConfig+0x78>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4a15      	ldr	r2, [pc, #84]	; (800bbf8 <TIM_OC6_SetConfig+0xc0>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d003      	beq.n	800bbb0 <TIM_OC6_SetConfig+0x78>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4a14      	ldr	r2, [pc, #80]	; (800bbfc <TIM_OC6_SetConfig+0xc4>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d109      	bne.n	800bbc4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bbb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	029b      	lsls	r3, r3, #10
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	685a      	ldr	r2, [r3, #4]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	621a      	str	r2, [r3, #32]
}
 800bbde:	bf00      	nop
 800bbe0:	371c      	adds	r7, #28
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	40010000 	.word	0x40010000
 800bbf0:	40010400 	.word	0x40010400
 800bbf4:	40014000 	.word	0x40014000
 800bbf8:	40014400 	.word	0x40014400
 800bbfc:	40014800 	.word	0x40014800

0800bc00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6a1b      	ldr	r3, [r3, #32]
 800bc10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	f023 0201 	bic.w	r2, r3, #1
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	699b      	ldr	r3, [r3, #24]
 800bc22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f023 030a 	bic.w	r3, r3, #10
 800bc3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	621a      	str	r2, [r3, #32]
}
 800bc52:	bf00      	nop
 800bc54:	371c      	adds	r7, #28
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b087      	sub	sp, #28
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	60f8      	str	r0, [r7, #12]
 800bc66:	60b9      	str	r1, [r7, #8]
 800bc68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	f023 0210 	bic.w	r2, r3, #16
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	699b      	ldr	r3, [r3, #24]
 800bc7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6a1b      	ldr	r3, [r3, #32]
 800bc80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	031b      	lsls	r3, r3, #12
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	011b      	lsls	r3, r3, #4
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	621a      	str	r2, [r3, #32]
}
 800bcb2:	bf00      	nop
 800bcb4:	371c      	adds	r7, #28
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
	...

0800bcc0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <TIM_ITRx_SetConfig+0x38>)
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	f043 0307 	orr.w	r3, r3, #7
 800bce2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	609a      	str	r2, [r3, #8]
}
 800bcea:	bf00      	nop
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	ffcfff8f 	.word	0xffcfff8f

0800bcfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
 800bd08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	021a      	lsls	r2, r3, #8
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	697a      	ldr	r2, [r7, #20]
 800bd2e:	609a      	str	r2, [r3, #8]
}
 800bd30:	bf00      	nop
 800bd32:	371c      	adds	r7, #28
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	f003 031f 	and.w	r3, r3, #31
 800bd4e:	2201      	movs	r2, #1
 800bd50:	fa02 f303 	lsl.w	r3, r2, r3
 800bd54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6a1a      	ldr	r2, [r3, #32]
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	43db      	mvns	r3, r3
 800bd5e:	401a      	ands	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6a1a      	ldr	r2, [r3, #32]
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	f003 031f 	and.w	r3, r3, #31
 800bd6e:	6879      	ldr	r1, [r7, #4]
 800bd70:	fa01 f303 	lsl.w	r3, r1, r3
 800bd74:	431a      	orrs	r2, r3
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	621a      	str	r2, [r3, #32]
}
 800bd7a:	bf00      	nop
 800bd7c:	371c      	adds	r7, #28
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
	...

0800bd88 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d109      	bne.n	800bdac <HAL_TIMEx_PWMN_Start+0x24>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	bf14      	ite	ne
 800bda4:	2301      	movne	r3, #1
 800bda6:	2300      	moveq	r3, #0
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	e022      	b.n	800bdf2 <HAL_TIMEx_PWMN_Start+0x6a>
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	2b04      	cmp	r3, #4
 800bdb0:	d109      	bne.n	800bdc6 <HAL_TIMEx_PWMN_Start+0x3e>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	bf14      	ite	ne
 800bdbe:	2301      	movne	r3, #1
 800bdc0:	2300      	moveq	r3, #0
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	e015      	b.n	800bdf2 <HAL_TIMEx_PWMN_Start+0x6a>
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b08      	cmp	r3, #8
 800bdca:	d109      	bne.n	800bde0 <HAL_TIMEx_PWMN_Start+0x58>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	bf14      	ite	ne
 800bdd8:	2301      	movne	r3, #1
 800bdda:	2300      	moveq	r3, #0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	e008      	b.n	800bdf2 <HAL_TIMEx_PWMN_Start+0x6a>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	bf14      	ite	ne
 800bdec:	2301      	movne	r3, #1
 800bdee:	2300      	moveq	r3, #0
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e07d      	b.n	800bef6 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d104      	bne.n	800be0a <HAL_TIMEx_PWMN_Start+0x82>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2202      	movs	r2, #2
 800be04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be08:	e013      	b.n	800be32 <HAL_TIMEx_PWMN_Start+0xaa>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	d104      	bne.n	800be1a <HAL_TIMEx_PWMN_Start+0x92>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2202      	movs	r2, #2
 800be14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be18:	e00b      	b.n	800be32 <HAL_TIMEx_PWMN_Start+0xaa>
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	2b08      	cmp	r3, #8
 800be1e:	d104      	bne.n	800be2a <HAL_TIMEx_PWMN_Start+0xa2>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be28:	e003      	b.n	800be32 <HAL_TIMEx_PWMN_Start+0xaa>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2202      	movs	r2, #2
 800be2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2204      	movs	r2, #4
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 f9ac 	bl	800c198 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a2a      	ldr	r2, [pc, #168]	; (800bf00 <HAL_TIMEx_PWMN_Start+0x178>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d02c      	beq.n	800beb4 <HAL_TIMEx_PWMN_Start+0x12c>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be62:	d027      	beq.n	800beb4 <HAL_TIMEx_PWMN_Start+0x12c>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a26      	ldr	r2, [pc, #152]	; (800bf04 <HAL_TIMEx_PWMN_Start+0x17c>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d022      	beq.n	800beb4 <HAL_TIMEx_PWMN_Start+0x12c>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a25      	ldr	r2, [pc, #148]	; (800bf08 <HAL_TIMEx_PWMN_Start+0x180>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d01d      	beq.n	800beb4 <HAL_TIMEx_PWMN_Start+0x12c>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a23      	ldr	r2, [pc, #140]	; (800bf0c <HAL_TIMEx_PWMN_Start+0x184>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d018      	beq.n	800beb4 <HAL_TIMEx_PWMN_Start+0x12c>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a22      	ldr	r2, [pc, #136]	; (800bf10 <HAL_TIMEx_PWMN_Start+0x188>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d013      	beq.n	800beb4 <HAL_TIMEx_PWMN_Start+0x12c>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a20      	ldr	r2, [pc, #128]	; (800bf14 <HAL_TIMEx_PWMN_Start+0x18c>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d00e      	beq.n	800beb4 <HAL_TIMEx_PWMN_Start+0x12c>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a1f      	ldr	r2, [pc, #124]	; (800bf18 <HAL_TIMEx_PWMN_Start+0x190>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d009      	beq.n	800beb4 <HAL_TIMEx_PWMN_Start+0x12c>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a1d      	ldr	r2, [pc, #116]	; (800bf1c <HAL_TIMEx_PWMN_Start+0x194>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d004      	beq.n	800beb4 <HAL_TIMEx_PWMN_Start+0x12c>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a1c      	ldr	r2, [pc, #112]	; (800bf20 <HAL_TIMEx_PWMN_Start+0x198>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d115      	bne.n	800bee0 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	4b1a      	ldr	r3, [pc, #104]	; (800bf24 <HAL_TIMEx_PWMN_Start+0x19c>)
 800bebc:	4013      	ands	r3, r2
 800bebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b06      	cmp	r3, #6
 800bec4:	d015      	beq.n	800bef2 <HAL_TIMEx_PWMN_Start+0x16a>
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800becc:	d011      	beq.n	800bef2 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f042 0201 	orr.w	r2, r2, #1
 800bedc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bede:	e008      	b.n	800bef2 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f042 0201 	orr.w	r2, r2, #1
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	e000      	b.n	800bef4 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	40010000 	.word	0x40010000
 800bf04:	40000400 	.word	0x40000400
 800bf08:	40000800 	.word	0x40000800
 800bf0c:	40000c00 	.word	0x40000c00
 800bf10:	40010400 	.word	0x40010400
 800bf14:	40001800 	.word	0x40001800
 800bf18:	40014000 	.word	0x40014000
 800bf1c:	4000e000 	.word	0x4000e000
 800bf20:	4000e400 	.word	0x4000e400
 800bf24:	00010007 	.word	0x00010007

0800bf28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d101      	bne.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	e077      	b.n	800c030 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a35      	ldr	r2, [pc, #212]	; (800c03c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d004      	beq.n	800bf74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a34      	ldr	r2, [pc, #208]	; (800c040 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d108      	bne.n	800bf86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	4313      	orrs	r3, r2
 800bf84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a25      	ldr	r2, [pc, #148]	; (800c03c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d02c      	beq.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfb2:	d027      	beq.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a22      	ldr	r2, [pc, #136]	; (800c044 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d022      	beq.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a21      	ldr	r2, [pc, #132]	; (800c048 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d01d      	beq.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a1f      	ldr	r2, [pc, #124]	; (800c04c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d018      	beq.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a1a      	ldr	r2, [pc, #104]	; (800c040 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d013      	beq.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a1b      	ldr	r2, [pc, #108]	; (800c050 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d00e      	beq.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a1a      	ldr	r2, [pc, #104]	; (800c054 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d009      	beq.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a18      	ldr	r2, [pc, #96]	; (800c058 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d004      	beq.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a17      	ldr	r2, [pc, #92]	; (800c05c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d10c      	bne.n	800c01e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c00a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	4313      	orrs	r3, r2
 800c014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2201      	movs	r2, #1
 800c022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	40010000 	.word	0x40010000
 800c040:	40010400 	.word	0x40010400
 800c044:	40000400 	.word	0x40000400
 800c048:	40000800 	.word	0x40000800
 800c04c:	40000c00 	.word	0x40000c00
 800c050:	40001800 	.word	0x40001800
 800c054:	40014000 	.word	0x40014000
 800c058:	4000e000 	.word	0x4000e000
 800c05c:	4000e400 	.word	0x4000e400

0800c060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c074:	2b01      	cmp	r3, #1
 800c076:	d101      	bne.n	800c07c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c078:	2302      	movs	r3, #2
 800c07a:	e065      	b.n	800c148 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	695b      	ldr	r3, [r3, #20]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	041b      	lsls	r3, r3, #16
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a16      	ldr	r2, [pc, #88]	; (800c154 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d004      	beq.n	800c10a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a14      	ldr	r2, [pc, #80]	; (800c158 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d115      	bne.n	800c136 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	051b      	lsls	r3, r3, #20
 800c116:	4313      	orrs	r3, r2
 800c118:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	4313      	orrs	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	4313      	orrs	r3, r2
 800c134:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	40010000 	.word	0x40010000
 800c158:	40010400 	.word	0x40010400

0800c15c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c198:	b480      	push	{r7}
 800c19a:	b087      	sub	sp, #28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f003 031f 	and.w	r3, r3, #31
 800c1aa:	2204      	movs	r2, #4
 800c1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6a1a      	ldr	r2, [r3, #32]
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	43db      	mvns	r3, r3
 800c1ba:	401a      	ands	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6a1a      	ldr	r2, [r3, #32]
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	f003 031f 	and.w	r3, r3, #31
 800c1ca:	6879      	ldr	r1, [r7, #4]
 800c1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	621a      	str	r2, [r3, #32]
}
 800c1d6:	bf00      	nop
 800c1d8:	371c      	adds	r7, #28
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e042      	b.n	800c27a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7f6 fbf8 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2224      	movs	r2, #36	; 0x24
 800c210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f022 0201 	bic.w	r2, r2, #1
 800c222:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f82d 	bl	800c284 <UART_SetConfig>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d101      	bne.n	800c234 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e022      	b.n	800c27a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fe7f 	bl	800cf40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	685a      	ldr	r2, [r3, #4]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c250:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689a      	ldr	r2, [r3, #8]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c260:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f042 0201 	orr.w	r2, r2, #1
 800c270:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 ff06 	bl	800d084 <UART_CheckIdleState>
 800c278:	4603      	mov	r3, r0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c284:	b5b0      	push	{r4, r5, r7, lr}
 800c286:	b08e      	sub	sp, #56	; 0x38
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	689a      	ldr	r2, [r3, #8]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	431a      	orrs	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	695b      	ldr	r3, [r3, #20]
 800c2a0:	431a      	orrs	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	69db      	ldr	r3, [r3, #28]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	4bbf      	ldr	r3, [pc, #764]	; (800c5b0 <UART_SetConfig+0x32c>)
 800c2b2:	4013      	ands	r3, r2
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	6812      	ldr	r2, [r2, #0]
 800c2b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c2ba:	430b      	orrs	r3, r1
 800c2bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68da      	ldr	r2, [r3, #12]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	430a      	orrs	r2, r1
 800c2d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4ab5      	ldr	r2, [pc, #724]	; (800c5b4 <UART_SetConfig+0x330>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d004      	beq.n	800c2ee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a1b      	ldr	r3, [r3, #32]
 800c2e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	4bb0      	ldr	r3, [pc, #704]	; (800c5b8 <UART_SetConfig+0x334>)
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	6812      	ldr	r2, [r2, #0]
 800c2fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c2fe:	430b      	orrs	r3, r1
 800c300:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c308:	f023 010f 	bic.w	r1, r3, #15
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	430a      	orrs	r2, r1
 800c316:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4aa7      	ldr	r2, [pc, #668]	; (800c5bc <UART_SetConfig+0x338>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d176      	bne.n	800c410 <UART_SetConfig+0x18c>
 800c322:	4ba7      	ldr	r3, [pc, #668]	; (800c5c0 <UART_SetConfig+0x33c>)
 800c324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c32a:	2b28      	cmp	r3, #40	; 0x28
 800c32c:	d86c      	bhi.n	800c408 <UART_SetConfig+0x184>
 800c32e:	a201      	add	r2, pc, #4	; (adr r2, 800c334 <UART_SetConfig+0xb0>)
 800c330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c334:	0800c3d9 	.word	0x0800c3d9
 800c338:	0800c409 	.word	0x0800c409
 800c33c:	0800c409 	.word	0x0800c409
 800c340:	0800c409 	.word	0x0800c409
 800c344:	0800c409 	.word	0x0800c409
 800c348:	0800c409 	.word	0x0800c409
 800c34c:	0800c409 	.word	0x0800c409
 800c350:	0800c409 	.word	0x0800c409
 800c354:	0800c3e1 	.word	0x0800c3e1
 800c358:	0800c409 	.word	0x0800c409
 800c35c:	0800c409 	.word	0x0800c409
 800c360:	0800c409 	.word	0x0800c409
 800c364:	0800c409 	.word	0x0800c409
 800c368:	0800c409 	.word	0x0800c409
 800c36c:	0800c409 	.word	0x0800c409
 800c370:	0800c409 	.word	0x0800c409
 800c374:	0800c3e9 	.word	0x0800c3e9
 800c378:	0800c409 	.word	0x0800c409
 800c37c:	0800c409 	.word	0x0800c409
 800c380:	0800c409 	.word	0x0800c409
 800c384:	0800c409 	.word	0x0800c409
 800c388:	0800c409 	.word	0x0800c409
 800c38c:	0800c409 	.word	0x0800c409
 800c390:	0800c409 	.word	0x0800c409
 800c394:	0800c3f1 	.word	0x0800c3f1
 800c398:	0800c409 	.word	0x0800c409
 800c39c:	0800c409 	.word	0x0800c409
 800c3a0:	0800c409 	.word	0x0800c409
 800c3a4:	0800c409 	.word	0x0800c409
 800c3a8:	0800c409 	.word	0x0800c409
 800c3ac:	0800c409 	.word	0x0800c409
 800c3b0:	0800c409 	.word	0x0800c409
 800c3b4:	0800c3f9 	.word	0x0800c3f9
 800c3b8:	0800c409 	.word	0x0800c409
 800c3bc:	0800c409 	.word	0x0800c409
 800c3c0:	0800c409 	.word	0x0800c409
 800c3c4:	0800c409 	.word	0x0800c409
 800c3c8:	0800c409 	.word	0x0800c409
 800c3cc:	0800c409 	.word	0x0800c409
 800c3d0:	0800c409 	.word	0x0800c409
 800c3d4:	0800c401 	.word	0x0800c401
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3de:	e326      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c3e0:	2304      	movs	r3, #4
 800c3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3e6:	e322      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c3e8:	2308      	movs	r3, #8
 800c3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ee:	e31e      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c3f0:	2310      	movs	r3, #16
 800c3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3f6:	e31a      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c3f8:	2320      	movs	r3, #32
 800c3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fe:	e316      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c400:	2340      	movs	r3, #64	; 0x40
 800c402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c406:	e312      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c408:	2380      	movs	r3, #128	; 0x80
 800c40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40e:	e30e      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a6b      	ldr	r2, [pc, #428]	; (800c5c4 <UART_SetConfig+0x340>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d130      	bne.n	800c47c <UART_SetConfig+0x1f8>
 800c41a:	4b69      	ldr	r3, [pc, #420]	; (800c5c0 <UART_SetConfig+0x33c>)
 800c41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41e:	f003 0307 	and.w	r3, r3, #7
 800c422:	2b05      	cmp	r3, #5
 800c424:	d826      	bhi.n	800c474 <UART_SetConfig+0x1f0>
 800c426:	a201      	add	r2, pc, #4	; (adr r2, 800c42c <UART_SetConfig+0x1a8>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c445 	.word	0x0800c445
 800c430:	0800c44d 	.word	0x0800c44d
 800c434:	0800c455 	.word	0x0800c455
 800c438:	0800c45d 	.word	0x0800c45d
 800c43c:	0800c465 	.word	0x0800c465
 800c440:	0800c46d 	.word	0x0800c46d
 800c444:	2300      	movs	r3, #0
 800c446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c44a:	e2f0      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c44c:	2304      	movs	r3, #4
 800c44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c452:	e2ec      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c454:	2308      	movs	r3, #8
 800c456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45a:	e2e8      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c45c:	2310      	movs	r3, #16
 800c45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c462:	e2e4      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c464:	2320      	movs	r3, #32
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46a:	e2e0      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c46c:	2340      	movs	r3, #64	; 0x40
 800c46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c472:	e2dc      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c474:	2380      	movs	r3, #128	; 0x80
 800c476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c47a:	e2d8      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a51      	ldr	r2, [pc, #324]	; (800c5c8 <UART_SetConfig+0x344>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d130      	bne.n	800c4e8 <UART_SetConfig+0x264>
 800c486:	4b4e      	ldr	r3, [pc, #312]	; (800c5c0 <UART_SetConfig+0x33c>)
 800c488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c48a:	f003 0307 	and.w	r3, r3, #7
 800c48e:	2b05      	cmp	r3, #5
 800c490:	d826      	bhi.n	800c4e0 <UART_SetConfig+0x25c>
 800c492:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <UART_SetConfig+0x214>)
 800c494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c498:	0800c4b1 	.word	0x0800c4b1
 800c49c:	0800c4b9 	.word	0x0800c4b9
 800c4a0:	0800c4c1 	.word	0x0800c4c1
 800c4a4:	0800c4c9 	.word	0x0800c4c9
 800c4a8:	0800c4d1 	.word	0x0800c4d1
 800c4ac:	0800c4d9 	.word	0x0800c4d9
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4b6:	e2ba      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c4b8:	2304      	movs	r3, #4
 800c4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4be:	e2b6      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c4c0:	2308      	movs	r3, #8
 800c4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4c6:	e2b2      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c4c8:	2310      	movs	r3, #16
 800c4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ce:	e2ae      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c4d0:	2320      	movs	r3, #32
 800c4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4d6:	e2aa      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c4d8:	2340      	movs	r3, #64	; 0x40
 800c4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4de:	e2a6      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c4e0:	2380      	movs	r3, #128	; 0x80
 800c4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4e6:	e2a2      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a37      	ldr	r2, [pc, #220]	; (800c5cc <UART_SetConfig+0x348>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d130      	bne.n	800c554 <UART_SetConfig+0x2d0>
 800c4f2:	4b33      	ldr	r3, [pc, #204]	; (800c5c0 <UART_SetConfig+0x33c>)
 800c4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4f6:	f003 0307 	and.w	r3, r3, #7
 800c4fa:	2b05      	cmp	r3, #5
 800c4fc:	d826      	bhi.n	800c54c <UART_SetConfig+0x2c8>
 800c4fe:	a201      	add	r2, pc, #4	; (adr r2, 800c504 <UART_SetConfig+0x280>)
 800c500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c504:	0800c51d 	.word	0x0800c51d
 800c508:	0800c525 	.word	0x0800c525
 800c50c:	0800c52d 	.word	0x0800c52d
 800c510:	0800c535 	.word	0x0800c535
 800c514:	0800c53d 	.word	0x0800c53d
 800c518:	0800c545 	.word	0x0800c545
 800c51c:	2300      	movs	r3, #0
 800c51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c522:	e284      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c524:	2304      	movs	r3, #4
 800c526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c52a:	e280      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c52c:	2308      	movs	r3, #8
 800c52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c532:	e27c      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c534:	2310      	movs	r3, #16
 800c536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c53a:	e278      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c53c:	2320      	movs	r3, #32
 800c53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c542:	e274      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c544:	2340      	movs	r3, #64	; 0x40
 800c546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c54a:	e270      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c54c:	2380      	movs	r3, #128	; 0x80
 800c54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c552:	e26c      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a1d      	ldr	r2, [pc, #116]	; (800c5d0 <UART_SetConfig+0x34c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d142      	bne.n	800c5e4 <UART_SetConfig+0x360>
 800c55e:	4b18      	ldr	r3, [pc, #96]	; (800c5c0 <UART_SetConfig+0x33c>)
 800c560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c562:	f003 0307 	and.w	r3, r3, #7
 800c566:	2b05      	cmp	r3, #5
 800c568:	d838      	bhi.n	800c5dc <UART_SetConfig+0x358>
 800c56a:	a201      	add	r2, pc, #4	; (adr r2, 800c570 <UART_SetConfig+0x2ec>)
 800c56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c570:	0800c589 	.word	0x0800c589
 800c574:	0800c591 	.word	0x0800c591
 800c578:	0800c599 	.word	0x0800c599
 800c57c:	0800c5a1 	.word	0x0800c5a1
 800c580:	0800c5a9 	.word	0x0800c5a9
 800c584:	0800c5d5 	.word	0x0800c5d5
 800c588:	2300      	movs	r3, #0
 800c58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c58e:	e24e      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c590:	2304      	movs	r3, #4
 800c592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c596:	e24a      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c598:	2308      	movs	r3, #8
 800c59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c59e:	e246      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c5a0:	2310      	movs	r3, #16
 800c5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5a6:	e242      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c5a8:	2320      	movs	r3, #32
 800c5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ae:	e23e      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c5b0:	cfff69f3 	.word	0xcfff69f3
 800c5b4:	58000c00 	.word	0x58000c00
 800c5b8:	11fff4ff 	.word	0x11fff4ff
 800c5bc:	40011000 	.word	0x40011000
 800c5c0:	58024400 	.word	0x58024400
 800c5c4:	40004400 	.word	0x40004400
 800c5c8:	40004800 	.word	0x40004800
 800c5cc:	40004c00 	.word	0x40004c00
 800c5d0:	40005000 	.word	0x40005000
 800c5d4:	2340      	movs	r3, #64	; 0x40
 800c5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5da:	e228      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c5dc:	2380      	movs	r3, #128	; 0x80
 800c5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5e2:	e224      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4ab1      	ldr	r2, [pc, #708]	; (800c8b0 <UART_SetConfig+0x62c>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d176      	bne.n	800c6dc <UART_SetConfig+0x458>
 800c5ee:	4bb1      	ldr	r3, [pc, #708]	; (800c8b4 <UART_SetConfig+0x630>)
 800c5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5f6:	2b28      	cmp	r3, #40	; 0x28
 800c5f8:	d86c      	bhi.n	800c6d4 <UART_SetConfig+0x450>
 800c5fa:	a201      	add	r2, pc, #4	; (adr r2, 800c600 <UART_SetConfig+0x37c>)
 800c5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c600:	0800c6a5 	.word	0x0800c6a5
 800c604:	0800c6d5 	.word	0x0800c6d5
 800c608:	0800c6d5 	.word	0x0800c6d5
 800c60c:	0800c6d5 	.word	0x0800c6d5
 800c610:	0800c6d5 	.word	0x0800c6d5
 800c614:	0800c6d5 	.word	0x0800c6d5
 800c618:	0800c6d5 	.word	0x0800c6d5
 800c61c:	0800c6d5 	.word	0x0800c6d5
 800c620:	0800c6ad 	.word	0x0800c6ad
 800c624:	0800c6d5 	.word	0x0800c6d5
 800c628:	0800c6d5 	.word	0x0800c6d5
 800c62c:	0800c6d5 	.word	0x0800c6d5
 800c630:	0800c6d5 	.word	0x0800c6d5
 800c634:	0800c6d5 	.word	0x0800c6d5
 800c638:	0800c6d5 	.word	0x0800c6d5
 800c63c:	0800c6d5 	.word	0x0800c6d5
 800c640:	0800c6b5 	.word	0x0800c6b5
 800c644:	0800c6d5 	.word	0x0800c6d5
 800c648:	0800c6d5 	.word	0x0800c6d5
 800c64c:	0800c6d5 	.word	0x0800c6d5
 800c650:	0800c6d5 	.word	0x0800c6d5
 800c654:	0800c6d5 	.word	0x0800c6d5
 800c658:	0800c6d5 	.word	0x0800c6d5
 800c65c:	0800c6d5 	.word	0x0800c6d5
 800c660:	0800c6bd 	.word	0x0800c6bd
 800c664:	0800c6d5 	.word	0x0800c6d5
 800c668:	0800c6d5 	.word	0x0800c6d5
 800c66c:	0800c6d5 	.word	0x0800c6d5
 800c670:	0800c6d5 	.word	0x0800c6d5
 800c674:	0800c6d5 	.word	0x0800c6d5
 800c678:	0800c6d5 	.word	0x0800c6d5
 800c67c:	0800c6d5 	.word	0x0800c6d5
 800c680:	0800c6c5 	.word	0x0800c6c5
 800c684:	0800c6d5 	.word	0x0800c6d5
 800c688:	0800c6d5 	.word	0x0800c6d5
 800c68c:	0800c6d5 	.word	0x0800c6d5
 800c690:	0800c6d5 	.word	0x0800c6d5
 800c694:	0800c6d5 	.word	0x0800c6d5
 800c698:	0800c6d5 	.word	0x0800c6d5
 800c69c:	0800c6d5 	.word	0x0800c6d5
 800c6a0:	0800c6cd 	.word	0x0800c6cd
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6aa:	e1c0      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c6ac:	2304      	movs	r3, #4
 800c6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6b2:	e1bc      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c6b4:	2308      	movs	r3, #8
 800c6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ba:	e1b8      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c6bc:	2310      	movs	r3, #16
 800c6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6c2:	e1b4      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c6c4:	2320      	movs	r3, #32
 800c6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ca:	e1b0      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c6cc:	2340      	movs	r3, #64	; 0x40
 800c6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6d2:	e1ac      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c6d4:	2380      	movs	r3, #128	; 0x80
 800c6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6da:	e1a8      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a75      	ldr	r2, [pc, #468]	; (800c8b8 <UART_SetConfig+0x634>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d130      	bne.n	800c748 <UART_SetConfig+0x4c4>
 800c6e6:	4b73      	ldr	r3, [pc, #460]	; (800c8b4 <UART_SetConfig+0x630>)
 800c6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ea:	f003 0307 	and.w	r3, r3, #7
 800c6ee:	2b05      	cmp	r3, #5
 800c6f0:	d826      	bhi.n	800c740 <UART_SetConfig+0x4bc>
 800c6f2:	a201      	add	r2, pc, #4	; (adr r2, 800c6f8 <UART_SetConfig+0x474>)
 800c6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f8:	0800c711 	.word	0x0800c711
 800c6fc:	0800c719 	.word	0x0800c719
 800c700:	0800c721 	.word	0x0800c721
 800c704:	0800c729 	.word	0x0800c729
 800c708:	0800c731 	.word	0x0800c731
 800c70c:	0800c739 	.word	0x0800c739
 800c710:	2300      	movs	r3, #0
 800c712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c716:	e18a      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c718:	2304      	movs	r3, #4
 800c71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c71e:	e186      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c720:	2308      	movs	r3, #8
 800c722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c726:	e182      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c728:	2310      	movs	r3, #16
 800c72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c72e:	e17e      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c730:	2320      	movs	r3, #32
 800c732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c736:	e17a      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c738:	2340      	movs	r3, #64	; 0x40
 800c73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c73e:	e176      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c740:	2380      	movs	r3, #128	; 0x80
 800c742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c746:	e172      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a5b      	ldr	r2, [pc, #364]	; (800c8bc <UART_SetConfig+0x638>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d130      	bne.n	800c7b4 <UART_SetConfig+0x530>
 800c752:	4b58      	ldr	r3, [pc, #352]	; (800c8b4 <UART_SetConfig+0x630>)
 800c754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c756:	f003 0307 	and.w	r3, r3, #7
 800c75a:	2b05      	cmp	r3, #5
 800c75c:	d826      	bhi.n	800c7ac <UART_SetConfig+0x528>
 800c75e:	a201      	add	r2, pc, #4	; (adr r2, 800c764 <UART_SetConfig+0x4e0>)
 800c760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c764:	0800c77d 	.word	0x0800c77d
 800c768:	0800c785 	.word	0x0800c785
 800c76c:	0800c78d 	.word	0x0800c78d
 800c770:	0800c795 	.word	0x0800c795
 800c774:	0800c79d 	.word	0x0800c79d
 800c778:	0800c7a5 	.word	0x0800c7a5
 800c77c:	2300      	movs	r3, #0
 800c77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c782:	e154      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c784:	2304      	movs	r3, #4
 800c786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c78a:	e150      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c78c:	2308      	movs	r3, #8
 800c78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c792:	e14c      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c794:	2310      	movs	r3, #16
 800c796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c79a:	e148      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c79c:	2320      	movs	r3, #32
 800c79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7a2:	e144      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c7a4:	2340      	movs	r3, #64	; 0x40
 800c7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7aa:	e140      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c7ac:	2380      	movs	r3, #128	; 0x80
 800c7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7b2:	e13c      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a41      	ldr	r2, [pc, #260]	; (800c8c0 <UART_SetConfig+0x63c>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	f040 8082 	bne.w	800c8c4 <UART_SetConfig+0x640>
 800c7c0:	4b3c      	ldr	r3, [pc, #240]	; (800c8b4 <UART_SetConfig+0x630>)
 800c7c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7c8:	2b28      	cmp	r3, #40	; 0x28
 800c7ca:	d86d      	bhi.n	800c8a8 <UART_SetConfig+0x624>
 800c7cc:	a201      	add	r2, pc, #4	; (adr r2, 800c7d4 <UART_SetConfig+0x550>)
 800c7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d2:	bf00      	nop
 800c7d4:	0800c879 	.word	0x0800c879
 800c7d8:	0800c8a9 	.word	0x0800c8a9
 800c7dc:	0800c8a9 	.word	0x0800c8a9
 800c7e0:	0800c8a9 	.word	0x0800c8a9
 800c7e4:	0800c8a9 	.word	0x0800c8a9
 800c7e8:	0800c8a9 	.word	0x0800c8a9
 800c7ec:	0800c8a9 	.word	0x0800c8a9
 800c7f0:	0800c8a9 	.word	0x0800c8a9
 800c7f4:	0800c881 	.word	0x0800c881
 800c7f8:	0800c8a9 	.word	0x0800c8a9
 800c7fc:	0800c8a9 	.word	0x0800c8a9
 800c800:	0800c8a9 	.word	0x0800c8a9
 800c804:	0800c8a9 	.word	0x0800c8a9
 800c808:	0800c8a9 	.word	0x0800c8a9
 800c80c:	0800c8a9 	.word	0x0800c8a9
 800c810:	0800c8a9 	.word	0x0800c8a9
 800c814:	0800c889 	.word	0x0800c889
 800c818:	0800c8a9 	.word	0x0800c8a9
 800c81c:	0800c8a9 	.word	0x0800c8a9
 800c820:	0800c8a9 	.word	0x0800c8a9
 800c824:	0800c8a9 	.word	0x0800c8a9
 800c828:	0800c8a9 	.word	0x0800c8a9
 800c82c:	0800c8a9 	.word	0x0800c8a9
 800c830:	0800c8a9 	.word	0x0800c8a9
 800c834:	0800c891 	.word	0x0800c891
 800c838:	0800c8a9 	.word	0x0800c8a9
 800c83c:	0800c8a9 	.word	0x0800c8a9
 800c840:	0800c8a9 	.word	0x0800c8a9
 800c844:	0800c8a9 	.word	0x0800c8a9
 800c848:	0800c8a9 	.word	0x0800c8a9
 800c84c:	0800c8a9 	.word	0x0800c8a9
 800c850:	0800c8a9 	.word	0x0800c8a9
 800c854:	0800c899 	.word	0x0800c899
 800c858:	0800c8a9 	.word	0x0800c8a9
 800c85c:	0800c8a9 	.word	0x0800c8a9
 800c860:	0800c8a9 	.word	0x0800c8a9
 800c864:	0800c8a9 	.word	0x0800c8a9
 800c868:	0800c8a9 	.word	0x0800c8a9
 800c86c:	0800c8a9 	.word	0x0800c8a9
 800c870:	0800c8a9 	.word	0x0800c8a9
 800c874:	0800c8a1 	.word	0x0800c8a1
 800c878:	2301      	movs	r3, #1
 800c87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c87e:	e0d6      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c880:	2304      	movs	r3, #4
 800c882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c886:	e0d2      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c888:	2308      	movs	r3, #8
 800c88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c88e:	e0ce      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c890:	2310      	movs	r3, #16
 800c892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c896:	e0ca      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c898:	2320      	movs	r3, #32
 800c89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c89e:	e0c6      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c8a0:	2340      	movs	r3, #64	; 0x40
 800c8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a6:	e0c2      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c8a8:	2380      	movs	r3, #128	; 0x80
 800c8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ae:	e0be      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c8b0:	40011400 	.word	0x40011400
 800c8b4:	58024400 	.word	0x58024400
 800c8b8:	40007800 	.word	0x40007800
 800c8bc:	40007c00 	.word	0x40007c00
 800c8c0:	40011800 	.word	0x40011800
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4aad      	ldr	r2, [pc, #692]	; (800cb80 <UART_SetConfig+0x8fc>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d176      	bne.n	800c9bc <UART_SetConfig+0x738>
 800c8ce:	4bad      	ldr	r3, [pc, #692]	; (800cb84 <UART_SetConfig+0x900>)
 800c8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8d6:	2b28      	cmp	r3, #40	; 0x28
 800c8d8:	d86c      	bhi.n	800c9b4 <UART_SetConfig+0x730>
 800c8da:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <UART_SetConfig+0x65c>)
 800c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e0:	0800c985 	.word	0x0800c985
 800c8e4:	0800c9b5 	.word	0x0800c9b5
 800c8e8:	0800c9b5 	.word	0x0800c9b5
 800c8ec:	0800c9b5 	.word	0x0800c9b5
 800c8f0:	0800c9b5 	.word	0x0800c9b5
 800c8f4:	0800c9b5 	.word	0x0800c9b5
 800c8f8:	0800c9b5 	.word	0x0800c9b5
 800c8fc:	0800c9b5 	.word	0x0800c9b5
 800c900:	0800c98d 	.word	0x0800c98d
 800c904:	0800c9b5 	.word	0x0800c9b5
 800c908:	0800c9b5 	.word	0x0800c9b5
 800c90c:	0800c9b5 	.word	0x0800c9b5
 800c910:	0800c9b5 	.word	0x0800c9b5
 800c914:	0800c9b5 	.word	0x0800c9b5
 800c918:	0800c9b5 	.word	0x0800c9b5
 800c91c:	0800c9b5 	.word	0x0800c9b5
 800c920:	0800c995 	.word	0x0800c995
 800c924:	0800c9b5 	.word	0x0800c9b5
 800c928:	0800c9b5 	.word	0x0800c9b5
 800c92c:	0800c9b5 	.word	0x0800c9b5
 800c930:	0800c9b5 	.word	0x0800c9b5
 800c934:	0800c9b5 	.word	0x0800c9b5
 800c938:	0800c9b5 	.word	0x0800c9b5
 800c93c:	0800c9b5 	.word	0x0800c9b5
 800c940:	0800c99d 	.word	0x0800c99d
 800c944:	0800c9b5 	.word	0x0800c9b5
 800c948:	0800c9b5 	.word	0x0800c9b5
 800c94c:	0800c9b5 	.word	0x0800c9b5
 800c950:	0800c9b5 	.word	0x0800c9b5
 800c954:	0800c9b5 	.word	0x0800c9b5
 800c958:	0800c9b5 	.word	0x0800c9b5
 800c95c:	0800c9b5 	.word	0x0800c9b5
 800c960:	0800c9a5 	.word	0x0800c9a5
 800c964:	0800c9b5 	.word	0x0800c9b5
 800c968:	0800c9b5 	.word	0x0800c9b5
 800c96c:	0800c9b5 	.word	0x0800c9b5
 800c970:	0800c9b5 	.word	0x0800c9b5
 800c974:	0800c9b5 	.word	0x0800c9b5
 800c978:	0800c9b5 	.word	0x0800c9b5
 800c97c:	0800c9b5 	.word	0x0800c9b5
 800c980:	0800c9ad 	.word	0x0800c9ad
 800c984:	2301      	movs	r3, #1
 800c986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c98a:	e050      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c98c:	2304      	movs	r3, #4
 800c98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c992:	e04c      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c994:	2308      	movs	r3, #8
 800c996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99a:	e048      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c99c:	2310      	movs	r3, #16
 800c99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a2:	e044      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c9a4:	2320      	movs	r3, #32
 800c9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9aa:	e040      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c9ac:	2340      	movs	r3, #64	; 0x40
 800c9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b2:	e03c      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c9b4:	2380      	movs	r3, #128	; 0x80
 800c9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ba:	e038      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a71      	ldr	r2, [pc, #452]	; (800cb88 <UART_SetConfig+0x904>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d130      	bne.n	800ca28 <UART_SetConfig+0x7a4>
 800c9c6:	4b6f      	ldr	r3, [pc, #444]	; (800cb84 <UART_SetConfig+0x900>)
 800c9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	2b05      	cmp	r3, #5
 800c9d0:	d826      	bhi.n	800ca20 <UART_SetConfig+0x79c>
 800c9d2:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <UART_SetConfig+0x754>)
 800c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d8:	0800c9f1 	.word	0x0800c9f1
 800c9dc:	0800c9f9 	.word	0x0800c9f9
 800c9e0:	0800ca01 	.word	0x0800ca01
 800c9e4:	0800ca09 	.word	0x0800ca09
 800c9e8:	0800ca11 	.word	0x0800ca11
 800c9ec:	0800ca19 	.word	0x0800ca19
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9f6:	e01a      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9fe:	e016      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800ca00:	2308      	movs	r3, #8
 800ca02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca06:	e012      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800ca08:	2310      	movs	r3, #16
 800ca0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0e:	e00e      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800ca10:	2320      	movs	r3, #32
 800ca12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca16:	e00a      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800ca18:	2340      	movs	r3, #64	; 0x40
 800ca1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1e:	e006      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800ca20:	2380      	movs	r3, #128	; 0x80
 800ca22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca26:	e002      	b.n	800ca2e <UART_SetConfig+0x7aa>
 800ca28:	2380      	movs	r3, #128	; 0x80
 800ca2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a55      	ldr	r2, [pc, #340]	; (800cb88 <UART_SetConfig+0x904>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	f040 80f0 	bne.w	800cc1a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca3e:	2b20      	cmp	r3, #32
 800ca40:	dc46      	bgt.n	800cad0 <UART_SetConfig+0x84c>
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	db75      	blt.n	800cb32 <UART_SetConfig+0x8ae>
 800ca46:	3b02      	subs	r3, #2
 800ca48:	2b1e      	cmp	r3, #30
 800ca4a:	d872      	bhi.n	800cb32 <UART_SetConfig+0x8ae>
 800ca4c:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <UART_SetConfig+0x7d0>)
 800ca4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca52:	bf00      	nop
 800ca54:	0800cad7 	.word	0x0800cad7
 800ca58:	0800cb33 	.word	0x0800cb33
 800ca5c:	0800cadf 	.word	0x0800cadf
 800ca60:	0800cb33 	.word	0x0800cb33
 800ca64:	0800cb33 	.word	0x0800cb33
 800ca68:	0800cb33 	.word	0x0800cb33
 800ca6c:	0800caef 	.word	0x0800caef
 800ca70:	0800cb33 	.word	0x0800cb33
 800ca74:	0800cb33 	.word	0x0800cb33
 800ca78:	0800cb33 	.word	0x0800cb33
 800ca7c:	0800cb33 	.word	0x0800cb33
 800ca80:	0800cb33 	.word	0x0800cb33
 800ca84:	0800cb33 	.word	0x0800cb33
 800ca88:	0800cb33 	.word	0x0800cb33
 800ca8c:	0800caff 	.word	0x0800caff
 800ca90:	0800cb33 	.word	0x0800cb33
 800ca94:	0800cb33 	.word	0x0800cb33
 800ca98:	0800cb33 	.word	0x0800cb33
 800ca9c:	0800cb33 	.word	0x0800cb33
 800caa0:	0800cb33 	.word	0x0800cb33
 800caa4:	0800cb33 	.word	0x0800cb33
 800caa8:	0800cb33 	.word	0x0800cb33
 800caac:	0800cb33 	.word	0x0800cb33
 800cab0:	0800cb33 	.word	0x0800cb33
 800cab4:	0800cb33 	.word	0x0800cb33
 800cab8:	0800cb33 	.word	0x0800cb33
 800cabc:	0800cb33 	.word	0x0800cb33
 800cac0:	0800cb33 	.word	0x0800cb33
 800cac4:	0800cb33 	.word	0x0800cb33
 800cac8:	0800cb33 	.word	0x0800cb33
 800cacc:	0800cb25 	.word	0x0800cb25
 800cad0:	2b40      	cmp	r3, #64	; 0x40
 800cad2:	d02a      	beq.n	800cb2a <UART_SetConfig+0x8a6>
 800cad4:	e02d      	b.n	800cb32 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cad6:	f7fc f857 	bl	8008b88 <HAL_RCCEx_GetD3PCLK1Freq>
 800cada:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cadc:	e02f      	b.n	800cb3e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cade:	f107 0314 	add.w	r3, r7, #20
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fc f866 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800caec:	e027      	b.n	800cb3e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caee:	f107 0308 	add.w	r3, r7, #8
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fc f9b2 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cafc:	e01f      	b.n	800cb3e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cafe:	4b21      	ldr	r3, [pc, #132]	; (800cb84 <UART_SetConfig+0x900>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 0320 	and.w	r3, r3, #32
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d009      	beq.n	800cb1e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb0a:	4b1e      	ldr	r3, [pc, #120]	; (800cb84 <UART_SetConfig+0x900>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	08db      	lsrs	r3, r3, #3
 800cb10:	f003 0303 	and.w	r3, r3, #3
 800cb14:	4a1d      	ldr	r2, [pc, #116]	; (800cb8c <UART_SetConfig+0x908>)
 800cb16:	fa22 f303 	lsr.w	r3, r2, r3
 800cb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb1c:	e00f      	b.n	800cb3e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800cb1e:	4b1b      	ldr	r3, [pc, #108]	; (800cb8c <UART_SetConfig+0x908>)
 800cb20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb22:	e00c      	b.n	800cb3e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb24:	4b1a      	ldr	r3, [pc, #104]	; (800cb90 <UART_SetConfig+0x90c>)
 800cb26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb28:	e009      	b.n	800cb3e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb30:	e005      	b.n	800cb3e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800cb32:	2300      	movs	r3, #0
 800cb34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cb3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 81e6 	beq.w	800cf12 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4a:	4a12      	ldr	r2, [pc, #72]	; (800cb94 <UART_SetConfig+0x910>)
 800cb4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb50:	461a      	mov	r2, r3
 800cb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb54:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb58:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685a      	ldr	r2, [r3, #4]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	005b      	lsls	r3, r3, #1
 800cb62:	4413      	add	r3, r2
 800cb64:	6a3a      	ldr	r2, [r7, #32]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d305      	bcc.n	800cb76 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb70:	6a3a      	ldr	r2, [r7, #32]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d910      	bls.n	800cb98 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cb7c:	e1c9      	b.n	800cf12 <UART_SetConfig+0xc8e>
 800cb7e:	bf00      	nop
 800cb80:	40011c00 	.word	0x40011c00
 800cb84:	58024400 	.word	0x58024400
 800cb88:	58000c00 	.word	0x58000c00
 800cb8c:	03d09000 	.word	0x03d09000
 800cb90:	003d0900 	.word	0x003d0900
 800cb94:	0800d610 	.word	0x0800d610
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f04f 0100 	mov.w	r1, #0
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba4:	4ac1      	ldr	r2, [pc, #772]	; (800ceac <UART_SetConfig+0xc28>)
 800cba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	f04f 0300 	mov.w	r3, #0
 800cbb0:	f7f3 fbae 	bl	8000310 <__aeabi_uldivmod>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4610      	mov	r0, r2
 800cbba:	4619      	mov	r1, r3
 800cbbc:	f04f 0200 	mov.w	r2, #0
 800cbc0:	f04f 0300 	mov.w	r3, #0
 800cbc4:	020b      	lsls	r3, r1, #8
 800cbc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cbca:	0202      	lsls	r2, r0, #8
 800cbcc:	6879      	ldr	r1, [r7, #4]
 800cbce:	6849      	ldr	r1, [r1, #4]
 800cbd0:	0849      	lsrs	r1, r1, #1
 800cbd2:	4608      	mov	r0, r1
 800cbd4:	f04f 0100 	mov.w	r1, #0
 800cbd8:	1814      	adds	r4, r2, r0
 800cbda:	eb43 0501 	adc.w	r5, r3, r1
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	f04f 0300 	mov.w	r3, #0
 800cbe8:	4620      	mov	r0, r4
 800cbea:	4629      	mov	r1, r5
 800cbec:	f7f3 fb90 	bl	8000310 <__aeabi_uldivmod>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbfe:	d308      	bcc.n	800cc12 <UART_SetConfig+0x98e>
 800cc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc06:	d204      	bcs.n	800cc12 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc0e:	60da      	str	r2, [r3, #12]
 800cc10:	e17f      	b.n	800cf12 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cc18:	e17b      	b.n	800cf12 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc22:	f040 80be 	bne.w	800cda2 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800cc26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc2a:	2b20      	cmp	r3, #32
 800cc2c:	dc48      	bgt.n	800ccc0 <UART_SetConfig+0xa3c>
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	db7b      	blt.n	800cd2a <UART_SetConfig+0xaa6>
 800cc32:	2b20      	cmp	r3, #32
 800cc34:	d879      	bhi.n	800cd2a <UART_SetConfig+0xaa6>
 800cc36:	a201      	add	r2, pc, #4	; (adr r2, 800cc3c <UART_SetConfig+0x9b8>)
 800cc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3c:	0800ccc7 	.word	0x0800ccc7
 800cc40:	0800cccf 	.word	0x0800cccf
 800cc44:	0800cd2b 	.word	0x0800cd2b
 800cc48:	0800cd2b 	.word	0x0800cd2b
 800cc4c:	0800ccd7 	.word	0x0800ccd7
 800cc50:	0800cd2b 	.word	0x0800cd2b
 800cc54:	0800cd2b 	.word	0x0800cd2b
 800cc58:	0800cd2b 	.word	0x0800cd2b
 800cc5c:	0800cce7 	.word	0x0800cce7
 800cc60:	0800cd2b 	.word	0x0800cd2b
 800cc64:	0800cd2b 	.word	0x0800cd2b
 800cc68:	0800cd2b 	.word	0x0800cd2b
 800cc6c:	0800cd2b 	.word	0x0800cd2b
 800cc70:	0800cd2b 	.word	0x0800cd2b
 800cc74:	0800cd2b 	.word	0x0800cd2b
 800cc78:	0800cd2b 	.word	0x0800cd2b
 800cc7c:	0800ccf7 	.word	0x0800ccf7
 800cc80:	0800cd2b 	.word	0x0800cd2b
 800cc84:	0800cd2b 	.word	0x0800cd2b
 800cc88:	0800cd2b 	.word	0x0800cd2b
 800cc8c:	0800cd2b 	.word	0x0800cd2b
 800cc90:	0800cd2b 	.word	0x0800cd2b
 800cc94:	0800cd2b 	.word	0x0800cd2b
 800cc98:	0800cd2b 	.word	0x0800cd2b
 800cc9c:	0800cd2b 	.word	0x0800cd2b
 800cca0:	0800cd2b 	.word	0x0800cd2b
 800cca4:	0800cd2b 	.word	0x0800cd2b
 800cca8:	0800cd2b 	.word	0x0800cd2b
 800ccac:	0800cd2b 	.word	0x0800cd2b
 800ccb0:	0800cd2b 	.word	0x0800cd2b
 800ccb4:	0800cd2b 	.word	0x0800cd2b
 800ccb8:	0800cd2b 	.word	0x0800cd2b
 800ccbc:	0800cd1d 	.word	0x0800cd1d
 800ccc0:	2b40      	cmp	r3, #64	; 0x40
 800ccc2:	d02e      	beq.n	800cd22 <UART_SetConfig+0xa9e>
 800ccc4:	e031      	b.n	800cd2a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccc6:	f7fa fbd3 	bl	8007470 <HAL_RCC_GetPCLK1Freq>
 800ccca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cccc:	e033      	b.n	800cd36 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccce:	f7fa fbe5 	bl	800749c <HAL_RCC_GetPCLK2Freq>
 800ccd2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ccd4:	e02f      	b.n	800cd36 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccd6:	f107 0314 	add.w	r3, r7, #20
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fb ff6a 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cce4:	e027      	b.n	800cd36 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cce6:	f107 0308 	add.w	r3, r7, #8
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fc f8b6 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccf4:	e01f      	b.n	800cd36 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccf6:	4b6e      	ldr	r3, [pc, #440]	; (800ceb0 <UART_SetConfig+0xc2c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 0320 	and.w	r3, r3, #32
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d009      	beq.n	800cd16 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd02:	4b6b      	ldr	r3, [pc, #428]	; (800ceb0 <UART_SetConfig+0xc2c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	08db      	lsrs	r3, r3, #3
 800cd08:	f003 0303 	and.w	r3, r3, #3
 800cd0c:	4a69      	ldr	r2, [pc, #420]	; (800ceb4 <UART_SetConfig+0xc30>)
 800cd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd14:	e00f      	b.n	800cd36 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800cd16:	4b67      	ldr	r3, [pc, #412]	; (800ceb4 <UART_SetConfig+0xc30>)
 800cd18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd1a:	e00c      	b.n	800cd36 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd1c:	4b66      	ldr	r3, [pc, #408]	; (800ceb8 <UART_SetConfig+0xc34>)
 800cd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd20:	e009      	b.n	800cd36 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd28:	e005      	b.n	800cd36 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cd34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f000 80ea 	beq.w	800cf12 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd42:	4a5a      	ldr	r2, [pc, #360]	; (800ceac <UART_SetConfig+0xc28>)
 800cd44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd48:	461a      	mov	r2, r3
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd50:	005a      	lsls	r2, r3, #1
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	085b      	lsrs	r3, r3, #1
 800cd58:	441a      	add	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd68:	2b0f      	cmp	r3, #15
 800cd6a:	d916      	bls.n	800cd9a <UART_SetConfig+0xb16>
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd72:	d212      	bcs.n	800cd9a <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	f023 030f 	bic.w	r3, r3, #15
 800cd7c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd80:	085b      	lsrs	r3, r3, #1
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	f003 0307 	and.w	r3, r3, #7
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd96:	60da      	str	r2, [r3, #12]
 800cd98:	e0bb      	b.n	800cf12 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cda0:	e0b7      	b.n	800cf12 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cda2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cda6:	2b20      	cmp	r3, #32
 800cda8:	dc4a      	bgt.n	800ce40 <UART_SetConfig+0xbbc>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f2c0 8086 	blt.w	800cebc <UART_SetConfig+0xc38>
 800cdb0:	2b20      	cmp	r3, #32
 800cdb2:	f200 8083 	bhi.w	800cebc <UART_SetConfig+0xc38>
 800cdb6:	a201      	add	r2, pc, #4	; (adr r2, 800cdbc <UART_SetConfig+0xb38>)
 800cdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdbc:	0800ce47 	.word	0x0800ce47
 800cdc0:	0800ce4f 	.word	0x0800ce4f
 800cdc4:	0800cebd 	.word	0x0800cebd
 800cdc8:	0800cebd 	.word	0x0800cebd
 800cdcc:	0800ce57 	.word	0x0800ce57
 800cdd0:	0800cebd 	.word	0x0800cebd
 800cdd4:	0800cebd 	.word	0x0800cebd
 800cdd8:	0800cebd 	.word	0x0800cebd
 800cddc:	0800ce67 	.word	0x0800ce67
 800cde0:	0800cebd 	.word	0x0800cebd
 800cde4:	0800cebd 	.word	0x0800cebd
 800cde8:	0800cebd 	.word	0x0800cebd
 800cdec:	0800cebd 	.word	0x0800cebd
 800cdf0:	0800cebd 	.word	0x0800cebd
 800cdf4:	0800cebd 	.word	0x0800cebd
 800cdf8:	0800cebd 	.word	0x0800cebd
 800cdfc:	0800ce77 	.word	0x0800ce77
 800ce00:	0800cebd 	.word	0x0800cebd
 800ce04:	0800cebd 	.word	0x0800cebd
 800ce08:	0800cebd 	.word	0x0800cebd
 800ce0c:	0800cebd 	.word	0x0800cebd
 800ce10:	0800cebd 	.word	0x0800cebd
 800ce14:	0800cebd 	.word	0x0800cebd
 800ce18:	0800cebd 	.word	0x0800cebd
 800ce1c:	0800cebd 	.word	0x0800cebd
 800ce20:	0800cebd 	.word	0x0800cebd
 800ce24:	0800cebd 	.word	0x0800cebd
 800ce28:	0800cebd 	.word	0x0800cebd
 800ce2c:	0800cebd 	.word	0x0800cebd
 800ce30:	0800cebd 	.word	0x0800cebd
 800ce34:	0800cebd 	.word	0x0800cebd
 800ce38:	0800cebd 	.word	0x0800cebd
 800ce3c:	0800ce9d 	.word	0x0800ce9d
 800ce40:	2b40      	cmp	r3, #64	; 0x40
 800ce42:	d02e      	beq.n	800cea2 <UART_SetConfig+0xc1e>
 800ce44:	e03a      	b.n	800cebc <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce46:	f7fa fb13 	bl	8007470 <HAL_RCC_GetPCLK1Freq>
 800ce4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce4c:	e03c      	b.n	800cec8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce4e:	f7fa fb25 	bl	800749c <HAL_RCC_GetPCLK2Freq>
 800ce52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce54:	e038      	b.n	800cec8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce56:	f107 0314 	add.w	r3, r7, #20
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fb feaa 	bl	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce64:	e030      	b.n	800cec8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce66:	f107 0308 	add.w	r3, r7, #8
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fb fff6 	bl	8008e5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce74:	e028      	b.n	800cec8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce76:	4b0e      	ldr	r3, [pc, #56]	; (800ceb0 <UART_SetConfig+0xc2c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f003 0320 	and.w	r3, r3, #32
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d009      	beq.n	800ce96 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce82:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <UART_SetConfig+0xc2c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	08db      	lsrs	r3, r3, #3
 800ce88:	f003 0303 	and.w	r3, r3, #3
 800ce8c:	4a09      	ldr	r2, [pc, #36]	; (800ceb4 <UART_SetConfig+0xc30>)
 800ce8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce94:	e018      	b.n	800cec8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ce96:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <UART_SetConfig+0xc30>)
 800ce98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce9a:	e015      	b.n	800cec8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce9c:	4b06      	ldr	r3, [pc, #24]	; (800ceb8 <UART_SetConfig+0xc34>)
 800ce9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cea0:	e012      	b.n	800cec8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cea8:	e00e      	b.n	800cec8 <UART_SetConfig+0xc44>
 800ceaa:	bf00      	nop
 800ceac:	0800d610 	.word	0x0800d610
 800ceb0:	58024400 	.word	0x58024400
 800ceb4:	03d09000 	.word	0x03d09000
 800ceb8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800cebc:	2300      	movs	r3, #0
 800cebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cec6:	bf00      	nop
    }

    if (pclk != 0U)
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d021      	beq.n	800cf12 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced2:	4a1a      	ldr	r2, [pc, #104]	; (800cf3c <UART_SetConfig+0xcb8>)
 800ced4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ced8:	461a      	mov	r2, r3
 800ceda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cedc:	fbb3 f2f2 	udiv	r2, r3, r2
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	085b      	lsrs	r3, r3, #1
 800cee6:	441a      	add	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	fbb2 f3f3 	udiv	r3, r2, r3
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef6:	2b0f      	cmp	r3, #15
 800cef8:	d908      	bls.n	800cf0c <UART_SetConfig+0xc88>
 800cefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf00:	d204      	bcs.n	800cf0c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf08:	60da      	str	r2, [r3, #12]
 800cf0a:	e002      	b.n	800cf12 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2201      	movs	r2, #1
 800cf16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cf2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3738      	adds	r7, #56	; 0x38
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bdb0      	pop	{r4, r5, r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	0800d610 	.word	0x0800d610

0800cf40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4c:	f003 0301 	and.w	r3, r3, #1
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00a      	beq.n	800cf6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	430a      	orrs	r2, r1
 800cf68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6e:	f003 0302 	and.w	r3, r3, #2
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00a      	beq.n	800cf8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	430a      	orrs	r2, r1
 800cf8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf90:	f003 0304 	and.w	r3, r3, #4
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00a      	beq.n	800cfae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	430a      	orrs	r2, r1
 800cfac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb2:	f003 0308 	and.w	r3, r3, #8
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d00a      	beq.n	800cfd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	430a      	orrs	r2, r1
 800cfce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd4:	f003 0310 	and.w	r3, r3, #16
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00a      	beq.n	800cff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	430a      	orrs	r2, r1
 800cff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff6:	f003 0320 	and.w	r3, r3, #32
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00a      	beq.n	800d014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	430a      	orrs	r2, r1
 800d012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d01a      	beq.n	800d056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	430a      	orrs	r2, r1
 800d034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d03a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d03e:	d10a      	bne.n	800d056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	430a      	orrs	r2, r1
 800d054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00a      	beq.n	800d078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	430a      	orrs	r2, r1
 800d076:	605a      	str	r2, [r3, #4]
  }
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af02      	add	r7, sp, #8
 800d08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d094:	f7f5 ff2e 	bl	8002ef4 <HAL_GetTick>
 800d098:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f003 0308 	and.w	r3, r3, #8
 800d0a4:	2b08      	cmp	r3, #8
 800d0a6:	d10e      	bne.n	800d0c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f82f 	bl	800d11a <UART_WaitOnFlagUntilTimeout>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d001      	beq.n	800d0c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0c2:	2303      	movs	r3, #3
 800d0c4:	e025      	b.n	800d112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f003 0304 	and.w	r3, r3, #4
 800d0d0:	2b04      	cmp	r3, #4
 800d0d2:	d10e      	bne.n	800d0f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 f819 	bl	800d11a <UART_WaitOnFlagUntilTimeout>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	e00f      	b.n	800d112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2220      	movs	r2, #32
 800d0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2220      	movs	r2, #32
 800d0fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b084      	sub	sp, #16
 800d11e:	af00      	add	r7, sp, #0
 800d120:	60f8      	str	r0, [r7, #12]
 800d122:	60b9      	str	r1, [r7, #8]
 800d124:	603b      	str	r3, [r7, #0]
 800d126:	4613      	mov	r3, r2
 800d128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d12a:	e062      	b.n	800d1f2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d132:	d05e      	beq.n	800d1f2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d134:	f7f5 fede 	bl	8002ef4 <HAL_GetTick>
 800d138:	4602      	mov	r2, r0
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	69ba      	ldr	r2, [r7, #24]
 800d140:	429a      	cmp	r2, r3
 800d142:	d302      	bcc.n	800d14a <UART_WaitOnFlagUntilTimeout+0x30>
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d11d      	bne.n	800d186 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d158:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	689a      	ldr	r2, [r3, #8]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f022 0201 	bic.w	r2, r2, #1
 800d168:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2220      	movs	r2, #32
 800d16e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2220      	movs	r2, #32
 800d176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d182:	2303      	movs	r3, #3
 800d184:	e045      	b.n	800d212 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f003 0304 	and.w	r3, r3, #4
 800d190:	2b00      	cmp	r3, #0
 800d192:	d02e      	beq.n	800d1f2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	69db      	ldr	r3, [r3, #28]
 800d19a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d19e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1a2:	d126      	bne.n	800d1f2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d1bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	689a      	ldr	r2, [r3, #8]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f022 0201 	bic.w	r2, r2, #1
 800d1cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2220      	movs	r2, #32
 800d1d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2220      	movs	r2, #32
 800d1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2220      	movs	r2, #32
 800d1e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	e00f      	b.n	800d212 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	69da      	ldr	r2, [r3, #28]
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	bf0c      	ite	eq
 800d202:	2301      	moveq	r3, #1
 800d204:	2300      	movne	r3, #0
 800d206:	b2db      	uxtb	r3, r3
 800d208:	461a      	mov	r2, r3
 800d20a:	79fb      	ldrb	r3, [r7, #7]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d08d      	beq.n	800d12c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
	...

0800d21c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b086      	sub	sp, #24
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d101      	bne.n	800d234 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800d230:	2301      	movs	r3, #1
 800d232:	e056      	b.n	800d2e2 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d106      	bne.n	800d24c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f7f5 fbd8 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2224      	movs	r2, #36	; 0x24
 800d250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f022 0201 	bic.w	r2, r2, #1
 800d262:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7ff f80d 	bl	800c284 <UART_SetConfig>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d101      	bne.n	800d274 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800d270:	2301      	movs	r3, #1
 800d272:	e036      	b.n	800d2e2 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f7ff fe5f 	bl	800cf40 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	689a      	ldr	r2, [r3, #8]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d290:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	430a      	orrs	r2, r1
 800d2a4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	055b      	lsls	r3, r3, #21
 800d2aa:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	041b      	lsls	r3, r3, #16
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	4b0b      	ldr	r3, [pc, #44]	; (800d2ec <HAL_RS485Ex_Init+0xd0>)
 800d2be:	4013      	ands	r3, r2
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	6812      	ldr	r2, [r2, #0]
 800d2c4:	6979      	ldr	r1, [r7, #20]
 800d2c6:	430b      	orrs	r3, r1
 800d2c8:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f042 0201 	orr.w	r2, r2, #1
 800d2d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7ff fed2 	bl	800d084 <UART_CheckIdleState>
 800d2e0:	4603      	mov	r3, r0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	fc00ffff 	.word	0xfc00ffff

0800d2f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d101      	bne.n	800d306 <HAL_UARTEx_DisableFifoMode+0x16>
 800d302:	2302      	movs	r3, #2
 800d304:	e027      	b.n	800d356 <HAL_UARTEx_DisableFifoMode+0x66>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2224      	movs	r2, #36	; 0x24
 800d312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f022 0201 	bic.w	r2, r2, #1
 800d32c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d334:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2220      	movs	r2, #32
 800d348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr

0800d362 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b084      	sub	sp, #16
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
 800d36a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d372:	2b01      	cmp	r3, #1
 800d374:	d101      	bne.n	800d37a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d376:	2302      	movs	r3, #2
 800d378:	e02d      	b.n	800d3d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2201      	movs	r2, #1
 800d37e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2224      	movs	r2, #36	; 0x24
 800d386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f022 0201 	bic.w	r2, r2, #1
 800d3a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	430a      	orrs	r2, r1
 800d3b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f850 	bl	800d45c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2220      	movs	r2, #32
 800d3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d101      	bne.n	800d3f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	e02d      	b.n	800d452 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2224      	movs	r2, #36	; 0x24
 800d402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f022 0201 	bic.w	r2, r2, #1
 800d41c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	430a      	orrs	r2, r1
 800d430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f812 	bl	800d45c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2220      	movs	r2, #32
 800d444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d108      	bne.n	800d47e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d47c:	e031      	b.n	800d4e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d47e:	2310      	movs	r3, #16
 800d480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d482:	2310      	movs	r3, #16
 800d484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	0e5b      	lsrs	r3, r3, #25
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	f003 0307 	and.w	r3, r3, #7
 800d494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	0f5b      	lsrs	r3, r3, #29
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	f003 0307 	and.w	r3, r3, #7
 800d4a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d4a6:	7bbb      	ldrb	r3, [r7, #14]
 800d4a8:	7b3a      	ldrb	r2, [r7, #12]
 800d4aa:	4911      	ldr	r1, [pc, #68]	; (800d4f0 <UARTEx_SetNbDataToProcess+0x94>)
 800d4ac:	5c8a      	ldrb	r2, [r1, r2]
 800d4ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d4b2:	7b3a      	ldrb	r2, [r7, #12]
 800d4b4:	490f      	ldr	r1, [pc, #60]	; (800d4f4 <UARTEx_SetNbDataToProcess+0x98>)
 800d4b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d4b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4bc:	b29a      	uxth	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
 800d4c6:	7b7a      	ldrb	r2, [r7, #13]
 800d4c8:	4909      	ldr	r1, [pc, #36]	; (800d4f0 <UARTEx_SetNbDataToProcess+0x94>)
 800d4ca:	5c8a      	ldrb	r2, [r1, r2]
 800d4cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d4d0:	7b7a      	ldrb	r2, [r7, #13]
 800d4d2:	4908      	ldr	r1, [pc, #32]	; (800d4f4 <UARTEx_SetNbDataToProcess+0x98>)
 800d4d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d4d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d4e2:	bf00      	nop
 800d4e4:	3714      	adds	r7, #20
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	0800d628 	.word	0x0800d628
 800d4f4:	0800d630 	.word	0x0800d630

0800d4f8 <__libc_init_array>:
 800d4f8:	b570      	push	{r4, r5, r6, lr}
 800d4fa:	4d0d      	ldr	r5, [pc, #52]	; (800d530 <__libc_init_array+0x38>)
 800d4fc:	4c0d      	ldr	r4, [pc, #52]	; (800d534 <__libc_init_array+0x3c>)
 800d4fe:	1b64      	subs	r4, r4, r5
 800d500:	10a4      	asrs	r4, r4, #2
 800d502:	2600      	movs	r6, #0
 800d504:	42a6      	cmp	r6, r4
 800d506:	d109      	bne.n	800d51c <__libc_init_array+0x24>
 800d508:	4d0b      	ldr	r5, [pc, #44]	; (800d538 <__libc_init_array+0x40>)
 800d50a:	4c0c      	ldr	r4, [pc, #48]	; (800d53c <__libc_init_array+0x44>)
 800d50c:	f000 f82e 	bl	800d56c <_init>
 800d510:	1b64      	subs	r4, r4, r5
 800d512:	10a4      	asrs	r4, r4, #2
 800d514:	2600      	movs	r6, #0
 800d516:	42a6      	cmp	r6, r4
 800d518:	d105      	bne.n	800d526 <__libc_init_array+0x2e>
 800d51a:	bd70      	pop	{r4, r5, r6, pc}
 800d51c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d520:	4798      	blx	r3
 800d522:	3601      	adds	r6, #1
 800d524:	e7ee      	b.n	800d504 <__libc_init_array+0xc>
 800d526:	f855 3b04 	ldr.w	r3, [r5], #4
 800d52a:	4798      	blx	r3
 800d52c:	3601      	adds	r6, #1
 800d52e:	e7f2      	b.n	800d516 <__libc_init_array+0x1e>
 800d530:	0800d640 	.word	0x0800d640
 800d534:	0800d640 	.word	0x0800d640
 800d538:	0800d640 	.word	0x0800d640
 800d53c:	0800d644 	.word	0x0800d644

0800d540 <memcpy>:
 800d540:	440a      	add	r2, r1
 800d542:	4291      	cmp	r1, r2
 800d544:	f100 33ff 	add.w	r3, r0, #4294967295
 800d548:	d100      	bne.n	800d54c <memcpy+0xc>
 800d54a:	4770      	bx	lr
 800d54c:	b510      	push	{r4, lr}
 800d54e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d552:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d556:	4291      	cmp	r1, r2
 800d558:	d1f9      	bne.n	800d54e <memcpy+0xe>
 800d55a:	bd10      	pop	{r4, pc}

0800d55c <memset>:
 800d55c:	4402      	add	r2, r0
 800d55e:	4603      	mov	r3, r0
 800d560:	4293      	cmp	r3, r2
 800d562:	d100      	bne.n	800d566 <memset+0xa>
 800d564:	4770      	bx	lr
 800d566:	f803 1b01 	strb.w	r1, [r3], #1
 800d56a:	e7f9      	b.n	800d560 <memset+0x4>

0800d56c <_init>:
 800d56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56e:	bf00      	nop
 800d570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d572:	bc08      	pop	{r3}
 800d574:	469e      	mov	lr, r3
 800d576:	4770      	bx	lr

0800d578 <_fini>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	bf00      	nop
 800d57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d57e:	bc08      	pop	{r3}
 800d580:	469e      	mov	lr, r3
 800d582:	4770      	bx	lr
